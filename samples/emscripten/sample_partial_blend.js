
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'media', true, true);
Module['FS_createDataFile']('/media', 'crossarms.ozz', [1, 111, 122, 122, 45, 97, 110, 105, 109, 97, 116, 105, 111, 110, 0, 2, 0, 0, 0, 154, 153, 9, 65, 67, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 60, 174, 171, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 141, 44, 192, 133, 31, 0, 0, 0, 0, 0, 3, 0, 19, 47, 33, 133, 23, 128, 0, 0, 0, 0, 4, 0, 215, 172, 152, 158, 240, 45, 0, 0, 0, 0, 5, 0, 58, 172, 82, 153, 102, 174, 0, 0, 0, 0, 6, 0, 75, 46, 40, 134, 47, 128, 0, 0, 0, 0, 7, 0, 142, 47, 112, 134, 61, 128, 0, 0, 0, 0, 8, 0, 174, 47, 13, 165, 37, 0, 0, 0, 0, 0, 9, 0, 113, 45, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 11, 171, 2, 24, 10, 41, 0, 0, 0, 0, 11, 0, 254, 170, 168, 28, 22, 169, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 58, 49, 0, 0, 3, 0, 0, 0, 0, 0, 14, 0, 19, 52, 0, 128, 0, 0, 0, 0, 0, 0, 15, 0, 104, 51, 0, 0, 1, 128, 0, 0, 0, 0, 16, 0, 15, 38, 62, 34, 255, 166, 0, 0, 0, 0, 17, 0, 236, 46, 63, 22, 81, 169, 0, 0, 0, 0, 18, 0, 50, 47, 209, 149, 170, 164, 0, 0, 0, 0, 19, 0, 46, 47, 225, 139, 109, 30, 0, 0, 0, 0, 20, 0, 199, 46, 110, 22, 105, 39, 0, 0, 0, 0, 21, 0, 109, 42, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 216, 39, 0, 128, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 88, 41, 0, 128, 0, 0, 0, 0, 0, 0, 25, 0, 111, 38, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 215, 41, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 140, 38, 1, 128, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 1, 41, 0, 128, 0, 0, 0, 0, 0, 0, 31, 0, 177, 38, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 117, 38, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 27, 37, 1, 0, 1, 128, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 58, 49, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 19, 52, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 104, 51, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 73, 38, 190, 34, 156, 38, 0, 0, 0, 0, 40, 0, 5, 47, 253, 24, 80, 41, 0, 0, 0, 0, 41, 0, 75, 47, 134, 143, 169, 36, 0, 0, 0, 0, 42, 0, 77, 47, 118, 148, 34, 160, 0, 0, 0, 0, 43, 0, 209, 46, 33, 25, 225, 167, 0, 0, 0, 0, 44, 0, 141, 42, 1, 128, 0, 0, 0, 0, 0, 0, 45, 0, 216, 39, 1, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 75, 41, 1, 0, 1, 0, 0, 0, 0, 0, 48, 0, 85, 38, 1, 128, 1, 128, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 215, 41, 0, 0, 0, 128, 0, 0, 0, 0, 51, 0, 206, 38, 1, 128, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 221, 40, 1, 128, 0, 128, 0, 0, 0, 0, 54, 0, 180, 38, 1, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 82, 38, 0, 128, 0, 0, 0, 0, 0, 0, 57, 0, 58, 37, 1, 128, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 139, 55, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 85, 55, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 141, 47, 191, 48, 1, 128, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 139, 55, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 85, 55, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 141, 47, 191, 48, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 29, 34, 34, 63, 0, 0, 206, 164, 35, 60, 38, 166, 154, 153, 9, 65, 1, 0, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 2, 0, 141, 44, 192, 133, 29, 0, 154, 153, 9, 65, 3, 0, 19, 47, 33, 133, 22, 128, 65, 68, 132, 63, 4, 0, 220, 172, 186, 16, 240, 45, 205, 204, 140, 63, 5, 0, 58, 172, 155, 27, 102, 174, 154, 153, 9, 65, 6, 0, 75, 46, 40, 134, 45, 128, 154, 153, 9, 65, 7, 0, 142, 47, 112, 134, 58, 128, 154, 153, 9, 65, 8, 0, 174, 47, 13, 165, 37, 0, 154, 153, 9, 65, 9, 0, 113, 45, 1, 0, 0, 0, 154, 153, 9, 65, 10, 0, 11, 171, 2, 24, 10, 41, 154, 153, 9, 65, 11, 0, 254, 170, 168, 28, 22, 169, 154, 153, 9, 65, 12, 0, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 13, 0, 58, 49, 0, 128, 3, 0, 154, 153, 9, 65, 14, 0, 19, 52, 0, 0, 0, 0, 154, 153, 9, 65, 15, 0, 104, 51, 1, 0, 1, 128, 154, 153, 9, 65, 16, 0, 15, 38, 62, 34, 255, 166, 154, 153, 9, 65, 17, 0, 236, 46, 63, 22, 81, 169, 154, 153, 9, 65, 18, 0, 50, 47, 209, 149, 170, 164, 154, 153, 9, 65, 19, 0, 46, 47, 225, 139, 109, 30, 154, 153, 9, 65, 20, 0, 199, 46, 110, 22, 105, 39, 154, 153, 9, 65, 21, 0, 109, 42, 1, 0, 0, 0, 154, 153, 9, 65, 22, 0, 216, 39, 0, 0, 0, 0, 154, 153, 9, 65, 23, 0, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 24, 0, 88, 41, 1, 128, 0, 0, 154, 153, 9, 65, 25, 0, 111, 38, 0, 0, 0, 128, 154, 153, 9, 65, 26, 0, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 27, 0, 215, 41, 0, 0, 0, 0, 154, 153, 9, 65, 28, 0, 140, 38, 1, 128, 0, 0, 154, 153, 9, 65, 29, 0, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 30, 0, 1, 41, 0, 0, 0, 128, 154, 153, 9, 65, 31, 0, 177, 38, 0, 0, 0, 0, 154, 153, 9, 65, 32, 0, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 33, 0, 117, 38, 0, 0, 0, 0, 154, 153, 9, 65, 34, 0, 27, 37, 0, 0, 0, 0, 154, 153, 9, 65, 35, 0, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 36, 0, 58, 49, 0, 128, 3, 0, 154, 153, 9, 65, 37, 0, 19, 52, 0, 0, 0, 0, 154, 153, 9, 65, 38, 0, 104, 51, 0, 0, 0, 0, 154, 153, 9, 65, 39, 0, 73, 38, 190, 34, 156, 38, 154, 153, 9, 65, 40, 0, 5, 47, 253, 24, 80, 41, 154, 153, 9, 65, 41, 0, 75, 47, 134, 143, 169, 36, 154, 153, 9, 65, 42, 0, 77, 47, 117, 148, 34, 160, 154, 153, 9, 65, 43, 0, 209, 46, 33, 25, 225, 167, 154, 153, 9, 65, 44, 0, 141, 42, 1, 0, 0, 128, 154, 153, 9, 65, 45, 0, 216, 39, 0, 0, 0, 0, 154, 153, 9, 65, 46, 0, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 47, 0, 75, 41, 0, 0, 1, 0, 154, 153, 9, 65, 48, 0, 85, 38, 0, 0, 0, 128, 154, 153, 9, 65, 49, 0, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 50, 0, 215, 41, 0, 128, 0, 0, 154, 153, 9, 65, 51, 0, 206, 38, 0, 0, 0, 0, 154, 153, 9, 65, 52, 0, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 53, 0, 221, 40, 1, 128, 0, 128, 154, 153, 9, 65, 54, 0, 180, 38, 0, 0, 0, 128, 154, 153, 9, 65, 55, 0, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 56, 0, 82, 38, 0, 128, 0, 0, 154, 153, 9, 65, 57, 0, 58, 37, 0, 0, 0, 0, 154, 153, 9, 65, 58, 0, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 59, 0, 139, 55, 0, 0, 0, 0, 154, 153, 9, 65, 60, 0, 85, 55, 0, 0, 0, 128, 154, 153, 9, 65, 61, 0, 141, 47, 191, 48, 0, 0, 154, 153, 9, 65, 62, 0, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 63, 0, 139, 55, 0, 0, 0, 0, 154, 153, 9, 65, 64, 0, 85, 55, 1, 0, 0, 0, 154, 153, 9, 65, 65, 0, 141, 47, 191, 48, 0, 0, 154, 153, 9, 65, 66, 0, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 67, 0, 0, 0, 0, 0, 0, 0, 102, 102, 102, 63, 0, 0, 25, 166, 34, 60, 163, 163, 219, 221, 157, 63, 0, 0, 222, 166, 34, 60, 25, 162, 84, 85, 53, 64, 4, 0, 218, 172, 67, 1, 241, 45, 18, 17, 49, 64, 5, 0, 56, 172, 241, 26, 103, 174, 88, 85, 213, 63, 0, 0, 62, 166, 34, 60, 205, 162, 18, 17, 17, 64, 0, 0, 149, 162, 34, 60, 232, 164, 135, 136, 40, 64, 0, 0, 40, 153, 34, 60, 254, 165, 84, 85, 53, 64, 0, 0, 196, 33, 35, 60, 2, 167, 35, 34, 146, 64, 5, 0, 219, 172, 126, 158, 237, 173, 84, 85, 85, 64, 0, 0, 75, 43, 37, 60, 146, 169, 170, 170, 138, 64, 4, 0, 72, 172, 204, 153, 93, 46, 33, 34, 98, 64, 0, 0, 102, 44, 37, 60, 40, 170, 154, 153, 121, 64, 0, 0, 57, 45, 39, 60, 49, 171, 137, 136, 136, 64, 0, 0, 188, 45, 40, 60, 210, 171, 35, 34, 146, 64, 0, 0, 26, 46, 40, 60, 136, 171, 137, 136, 152, 64, 4, 0, 53, 172, 76, 144, 106, 46, 205, 204, 156, 64, 0, 0, 150, 46, 39, 60, 39, 170, 119, 119, 167, 64, 5, 0, 220, 172, 169, 12, 240, 173, 154, 153, 169, 64, 4, 0, 58, 172, 136, 27, 102, 46, 221, 221, 173, 64, 0, 0, 52, 47, 36, 60, 52, 166, 51, 51, 227, 64, 5, 0, 220, 172, 231, 1, 240, 173, 16, 17, 225, 64, 4, 0, 54, 172, 67, 27, 104, 46, 119, 119, 183, 64, 0, 0, 60, 47, 34, 60, 103, 163, 0, 0, 192, 64, 0, 0, 240, 46, 34, 60, 218, 161, 170, 170, 202, 64, 0, 0, 38, 46, 34, 60, 190, 162, 86, 85, 229, 64, 0, 0, 173, 42, 35, 60, 31, 167, 51, 51, 3, 65, 4, 0, 170, 172, 206, 153, 22, 46, 154, 153, 9, 65, 5, 0, 62, 172, 81, 153, 99, 174, 119, 119, 247, 64, 0, 0, 224, 33, 36, 60, 228, 169, 34, 34, 2, 65, 0, 0, 182, 28, 38, 60, 191, 170, 154, 153, 9, 65, 0, 0, 75, 14, 40, 60, 157, 171, 154, 153, 9, 65, 4, 0, 212, 172, 83, 158, 242, 45, 229, 25, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24, 193, 231, 190, 18, 187, 0, 0, 0, 0, 1, 0, 1, 38, 192, 219, 191, 38, 192, 0, 0, 0, 0, 2, 0, 1, 212, 254, 55, 3, 210, 251, 0, 0, 0, 0, 3, 0, 1, 24, 1, 33, 1, 200, 0, 0, 0, 0, 0, 4, 0, 1, 29, 249, 129, 130, 230, 232, 0, 0, 0, 0, 5, 0, 1, 48, 7, 167, 128, 73, 10, 0, 0, 0, 0, 6, 0, 1, 226, 1, 74, 1, 75, 1, 0, 0, 0, 0, 7, 0, 1, 92, 2, 120, 0, 141, 1, 0, 0, 0, 0, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 0, 0, 9, 0, 1, 215, 4, 164, 254, 142, 252, 0, 0, 0, 0, 10, 0, 1, 196, 79, 159, 249, 110, 99, 0, 0, 0, 0, 11, 0, 1, 20, 176, 19, 3, 44, 99, 0, 0, 0, 0, 12, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 1, 83, 1, 237, 71, 212, 7, 0, 0, 0, 0, 14, 0, 1, 0, 0, 0, 0, 171, 235, 0, 0, 0, 0, 15, 0, 1, 159, 176, 238, 1, 113, 1, 0, 0, 0, 0, 16, 0, 1, 47, 84, 188, 42, 77, 251, 0, 0, 0, 0, 17, 0, 1, 200, 7, 31, 6, 203, 27, 0, 0, 0, 0, 18, 0, 1, 138, 255, 165, 254, 157, 42, 0, 0, 0, 0, 19, 0, 1, 145, 251, 11, 255, 137, 37, 0, 0, 0, 0, 20, 0, 1, 131, 0, 209, 6, 205, 20, 0, 0, 0, 0, 21, 0, 1, 0, 0, 0, 0, 58, 22, 0, 0, 0, 0, 22, 0, 1, 0, 0, 0, 0, 181, 19, 0, 0, 0, 0, 23, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 1, 0, 0, 0, 0, 30, 22, 0, 0, 0, 0, 25, 0, 1, 0, 0, 0, 0, 201, 21, 0, 0, 0, 0, 26, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1, 0, 0, 0, 0, 83, 36, 0, 0, 0, 0, 28, 0, 1, 0, 0, 0, 0, 34, 14, 0, 0, 0, 0, 29, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 1, 0, 0, 0, 0, 36, 42, 0, 0, 0, 0, 31, 0, 1, 0, 0, 0, 0, 147, 31, 0, 0, 0, 0, 32, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 1, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 34, 0, 1, 0, 0, 0, 0, 90, 13, 0, 0, 0, 0, 35, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 1, 84, 248, 229, 185, 63, 4, 0, 0, 0, 0, 37, 0, 1, 0, 0, 0, 0, 97, 235, 0, 0, 0, 0, 38, 0, 1, 241, 84, 169, 251, 179, 255, 0, 0, 0, 0, 39, 0, 1, 2, 172, 125, 212, 244, 249, 0, 0, 0, 0, 40, 0, 1, 155, 252, 158, 250, 183, 28, 0, 0, 0, 0, 41, 0, 1, 117, 0, 91, 1, 11, 43, 0, 0, 0, 0, 42, 0, 1, 235, 4, 60, 3, 97, 40, 0, 0, 0, 0, 43, 0, 1, 212, 8, 62, 22, 231, 17, 0, 0, 0, 0, 44, 0, 1, 0, 0, 0, 0, 58, 22, 0, 0, 0, 0, 45, 0, 1, 0, 0, 0, 0, 181, 19, 0, 0, 0, 0, 46, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 1, 0, 0, 0, 0, 30, 22, 0, 0, 0, 0, 48, 0, 1, 0, 0, 0, 0, 201, 21, 0, 0, 0, 0, 49, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 1, 0, 0, 0, 0, 83, 36, 0, 0, 0, 0, 51, 0, 1, 0, 0, 0, 0, 34, 14, 0, 0, 0, 0, 52, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 1, 0, 0, 0, 0, 36, 42, 0, 0, 0, 0, 54, 0, 1, 0, 0, 0, 0, 147, 31, 0, 0, 0, 0, 55, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 1, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 57, 0, 1, 0, 0, 0, 0, 90, 13, 0, 0, 0, 0, 58, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 1, 0, 0, 0, 0, 140, 234, 0, 0, 0, 0, 60, 0, 1, 204, 246, 222, 251, 27, 9, 0, 0, 0, 0, 61, 0, 1, 0, 0, 0, 0, 130, 90, 0, 0, 0, 0, 62, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 1, 0, 0, 0, 0, 205, 250, 0, 0, 0, 0, 64, 0, 1, 51, 9, 82, 254, 10, 8, 0, 0, 0, 0, 65, 0, 1, 0, 0, 0, 0, 130, 90, 0, 0, 0, 0, 66, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 1, 0, 0, 0, 0, 0, 0, 242, 125, 49, 61, 0, 0, 1, 173, 192, 247, 190, 149, 187, 0, 0, 0, 63, 1, 0, 1, 39, 192, 218, 191, 39, 192, 114, 136, 8, 62, 2, 0, 1, 218, 254, 57, 3, 190, 252, 47, 136, 8, 61, 3, 0, 1, 24, 1, 33, 1, 200, 0, 47, 136, 8, 61, 4, 0, 1, 45, 249, 129, 130, 224, 232, 181, 136, 136, 61, 5, 0, 1, 27, 7, 164, 128, 58, 10, 47, 136, 8, 61, 6, 0, 1, 226, 1, 74, 1, 75, 1, 47, 136, 8, 61, 7, 0, 1, 92, 2, 120, 0, 141, 1, 47, 136, 8, 61, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 204, 61, 9, 0, 1, 181, 3, 169, 254, 29, 253, 47, 136, 8, 61, 10, 0, 1, 60, 80, 244, 249, 12, 99, 205, 204, 204, 61, 11, 0, 1, 235, 174, 103, 2, 42, 98, 154, 153, 9, 65, 12, 0, 1, 0, 0, 0, 0, 0, 0, 47, 136, 8, 61, 13, 0, 1, 17, 3, 179, 71, 251, 3, 47, 136, 8, 61, 14, 0, 1, 0, 0, 0, 0, 4, 230, 114, 136, 8, 62, 15, 0, 1, 19, 174, 165, 6, 7, 5, 148, 136, 136, 62, 16, 0, 1, 228, 86, 159, 31, 195, 253, 181, 136, 136, 61, 17, 0, 1, 193, 7, 162, 5, 55, 28, 205, 204, 204, 61, 18, 0, 1, 115, 255, 31, 254, 137, 42, 181, 136, 136, 61, 19, 0, 1, 89, 251, 249, 254, 38, 37, 181, 136, 136, 61, 20, 0, 1, 133, 0, 230, 7, 190, 21, 181, 136, 136, 61, 21, 0, 1, 0, 0, 0, 0, 253, 20, 47, 136, 8, 61, 22, 0, 1, 0, 0, 0, 0, 40, 19, 154, 153, 9, 65, 23, 0, 1, 0, 0, 0, 0, 0, 0, 205, 204, 204, 61, 24, 0, 1, 0, 0, 0, 0, 198, 20, 47, 136, 8, 61, 25, 0, 1, 0, 0, 0, 0, 95, 21, 154, 153, 9, 65, 26, 0, 1, 0, 0, 0, 0, 0, 0, 47, 136, 8, 61, 27, 0, 1, 0, 0, 0, 0, 144, 35, 47, 136, 8, 61, 28, 0, 1, 0, 0, 0, 0, 188, 13, 154, 153, 9, 65, 29, 0, 1, 0, 0, 0, 0, 0, 0, 47, 136, 8, 61, 30, 0, 1, 0, 0, 0, 0, 38, 41, 205, 204, 204, 61, 31, 0, 1, 0, 0, 0, 0, 220, 29, 154, 153, 9, 65, 32, 0, 1, 0, 0, 0, 0, 0, 0, 217, 238, 110, 62, 33, 0, 1, 0, 0, 0, 0, 135, 52, 205, 204, 204, 61, 34, 0, 1, 0, 0, 0, 0, 60, 12, 154, 153, 9, 65, 35, 0, 1, 0, 0, 0, 0, 0, 0, 114, 136, 8, 62, 36, 0, 1, 142, 236, 105, 191, 88, 247, 181, 136, 136, 61, 37, 0, 1, 0, 0, 0, 0, 145, 227, 47, 136, 8, 61, 38, 0, 1, 41, 85, 63, 251, 2, 255, 205, 204, 76, 62, 39, 0, 1, 31, 176, 70, 216, 63, 251, 181, 136, 136, 61, 40, 0, 1, 255, 249, 234, 250, 235, 28, 47, 136, 8, 61, 41, 0, 1, 155, 255, 25, 1, 38, 42, 148, 136, 136, 62, 42, 0, 1, 174, 0, 151, 255, 99, 29, 47, 136, 8, 61, 43, 0, 1, 112, 7, 86, 21, 181, 16, 181, 136, 136, 61, 44, 0, 1, 0, 0, 0, 0, 171, 20, 47, 136, 8, 61, 45, 0, 1, 0, 0, 0, 0, 3, 19, 154, 153, 9, 65, 46, 0, 1, 0, 0, 0, 0, 0, 0, 181, 136, 136, 61, 47, 0, 1, 0, 0, 0, 0, 232, 20, 181, 136, 136, 61, 48, 0, 1, 0, 0, 0, 0, 20, 20, 154, 153, 9, 65, 49, 0, 1, 0, 0, 0, 0, 0, 0, 205, 204, 204, 61, 50, 0, 1, 0, 0, 0, 0, 250, 32, 47, 136, 8, 61, 51, 0, 1, 0, 0, 0, 0, 108, 13, 154, 153, 9, 65, 52, 0, 1, 0, 0, 0, 0, 0, 0, 148, 136, 136, 62, 53, 0, 1, 0, 0, 0, 0, 172, 30, 114, 136, 8, 62, 54, 0, 1, 0, 0, 0, 0, 143, 31, 154, 153, 9, 65, 55, 0, 1, 0, 0, 0, 0, 0, 0, 148, 136, 136, 62, 56, 0, 1, 0, 0, 0, 0, 51, 47, 181, 136, 136, 61, 57, 0, 1, 0, 0, 0, 0, 255, 12, 154, 153, 9, 65, 58, 0, 1, 0, 0, 0, 0, 0, 0, 47, 136, 8, 61, 59, 0, 1, 0, 0, 0, 0, 136, 234, 181, 136, 136, 61, 60, 0, 1, 200, 247, 203, 251, 54, 9, 205, 204, 204, 61, 61, 0, 1, 0, 0, 0, 0, 128, 90, 154, 153, 9, 65, 62, 0, 1, 0, 0, 0, 0, 0, 0, 47, 136, 8, 61, 63, 0, 1, 0, 0, 0, 0, 97, 250, 205, 204, 204, 61, 64, 0, 1, 186, 10, 77, 254, 41, 9, 217, 238, 110, 62, 65, 0, 1, 7, 0, 252, 255, 126, 90, 154, 153, 9, 65, 66, 0, 1, 0, 0, 0, 0, 0, 0, 154, 153, 9, 65, 67, 0, 1, 0, 0, 0, 0, 0, 0, 181, 136, 136, 61, 3, 0, 1, 24, 1, 33, 1, 200, 0, 205, 204, 204, 61, 4, 0, 1, 78, 249, 128, 130, 213, 232, 181, 136, 136, 61, 6, 0, 1, 226, 1, 74, 1, 75, 1, 181, 136, 136, 61, 7, 0, 1, 92, 2, 120, 0, 141, 1, 181, 136, 136, 61, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 204, 61, 10, 0, 1, 46, 81, 146, 250, 65, 98, 114, 136, 8, 62, 13, 0, 1, 88, 8, 128, 70, 21, 248, 181, 136, 136, 61, 14, 0, 1, 0, 0, 0, 0, 106, 224, 205, 204, 204, 61, 22, 0, 1, 0, 0, 0, 0, 17, 18, 181, 136, 136, 61, 25, 0, 1, 0, 0, 0, 0, 246, 20, 181, 136, 136, 61, 27, 0, 1, 0, 0, 0, 0, 205, 34, 181, 136, 136, 61, 28, 0, 1, 0, 0, 0, 0, 87, 13, 205, 204, 76, 62, 30, 0, 1, 0, 0, 0, 0, 73, 36, 181, 136, 136, 61, 38, 0, 1, 101, 85, 214, 250, 77, 254, 205, 204, 204, 61, 41, 0, 1, 238, 253, 155, 0, 100, 40, 181, 136, 136, 61, 43, 0, 1, 11, 6, 115, 20, 129, 15, 114, 136, 8, 62, 45, 0, 1, 0, 0, 0, 0, 251, 16, 114, 136, 8, 62, 51, 0, 1, 0, 0, 0, 0, 88, 11, 148, 136, 136, 62, 59, 0, 1, 0, 0, 0, 0, 79, 234, 181, 136, 136, 61, 63, 0, 1, 0, 0, 0, 0, 251, 249, 181, 136, 136, 61, 0, 0, 1, 115, 192, 255, 190, 220, 187, 114, 136, 8, 62, 0, 0, 1, 196, 191, 25, 191, 177, 188, 205, 204, 204, 61, 3, 0, 1, 24, 1, 33, 1, 200, 0, 217, 238, 110, 62, 5, 0, 1, 101, 7, 166, 128, 33, 10, 205, 204, 204, 61, 6, 0, 1, 226, 1, 74, 1, 75, 1, 205, 204, 204, 61, 7, 0, 1, 92, 2, 120, 0, 141, 1, 205, 204, 204, 61, 8, 0, 1, 227, 253, 37, 0, 123, 11, 193, 170, 42, 62, 14, 0, 1, 0, 0, 0, 0, 228, 206, 193, 170, 42, 62, 17, 0, 1, 183, 7, 236, 4, 213, 28, 114, 136, 8, 62, 19, 0, 1, 34, 251, 231, 254, 198, 36, 205, 204, 204, 61, 20, 0, 1, 134, 0, 109, 8, 52, 22, 193, 170, 42, 62, 21, 0, 1, 0, 0, 0, 0, 46, 19, 205, 204, 204, 61, 25, 0, 1, 0, 0, 0, 0, 143, 20, 205, 204, 204, 61, 27, 0, 1, 0, 0, 0, 0, 14, 34, 205, 204, 204, 61, 28, 0, 1, 0, 0, 0, 0, 244, 12, 154, 153, 153, 62, 37, 0, 1, 0, 0, 0, 0, 87, 201, 114, 136, 8, 62, 38, 0, 1, 254, 85, 22, 250, 203, 252, 205, 204, 204, 61, 40, 0, 1, 187, 248, 15, 251, 4, 29, 205, 204, 204, 61, 43, 0, 1, 177, 4, 146, 19, 85, 14, 114, 136, 8, 62, 44, 0, 1, 0, 0, 0, 0, 40, 19, 205, 204, 204, 61, 47, 0, 1, 0, 0, 0, 0, 81, 20, 205, 204, 204, 61, 48, 0, 1, 0, 0, 0, 0, 63, 19, 205, 204, 204, 61, 57, 0, 1, 0, 0, 0, 0, 211, 12, 114, 136, 8, 62, 60, 0, 1, 208, 248, 182, 251, 90, 9, 217, 238, 110, 62, 63, 0, 1, 0, 0, 0, 0, 169, 248, 114, 136, 8, 62, 3, 0, 1, 24, 1, 33, 1, 200, 0, 193, 170, 42, 62, 4, 0, 1, 114, 249, 127, 130, 203, 232, 114, 136, 8, 62, 6, 0, 1, 226, 1, 74, 1, 75, 1, 114, 136, 8, 62, 7, 0, 1, 92, 2, 120, 0, 141, 1, 114, 136, 8, 62, 8, 0, 1, 227, 253, 37, 0, 123, 11, 114, 136, 8, 62, 9, 0, 1, 84, 3, 172, 254, 79, 253, 114, 136, 8, 62, 10, 0, 1, 166, 81, 223, 250, 218, 97, 114, 136, 8, 62, 11, 0, 1, 139, 174, 47, 2, 212, 97, 114, 136, 8, 62, 18, 0, 1, 108, 255, 244, 253, 130, 42, 193, 170, 42, 62, 20, 0, 1, 135, 0, 120, 9, 28, 23, 114, 136, 8, 62, 22, 0, 1, 0, 0, 0, 0, 137, 17, 114, 136, 8, 62, 24, 0, 1, 0, 0, 0, 0, 86, 20, 114, 136, 8, 62, 25, 0, 1, 0, 0, 0, 0, 40, 20, 114, 136, 8, 62, 27, 0, 1, 0, 0, 0, 0, 80, 33, 205, 204, 76, 62, 28, 0, 1, 0, 0, 0, 0, 206, 11, 205, 204, 76, 62, 31, 0, 1, 0, 0, 0, 0, 47, 28, 114, 136, 8, 62, 34, 0, 1, 0, 0, 0, 0, 223, 11, 154, 153, 153, 62, 40, 0, 1, 255, 240, 243, 251, 138, 29, 154, 153, 153, 62, 41, 0, 1, 228, 248, 26, 255, 251, 34, 114, 136, 8, 62, 43, 0, 1, 88, 3, 177, 18, 43, 13, 193, 170, 42, 62, 47, 0, 1, 0, 0, 0, 0, 37, 19, 193, 170, 42, 62, 48, 0, 1, 0, 0, 0, 0, 153, 17, 114, 136, 8, 62, 50, 0, 1, 0, 0, 0, 0, 227, 31, 114, 136, 8, 62, 57, 0, 1, 0, 0, 0, 0, 168, 12, 114, 136, 8, 62, 61, 0, 1, 0, 0, 0, 0, 126, 90, 114, 136, 8, 62, 64, 0, 1, 63, 11, 75, 254, 126, 9, 193, 170, 42, 62, 0, 0, 1, 107, 191, 38, 191, 31, 189, 193, 170, 42, 62, 2, 0, 1, 220, 254, 58, 3, 252, 252, 193, 170, 42, 62, 3, 0, 1, 24, 1, 33, 1, 200, 0, 193, 170, 42, 62, 6, 0, 1, 226, 1, 74, 1, 75, 1, 193, 170, 42, 62, 7, 0, 1, 92, 2, 120, 0, 141, 1, 193, 170, 42, 62, 8, 0, 1, 227, 253, 37, 0, 123, 11, 217, 238, 110, 62, 9, 0, 1, 47, 2, 184, 254, 228, 253, 193, 170, 42, 62, 10, 0, 1, 30, 82, 43, 251, 114, 97, 193, 170, 42, 62, 11, 0, 1, 42, 174, 248, 1, 125, 97, 217, 238, 110, 62, 13, 0, 1, 100, 13, 83, 68, 227, 235, 217, 238, 110, 62, 15, 0, 1, 69, 172, 95, 10, 236, 7, 205, 204, 76, 62, 18, 0, 1, 93, 255, 157, 253, 117, 42, 205, 204, 76, 62, 19, 0, 1, 236, 250, 214, 254, 103, 36, 193, 170, 42, 62, 22, 0, 1, 0, 0, 0, 0, 1, 17, 205, 204, 76, 62, 24, 0, 1, 0, 0, 0, 0, 120, 19, 217, 238, 110, 62, 25, 0, 1, 0, 0, 0, 0, 247, 18, 193, 170, 42, 62, 27, 0, 1, 0, 0, 0, 0, 148, 32, 193, 170, 42, 62, 34, 0, 1, 0, 0, 0, 0, 131, 11, 217, 238, 110, 62, 36, 0, 1, 39, 228, 158, 196, 193, 237, 193, 170, 42, 62, 38, 0, 1, 75, 86, 183, 249, 7, 252, 193, 170, 42, 62, 43, 0, 1, 0, 2, 208, 17, 255, 11, 205, 204, 76, 62, 44, 0, 1, 0, 0, 0, 0, 164, 17, 205, 204, 76, 62, 45, 0, 1, 0, 0, 0, 0, 162, 15, 193, 170, 42, 62, 50, 0, 1, 0, 0, 0, 0, 203, 30, 193, 170, 42, 62, 51, 0, 1, 0, 0, 0, 0, 168, 10, 193, 170, 42, 62, 54, 0, 1, 0, 0, 0, 0, 141, 31, 217, 238, 110, 62, 57, 0, 1, 0, 0, 0, 0, 36, 12, 205, 204, 76, 62, 60, 0, 1, 223, 249, 159, 251, 116, 9, 193, 170, 42, 62, 61, 0, 1, 0, 0, 0, 0, 128, 90, 217, 238, 110, 62, 64, 0, 1, 215, 12, 64, 254, 115, 10, 205, 204, 76, 62, 0, 0, 1, 16, 191, 51, 191, 143, 189, 148, 136, 136, 62, 2, 0, 1, 224, 254, 60, 3, 184, 253, 205, 204, 76, 62, 3, 0, 1, 24, 1, 33, 1, 200, 0, 217, 238, 110, 62, 4, 0, 1, 152, 249, 127, 130, 194, 232, 205, 204, 76, 62, 6, 0, 1, 226, 1, 74, 1, 75, 1, 205, 204, 76, 62, 7, 0, 1, 92, 2, 120, 0, 141, 1, 205, 204, 76, 62, 8, 0, 1, 227, 253, 37, 0, 123, 11, 148, 136, 136, 62, 10, 0, 1, 129, 83, 9, 252, 52, 96, 205, 204, 76, 62, 11, 0, 1, 202, 173, 194, 1, 38, 97, 148, 136, 136, 62, 14, 0, 1, 0, 0, 0, 0, 67, 190, 205, 204, 76, 62, 17, 0, 1, 180, 7, 176, 4, 8, 29, 205, 204, 76, 62, 20, 0, 1, 136, 0, 253, 9, 143, 23, 205, 204, 76, 62, 21, 0, 1, 0, 0, 0, 0, 149, 18, 205, 204, 76, 62, 22, 0, 1, 0, 0, 0, 0, 121, 16, 154, 153, 153, 62, 27, 0, 1, 0, 0, 0, 0, 152, 29, 154, 153, 153, 62, 34, 0, 1, 0, 0, 0, 0, 14, 10, 148, 136, 136, 62, 38, 0, 1, 250, 86, 133, 248, 226, 249, 154, 153, 153, 62, 43, 0, 1, 101, 252, 25, 14, 25, 7, 148, 136, 136, 62, 47, 0, 1, 0, 0, 0, 0, 86, 17, 148, 136, 136, 62, 48, 0, 1, 0, 0, 0, 0, 12, 15, 148, 136, 136, 62, 50, 0, 1, 0, 0, 0, 0, 105, 27, 148, 136, 136, 62, 51, 0, 1, 0, 0, 0, 0, 140, 8, 159, 170, 170, 62, 54, 0, 1, 0, 0, 0, 0, 135, 31, 154, 153, 25, 63, 61, 0, 1, 0, 0, 0, 0, 130, 90, 154, 153, 153, 62, 0, 0, 1, 255, 189, 93, 191, 227, 190, 217, 238, 110, 62, 3, 0, 1, 24, 1, 33, 1, 200, 0, 217, 238, 110, 62, 6, 0, 1, 226, 1, 74, 1, 75, 1, 217, 238, 110, 62, 7, 0, 1, 92, 2, 120, 0, 141, 1, 217, 238, 110, 62, 8, 0, 1, 227, 253, 37, 0, 123, 11, 217, 238, 110, 62, 11, 0, 1, 106, 173, 138, 1, 205, 96, 217, 238, 110, 62, 17, 0, 1, 176, 7, 116, 4, 60, 29, 154, 153, 153, 62, 18, 0, 1, 71, 255, 26, 253, 97, 42, 148, 136, 136, 62, 19, 0, 1, 182, 250, 196, 254, 8, 36, 217, 238, 110, 62, 20, 0, 1, 137, 0, 131, 10, 3, 24, 148, 136, 136, 62, 21, 0, 1, 0, 0, 0, 0, 97, 17, 148, 136, 136, 62, 22, 0, 1, 0, 0, 0, 0, 103, 15, 148, 136, 136, 62, 24, 0, 1, 0, 0, 0, 0, 152, 18, 217, 238, 110, 62, 28, 0, 1, 0, 0, 0, 0, 108, 11, 148, 136, 136, 62, 30, 0, 1, 0, 0, 0, 0, 86, 34, 217, 238, 110, 62, 31, 0, 1, 0, 0, 0, 0, 159, 27, 148, 136, 136, 62, 39, 0, 1, 152, 177, 153, 217, 178, 251, 199, 187, 187, 62, 44, 0, 1, 0, 0, 0, 0, 139, 13, 217, 238, 110, 62, 45, 0, 1, 0, 0, 0, 0, 242, 14, 148, 136, 136, 62, 60, 0, 1, 242, 250, 136, 251, 148, 9, 148, 136, 136, 62, 3, 0, 1, 24, 1, 33, 1, 200, 0, 154, 153, 153, 62, 4, 0, 1, 189, 249, 126, 130, 186, 232, 148, 136, 136, 62, 5, 0, 1, 131, 7, 167, 128, 29, 10, 148, 136, 136, 62, 6, 0, 1, 226, 1, 74, 1, 75, 1, 148, 136, 136, 62, 7, 0, 1, 92, 2, 120, 0, 141, 1, 148, 136, 136, 62, 8, 0, 1, 227, 253, 37, 0, 123, 11, 148, 136, 136, 62, 9, 0, 1, 205, 1, 189, 254, 20, 254, 159, 170, 170, 62, 11, 0, 1, 70, 172, 225, 0, 186, 95, 154, 153, 153, 62, 13, 0, 1, 110, 16, 84, 66, 1, 228, 159, 170, 170, 62, 15, 0, 1, 167, 170, 231, 13, 159, 10, 159, 170, 170, 62, 17, 0, 1, 165, 7, 187, 3, 219, 29, 154, 153, 153, 62, 20, 0, 1, 139, 0, 144, 11, 236, 24, 159, 170, 170, 62, 25, 0, 1, 0, 0, 0, 0, 190, 17, 148, 136, 136, 62, 28, 0, 1, 0, 0, 0, 0, 9, 11, 199, 187, 187, 62, 31, 0, 1, 0, 0, 0, 0, 81, 25, 154, 153, 153, 62, 33, 0, 1, 0, 0, 0, 0, 38, 49, 154, 153, 153, 62, 36, 0, 1, 11, 223, 138, 200, 36, 231, 148, 136, 136, 62, 45, 0, 1, 0, 0, 0, 0, 62, 14, 148, 136, 136, 62, 57, 0, 1, 0, 0, 0, 0, 246, 11, 159, 170, 170, 62, 63, 0, 1, 0, 0, 0, 0, 74, 248, 148, 136, 136, 62, 64, 0, 1, 97, 13, 59, 254, 187, 10, 148, 136, 136, 62, 65, 0, 1, 7, 0, 252, 255, 125, 90, 199, 187, 187, 62, 2, 0, 1, 228, 254, 61, 3, 117, 254, 154, 153, 153, 62, 3, 0, 1, 24, 1, 33, 1, 200, 0, 199, 187, 187, 62, 5, 0, 1, 245, 7, 173, 128, 16, 10, 154, 153, 153, 62, 6, 0, 1, 226, 1, 74, 1, 75, 1, 154, 153, 153, 62, 7, 0, 1, 92, 2, 120, 0, 141, 1, 154, 153, 153, 62, 8, 0, 1, 227, 253, 37, 0, 123, 11, 199, 187, 187, 62, 9, 0, 1, 170, 0, 203, 254, 157, 254, 154, 153, 153, 62, 10, 0, 1, 245, 83, 85, 252, 201, 95, 159, 170, 170, 62, 14, 0, 1, 0, 0, 0, 0, 112, 180, 154, 153, 153, 62, 16, 0, 1, 46, 87, 51, 30, 19, 254, 159, 170, 170, 62, 19, 0, 1, 126, 250, 178, 254, 166, 35, 199, 187, 187, 62, 21, 0, 1, 0, 0, 0, 0, 131, 15, 154, 153, 153, 62, 22, 0, 1, 0, 0, 0, 0, 220, 14, 154, 153, 153, 62, 24, 0, 1, 0, 0, 0, 0, 38, 18, 154, 153, 153, 62, 28, 0, 1, 0, 0, 0, 0, 166, 10, 211, 221, 221, 62, 30, 0, 1, 0, 0, 0, 0, 43, 29, 199, 187, 187, 62, 38, 0, 1, 1, 87, 36, 247, 12, 248, 154, 153, 153, 62, 39, 0, 1, 97, 178, 76, 218, 237, 251, 199, 187, 187, 62, 42, 0, 1, 241, 254, 26, 254, 205, 24, 159, 170, 170, 62, 45, 0, 1, 0, 0, 0, 0, 195, 12, 159, 170, 170, 62, 47, 0, 1, 0, 0, 0, 0, 11, 16, 159, 170, 170, 62, 48, 0, 1, 0, 0, 0, 0, 55, 13, 199, 187, 187, 62, 50, 0, 1, 0, 0, 0, 0, 184, 23, 154, 153, 153, 62, 51, 0, 1, 0, 0, 0, 0, 206, 7, 159, 170, 170, 62, 53, 0, 1, 0, 0, 0, 0, 134, 27, 199, 187, 187, 62, 56, 0, 1, 0, 0, 0, 0, 6, 40, 154, 153, 153, 62, 57, 0, 1, 0, 0, 0, 0, 199, 11, 159, 170, 170, 62, 59, 0, 1, 0, 0, 0, 0, 59, 234, 154, 153, 153, 62, 60, 0, 1, 124, 251, 123, 251, 168, 9, 159, 170, 170, 62, 64, 0, 1, 115, 14, 48, 254, 53, 11, 154, 153, 153, 62, 65, 0, 1, 7, 0, 252, 255, 126, 90, 159, 170, 170, 62, 0, 0, 1, 165, 189, 107, 191, 85, 191, 159, 170, 170, 62, 3, 0, 1, 24, 1, 33, 1, 200, 0, 159, 170, 170, 62, 4, 0, 1, 206, 249, 126, 130, 182, 232, 159, 170, 170, 62, 6, 0, 1, 226, 1, 74, 1, 75, 1, 159, 170, 170, 62, 7, 0, 1, 92, 2, 120, 0, 141, 1, 159, 170, 170, 62, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 204, 62, 10, 0, 1, 70, 85, 63, 253, 135, 94, 159, 170, 170, 62, 13, 0, 1, 218, 17, 48, 65, 42, 224, 250, 238, 238, 62, 16, 0, 1, 129, 88, 157, 22, 188, 255, 159, 170, 170, 62, 18, 0, 1, 63, 255, 237, 252, 90, 42, 159, 170, 170, 62, 20, 0, 1, 140, 0, 25, 12, 98, 25, 159, 170, 170, 62, 22, 0, 1, 0, 0, 0, 0, 79, 14, 159, 170, 170, 62, 24, 0, 1, 0, 0, 0, 0, 179, 17, 159, 170, 170, 62, 27, 0, 1, 0, 0, 0, 0, 211, 28, 205, 204, 204, 62, 28, 0, 1, 0, 0, 0, 0, 112, 9, 211, 221, 221, 62, 33, 0, 1, 0, 0, 0, 0, 232, 41, 159, 170, 170, 62, 34, 0, 1, 0, 0, 0, 0, 175, 9, 199, 187, 187, 62, 36, 0, 1, 118, 218, 198, 204, 80, 224, 205, 204, 204, 62, 37, 0, 1, 0, 0, 0, 0, 140, 190, 159, 170, 170, 62, 39, 0, 1, 52, 179, 7, 219, 44, 252, 199, 187, 187, 62, 40, 0, 1, 45, 238, 72, 252, 180, 29, 199, 187, 187, 62, 41, 0, 1, 13, 247, 141, 254, 248, 32, 199, 187, 187, 62, 43, 0, 1, 92, 249, 16, 12, 109, 4, 159, 170, 170, 62, 51, 0, 1, 0, 0, 0, 0, 9, 7, 199, 187, 187, 62, 57, 0, 1, 0, 0, 0, 0, 101, 11, 205, 204, 204, 62, 60, 0, 1, 21, 253, 87, 251, 207, 9, 154, 153, 153, 63, 65, 0, 1, 5, 0, 252, 255, 125, 90, 199, 187, 187, 62, 0, 0, 1, 77, 189, 122, 191, 198, 191, 199, 187, 187, 62, 3, 0, 1, 24, 1, 33, 1, 200, 0, 205, 204, 204, 62, 4, 0, 1, 240, 249, 126, 130, 176, 232, 199, 187, 187, 62, 6, 0, 1, 226, 1, 74, 1, 75, 1, 199, 187, 187, 62, 7, 0, 1, 92, 2, 120, 0, 141, 1, 199, 187, 187, 62, 8, 0, 1, 227, 253, 37, 0, 123, 11, 199, 187, 187, 62, 11, 0, 1, 229, 171, 167, 0, 92, 95, 205, 204, 204, 62, 13, 0, 1, 74, 20, 157, 62, 2, 217, 205, 204, 204, 62, 14, 0, 1, 0, 0, 0, 0, 7, 172, 211, 221, 221, 62, 15, 0, 1, 66, 169, 240, 16, 201, 12, 199, 187, 187, 62, 17, 0, 1, 162, 7, 124, 3, 18, 30, 205, 204, 204, 62, 18, 0, 1, 47, 255, 145, 252, 76, 42, 205, 204, 204, 62, 19, 0, 1, 68, 250, 160, 254, 64, 35, 211, 221, 221, 62, 20, 0, 1, 143, 0, 198, 13, 212, 26, 205, 204, 204, 62, 22, 0, 1, 0, 0, 0, 0, 44, 13, 205, 204, 204, 62, 24, 0, 1, 0, 0, 0, 0, 197, 16, 205, 204, 204, 62, 25, 0, 1, 0, 0, 0, 0, 228, 16, 211, 221, 221, 62, 27, 0, 1, 0, 0, 0, 0, 106, 26, 199, 187, 187, 62, 34, 0, 1, 0, 0, 0, 0, 77, 9, 205, 204, 204, 62, 39, 0, 1, 0, 181, 155, 220, 177, 252, 205, 204, 204, 62, 45, 0, 1, 0, 0, 0, 0, 37, 11, 205, 204, 204, 62, 47, 0, 1, 0, 0, 0, 0, 161, 14, 205, 204, 204, 62, 48, 0, 1, 0, 0, 0, 0, 56, 11, 205, 204, 204, 62, 51, 0, 1, 0, 0, 0, 0, 99, 5, 205, 204, 204, 62, 53, 0, 1, 0, 0, 0, 0, 19, 24, 23, 17, 17, 63, 54, 0, 1, 0, 0, 0, 0, 122, 31, 250, 238, 238, 62, 59, 0, 1, 0, 0, 0, 0, 26, 234, 205, 204, 204, 62, 63, 0, 1, 0, 0, 0, 0, 47, 248, 211, 221, 221, 62, 64, 0, 1, 4, 16, 27, 254, 212, 11, 211, 221, 221, 62, 0, 0, 1, 160, 188, 153, 191, 165, 192, 211, 221, 221, 62, 2, 0, 1, 231, 254, 62, 3, 239, 254, 205, 204, 204, 62, 3, 0, 1, 24, 1, 33, 1, 200, 0, 211, 221, 221, 62, 5, 0, 1, 76, 8, 179, 128, 8, 10, 205, 204, 204, 62, 6, 0, 1, 226, 1, 74, 1, 75, 1, 205, 204, 204, 62, 7, 0, 1, 92, 2, 120, 0, 141, 1, 205, 204, 204, 62, 8, 0, 1, 227, 253, 37, 0, 123, 11, 211, 221, 221, 62, 9, 0, 1, 234, 255, 213, 254, 237, 254, 0, 0, 0, 63, 11, 0, 1, 25, 170, 123, 255, 136, 93, 211, 221, 221, 62, 17, 0, 1, 154, 7, 249, 2, 130, 30, 211, 221, 221, 62, 21, 0, 1, 0, 0, 0, 0, 52, 14, 250, 238, 238, 62, 31, 0, 1, 0, 0, 0, 0, 116, 23, 211, 221, 221, 62, 34, 0, 1, 0, 0, 0, 0, 132, 8, 205, 204, 204, 62, 36, 0, 1, 127, 216, 11, 207, 148, 220, 205, 204, 204, 62, 38, 0, 1, 164, 86, 103, 246, 228, 247, 205, 204, 204, 62, 40, 0, 1, 152, 236, 120, 252, 201, 29, 205, 204, 204, 62, 41, 0, 1, 4, 246, 62, 254, 212, 31, 205, 204, 204, 62, 42, 0, 1, 73, 254, 137, 253, 12, 23, 205, 204, 204, 62, 43, 0, 1, 169, 247, 231, 10, 237, 2, 205, 204, 204, 62, 44, 0, 1, 0, 0, 0, 0, 148, 12, 205, 204, 204, 62, 50, 0, 1, 0, 0, 0, 0, 80, 22, 205, 204, 204, 62, 56, 0, 1, 0, 0, 0, 0, 64, 37, 131, 136, 8, 63, 57, 0, 1, 0, 0, 0, 0, 248, 9, 211, 221, 221, 62, 3, 0, 1, 24, 1, 33, 1, 200, 0, 74, 68, 68, 63, 4, 0, 1, 81, 250, 126, 130, 149, 232, 211, 221, 221, 62, 6, 0, 1, 226, 1, 74, 1, 75, 1, 211, 221, 221, 62, 7, 0, 1, 92, 2, 120, 0, 141, 1, 211, 221, 221, 62, 8, 0, 1, 227, 253, 37, 0, 123, 11, 211, 221, 221, 62, 10, 0, 1, 177, 85, 148, 253, 29, 94, 211, 221, 221, 62, 13, 0, 1, 84, 21, 53, 61, 180, 213, 211, 221, 221, 62, 14, 0, 1, 0, 0, 0, 0, 108, 168, 250, 238, 238, 62, 18, 0, 1, 31, 255, 48, 252, 61, 42, 131, 136, 8, 63, 19, 0, 1, 199, 249, 120, 254, 101, 34, 23, 17, 17, 63, 22, 0, 1, 0, 0, 0, 0, 1, 10, 23, 17, 17, 63, 24, 0, 1, 0, 0, 0, 0, 44, 14, 250, 238, 238, 62, 25, 0, 1, 0, 0, 0, 0, 255, 15, 211, 221, 221, 62, 28, 0, 1, 0, 0, 0, 0, 4, 9, 250, 238, 238, 62, 36, 0, 1, 211, 213, 19, 212, 56, 211, 0, 0, 0, 63, 37, 0, 1, 0, 0, 0, 0, 229, 178, 211, 221, 221, 62, 38, 0, 1, 147, 85, 188, 244, 33, 249, 250, 238, 238, 62, 39, 0, 1, 140, 183, 207, 222, 105, 253, 211, 221, 221, 62, 40, 0, 1, 166, 234, 179, 252, 226, 29, 250, 238, 238, 62, 41, 0, 1, 86, 243, 112, 253, 215, 28, 211, 221, 221, 62, 42, 0, 1, 121, 253, 214, 252, 224, 20, 211, 221, 221, 62, 43, 0, 1, 145, 245, 120, 9, 19, 1, 250, 238, 238, 62, 44, 0, 1, 0, 0, 0, 0, 18, 10, 250, 238, 238, 62, 45, 0, 1, 0, 0, 0, 0, 236, 8, 250, 238, 238, 62, 47, 0, 1, 0, 0, 0, 0, 175, 12, 250, 238, 238, 62, 48, 0, 1, 0, 0, 0, 0, 121, 8, 250, 238, 238, 62, 50, 0, 1, 0, 0, 0, 0, 162, 18, 250, 238, 238, 62, 51, 0, 1, 0, 0, 0, 0, 30, 3, 211, 221, 221, 62, 53, 0, 1, 0, 0, 0, 0, 210, 21, 211, 221, 221, 62, 56, 0, 1, 0, 0, 0, 0, 208, 33, 250, 238, 238, 62, 60, 0, 1, 29, 254, 62, 251, 231, 9, 250, 238, 238, 62, 63, 0, 1, 0, 0, 0, 0, 50, 248, 0, 0, 0, 63, 0, 0, 1, 254, 187, 186, 191, 125, 193, 250, 238, 238, 62, 2, 0, 1, 232, 254, 63, 3, 43, 255, 250, 238, 238, 62, 3, 0, 1, 24, 1, 33, 1, 200, 0, 250, 238, 238, 62, 5, 0, 1, 123, 8, 182, 128, 5, 10, 250, 238, 238, 62, 6, 0, 1, 226, 1, 74, 1, 75, 1, 250, 238, 238, 62, 7, 0, 1, 92, 2, 120, 0, 141, 1, 250, 238, 238, 62, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 0, 63, 9, 0, 1, 45, 255, 220, 254, 48, 255, 23, 17, 17, 63, 10, 0, 1, 77, 87, 18, 255, 106, 92, 250, 238, 238, 62, 13, 0, 1, 58, 22, 194, 59, 153, 210, 250, 238, 238, 62, 14, 0, 1, 0, 0, 0, 0, 61, 165, 0, 0, 0, 63, 15, 0, 1, 116, 168, 138, 18, 199, 13, 0, 0, 0, 63, 17, 0, 1, 146, 7, 111, 2, 249, 30, 23, 17, 17, 63, 20, 0, 1, 148, 0, 69, 16, 251, 28, 23, 17, 17, 63, 21, 0, 1, 0, 0, 0, 0, 74, 11, 250, 238, 238, 62, 27, 0, 1, 0, 0, 0, 0, 145, 25, 250, 238, 238, 62, 28, 0, 1, 0, 0, 0, 0, 148, 8, 0, 0, 0, 63, 30, 0, 1, 0, 0, 0, 0, 233, 26, 131, 136, 8, 63, 33, 0, 1, 0, 0, 0, 0, 212, 35, 0, 0, 0, 63, 34, 0, 1, 0, 0, 0, 0, 175, 7, 250, 238, 238, 62, 38, 0, 1, 11, 84, 209, 242, 191, 250, 250, 238, 238, 62, 40, 0, 1, 126, 232, 245, 252, 253, 29, 250, 238, 238, 62, 42, 0, 1, 146, 252, 17, 252, 116, 18, 250, 238, 238, 62, 43, 0, 1, 63, 243, 225, 7, 3, 255, 250, 238, 238, 62, 53, 0, 1, 0, 0, 0, 0, 78, 19, 250, 238, 238, 62, 56, 0, 1, 0, 0, 0, 0, 246, 29, 250, 238, 238, 62, 64, 0, 1, 134, 16, 19, 254, 0, 12, 23, 17, 17, 63, 2, 0, 1, 236, 254, 64, 3, 214, 255, 0, 0, 0, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 0, 0, 0, 63, 5, 0, 1, 170, 8, 185, 128, 2, 10, 0, 0, 0, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 0, 0, 0, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 0, 0, 0, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 0, 63, 13, 0, 1, 253, 22, 70, 58, 188, 207, 0, 0, 0, 63, 14, 0, 1, 0, 0, 0, 0, 124, 162, 131, 136, 8, 63, 16, 0, 1, 251, 88, 62, 19, 119, 0, 0, 0, 0, 63, 18, 0, 1, 22, 255, 254, 251, 54, 42, 154, 153, 25, 63, 25, 0, 1, 0, 0, 0, 0, 243, 13, 23, 17, 17, 63, 27, 0, 1, 0, 0, 0, 0, 203, 22, 131, 136, 8, 63, 28, 0, 1, 0, 0, 0, 0, 171, 7, 154, 153, 25, 63, 31, 0, 1, 0, 0, 0, 0, 145, 20, 131, 136, 8, 63, 36, 0, 1, 19, 213, 83, 217, 251, 200, 0, 0, 0, 63, 38, 0, 1, 2, 82, 205, 240, 170, 252, 131, 136, 8, 63, 39, 0, 1, 147, 186, 100, 225, 62, 254, 131, 136, 8, 63, 40, 0, 1, 208, 227, 134, 253, 45, 30, 131, 136, 8, 63, 41, 0, 1, 69, 240, 133, 252, 95, 25, 0, 0, 0, 63, 42, 0, 1, 149, 251, 54, 251, 199, 15, 131, 136, 8, 63, 43, 0, 1, 56, 238, 98, 4, 132, 250, 131, 136, 8, 63, 44, 0, 1, 0, 0, 0, 0, 47, 7, 0, 0, 0, 63, 45, 0, 1, 0, 0, 0, 0, 161, 7, 131, 136, 8, 63, 47, 0, 1, 0, 0, 0, 0, 113, 10, 131, 136, 8, 63, 48, 0, 1, 0, 0, 0, 0, 79, 5, 131, 136, 8, 63, 50, 0, 1, 0, 0, 0, 0, 100, 14, 0, 0, 0, 63, 51, 0, 1, 0, 0, 0, 0, 205, 1, 131, 136, 8, 63, 53, 0, 1, 0, 0, 0, 0, 201, 13, 131, 136, 8, 63, 56, 0, 1, 0, 0, 0, 0, 117, 21, 131, 136, 8, 63, 59, 0, 1, 0, 0, 0, 0, 18, 234, 176, 170, 42, 63, 60, 0, 1, 227, 0, 253, 250, 12, 10, 0, 0, 0, 63, 63, 0, 1, 0, 0, 0, 0, 61, 248, 23, 17, 17, 63, 64, 0, 1, 247, 17, 247, 253, 107, 12, 131, 136, 8, 63, 0, 0, 1, 178, 187, 203, 191, 229, 193, 23, 17, 17, 63, 1, 0, 1, 39, 192, 218, 191, 39, 192, 131, 136, 8, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 23, 17, 17, 63, 5, 0, 1, 8, 9, 191, 128, 252, 9, 131, 136, 8, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 131, 136, 8, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 131, 136, 8, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 131, 136, 8, 63, 9, 0, 1, 207, 254, 223, 254, 76, 255, 23, 17, 17, 63, 11, 0, 1, 70, 169, 226, 254, 166, 92, 131, 136, 8, 63, 13, 0, 1, 155, 23, 192, 56, 28, 205, 131, 136, 8, 63, 14, 0, 1, 0, 0, 0, 0, 46, 160, 131, 136, 8, 63, 15, 0, 1, 21, 168, 44, 19, 22, 14, 176, 170, 42, 63, 17, 0, 1, 120, 7, 194, 0, 103, 32, 29, 34, 34, 63, 18, 0, 1, 237, 254, 16, 251, 19, 42, 154, 153, 25, 63, 30, 0, 1, 0, 0, 0, 0, 253, 22, 131, 136, 8, 63, 34, 0, 1, 0, 0, 0, 0, 62, 7, 131, 136, 8, 63, 37, 0, 1, 0, 0, 0, 0, 87, 175, 131, 136, 8, 63, 38, 0, 1, 10, 80, 189, 239, 12, 253, 131, 136, 8, 63, 42, 0, 1, 155, 250, 98, 250, 36, 13, 23, 17, 17, 63, 45, 0, 1, 0, 0, 0, 0, 79, 5, 23, 17, 17, 63, 51, 0, 1, 0, 0, 0, 0, 112, 255, 131, 136, 8, 63, 63, 0, 1, 0, 0, 0, 0, 78, 248, 154, 153, 25, 63, 0, 0, 1, 36, 187, 238, 191, 170, 194, 23, 17, 17, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 23, 17, 17, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 23, 17, 17, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 23, 17, 17, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 23, 17, 17, 63, 9, 0, 1, 114, 254, 228, 254, 106, 255, 23, 17, 17, 63, 13, 0, 1, 17, 24, 45, 55, 189, 202, 23, 17, 17, 63, 14, 0, 1, 0, 0, 0, 0, 93, 158, 23, 17, 17, 63, 15, 0, 1, 184, 167, 165, 19, 56, 14, 154, 153, 25, 63, 16, 0, 1, 114, 89, 86, 15, 79, 1, 23, 17, 17, 63, 19, 0, 1, 163, 249, 109, 254, 38, 34, 23, 17, 17, 63, 28, 0, 1, 0, 0, 0, 0, 41, 7, 154, 153, 25, 63, 33, 0, 1, 0, 0, 0, 0, 6, 31, 154, 153, 25, 63, 34, 0, 1, 0, 0, 0, 0, 64, 6, 154, 153, 25, 63, 36, 0, 1, 71, 213, 157, 221, 71, 193, 23, 17, 17, 63, 37, 0, 1, 0, 0, 0, 0, 123, 172, 154, 153, 25, 63, 38, 0, 1, 21, 78, 61, 244, 252, 243, 29, 34, 34, 63, 39, 0, 1, 75, 190, 129, 228, 59, 255, 176, 170, 42, 63, 40, 0, 1, 160, 220, 104, 254, 99, 30, 29, 34, 34, 63, 41, 0, 1, 172, 236, 112, 251, 57, 21, 154, 153, 25, 63, 42, 0, 1, 15, 249, 16, 249, 233, 8, 23, 17, 17, 63, 43, 0, 1, 42, 236, 242, 2, 170, 248, 176, 170, 42, 63, 44, 0, 1, 0, 0, 0, 0, 177, 2, 23, 17, 17, 63, 47, 0, 1, 0, 0, 0, 0, 133, 9, 23, 17, 17, 63, 48, 0, 1, 0, 0, 0, 0, 2, 4, 176, 170, 42, 63, 50, 0, 1, 0, 0, 0, 0, 197, 7, 154, 153, 25, 63, 53, 0, 1, 0, 0, 0, 0, 102, 9, 23, 17, 17, 63, 56, 0, 1, 0, 0, 0, 0, 238, 17, 29, 34, 34, 63, 57, 0, 1, 0, 0, 0, 0, 52, 9, 154, 153, 25, 63, 59, 0, 1, 0, 0, 0, 0, 18, 234, 23, 17, 17, 63, 63, 0, 1, 0, 0, 0, 0, 101, 248, 139, 136, 136, 63, 1, 0, 1, 42, 192, 215, 191, 42, 192, 29, 34, 34, 63, 2, 0, 1, 238, 254, 65, 3, 62, 0, 154, 153, 25, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 154, 153, 25, 63, 5, 0, 1, 53, 9, 195, 128, 250, 9, 154, 153, 25, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 154, 153, 25, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 154, 153, 25, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 29, 34, 34, 63, 9, 0, 1, 190, 253, 209, 254, 93, 255, 51, 51, 51, 63, 10, 0, 1, 251, 88, 22, 1, 107, 90, 51, 51, 51, 63, 11, 0, 1, 26, 168, 241, 253, 80, 91, 154, 153, 25, 63, 13, 0, 1, 99, 24, 144, 53, 154, 200, 154, 153, 25, 63, 14, 0, 1, 0, 0, 0, 0, 246, 156, 154, 153, 25, 63, 15, 0, 1, 91, 167, 250, 19, 48, 14, 176, 170, 42, 63, 19, 0, 1, 39, 249, 70, 254, 77, 33, 51, 51, 51, 63, 20, 0, 1, 154, 0, 121, 19, 186, 31, 154, 153, 25, 63, 21, 0, 1, 0, 0, 0, 0, 111, 10, 182, 187, 59, 63, 22, 0, 1, 0, 0, 0, 0, 199, 5, 154, 153, 25, 63, 24, 0, 1, 0, 0, 0, 0, 141, 13, 176, 170, 42, 63, 27, 0, 1, 0, 0, 0, 0, 90, 19, 154, 153, 25, 63, 28, 0, 1, 0, 0, 0, 0, 158, 6, 29, 34, 34, 63, 37, 0, 1, 0, 0, 0, 0, 140, 167, 176, 170, 42, 63, 43, 0, 1, 138, 230, 236, 254, 147, 243, 51, 51, 51, 63, 45, 0, 1, 0, 0, 0, 0, 132, 1, 29, 34, 34, 63, 47, 0, 1, 0, 0, 0, 0, 202, 7, 154, 153, 25, 63, 48, 0, 1, 0, 0, 0, 0, 205, 2, 154, 153, 25, 63, 51, 0, 1, 0, 0, 0, 0, 114, 254, 29, 34, 34, 63, 54, 0, 1, 0, 0, 0, 0, 119, 31, 176, 170, 42, 63, 56, 0, 1, 0, 0, 0, 0, 17, 8, 154, 153, 25, 63, 63, 0, 1, 0, 0, 0, 0, 128, 248, 29, 34, 34, 63, 64, 0, 1, 217, 18, 226, 253, 157, 12, 74, 68, 68, 63, 0, 0, 1, 21, 186, 73, 192, 67, 196, 29, 34, 34, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 29, 34, 34, 63, 5, 0, 1, 97, 9, 198, 128, 248, 9, 29, 34, 34, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 29, 34, 34, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 29, 34, 34, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 29, 34, 34, 63, 13, 0, 1, 147, 24, 229, 51, 177, 198, 29, 34, 34, 63, 14, 0, 1, 0, 0, 0, 0, 246, 155, 176, 170, 42, 63, 15, 0, 1, 163, 166, 56, 20, 158, 13, 51, 51, 51, 63, 16, 0, 1, 12, 90, 116, 8, 203, 2, 205, 204, 76, 63, 21, 0, 1, 0, 0, 0, 0, 132, 4, 29, 34, 34, 63, 24, 0, 1, 0, 0, 0, 0, 225, 12, 176, 170, 42, 63, 25, 0, 1, 0, 0, 0, 0, 176, 12, 29, 34, 34, 63, 28, 0, 1, 0, 0, 0, 0, 7, 6, 182, 187, 59, 63, 30, 0, 1, 0, 0, 0, 0, 135, 16, 51, 51, 51, 63, 31, 0, 1, 0, 0, 0, 0, 217, 17, 51, 51, 51, 63, 33, 0, 1, 0, 0, 0, 0, 126, 22, 176, 170, 42, 63, 34, 0, 1, 0, 0, 0, 0, 28, 5, 176, 170, 42, 63, 36, 0, 1, 89, 214, 164, 225, 55, 186, 176, 170, 42, 63, 38, 0, 1, 217, 74, 19, 0, 238, 223, 176, 170, 42, 63, 42, 0, 1, 148, 247, 205, 247, 215, 4, 29, 34, 34, 63, 48, 0, 1, 0, 0, 0, 0, 144, 1, 51, 51, 51, 63, 51, 0, 1, 0, 0, 0, 0, 148, 251, 176, 170, 42, 63, 53, 0, 1, 0, 0, 0, 0, 44, 5, 51, 51, 51, 63, 59, 0, 1, 0, 0, 0, 0, 36, 234, 51, 51, 51, 63, 61, 0, 1, 0, 0, 0, 0, 132, 90, 176, 170, 42, 63, 63, 0, 1, 0, 0, 0, 0, 195, 248, 176, 170, 42, 63, 2, 0, 1, 239, 254, 65, 3, 111, 0, 176, 170, 42, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 176, 170, 42, 63, 5, 0, 1, 139, 9, 201, 128, 246, 9, 176, 170, 42, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 176, 170, 42, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 176, 170, 42, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 182, 187, 59, 63, 9, 0, 1, 206, 252, 115, 254, 93, 254, 176, 170, 42, 63, 13, 0, 1, 167, 24, 52, 50, 253, 196, 176, 170, 42, 63, 14, 0, 1, 0, 0, 0, 0, 73, 155, 182, 187, 59, 63, 18, 0, 1, 200, 254, 58, 250, 244, 41, 51, 51, 51, 63, 24, 0, 1, 0, 0, 0, 0, 114, 11, 51, 51, 51, 63, 28, 0, 1, 0, 0, 0, 0, 199, 4, 176, 170, 42, 63, 37, 0, 1, 0, 0, 0, 0, 96, 165, 51, 51, 51, 63, 39, 0, 1, 151, 192, 102, 230, 210, 255, 51, 51, 51, 63, 41, 0, 1, 137, 234, 203, 250, 183].concat([18, 182, 187, 59, 63, 47, 0, 1, 0, 0, 0, 0, 144, 5, 51, 51, 51, 63, 48, 0, 1, 0, 0, 0, 0, 81, 255, 176, 170, 42, 63, 54, 0, 1, 0, 0, 0, 0, 117, 31, 176, 170, 42, 63, 57, 0, 1, 0, 0, 0, 0, 247, 8, 51, 51, 51, 63, 64, 0, 1, 166, 19, 205, 253, 192, 12, 182, 187, 59, 63, 2, 0, 1, 241, 254, 66, 3, 200, 0, 51, 51, 51, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 74, 68, 68, 63, 5, 0, 1, 240, 9, 209, 128, 241, 9, 51, 51, 51, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 51, 51, 51, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 51, 51, 51, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 182, 187, 59, 63, 13, 0, 1, 149, 24, 217, 46, 43, 194, 51, 51, 51, 63, 14, 0, 1, 0, 0, 0, 0, 225, 154, 74, 68, 68, 63, 15, 0, 1, 164, 165, 236, 19, 13, 12, 182, 187, 59, 63, 17, 0, 1, 108, 7, 250, 255, 17, 33, 51, 51, 51, 63, 19, 0, 1, 250, 248, 56, 254, 255, 32, 74, 68, 68, 63, 25, 0, 1, 0, 0, 0, 0, 174, 10, 51, 51, 51, 63, 27, 0, 1, 0, 0, 0, 0, 27, 18, 182, 187, 59, 63, 34, 0, 1, 0, 0, 0, 0, 232, 3, 51, 51, 51, 63, 36, 0, 1, 6, 215, 112, 227, 52, 183, 51, 51, 51, 63, 37, 0, 1, 0, 0, 0, 0, 120, 163, 182, 187, 59, 63, 38, 0, 1, 48, 70, 125, 12, 212, 204, 51, 51, 51, 63, 40, 0, 1, 18, 219, 154, 254, 107, 30, 51, 51, 51, 63, 42, 0, 1, 237, 246, 61, 247, 5, 3, 51, 51, 51, 63, 43, 0, 1, 228, 228, 187, 253, 19, 242, 182, 187, 59, 63, 44, 0, 1, 0, 0, 0, 0, 228, 0, 51, 51, 51, 63, 50, 0, 1, 0, 0, 0, 0, 82, 6, 51, 51, 51, 63, 53, 0, 1, 0, 0, 0, 0, 73, 3, 51, 51, 51, 63, 54, 0, 1, 0, 0, 0, 0, 115, 31, 51, 51, 51, 63, 56, 0, 1, 0, 0, 0, 0, 32, 5, 51, 51, 51, 63, 57, 0, 1, 0, 0, 0, 0, 190, 8, 51, 51, 51, 63, 60, 0, 1, 73, 1, 244, 250, 8, 10, 51, 51, 51, 63, 63, 0, 1, 0, 0, 0, 0, 233, 248, 182, 187, 59, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 182, 187, 59, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 182, 187, 59, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 182, 187, 59, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 182, 187, 59, 63, 10, 0, 1, 100, 89, 163, 1, 227, 89, 74, 68, 68, 63, 11, 0, 1, 222, 167, 160, 253, 3, 91, 182, 187, 59, 63, 14, 0, 1, 0, 0, 0, 0, 178, 154, 80, 85, 85, 63, 16, 0, 1, 109, 90, 5, 255, 205, 4, 182, 187, 59, 63, 19, 0, 1, 205, 248, 42, 254, 175, 32, 182, 187, 59, 63, 20, 0, 1, 155, 0, 84, 20, 118, 32, 182, 187, 59, 63, 24, 0, 1, 0, 0, 0, 0, 182, 10, 182, 187, 59, 63, 27, 0, 1, 0, 0, 0, 0, 215, 16, 182, 187, 59, 63, 28, 0, 1, 0, 0, 0, 0, 34, 4, 74, 68, 68, 63, 31, 0, 1, 0, 0, 0, 0, 242, 15, 205, 204, 76, 63, 33, 0, 1, 0, 0, 0, 0, 135, 13, 182, 187, 59, 63, 36, 0, 1, 173, 215, 232, 228, 195, 180, 182, 187, 59, 63, 37, 0, 1, 0, 0, 0, 0, 236, 161, 182, 187, 59, 63, 39, 0, 1, 133, 193, 41, 231, 14, 0, 182, 187, 59, 63, 40, 0, 1, 200, 217, 195, 254, 113, 30, 182, 187, 59, 63, 41, 0, 1, 176, 233, 138, 250, 182, 17, 182, 187, 59, 63, 42, 0, 1, 97, 246, 198, 246, 129, 1, 182, 187, 59, 63, 43, 0, 1, 134, 227, 189, 252, 211, 240, 74, 68, 68, 63, 45, 0, 1, 0, 0, 0, 0, 79, 0, 182, 187, 59, 63, 48, 0, 1, 0, 0, 0, 0, 108, 254, 182, 187, 59, 63, 50, 0, 1, 0, 0, 0, 0, 28, 5, 74, 68, 68, 63, 51, 0, 1, 0, 0, 0, 0, 90, 250, 182, 187, 59, 63, 53, 0, 1, 0, 0, 0, 0, 182, 1, 74, 68, 68, 63, 54, 0, 1, 0, 0, 0, 0, 113, 31, 182, 187, 59, 63, 56, 0, 1, 0, 0, 0, 0, 172, 2, 182, 187, 59, 63, 57, 0, 1, 0, 0, 0, 0, 143, 8, 205, 204, 76, 63, 59, 0, 1, 0, 0, 0, 0, 83, 234, 182, 187, 59, 63, 60, 0, 1, 168, 1, 236, 250, 2, 10, 182, 187, 59, 63, 61, 0, 1, 0, 0, 255, 255, 134, 90, 182, 187, 59, 63, 63, 0, 1, 0, 0, 0, 0, 16, 249, 182, 187, 59, 63, 64, 0, 1, 4, 20, 194, 253, 204, 12, 205, 204, 76, 63, 2, 0, 1, 242, 254, 67, 3, 21, 1, 74, 68, 68, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 74, 68, 68, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 74, 68, 68, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 74, 68, 68, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 76, 63, 9, 0, 1, 77, 252, 132, 254, 192, 253, 80, 85, 85, 63, 10, 0, 1, 111, 90, 55, 3, 109, 88, 205, 204, 76, 63, 13, 0, 1, 82, 24, 160, 43, 254, 191, 205, 204, 76, 63, 14, 0, 1, 0, 0, 0, 0, 208, 154, 80, 85, 85, 63, 17, 0, 1, 90, 7, 212, 254, 10, 34, 74, 68, 68, 63, 18, 0, 1, 188, 254, 242, 249, 233, 41, 233, 238, 110, 63, 19, 0, 1, 219, 247, 224, 253, 7, 31, 227, 221, 93, 63, 20, 0, 1, 161, 0, 145, 23, 57, 35, 205, 204, 76, 63, 22, 0, 1, 0, 0, 0, 0, 0, 4, 80, 85, 85, 63, 24, 0, 1, 0, 0, 0, 0, 146, 8, 74, 68, 68, 63, 27, 0, 1, 0, 0, 0, 0, 146, 15, 74, 68, 68, 63, 28, 0, 1, 0, 0, 0, 0, 126, 3, 80, 85, 85, 63, 30, 0, 1, 0, 0, 0, 0, 161, 11, 74, 68, 68, 63, 34, 0, 1, 0, 0, 0, 0, 76, 3, 74, 68, 68, 63, 36, 0, 1, 30, 216, 226, 229, 57, 179, 74, 68, 68, 63, 37, 0, 1, 0, 0, 0, 0, 227, 160, 205, 204, 76, 63, 38, 0, 1, 55, 69, 154, 18, 209, 196, 74, 68, 68, 63, 39, 0, 1, 37, 194, 171, 231, 54, 0, 74, 68, 68, 63, 40, 0, 1, 237, 216, 223, 254, 116, 30, 74, 68, 68, 63, 41, 0, 1, 31, 233, 94, 250, 11, 17, 74, 68, 68, 63, 42, 0, 1, 4, 246, 120, 246, 127, 0, 74, 68, 68, 63, 43, 0, 1, 158, 226, 20, 252, 254, 239, 205, 204, 76, 63, 44, 0, 1, 0, 0, 0, 0, 0, 0, 205, 204, 76, 63, 47, 0, 1, 0, 0, 0, 0, 222, 4, 205, 204, 76, 63, 48, 0, 1, 0, 0, 0, 0, 115, 253, 74, 68, 68, 63, 50, 0, 1, 0, 0, 0, 0, 78, 4, 74, 68, 68, 63, 53, 0, 1, 0, 0, 0, 0, 171, 0, 74, 68, 68, 63, 56, 0, 1, 0, 0, 0, 0, 10, 1, 102, 102, 102, 63, 57, 0, 1, 0, 0, 0, 0, 75, 8, 74, 68, 68, 63, 60, 0, 1, 2, 2, 228, 250, 255, 9, 74, 68, 68, 63, 61, 0, 1, 0, 0, 0, 0, 132, 90, 74, 68, 68, 63, 63, 0, 1, 0, 0, 0, 0, 58, 249, 74, 68, 68, 63, 64, 0, 1, 91, 20, 184, 253, 213, 12, 233, 238, 110, 63, 0, 0, 1, 159, 185, 172, 192, 65, 197, 205, 204, 76, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 80, 85, 85, 63, 4, 0, 1, 73, 250, 126, 130, 143, 232, 205, 204, 76, 63, 5, 0, 1, 7, 10, 211, 128, 240, 9, 205, 204, 76, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 205, 204, 76, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 205, 204, 76, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 227, 221, 93, 63, 11, 0, 1, 34, 168, 102, 253, 60, 91, 227, 221, 93, 63, 15, 0, 1, 222, 164, 105, 19, 89, 10, 205, 204, 76, 63, 18, 0, 1, 176, 254, 171, 249, 223, 41, 102, 102, 102, 63, 25, 0, 1, 0, 0, 0, 0, 65, 8, 227, 221, 93, 63, 27, 0, 1, 0, 0, 0, 0, 4, 12, 205, 204, 76, 63, 28, 0, 1, 0, 0, 0, 0, 221, 2, 80, 85, 85, 63, 31, 0, 1, 0, 0, 0, 0, 31, 14, 233, 238, 110, 63, 34, 0, 1, 0, 0, 0, 0, 172, 0, 205, 204, 76, 63, 36, 0, 1, 98, 216, 130, 230, 81, 178, 205, 204, 76, 63, 37, 0, 1, 0, 0, 0, 0, 55, 160, 205, 204, 76, 63, 39, 0, 1, 139, 194, 254, 231, 80, 0, 205, 204, 76, 63, 40, 0, 1, 97, 216, 241, 254, 118, 30, 205, 204, 76, 63, 41, 0, 1, 196, 232, 66, 250, 158, 16, 205, 204, 76, 63, 42, 0, 1, 202, 245, 69, 246, 219, 255, 205, 204, 76, 63, 43, 0, 1, 11, 226, 168, 251, 120, 239, 80, 85, 85, 63, 45, 0, 1, 0, 0, 0, 0, 221, 255, 205, 204, 76, 63, 50, 0, 1, 0, 0, 0, 0, 203, 3, 80, 85, 85, 63, 51, 0, 1, 0, 0, 0, 0, 230, 249, 205, 204, 76, 63, 53, 0, 1, 0, 0, 0, 0, 0, 0, 80, 85, 85, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 205, 204, 76, 63, 56, 0, 1, 0, 0, 0, 0, 0, 0, 125, 119, 119, 63, 60, 0, 1, 146, 3, 193, 250, 184, 9, 205, 204, 140, 63, 61, 0, 1, 0, 0, 0, 0, 132, 90, 205, 204, 76, 63, 63, 0, 1, 0, 0, 0, 0, 96, 249, 227, 221, 93, 63, 64, 0, 1, 59, 21, 156, 253, 240, 12, 227, 221, 93, 63, 2, 0, 1, 243, 254, 67, 3, 85, 1, 80, 85, 85, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 233, 238, 110, 63, 5, 0, 1, 240, 9, 209, 128, 239, 9, 80, 85, 85, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 80, 85, 85, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 80, 85, 85, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 80, 85, 85, 63, 9, 0, 1, 22, 252, 192, 254, 144, 253, 227, 221, 93, 63, 13, 0, 1, 254, 23, 182, 40, 82, 190, 80, 85, 85, 63, 14, 0, 1, 0, 0, 0, 0, 7, 155, 102, 102, 102, 63, 18, 0, 1, 143, 254, 236, 248, 195, 41, 102, 102, 102, 63, 21, 0, 1, 0, 0, 0, 0, 219, 1, 80, 85, 85, 63, 22, 0, 1, 0, 0, 0, 0, 41, 3, 227, 221, 93, 63, 28, 0, 1, 0, 0, 0, 0, 178, 1, 227, 221, 93, 63, 33, 0, 1, 0, 0, 0, 0, 4, 8, 80, 85, 85, 63, 36, 0, 1, 117, 216, 198, 230, 254, 177, 80, 85, 85, 63, 37, 0, 1, 0, 0, 0, 0, 221, 159, 80, 85, 85, 63, 38, 0, 1, 152, 70, 64, 19, 162, 196, 233, 238, 110, 63, 39, 0, 1, 252, 194, 90, 232, 108, 0, 233, 238, 110, 63, 40, 0, 1, 200, 215, 4, 255, 120, 30, 125, 119, 119, 63, 41, 0, 1, 79, 232, 31, 250, 19, 16, 227, 221, 93, 63, 42, 0, 1, 164, 245, 37, 246, 114, 255, 80, 85, 85, 63, 43, 0, 1, 201, 225, 120, 251, 59, 239, 227, 221, 93, 63, 44, 0, 1, 0, 0, 0, 0, 199, 255, 227, 221, 93, 63, 47, 0, 1, 0, 0, 0, 0, 178, 4, 102, 102, 102, 63, 48, 0, 1, 0, 0, 0, 0, 28, 253, 0, 0, 128, 63, 50, 0, 1, 0, 0, 0, 0, 17, 3, 102, 102, 102, 63, 53, 0, 1, 0, 0, 0, 0, 104, 255, 80, 85, 85, 63, 56, 0, 1, 0, 0, 0, 0, 136, 255, 227, 221, 93, 63, 59, 0, 1, 0, 0, 0, 0, 129, 234, 233, 238, 110, 63, 63, 0, 1, 0, 0, 0, 0, 146, 249, 227, 221, 93, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 227, 221, 93, 63, 4, 0, 1, 64, 250, 126, 130, 140, 232, 227, 221, 93, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 227, 221, 93, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 227, 221, 93, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 227, 221, 93, 63, 9, 0, 1, 229, 251, 20, 255, 107, 253, 102, 102, 102, 63, 10, 0, 1, 233, 90, 25, 4, 172, 87, 233, 238, 110, 63, 14, 0, 1, 0, 0, 0, 0, 204, 155, 102, 102, 102, 63, 16, 0, 1, 110, 90, 242, 250, 169, 5, 125, 119, 119, 63, 17, 0, 1, 71, 7, 164, 253, 10, 35, 233, 238, 110, 63, 22, 0, 1, 0, 0, 0, 0, 255, 0, 227, 221, 93, 63, 24, 0, 1, 0, 0, 0, 0, 236, 7, 102, 102, 102, 63, 30, 0, 1, 0, 0, 0, 0, 200, 8, 233, 238, 110, 63, 31, 0, 1, 0, 0, 0, 0, 211, 11, 0, 0, 128, 63, 36, 0, 1, 103, 216, 56, 231, 176, 177, 233, 238, 110, 63, 37, 0, 1, 0, 0, 0, 0, 64, 159, 227, 221, 93, 63, 38, 0, 1, 131, 72, 47, 19, 140, 197, 102, 102, 102, 63, 43, 0, 1, 137, 225, 72, 251, 0, 239, 227, 221, 93, 63, 45, 0, 1, 0, 0, 0, 0, 206, 255, 102, 102, 102, 63, 51, 0, 1, 0, 0, 0, 0, 195, 249, 227, 221, 93, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 102, 102, 102, 63, 56, 0, 1, 0, 0, 0, 0, 19, 255, 233, 238, 110, 63, 2, 0, 1, 244, 254, 68, 3, 138, 1, 102, 102, 102, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 102, 102, 102, 63, 4, 0, 1, 52, 250, 126, 130, 136, 232, 102, 102, 102, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 102, 102, 102, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 102, 102, 102, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 102, 63, 9, 0, 1, 183, 251, 118, 255, 67, 253, 102, 102, 102, 63, 11, 0, 1, 64, 168, 89, 253, 87, 91, 233, 238, 110, 63, 13, 0, 1, 176, 23, 59, 38, 250, 188, 233, 238, 110, 63, 15, 0, 1, 134, 164, 67, 19, 140, 9, 102, 102, 102, 63, 20, 0, 1, 163, 0, 65, 24, 206, 35, 125, 119, 119, 63, 24, 0, 1, 0, 0, 0, 0, 91, 6, 233, 238, 110, 63, 27, 0, 1, 0, 0, 0, 0, 18, 10, 102, 102, 102, 63, 28, 0, 1, 0, 0, 0, 0, 45, 1, 102, 102, 102, 63, 33, 0, 1, 0, 0, 0, 0, 143, 5, 233, 238, 110, 63, 38, 0, 1, 252, 75, 113, 19, 220, 198, 102, 102, 102, 63, 42, 0, 1, 149, 245, 25, 246, 72, 255, 102, 102, 102, 63, 44, 0, 1, 0, 0, 0, 0, 177, 255, 125, 119, 119, 63, 45, 0, 1, 0, 0, 0, 0, 156, 255, 102, 102, 102, 63, 47, 0, 1, 0, 0, 0, 0, 161, 4, 139, 136, 136, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 233, 238, 110, 63, 59, 0, 1, 0, 0, 0, 0, 182, 234, 102, 102, 102, 63, 64, 0, 1, 121, 21, 150, 253, 254, 12, 233, 238, 110, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 125, 119, 119, 63, 4, 0, 1, 16, 250, 127, 130, 129, 232, 233, 238, 110, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 233, 238, 110, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 233, 238, 110, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 233, 238, 110, 63, 9, 0, 1, 141, 251, 227, 255, 37, 253, 125, 119, 119, 63, 10, 0, 1, 45, 91, 192, 4, 48, 87, 125, 119, 119, 63, 11, 0, 1, 126, 168, 64, 253, 144, 91, 233, 238, 110, 63, 16, 0, 1, 103, 90, 54, 249, 6, 6, 139, 136, 136, 63, 18, 0, 1, 110, 254, 46, 248, 166, 41, 0, 0, 128, 63, 20, 0, 1, 165, 0, 205, 25, 30, 37, 0, 0, 128, 63, 21, 0, 1, 0, 0, 0, 0, 0, 0, 233, 238, 110, 63, 25, 0, 1, 0, 0, 0, 0, 197, 7, 125, 119, 119, 63, 28, 0, 1, 0, 0, 0, 0, 84, 0, 125, 119, 119, 63, 30, 0, 1, 0, 0, 0, 0, 142, 6, 233, 238, 110, 63, 33, 0, 1, 0, 0, 0, 0, 95, 3, 14, 17, 145, 63, 42, 0, 1, 101, 245, 239, 245, 192, 254, 233, 238, 110, 63, 43, 0, 1, 106, 225, 49, 251, 228, 238, 0, 0, 128, 63, 44, 0, 1, 0, 0, 0, 0, 130, 255, 125, 119, 119, 63, 47, 0, 1, 0, 0, 0, 0, 134, 4, 233, 238, 110, 63, 48, 0, 1, 0, 0, 0, 0, 8, 253, 233, 238, 110, 63, 51, 0, 1, 0, 0, 0, 0, 178, 249, 125, 119, 119, 63, 53, 0, 1, 0, 0, 0, 0, 38, 255, 233, 238, 110, 63, 56, 0, 1, 0, 0, 0, 0, 219, 254, 125, 119, 119, 63, 57, 0, 1, 0, 0, 0, 0, 67, 8, 205, 204, 140, 63, 64, 0, 1, 136, 22, 136, 253, 187, 13, 125, 119, 119, 63, 0, 0, 1, 153, 185, 193, 192, 97, 197, 125, 119, 119, 63, 2, 0, 1, 244, 254, 68, 3, 160, 1, 125, 119, 119, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 125, 119, 119, 63, 5, 0, 1, 203, 9, 206, 128, 240, 9, 125, 119, 119, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 125, 119, 119, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 125, 119, 119, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 65, 68, 132, 63, 9, 0, 1, 32, 251, 37, 1, 31, 253, 0, 0, 128, 63, 13, 0, 1, 124, 23, 82, 36, 198, 187, 0, 0, 128, 63, 14, 0, 1, 0, 0, 0, 0, 249, 155, 125, 119, 119, 63, 15, 0, 1, 102, 164, 71, 19, 80, 9, 0, 0, 128, 63, 16, 0, 1, 84, 90, 140, 246, 149, 6, 139, 136, 136, 63, 19, 0, 1, 132, 247, 197, 253, 111, 30, 125, 119, 119, 63, 22, 0, 1, 0, 0, 0, 0, 117, 0, 0, 0, 128, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 65, 68, 132, 63, 27, 0, 1, 0, 0, 0, 0, 15, 8, 65, 68, 132, 63, 31, 0, 1, 0, 0, 0, 0, 81, 10, 125, 119, 119, 63, 33, 0, 1, 0, 0, 0, 0, 140, 1, 125, 119, 119, 63, 34, 0, 1, 0, 0, 0, 0, 79, 0, 125, 119, 119, 63, 37, 0, 1, 0, 0, 0, 0, 21, 159, 0, 0, 128, 63, 38, 0, 1, 131, 79, 108, 19, 164, 200, 65, 68, 132, 63, 39, 0, 1, 40, 195, 126, 232, 119, 0, 125, 119, 119, 63, 40, 0, 1, 176, 215, 7, 255, 120, 30, 14, 17, 145, 63, 43, 0, 1, 15, 225, 239, 250, 145, 238, 0, 0, 128, 63, 48, 0, 1, 0, 0, 0, 0, 233, 252, 125, 119, 119, 63, 51, 0, 1, 0, 0, 0, 0, 164, 249, 14, 17, 145, 63, 56, 0, 1, 0, 0, 0, 0, 54, 254, 0, 0, 128, 63, 59, 0, 1, 0, 0, 0, 0, 238, 234, 205, 204, 140, 63, 63, 0, 1, 0, 0, 0, 0, 189, 248, 139, 136, 136, 63, 0, 0, 1, 164, 185, 0, 193, 165, 197, 0, 0, 128, 63, 2, 0, 1, 244, 254, 68, 3, 180, 1, 0, 0, 128, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 0, 0, 128, 63, 4, 0, 1, 250, 249, 127, 130, 125, 232, 0, 0, 128, 63, 5, 0, 1, 156, 9, 202, 128, 240, 9, 0, 0, 128, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 0, 0, 128, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 0, 0, 128, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 128, 63, 10, 0, 1, 44, 91, 249, 4, 32, 87, 0, 0, 128, 63, 11, 0, 1, 157, 168, 52, 253, 172, 91, 0, 0, 128, 63, 15, 0, 1, 90, 164, 127, 19, 75, 9, 139, 136, 136, 63, 17, 0, 1, 62, 7, 32, 253, 121, 35, 139, 136, 136, 63, 22, 0, 1, 0, 0, 0, 0, 71, 255, 0, 0, 128, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 139, 136, 136, 63, 28, 0, 1, 0, 0, 0, 0, 124, 255, 65, 68, 132, 63, 30, 0, 1, 0, 0, 0, 0, 232, 4, 65, 68, 132, 63, 33, 0, 1, 0, 0, 0, 0, 147, 254, 139, 136, 136, 63, 34, 0, 1, 0, 0, 0, 0, 131, 255, 205, 204, 140, 63, 37, 0, 1, 0, 0, 0, 0, 155, 158, 65, 68, 132, 63, 40, 0, 1, 140, 215, 11, 255, 121, 30, 65, 68, 132, 63, 41, 0, 1, 56, 232, 24, 250, 247, 15, 0, 0, 128, 63, 45, 0, 1, 0, 0, 0, 0, 144, 255, 65, 68, 132, 63, 47, 0, 1, 0, 0, 0, 0, 117, 4, 88, 85, 149, 63, 51, 0, 1, 0, 0, 0, 0, 127, 249, 0, 0, 128, 63, 53, 0, 1, 0, 0, 0, 0, 14, 255, 139, 136, 136, 63, 57, 0, 1, 0, 0, 0, 0, 60, 8, 0, 0, 128, 63, 60, 0, 1, 192, 3, 189, 250, 167, 9, 139, 136, 136, 63, 2, 0, 1, 244, 254, 68, 3, 213, 1, 65, 68, 132, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 65, 68, 132, 63, 4, 0, 1, 225, 249, 128, 130, 121, 232, 139, 136, 136, 63, 5, 0, 1, 34, 9, 193, 128, 242, 9, 65, 68, 132, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 65, 68, 132, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 65, 68, 132, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 65, 68, 132, 63, 10, 0, 1, 250, 90, 33, 5, 77, 87, 65, 68, 132, 63, 11, 0, 1, 188, 168, 42, 253, 201, 91, 65, 68, 132, 63, 13, 0, 1, 72, 23, 117, 35, 7, 187, 139, 136, 136, 63, 14, 0, 1, 0, 0, 0, 0, 57, 156, 65, 68, 132, 63, 15, 0, 1, 114, 164, 30, 20, 163, 9, 65, 68, 132, 63, 16, 0, 1, 72, 90, 107, 245, 209, 6, 139, 136, 136, 63, 20, 0, 1, 167, 0, 122, 26, 176, 37, 139, 136, 136, 63, 21, 0, 1, 0, 0, 0, 0, 48, 255, 139, 136, 136, 63, 24, 0, 1, 0, 0, 0, 0, 99, 5, 139, 136, 136, 63, 25, 0, 1, 0, 0, 0, 0, 123, 6, 88, 85, 149, 63, 36, 0, 1, 45, 216, 32, 231, 250, 177, 205, 204, 140, 63, 38, 0, 1, 161, 84, 246, 18, 230, 203, 65, 68, 132, 63, 44, 0, 1, 0, 0, 0, 0, 120, 255, 65, 68, 132, 63, 45, 0, 1, 0, 0, 0, 0, 136, 255, 65, 68, 132, 63, 48, 0, 1, 0, 0, 0, 0, 222, 252, 139, 136, 136, 63, 50, 0, 1, 0, 0, 0, 0, 247, 2, 65, 68, 132, 63, 53, 0, 1, 0, 0, 0, 0, 251, 254, 65, 68, 132, 63, 59, 0, 1, 0, 0, 0, 0, 12, 235, 205, 204, 140, 63, 60, 0, 1, 49, 4, 180, 250, 108, 9, 139, 136, 136, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 88, 85, 149, 63, 4, 0, 1, 106, 249, 131, 130, 105, 232, 139, 136, 136, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 139, 136, 136, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 139, 136, 136, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 139, 136, 136, 63, 9, 0, 1, 5, 251, 127, 1, 106, 253, 139, 136, 136, 63, 10, 0, 1, 156, 90, 49, 5, 176, 87, 139, 136, 136, 63, 11, 0, 1, 219, 168, 32, 253, 229, 91, 139, 136, 136, 63, 13, 0, 1, 255, 22, 211, 34, 85, 186, 139, 136, 136, 63, 15, 0, 1, 170, 164, 250, 20, 61, 10, 139, 136, 136, 63, 16, 0, 1, 63, 90, 158, 244, 252, 6, 139, 136, 136, 63, 27, 0, 1, 0, 0, 0, 0, 162, 7, 139, 136, 136, 63, 30, 0, 1, 0, 0, 0, 0, 87, 4, 139, 136, 136, 63, 31, 0, 1, 0, 0, 0, 0, 255, 9, 139, 136, 136, 63, 33, 0, 1, 0, 0, 0, 0, 143, 253, 88, 85, 213, 63, 39, 0, 1, 49, 195, 133, 232, 122, 0, 139, 136, 136, 63, 40, 0, 1, 128, 215, 13, 255, 121, 30, 37, 34, 162, 63, 41, 0, 1, 36, 232, 18, 250, 223, 15, 139, 136, 136, 63, 44, 0, 1, 0, 0, 0, 0, 113, 255, 205, 204, 140, 63, 45, 0, 1, 0, 0, 0, 0, 124, 255, 139, 136, 136, 63, 47, 0, 1, 0, 0, 0, 0, 111, 4, 139, 136, 136, 63, 48, 0, 1, 0, 0, 0, 0, 214, 252, 139, 136, 136, 63, 53, 0, 1, 0, 0, 0, 0, 236, 254, 205, 204, 140, 63, 59, 0, 1, 0, 0, 0, 0, 72, 235, 205, 204, 140, 63, 0, 0, 1, 176, 185, 21, 193, 178, 197, 205, 204, 140, 63, 1, 0, 1, 42, 192, 215, 191, 42, 192, 205, 204, 140, 63, 2, 0, 1, 244, 254, 69, 3, 226, 1, 205, 204, 140, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 205, 204, 140, 63, 5, 0, 1, 220, 8, 187, 128, 243, 9, 205, 204, 140, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 205, 204, 140, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 205, 204, 140, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 88, 85, 149, 63, 9, 0, 1, 239, 250, 40, 2, 90, 0, 14, 17, 145, 63, 10, 0, 1, 110, 89, 239, 4, 11, 89, 205, 204, 140, 63, 11, 0, 1, 250, 168, 23, 253, 2, 92, 205, 204, 140, 63, 13, 0, 1, 154, 22, 165, 34, 226, 185, 88, 85, 149, 63, 14, 0, 1, 0, 0, 0, 0, 102, 157, 88, 85, 149, 63, 15, 0, 1, 249, 165, 30, 24, 252, 12, 205, 204, 140, 63, 16, 0, 1, 60, 90, 107, 244, 7, 7, 205, 204, 140, 63, 17, 0, 1, 62, 7, 24, 253, 128, 35, 88, 85, 149, 63, 18, 0, 1, 112, 254, 53, 248, 167, 41, 37, 34, 162, 63, 19, 0, 1, 158, 247, 205, 253, 157, 30, 14, 17, 145, 63, 20, 0, 1, 167, 0, 128, 26, 181, 37, 88, 85, 149, 63, 21, 0, 1, 0, 0, 0, 0, 74, 255, 88, 85, 149, 63, 22, 0, 1, 0, 0, 0, 0, 95, 255, 88, 85, 149, 63, 24, 0, 1, 0, 0, 0, 0, 119, 5, 154, 153, 153, 63, 25, 0, 1, 0, 0, 0, 0, 171, 6, 14, 17, 145, 63, 27, 0, 1, 0, 0, 0, 0, 153, 7, 154, 153, 153, 63, 28, 0, 1, 0, 0, 0, 0, 169, 255, 205, 204, 140, 63, 30, 0, 1, 0, 0, 0, 0, 51, 4, 88, 85, 149, 63, 31, 0, 1, 0, 0, 0, 0, 24, 10, 205, 204, 140, 63, 33, 0, 1, 0, 0, 0, 0, 78, 253, 154, 153, 153, 63, 34, 0, 1, 0, 0, 0, 0, 174, 255, 242, 238, 174, 63, 40, 0, 1, 114, 215, 15, 255, 121, 30, 205, 204, 140, 63, 44, 0, 1, 0, 0, 0, 0, 107, 255, 205, 204, 140, 63, 47, 0, 1, 0, 0, 0, 0, 107, 4, 205, 204, 140, 63, 48, 0, 1, 0, 0, 0, 0, 208, 252, 205, 204, 140, 63, 50, 0, 1, 0, 0, 0, 0, 239, 2, 205, 204, 140, 63, 53, 0, 1, 0, 0, 0, 0, 226, 254, 14, 17, 145, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 205, 204, 140, 63, 57, 0, 1, 0, 0, 0, 0, 59, 8, 14, 17, 145, 63, 0, 0, 1, 190, 185, 42, 193, 189, 197, 14, 17, 145, 63, 1, 0, 1, 42, 192, 215, 191, 42, 192, 14, 17, 145, 63, 2, 0, 1, 244, 254, 69, 3, 238, 1, 14, 17, 145, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 14, 17, 145, 63, 5, 0, 1, 144, 8, 182, 128, 243, 9, 14, 17, 145, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 14, 17, 145, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 14, 17, 145, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 14, 17, 145, 63, 11, 0, 1, 25, 169, 14, 253, 31, 92, 88, 85, 149, 63, 13, 0, 1, 206, 21, 238, 34, 102, 185, 88, 85, 149, 63, 16, 0, 1, 66, 90, 222, 244, 239, 6, 14, 17, 145, 63, 17, 0, 1, 62, 7, 29, 253, 124, 35, 219, 221, 157, 63, 30, 0, 1, 0, 0, 0, 0, 20, 5, 88, 85, 149, 63, 33, 0, 1, 0, 0, 0, 0, 223, 253, 154, 153, 153, 63, 37, 0, 1, 0, 0, 0, 0, 103, 158, 154, 153, 153, 63, 38, 0, 1, 56, 89, 39, 18, 114, 207, 88, 85, 149, 63, 44, 0, 1, 0, 0, 0, 0, 101, 255, 14, 17, 145, 63, 45, 0, 1, 0, 0, 0, 0, 121, 255, 219, 221, 157, 63, 47, 0, 1, 0, 0, 0, 0, 102, 4, 154, 153, 153, 63, 48, 0, 1, 0, 0, 0, 0, 200, 252, 88, 85, 149, 63, 50, 0, 1, 0, 0, 0, 0, 230, 2, 88, 85, 149, 63, 53, 0, 1, 0, 0, 0, 0, 215, 254, 14, 17, 145, 63, 57, 0, 1, 0, 0, 0, 0, 58, 8, 154, 153, 153, 63, 59, 0, 1, 0, 0, 0, 0, 163, 235, 14, 17, 145, 63, 60, 0, 1, 78, 4, 179, 250, 87, 9, 14, 17, 145, 63, 61, 0, 1, 0, 0, 255, 255, 134, 90, 88, 85, 149, 63, 63, 0, 1, 0, 0, 0, 0, 55, 248, 154, 153, 153, 63, 64, 0, 1, 218, 22, 142, 253, 56, 14, 88, 85, 149, 63, 0, 0, 1, 208, 185, 63, 193, 196, 197, 88, 85, 149, 63, 1, 0, 1, 42, 192, 215, 191, 42, 192, 37, 34, 162, 63, 2, 0, 1, 244, 254, 69, 3, 13, 2, 88, 85, 149, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 88, 85, 149, 63, 5, 0, 1, 63, 8, 176, 128, 244, 9, 88, 85, 149, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 88, 85, 149, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 88, 85, 149, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 88, 85, 149, 63, 10, 0, 1, 204, 88, 187, 4, 198, 89, 88, 85, 149, 63, 11, 0, 1, 56, 169, 6, 253, 59, 92, 88, 85, 149, 63, 17, 0, 1, 63, 7, 42, 253, 113, 35, 219, 221, 157, 63, 20, 0, 1, 166, 0, 28, 26, 96, 37, 219, 221, 157, 63, 27, 0, 1, 0, 0, 0, 0, 48, 8, 37, 34, 162, 63, 42, 0, 1, 99, 245, 238, 245, 187, 254, 88, 85, 149, 63, 43, 0, 1, 12, 225, 237, 250, 141, 238, 88, 85, 149, 63, 45, 0, 1, 0, 0, 0, 0, 119, 255, 88, 85, 149, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 88, 85, 149, 63, 56, 0, 1, 0, 0, 0, 0, 48, 254, 219, 221, 157, 63, 57, 0, 1, 0, 0, 0, 0, 58, 8, 154, 153, 153, 63, 60, 0, 1, 126, 4, 177, 250, 53, 9, 88, 85, 149, 63, 61, 0, 1, 0, 0, 0, 0, 132, 90, 219, 221, 157, 63, 0, 0, 1, 249, 185, 104, 193, 201, 197, 102, 102, 166, 63, 1, 0, 1, 43, 192, 214, 191, 43, 192, 154, 153, 153, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 37, 34, 162, 63, 4, 0, 1, 8, 249, 133, 130, 94, 232, 37, 34, 162, 63, 5, 0, 1, 64, 7, 160, 128, 246, 9, 154, 153, 153, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 154, 153, 153, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 154, 153, 153, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 154, 153, 153, 63, 9, 0, 1, 237, 250, 51, 2, 230, 0, 219, 221, 157, 63, 10, 0, 1, 182, 87, 81, 4, 1, 91, 219, 221, 157, 63, 11, 0, 1, 117, 169, 247, 252, 116, 92, 37, 34, 162, 63, 13, 0, 1, 30, 21, 191, 35, 83, 185, 219, 221, 157, 63, 14, 0, 1, 0, 0, 0, 0, 23, 158, 154, 153, 153, 63, 15, 0, 1, 102, 166, 247, 24, 212, 13, 154, 153, 153, 63, 16, 0, 1, 71, 90, 71, 245, 217, 6, 154, 153, 153, 63, 17, 0, 1, 64, 7, 60, 253, 98, 35, 219, 221, 157, 63, 18, 0, 1, 116, 254, 77, 248, 171, 41, 154, 153, 153, 63, 21, 0, 1, 0, 0, 0, 0, 119, 255, 154, 153, 153, 63, 22, 0, 1, 0, 0, 0, 0, 135, 255, 242, 238, 174, 63, 24, 0, 1, 0, 0, 0, 0, 247, 5, 154, 153, 153, 63, 31, 0, 1, 0, 0, 0, 0, 67, 10, 154, 153, 153, 63, 33, 0, 1, 0, 0, 0, 0, 101, 254, 219, 221, 157, 63, 36, 0, 1, 14, 216, 252, 230, 53, 178, 219, 221, 157, 63, 43, 0, 1, 10, 225, 235, 250, 140, 238, 154, 153, 153, 63, 44, 0, 1, 0, 0, 0, 0, 100, 255, 154, 153, 153, 63, 45, 0, 1, 0, 0, 0, 0, 118, 255, 154, 153, 153, 63, 50, 0, 1, 0, 0, 0, 0, 229, 2, 154, 153, 153, 63, 51, 0, 1, 0, 0, 0, 0, 126, 249, 154, 153, 153, 63, 53, 0, 1, 0, 0, 0, 0, 213, 254, 102, 102, 166, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 154, 153, 153, 63, 56, 0, 1, 0, 0, 0, 0, 45, 254, 51, 51, 179, 63, 61, 0, 1, 0, 0, 1, 0, 126, 90, 219, 221, 157, 63, 63, 0, 1, 0, 0, 0, 0, 165, 247, 219, 221, 157, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 219, 221, 157, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 219, 221, 157, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 219, 221, 157, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 219, 221, 157, 63, 9, 0, 1, 223, 250, 34, 2, 152, 0, 219, 221, 157, 63, 15, 0, 1, 186, 166, 147, 25, 125, 14, 102, 102, 166, 63, 16, 0, 1, 81, 90, 65, 246, 165, 6, 219, 221, 157, 63, 17, 0, 1, 65, 7, 76, 253, 84, 35, 37, 34, 162, 63, 21, 0, 1, 0, 0, 0, 0, 198, 255, 219, 221, 157, 63, 22, 0, 1, 0, 0, 0, 0, 172, 255, 219, 221, 157, 63, 25, 0, 1, 0, 0, 0, 0, 198, 6, 219, 221, 157, 63, 28, 0, 1, 0, 0, 0, 0, 196, 255, 219, 221, 157, 63, 31, 0, 1, 0, 0, 0, 0, 106, 10, 219, 221, 157, 63, 33, 0, 1, 0, 0, 0, 0, 227, 254, 219, 221, 157, 63, 34, 0, 1, 0, 0, 0, 0, 199, 255, 37, 34, 162, 63, 37, 0, 1, 0, 0, 0, 0, 80, 158, 37, 34, 162, 63, 38, 0, 1, 214, 91, 129, 17, 184, 209, 219, 221, 157, 63, 44, 0, 1, 0, 0, 0, 0, 100, 255, 219, 221, 157, 63, 45, 0, 1, 0, 0, 0, 0, 118, 255, 37, 34, 162, 63, 48, 0, 1, 0, 0, 0, 0, 201, 252, 219, 221, 157, 63, 50, 0, 1, 0, 0, 0, 0, 229, 2, 219, 221, 157, 63, 51, 0, 1, 0, 0, 0, 0, 126, 249, 219, 221, 157, 63, 53, 0, 1, 0, 0, 0, 0, 213, 254, 37, 34, 162, 63, 56, 0, 1, 0, 0, 0, 0, 47, 254, 219, 221, 157, 63, 59, 0, 1, 0, 0, 0, 0, 194, 235, 219, 221, 157, 63, 60, 0, 1, 146, 4, 177, 250, 35, 9, 37, 34, 162, 63, 64, 0, 1, 3, 23, 153, 253, 129, 14, 0, 0, 192, 63, 65, 0, 1, 3, 0, 252, 255, 132, 90, 37, 34, 162, 63, 0, 0, 1, 17, 186, 124, 193, 201, 197, 37, 34, 162, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 37, 34, 162, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 37, 34, 162, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 37, 34, 162, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 168, 170, 170, 63, 9, 0, 1, 169, 250, 180, 1, 62, 254, 102, 102, 166, 63, 10, 0, 1, 9, 87, 9, 4, 192, 91, 37, 34, 162, 63, 11, 0, 1, 148, 169, 239, 252, 145, 92, 102, 102, 166, 63, 14, 0, 1, 0, 0, 0, 0, 119, 158, 37, 34, 162, 63, 15, 0, 1, 248, 166, 252, 25, 253, 14, 37, 34, 162, 63, 17, 0, 1, 66, 7, 90, 253, 72, 35, 37, 34, 162, 63, 18, 0, 1, 118, 254, 88, 248, 172, 41, 51, 51, 179, 63, 20, 0, 1, 165, 0, 206, 25, 30, 37, 102, 102, 166, 63, 22, 0, 1, 0, 0, 0, 0, 228, 255, 117, 119, 183, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 37, 34, 162, 63, 27, 0, 1, 0, 0, 0, 0, 95, 8, 37, 34, 162, 63, 28, 0, 1, 0, 0, 0, 0, 219, 255, 168, 170, 170, 63, 30, 0, 1, 0, 0, 0, 0, 156, 5, 37, 34, 162, 63, 31, 0, 1, 0, 0, 0, 0, 141, 10, 102, 102, 166, 63, 33, 0, 1, 0, 0, 0, 0, 161, 255, 37, 34, 162, 63, 34, 0, 1, 0, 0, 0, 0, 221, 255, 168, 170, 170, 63, 36, 0, 1, 221, 215, 185, 230, 151, 178, 37, 34, 162, 63, 43, 0, 1, 11, 225, 236, 250, 141, 238, 37, 34, 162, 63, 44, 0, 1, 0, 0, 0, 0, 101, 255, 37, 34, 162, 63, 45, 0, 1, 0, 0, 0, 0, 119, 255, 51, 51, 179, 63, 47, 0, 1, 0, 0, 0, 0, 104, 4, 37, 34, 162, 63, 50, 0, 1, 0, 0, 0, 0, 230, 2, 37, 34, 162, 63, 51, 0, 1, 0, 0, 0, 0, 127, 249, 168, 170, 170, 63, 53, 0, 1, 0, 0, 0, 0, 218, 254, 242, 238, 174, 63, 57, 0, 1, 0, 0, 0, 0, 58, 8, 242, 238, 174, 63, 59, 0, 1, 0, 0, 0, 0, 49, 236, 37, 34, 162, 63, 60, 0, 1, 162, 4, 177, 250, 15, 9, 37, 34, 162, 63, 63, 0, 1, 0, 0, 0, 0, 91, 247, 242, 238, 174, 63, 0, 0, 1, 91, 186, 182, 193, 190, 197, 102, 102, 166, 63, 2, 0, 1, 243, 254, 69, 3, 18, 2, 102, 102, 166, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 242, 238, 174, 63, 4, 0, 1, 164, 248, 136, 130, 84, 232, 242, 238, 174, 63, 5, 0, 1, 63, 6, 145, 128, 248, 9, 102, 102, 166, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 102, 102, 166, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 102, 102, 166, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 179, 63, 11, 0, 1, 13, 170, 211, 252, 0, 93, 242, 238, 174, 63, 13, 0, 1, 21, 21, 18, 36, 124, 185, 168, 170, 170, 63, 15, 0, 1, 41, 167, 57, 26, 121, 15, 168, 170, 170, 63, 17, 0, 1, 67, 7, 108, 253, 58, 35, 168, 170, 170, 63, 18, 0, 1, 120, 254, 100, 248, 174, 41, 117, 119, 183, 63, 19, 0, 1, 169, 247, 208, 253, 175, 30, 51, 51, 179, 63, 21, 0, 1, 0, 0, 0, 0, 255, 255, 191, 187, 187, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 186, 187, 59, 64, 28, 0, 1, 0, 0, 0, 0, 8, 0, 102, 102, 166, 63, 31, 0, 1, 0, 0, 0, 0, 166, 10, 121, 119, 55, 64, 34, 0, 1, 0, 0, 0, 0, 248, 255, 168, 170, 170, 63, 37, 0, 1, 0, 0, 0, 0, 60, 158, 168, 170, 170, 63, 38, 0, 1, 4, 94, 216, 16, 187, 211, 168, 170, 170, 63, 41, 0, 1, 38, 232, 19, 250, 226, 15, 51, 51, 179, 63, 42, 0, 1, 101, 245, 240, 245, 192, 254, 102, 102, 166, 63, 43, 0, 1, 13, 225, 237, 250, 142, 238, 102, 102, 166, 63, 44, 0, 1, 0, 0, 0, 0, 102, 255, 102, 102, 166, 63, 45, 0, 1, 0, 0, 0, 0, 119, 255, 102, 102, 166, 63, 48, 0, 1, 0, 0, 0, 0, 202, 252, 102, 102, 166, 63, 50, 0, 1, 0, 0, 0, 0, 231, 2, 242, 238, 174, 63, 51, 0, 1, 0, 0, 0, 0, 129, 249, 102, 102, 166, 63, 56, 0, 1, 0, 0, 0, 0, 50, 254, 168, 170, 170, 63, 60, 0, 1, 189, 4, 181, 250, 235, 8, 102, 102, 166, 63, 63, 0, 1, 0, 0, 0, 0, 16, 247, 102, 102, 166, 63, 64, 0, 1, 20, 23, 159, 253, 167, 14, 242, 238, 174, 63, 1, 0, 1, 43, 192, 214, 191, 43, 192, 242, 238, 174, 63, 2, 0, 1, 243, 254, 69, 3, 25, 2, 168, 170, 170, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 168, 170, 170, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 168, 170, 170, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 168, 170, 170, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 242, 238, 174, 63, 10, 0, 1, 193, 86, 235, 3, 15, 92, 0, 0, 192, 63, 14, 0, 1, 0, 0, 0, 0, 123, 158, 117, 119, 183, 63, 16, 0, 1, 84, 90, 141, 246, 149, 6, 119, 119, 199, 64, 22, 0, 1, 0, 0, 0, 0, 235, 255, 168, 170, 170, 63, 31, 0, 1, 0, 0, 0, 0, 183, 10, 242, 238, 174, 63, 33, 0, 1, 0, 0, 0, 0, 242, 255, 242, 238, 174, 63, 43, 0, 1, 16, 225, 239, 250, 145, 238, 168, 170, 170, 63, 44, 0, 1, 0, 0, 0, 0, 103, 255, 168, 170, 170, 63, 45, 0, 1, 0, 0, 0, 0, 120, 255, 242, 238, 174, 63, 48, 0, 1, 0, 0, 0, 0, 204, 252, 168, 170, 170, 63, 50, 0, 1, 0, 0, 0, 0, 233, 2, 168, 170, 170, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 168, 170, 170, 63, 56, 0, 1, 0, 0, 0, 0, 53, 254, 242, 238, 174, 63, 63, 0, 1, 0, 0, 0, 0, 126, 246, 168, 170, 170, 63, 64, 0, 1, 35, 23, 165, 253, 205, 14, 242, 238, 174, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 242, 238, 174, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 242, 238, 174, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 242, 238, 174, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 179, 63, 9, 0, 1, 130, 250, 89, 1, 88, 252, 191, 187, 187, 63, 15, 0, 1, 24, 167, 244, 25, 132, 15, 117, 119, 183, 63, 17, 0, 1, 67, 7, 113, 253, 53, 35, 51, 51, 179, 63, 18, 0, 1, 120, 254, 104, 248, 175, 41, 65, 68, 196, 63, 30, 0, 1, 0, 0, 0, 0, 178, 5, 51, 51, 179, 63, 31, 0, 1, 0, 0, 0, 0, 195, 10, 51, 51, 179, 63, 36, 0, 1, 190, 215, 138, 230, 215, 178, 242, 238, 174, 63, 37, 0, 1, 0, 0, 0, 0, 49, 158, 51, 51, 179, 63, 38, 0, 1, 178, 95, 58, 16, 82, 213, 51, 51, 179, 63, 41, 0, 1, 39, 232, 19, 250, 227, 15, 51, 51, 179, 63, 44, 0, 1, 0, 0, 0, 0, 104, 255, 242, 238, 174, 63, 45, 0, 1, 0, 0, 0, 0, 121, 255, 242, 238, 174, 63, 50, 0, 1, 0, 0, 0, 0, 234, 2, 242, 238, 174, 63, 53, 0, 1, 0, 0, 0, 0, 219, 254, 51, 51, 179, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 242, 238, 174, 63, 56, 0, 1, 0, 0, 0, 0, 55, 254, 191, 187, 187, 63, 60, 0, 1, 226, 4, 196, 250, 176, 8, 242, 238, 174, 63, 64, 0, 1, 49, 23, 172, 253, 240, 14, 191, 187, 187, 63, 0, 0, 1, 162, 186, 234, 193, 174, 197, 51, 51, 179, 63, 1, 0, 1, 43, 192, 214, 191, 43, 192, 51, 51, 179, 63, 2, 0, 1, 242, 254, 69, 3, 27, 2, 51, 51, 179, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 51, 51, 179, 63, 4, 0, 1, 132, 248, 137, 130, 81, 232, 65, 68, 196, 63, 5, 0, 1, 206, 4, 127, 128, 248, 9, 51, 51, 179, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 51, 51, 179, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 51, 51, 179, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 191, 187, 187, 63, 10, 0, 1, 176, 86, 229, 3, 33, 92, 51, 51, 179, 63, 13, 0, 1, 33, 21, 21, 36, 136, 185, 117, 119, 183, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 102, 102, 198, 64, 33, 0, 1, 0, 0, 0, 0, 0, 0, 51, 51, 179, 63, 37, 0, 1, 0, 0, 0, 0, 39, 158, 88, 85, 213, 63, 40, 0, 1, 128, 215, 13, 255, 121, 30, 51, 51, 179, 63, 43, 0, 1, 16, 225, 240, 250, 145, 238, 117, 119, 183, 63, 45, 0, 1, 0, 0, 0, 0, 121, 255, 51, 51, 179, 63, 48, 0, 1, 0, 0, 0, 0, 204, 252, 51, 51, 179, 63, 50, 0, 1, 0, 0, 0, 0, 234, 2, 191, 187, 187, 63, 51, 0, 1, 0, 0, 0, 0, 128, 249, 51, 51, 179, 63, 53, 0, 1, 0, 0, 0, 0, 219, 254, 51, 51, 179, 63, 56, 0, 1, 0, 0, 0, 0, 55, 254, 117, 119, 183, 63, 57, 0, 1, 0, 0, 0, 0, 58, 8, 51, 51, 179, 63, 59, 0, 1, 0, 0, 0, 0, 74, 236, 51, 51, 179, 63, 63, 0, 1, 0, 0, 0, 0, 56, 246, 51, 51, 179, 63, 64, 0, 1, 61, 23, 180, 253, 18, 15, 88, 85, 213, 63, 1, 0, 1, 45, 192, 212, 191, 45, 192, 117, 119, 183, 63, 2, 0, 1, 242, 254, 69, 3, 29, 2, 117, 119, 183, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 0, 0, 192, 63, 4, 0, 1, 45, 248, 140, 130, 74, 232, 117, 119, 183, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 117, 119, 183, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 117, 119, 183, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 191, 187, 187, 63, 9, 0, 1, 94, 250, 3, 1, 158, 250, 117, 119, 183, 63, 11, 0, 1, 42, 170, 203, 252, 27, 93, 0, 0, 192, 63, 13, 0, 1, 83, 21, 12, 36, 170, 185, 139, 136, 200, 63, 18, 0, 1, 120, 254, 104, 248, 175, 41, 139, 136, 200, 63, 20, 0, 1, 165, 0, 205, 25, 30, 37, 119, 119, 199, 64, 21, 0, 1, 0, 0, 0, 0, 232, 255, 117, 119, 183, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 0, 0, 192, 63, 36, 0, 1, 148, 215, 69, 230, 46, 179, 191, 187, 187, 63, 37, 0, 1, 0, 0, 0, 0, 15, 158, 191, 187, 187, 63, 38, 0, 1, 217, 96, 178, 15, 97, 214, 191, 187, 187, 63, 41, 0, 1, 37, 232, 19, 250, 225, 15, 65, 68, 196, 63, 42, 0, 1, 101, 245, 239, 245, 191, 254, 102, 102, 230, 63, 43, 0, 1, 57, 225, 14, 251, 183, 238, 191, 187, 187, 63, 44, 0, 1, 0, 0, 0, 0, 102, 255, 65, 68, 196, 63, 47, 0, 1, 0, 0, 0, 0, 104, 4, 117, 119, 183, 63, 48, 0, 1, 0, 0, 0, 0, 203, 252, 191, 187, 187, 63, 50, 0, 1, 0, 0, 0, 0, 232, 2, 117, 119, 183, 63, 53, 0, 1, 0, 0, 0, 0, 218, 254, 191, 187, 187, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 117, 119, 183, 63, 56, 0, 1, 0, 0, 0, 0, 53, 254, 65, 68, 196, 63, 59, 0, 1, 0, 0, 0, 0, 155, 236, 117, 119, 183, 63, 61, 0, 1, 0, 0, 1, 0, 127, 90, 0, 0, 192, 63, 63, 0, 1, 0, 0, 0, 0, 123, 245, 191, 187, 187, 63, 64, 0, 1, 83, 23, 196, 253, 80, 15, 0, 0, 192, 63, 2, 0, 1, 242, 254, 69, 3, 32, 2, 191, 187, 187, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 191, 187, 187, 63, 6, 0, 1, 226, 1, 74, 1, 75, 1, 191, 187, 187, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 191, 187, 187, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 191, 187, 187, 63, 11, 0, 1, 72, 170, 196, 252, 54, 93, 154, 153, 217, 63, 16, 0, 1, 84, 90, 140, 246, 149, 6, 191, 187, 187, 63, 17, 0, 1, 67, 7, 113, 253, 53, 35, 0, 0, 192, 63, 19, 0, 1, 169, 247, 208, 253, 175, 30, 191, 187, 187, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 191, 187, 187, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 0, 0, 192, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 191, 187, 187, 63, 45, 0, 1, 0, 0, 0, 0, 120, 255, 191, 187, 187, 63, 48, 0, 1, 0, 0, 0, 0, 202, 252, 191, 187, 187, 63, 53, 0, 1, 0, 0, 0, 0, 217, 254, 191, 187, 187, 63, 56, 0, 1, 0, 0, 0, 0, 51, 254, 0, 0, 192, 63, 57, 0, 1, 0, 0, 0, 0, 58, 8, 0, 0, 192, 63, 61, 0, 1, 0, 0, 0, 0, 132, 90, 139, 136, 200, 63, 0, 0, 1, 221, 186, 24, 194, 160, 197, 0, 0, 192, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 139, 136, 200, 63, 6, 0, 1, 227, 1, 74, 1, 75, 1, 0, 0, 192, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 0, 0, 192, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 65, 68, 196, 63, 9, 0, 1, 62, 250, 198, 0, 118, 249, 0, 0, 192, 63, 10, 0, 1, 168, 86, 227, 3, 42, 92, 139, 136, 200, 63, 11, 0, 1, 160, 170, 175, 252, 134, 93, 139, 136, 200, 63, 15, 0, 1, 180, 166, 231, 24, 50, 15, 0, 0, 192, 63, 17, 0, 1, 67, 7, 113, 253, 53, 35, 0, 0, 192, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 0, 0, 192, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 0, 0, 192, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 139, 136, 200, 63, 37, 0, 1, 0, 0, 0, 0, 244, 157, 139, 136, 200, 63, 38, 0, 1, 248, 97, 212, 14, 134, 215, 14, 17, 209, 63, 41, 0, 1, 44, 232, 21, 250, 233, 15, 65, 68, 196, 63, 44, 0, 1, 0, 0, 0, 0, 103, 255, 0, 0, 192, 63, 45, 0, 1, 0, 0, 0, 0, 120, 255, 0, 0, 192, 63, 48, 0, 1, 0, 0, 0, 0, 202, 252, 0, 0, 192, 63, 50, 0, 1, 0, 0, 0, 0, 232, 2, 88, 85, 213, 63, 51, 0, 1, 0, 0, 0, 0, 137, 249, 0, 0, 192, 63, 53, 0, 1, 0, 0, 0, 0, 217, 254, 0, 0, 192, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 0, 0, 192, 63, 56, 0, 1, 0, 0, 0, 0, 51, 254, 139, 136, 200, 63, 60, 0, 1, 247, 4, 217, 250, 140, 8, 0, 0, 192, 63, 64, 0, 1, 94, 23, 206, 253, 104, 15, 65, 68, 196, 63, 2, 0, 1, 241, 254, 69, 3, 33, 2, 65, 68, 196, 63, 3, 0, 1, 24, 1, 33, 1, 200, 0, 205, 204, 204, 63, 4, 0, 1, 225, 247, 143, 130, 67, 232, 65, 68, 196, 63, 7, 0, 1, 92, 2, 120, 0, 141, 1, 65, 68, 196, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 204, 63, 10, 0, 1, 147, 86, 221, 3, 64, 92, 65, 68, 196, 63, 13, 0, 1, 129, 21, 5, 36, 199, 185, 139, 136, 200, 63, 14, 0, 1, 0, 0, 0, 0, 86, 158, 65, 68, 196, 63, 17, 0, 1, 67, 7, 113, 253, 53, 35, 14, 17, 209, 63, 19, 0, 1, 169, 247, 208, 253, 175, 30, 139, 136, 200, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 65, 68, 196, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 65, 68, 196, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 65, 68, 196, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 205, 204, 204, 63, 36, 0, 1, 106, 215, 248, 229, 149, 179, 65, 68, 196, 63, 45, 0, 1, 0, 0, 0, 0, 120, 255, 65, 68, 196, 63, 48, 0, 1, 0, 0, 0, 0, 203, 252, 65, 68, 196, 63, 50, 0, 1, 0, 0, 0, 0, 233, 2, 65, 68, 196, 63, 53, 0, 1, 0, 0, 0, 0, 218, 254, 65, 68, 196, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 205, 204, 204, 63, 56, 0, 1, 0, 0, 0, 0, 63, 254, 139, 136, 200, 63, 57, 0, 1, 0, 0, 0, 0, 59, 8, 65, 68, 196, 63, 61, 0, 1, 0, 0, 255, 255, 134, 90, 65, 68, 196, 63, 63, 0, 1, 0, 0, 0, 0, 68, 245, 154, 153, 217, 63, 64, 0, 1, 136, 23, 15, 254, 253, 15, 65, 68, 196, 63, 65, 0, 1, 3, 0, 252, 255, 134, 90, 139, 136, 200, 63, 2, 0, 1, 241, 254, 70, 3, 35, 2, 139, 136, 200, 63, 3, 0, 1, 24, 1, 34, 1, 200, 0, 205, 204, 204, 63, 5, 0, 1, 81, 4, 122, 128, 246, 9, 205, 204, 204, 63, 7, 0, 1, 93, 2, 120, 0, 141, 1, 139, 136, 200, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 139, 136, 200, 63, 9, 0, 1, 48, 250, 182, 0, 68, 249, 139, 136, 200, 63, 13, 0, 1, 168, 21, 255, 35, 225, 185, 139, 136, 200, 63, 17, 0, 1, 67, 7, 113, 253, 53, 35, 139, 136, 200, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 139, 136, 200, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 139, 136, 200, 63, 30, 0, 1, 0, 0, 0, 0, 178, 5, 139, 136, 200, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 205, 204, 204, 63, 42, 0, 1, 103, 245, 241, 245, 197, 254, 139, 136, 200, 63, 44, 0, 1, 0, 0, 0, 0, 104, 255, 139, 136, 200, 63, 45, 0, 1, 0, 0, 0, 0, 122, 255, 88, 85, 213, 63, 47, 0, 1, 0, 0, 0, 0, 111, 4, 205, 204, 204, 63, 48, 0, 1, 0, 0, 0, 0, 207, 252, 139, 136, 200, 63, 50, 0, 1, 0, 0, 0, 0, 235, 2, 139, 136, 200, 63, 53, 0, 1, 0, 0, 0, 0, 221, 254, 139, 136, 200, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 139, 136, 200, 63, 59, 0, 1, 0, 0, 0, 0, 170, 236, 139, 136, 200, 63, 61, 0, 1, 0, 0, 255, 255, 134, 90, 205, 204, 204, 63, 63, 0, 1, 0, 0, 0, 0, 218, 244, 102, 102, 230, 63, 65, 0, 1, 2, 0, 252, 255, 130, 90, 14, 17, 209, 63, 0, 0, 1, 4, 187, 51, 194, 148, 197, 14, 17, 209, 63, 2, 0, 1, 239, 254, 73, 3, 37, 2, 205, 204, 204, 63, 3, 0, 1, 25, 1, 34, 1, 200, 0, 205, 204, 204, 63, 6, 0, 1, 227, 1, 74, 1, 75, 1, 205, 204, 204, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 14, 17, 209, 63, 9, 0, 1, 21, 250, 180, 0, 149, 249, 14, 17, 209, 63, 11, 0, 1, 218, 170, 163, 252, 186, 93, 154, 153, 217, 63, 13, 0, 1, 50, 22, 242, 35, 52, 186, 205, 204, 204, 63, 14, 0, 1, 0, 0, 0, 0, 70, 158, 14, 17, 209, 63, 15, 0, 1, 120, 166, 64, 24, 253, 14, 205, 204, 204, 63, 17, 0, 1, 67, 7, 113, 253, 53, 35, 219, 221, 221, 63, 18, 0, 1, 120, 254, 104, 248, 175, 41, 205, 204, 204, 63, 20, 0, 1, 165, 0, 205, 25, 30, 37, 205, 204, 204, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 205, 204, 204, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 205, 204, 204, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 205, 204, 204, 63, 30, 0, 1, 0, 0, 0, 0, 178, 5, 205, 204, 204, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 102, 102, 230, 63, 37, 0, 1, 0, 0, 0, 0, 226, 157, 88, 85, 213, 63, 38, 0, 1, 137, 98, 223, 13, 71, 216, 205, 204, 204, 63, 44, 0, 1, 0, 0, 0, 0, 106, 255, 205, 204, 204, 63, 45, 0, 1, 0, 0, 0, 0, 123, 255, 205, 204, 204, 63, 50, 0, 1, 0, 0, 0, 0, 238, 2, 88, 85, 213, 63, 53, 0, 1, 0, 0, 0, 0, 235, 254, 205, 204, 204, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 205, 204, 204, 63, 57, 0, 1, 0, 0, 0, 0, 59, 8, 205, 204, 204, 63, 59, 0, 1, 0, 0, 0, 0, 184, 236, 205, 204, 204, 63, 60, 0, 1, 253, 4, 224, 250, 133, 8, 14, 17, 209, 63, 61, 0, 1, 0, 0, 0, 0, 132, 90, 154, 153, 217, 63, 3, 0, 1, 28, 1, 37, 1, 200, 0, 154, 153, 217, 63, 4, 0, 1, 145, 247, 147, 130, 59, 232, 88, 85, 213, 63, 5, 0, 1, 206, 3, 117, 128, 244, 9, 88, 85, 213, 63, 6, 0, 1, 230, 1, 76, 1, 75, 1, 14, 17, 209, 63, 7, 0, 1, 95, 2, 121, 0, 141, 1, 14, 17, 209, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 219, 221, 221, 63, 10, 0, 1, 131]).concat([86, 217, 3, 80, 92, 14, 17, 209, 63, 14, 0, 1, 0, 0, 0, 0, 53, 158, 14, 17, 209, 63, 17, 0, 1, 67, 7, 113, 253, 53, 35, 37, 34, 226, 63, 20, 0, 1, 165, 0, 205, 25, 29, 37, 14, 17, 209, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 14, 17, 209, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 14, 17, 209, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 14, 17, 209, 63, 30, 0, 1, 0, 0, 0, 0, 178, 5, 14, 17, 209, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 14, 17, 209, 63, 36, 0, 1, 91, 215, 222, 229, 189, 179, 88, 85, 213, 63, 42, 0, 1, 106, 245, 244, 245, 208, 254, 14, 17, 209, 63, 44, 0, 1, 0, 0, 0, 0, 109, 255, 14, 17, 209, 63, 45, 0, 1, 0, 0, 0, 0, 126, 255, 14, 17, 209, 63, 48, 0, 1, 0, 0, 0, 0, 210, 252, 14, 17, 209, 63, 50, 0, 1, 0, 0, 0, 0, 242, 2, 88, 85, 213, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 154, 153, 217, 63, 56, 0, 1, 0, 0, 0, 0, 91, 254, 14, 17, 209, 63, 57, 0, 1, 0, 0, 0, 0, 60, 8, 88, 85, 213, 63, 59, 0, 1, 0, 0, 0, 0, 212, 236, 14, 17, 209, 63, 60, 0, 1, 0, 5, 232, 250, 128, 8, 14, 17, 209, 63, 63, 0, 1, 0, 0, 0, 0, 164, 244, 154, 153, 217, 63, 0, 0, 1, 47, 187, 77, 194, 131, 197, 37, 34, 226, 63, 2, 0, 1, 234, 254, 89, 3, 42, 2, 219, 221, 221, 63, 7, 0, 1, 103, 2, 122, 0, 141, 1, 88, 85, 213, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 219, 221, 221, 63, 9, 0, 1, 227, 249, 222, 0, 50, 251, 37, 34, 226, 63, 11, 0, 1, 77, 171, 139, 252, 34, 94, 88, 85, 213, 63, 14, 0, 1, 0, 0, 0, 0, 37, 158, 219, 221, 221, 63, 15, 0, 1, 34, 166, 84, 23, 173, 14, 88, 85, 213, 63, 17, 0, 1, 67, 7, 113, 253, 53, 35, 88, 85, 213, 63, 19, 0, 1, 169, 247, 208, 253, 175, 30, 88, 85, 213, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 88, 85, 213, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 88, 85, 213, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 88, 85, 213, 63, 30, 0, 1, 0, 0, 0, 0, 178, 5, 88, 85, 213, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 37, 34, 226, 63, 36, 0, 1, 27, 215, 113, 229, 118, 180, 102, 102, 230, 63, 41, 0, 1, 65, 232, 27, 250, 2, 16, 219, 221, 221, 63, 44, 0, 1, 0, 0, 0, 0, 120, 255, 88, 85, 213, 63, 45, 0, 1, 0, 0, 0, 0, 129, 255, 154, 153, 217, 63, 48, 0, 1, 0, 0, 0, 0, 217, 252, 154, 153, 217, 63, 50, 0, 1, 0, 0, 0, 0, 252, 2, 219, 221, 221, 63, 57, 0, 1, 0, 0, 0, 0, 62, 8, 88, 85, 213, 63, 60, 0, 1, 2, 5, 240, 250, 124, 8, 33, 34, 2, 64, 61, 0, 1, 0, 0, 0, 0, 132, 90, 154, 153, 217, 63, 63, 0, 1, 0, 0, 0, 0, 55, 244, 102, 102, 230, 63, 1, 0, 1, 46, 192, 212, 191, 46, 192, 219, 221, 221, 63, 5, 0, 1, 72, 3, 113, 128, 241, 9, 102, 102, 230, 63, 6, 0, 1, 241, 1, 83, 1, 75, 1, 154, 153, 217, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 154, 153, 217, 63, 14, 0, 1, 0, 0, 0, 0, 21, 158, 37, 34, 226, 63, 17, 0, 1, 68, 7, 113, 253, 53, 35, 154, 153, 217, 63, 19, 0, 1, 169, 247, 208, 253, 175, 30, 154, 153, 217, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 154, 153, 217, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 154, 153, 217, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 154, 153, 217, 63, 30, 0, 1, 0, 0, 0, 0, 178, 5, 154, 153, 217, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 102, 102, 230, 63, 38, 0, 1, 167, 98, 131, 12, 208, 216, 219, 221, 221, 63, 39, 0, 1, 40, 195, 126, 232, 120, 0, 154, 153, 217, 63, 40, 0, 1, 133, 215, 12, 255, 121, 30, 219, 221, 221, 63, 42, 0, 1, 112, 245, 249, 245, 222, 254, 154, 153, 217, 63, 45, 0, 1, 0, 0, 0, 0, 132, 255, 219, 221, 221, 63, 47, 0, 1, 0, 0, 0, 0, 117, 4, 154, 153, 217, 63, 51, 0, 1, 0, 0, 0, 0, 140, 249, 154, 153, 217, 63, 53, 0, 1, 0, 0, 0, 0, 242, 254, 219, 221, 221, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 219, 221, 221, 63, 59, 0, 1, 0, 0, 0, 0, 238, 236, 37, 34, 226, 63, 60, 0, 1, 255, 4, 12, 251, 105, 8, 219, 221, 221, 63, 0, 0, 1, 69, 187, 90, 194, 121, 197, 37, 34, 226, 63, 3, 0, 1, 31, 1, 40, 1, 200, 0, 37, 34, 226, 63, 4, 0, 1, 90, 247, 149, 130, 53, 232, 219, 221, 221, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 230, 63, 13, 0, 1, 140, 22, 240, 35, 99, 186, 219, 221, 221, 63, 14, 0, 1, 0, 0, 0, 0, 5, 158, 219, 221, 221, 63, 16, 0, 1, 84, 90, 140, 246, 149, 6, 242, 238, 238, 63, 19, 0, 1, 169, 247, 208, 253, 175, 30, 219, 221, 221, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 219, 221, 221, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 219, 221, 221, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 219, 221, 221, 63, 30, 0, 1, 0, 0, 0, 0, 178, 5, 37, 34, 226, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 219, 221, 221, 63, 40, 0, 1, 140, 215, 12, 255, 121, 30, 37, 34, 226, 63, 45, 0, 1, 0, 0, 0, 0, 139, 255, 219, 221, 221, 63, 48, 0, 1, 0, 0, 0, 0, 221, 252, 37, 34, 226, 63, 50, 0, 1, 0, 0, 0, 0, 8, 3, 168, 170, 234, 63, 51, 0, 1, 0, 0, 0, 0, 156, 249, 37, 34, 226, 63, 53, 0, 1, 0, 0, 0, 0, 2, 255, 219, 221, 221, 63, 56, 0, 1, 0, 0, 0, 0, 103, 254, 102, 102, 230, 63, 63, 0, 1, 0, 0, 0, 0, 146, 243, 219, 221, 221, 63, 64, 0, 1, 138, 23, 28, 254, 16, 16, 102, 102, 230, 63, 0, 0, 1, 116, 187, 114, 194, 98, 197, 37, 34, 226, 63, 5, 0, 1, 4, 3, 111, 128, 239, 9, 37, 34, 226, 63, 7, 0, 1, 106, 2, 123, 0, 141, 1, 37, 34, 226, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 168, 170, 234, 63, 9, 0, 1, 166, 249, 40, 1, 145, 253, 51, 51, 243, 63, 10, 0, 1, 127, 86, 216, 3, 84, 92, 37, 34, 226, 63, 14, 0, 1, 0, 0, 0, 0, 245, 157, 102, 102, 230, 63, 15, 0, 1, 236, 165, 189, 22, 120, 14, 37, 34, 226, 63, 16, 0, 1, 84, 90, 140, 246, 149, 6, 51, 51, 243, 63, 18, 0, 1, 120, 254, 104, 248, 175, 41, 37, 34, 226, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 37, 34, 226, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 37, 34, 226, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 37, 34, 226, 63, 30, 0, 1, 0, 0, 0, 0, 178, 5, 168, 170, 234, 63, 39, 0, 1, 24, 195, 113, 232, 116, 0, 51, 51, 243, 63, 40, 0, 1, 179, 215, 7, 255, 120, 30, 102, 102, 230, 63, 42, 0, 1, 118, 245, 254, 245, 239, 254, 102, 102, 230, 63, 44, 0, 1, 0, 0, 0, 0, 129, 255, 37, 34, 226, 63, 47, 0, 1, 0, 0, 0, 0, 120, 4, 168, 170, 234, 63, 48, 0, 1, 0, 0, 0, 0, 237, 252, 37, 34, 226, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 168, 170, 234, 63, 56, 0, 1, 0, 0, 0, 0, 146, 254, 102, 102, 230, 63, 57, 0, 1, 0, 0, 0, 0, 64, 8, 37, 34, 226, 63, 59, 0, 1, 0, 0, 0, 0, 249, 236, 102, 102, 230, 63, 64, 0, 1, 138, 23, 54, 254, 58, 16, 102, 102, 230, 63, 2, 0, 1, 232, 254, 94, 3, 43, 2, 102, 102, 230, 63, 3, 0, 1, 32, 1, 42, 1, 200, 0, 242, 238, 238, 63, 4, 0, 1, 3, 247, 154, 130, 44, 232, 102, 102, 230, 63, 5, 0, 1, 191, 2, 109, 128, 237, 9, 102, 102, 230, 63, 7, 0, 1, 110, 2, 124, 0, 141, 1, 102, 102, 230, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 168, 170, 234, 63, 11, 0, 1, 134, 171, 129, 252, 86, 94, 102, 102, 230, 63, 14, 0, 1, 0, 0, 0, 0, 230, 157, 102, 102, 230, 63, 16, 0, 1, 84, 90, 140, 246, 149, 6, 242, 238, 238, 63, 17, 0, 1, 68, 7, 113, 253, 53, 35, 0, 0, 0, 64, 20, 0, 1, 165, 0, 205, 25, 29, 37, 102, 102, 230, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 102, 102, 230, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 102, 102, 230, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 102, 102, 230, 63, 30, 0, 1, 0, 0, 0, 0, 178, 5, 102, 102, 230, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 242, 238, 238, 63, 36, 0, 1, 231, 214, 27, 229, 19, 181, 102, 102, 230, 63, 45, 0, 1, 0, 0, 0, 0, 143, 255, 242, 238, 238, 63, 47, 0, 1, 0, 0, 0, 0, 132, 4, 168, 170, 234, 63, 50, 0, 1, 0, 0, 0, 0, 22, 3, 102, 102, 230, 63, 53, 0, 1, 0, 0, 0, 0, 11, 255, 51, 51, 243, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 51, 51, 243, 63, 59, 0, 1, 0, 0, 0, 0, 32, 237, 102, 102, 230, 63, 60, 0, 1, 251, 4, 22, 251, 99, 8, 117, 119, 247, 63, 0, 0, 1, 214, 187, 159, 194, 41, 197, 168, 170, 234, 63, 1, 0, 1, 46, 192, 211, 191, 46, 192, 242, 238, 238, 63, 2, 0, 1, 228, 254, 105, 3, 44, 2, 117, 119, 247, 63, 3, 0, 1, 40, 1, 50, 1, 200, 0, 168, 170, 234, 63, 5, 0, 1, 122, 2, 107, 128, 234, 9, 117, 119, 247, 63, 6, 0, 1, 254, 1, 93, 1, 75, 1, 168, 170, 234, 63, 7, 0, 1, 114, 2, 124, 0, 141, 1, 168, 170, 234, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 242, 238, 238, 63, 13, 0, 1, 197, 22, 241, 35, 127, 186, 51, 51, 243, 63, 14, 0, 1, 0, 0, 0, 0, 182, 157, 168, 170, 234, 63, 15, 0, 1, 210, 165, 115, 22, 93, 14, 168, 170, 234, 63, 16, 0, 1, 84, 90, 140, 246, 149, 6, 168, 170, 234, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 168, 170, 234, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 168, 170, 234, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 168, 170, 234, 63, 30, 0, 1, 0, 0, 0, 0, 178, 5, 168, 170, 234, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 168, 170, 234, 63, 37, 0, 1, 0, 0, 0, 0, 227, 157, 0, 0, 0, 64, 38, 0, 1, 10, 98, 116, 10, 4, 217, 168, 170, 234, 63, 41, 0, 1, 70, 232, 28, 250, 8, 16, 242, 238, 238, 63, 42, 0, 1, 124, 245, 3, 246, 2, 255, 242, 238, 238, 63, 43, 0, 1, 74, 225, 26, 251, 199, 238, 168, 170, 234, 63, 44, 0, 1, 0, 0, 0, 0, 134, 255, 168, 170, 234, 63, 45, 0, 1, 0, 0, 0, 0, 148, 255, 168, 170, 234, 63, 53, 0, 1, 0, 0, 0, 0, 21, 255, 242, 238, 238, 63, 57, 0, 1, 0, 0, 0, 0, 66, 8, 242, 238, 238, 63, 60, 0, 1, 239, 4, 43, 251, 89, 8, 168, 170, 234, 63, 63, 0, 1, 0, 0, 0, 0, 92, 243, 51, 51, 243, 63, 64, 0, 1, 130, 23, 95, 254, 118, 16, 238, 238, 14, 64, 65, 0, 1, 0, 0, 252, 255, 131, 90, 191, 187, 251, 63, 1, 0, 1, 46, 192, 211, 191, 46, 192, 242, 238, 238, 63, 5, 0, 1, 53, 2, 105, 128, 232, 9, 51, 51, 243, 63, 7, 0, 1, 123, 2, 126, 0, 141, 1, 242, 238, 238, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 70, 68, 4, 64, 9, 0, 1, 18, 249, 4, 2, 89, 4, 51, 51, 243, 63, 11, 0, 1, 191, 171, 118, 252, 137, 94, 242, 238, 238, 63, 15, 0, 1, 184, 165, 41, 22, 65, 14, 242, 238, 238, 63, 16, 0, 1, 84, 90, 140, 246, 149, 6, 242, 238, 238, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 242, 238, 238, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 242, 238, 238, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 242, 238, 238, 63, 30, 0, 1, 0, 0, 0, 0, 178, 5, 242, 238, 238, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 51, 51, 243, 63, 37, 0, 1, 0, 0, 0, 0, 230, 157, 33, 34, 2, 64, 39, 0, 1, 241, 194, 81, 232, 106, 0, 242, 238, 238, 63, 41, 0, 1, 75, 232, 30, 250, 14, 16, 51, 51, 243, 63, 44, 0, 1, 0, 0, 0, 0, 145, 255, 242, 238, 238, 63, 45, 0, 1, 0, 0, 0, 0, 152, 255, 51, 51, 243, 63, 48, 0, 1, 0, 0, 0, 0, 249, 252, 242, 238, 238, 63, 50, 0, 1, 0, 0, 0, 0, 30, 3, 51, 51, 243, 63, 51, 0, 1, 0, 0, 0, 0, 166, 249, 117, 119, 247, 63, 53, 0, 1, 0, 0, 0, 0, 53, 255, 242, 238, 238, 63, 56, 0, 1, 0, 0, 0, 0, 161, 254, 242, 238, 238, 63, 63, 0, 1, 0, 0, 0, 0, 38, 243, 117, 119, 247, 63, 2, 0, 1, 225, 254, 117, 3, 44, 2, 51, 51, 243, 63, 4, 0, 1, 230, 246, 156, 130, 41, 232, 117, 119, 247, 63, 5, 0, 1, 171, 1, 102, 128, 226, 9, 51, 51, 243, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 70, 68, 4, 64, 13, 0, 1, 114, 23, 253, 35, 211, 186, 191, 187, 251, 63, 15, 0, 1, 105, 165, 74, 21, 236, 13, 0, 0, 0, 64, 16, 0, 1, 84, 90, 140, 246, 149, 6, 191, 187, 251, 63, 17, 0, 1, 68, 7, 113, 253, 53, 35, 51, 51, 243, 63, 19, 0, 1, 169, 247, 208, 253, 175, 30, 51, 51, 243, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 51, 51, 243, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 51, 51, 243, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 51, 51, 243, 63, 30, 0, 1, 0, 0, 0, 0, 178, 5, 51, 51, 243, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 51, 51, 243, 63, 36, 0, 1, 214, 214, 254, 228, 74, 181, 51, 51, 243, 63, 41, 0, 1, 81, 232, 32, 250, 21, 16, 117, 119, 247, 63, 42, 0, 1, 132, 245, 10, 246, 23, 255, 51, 51, 243, 63, 43, 0, 1, 83, 225, 33, 251, 207, 238, 51, 51, 243, 63, 45, 0, 1, 0, 0, 0, 0, 157, 255, 51, 51, 243, 63, 47, 0, 1, 0, 0, 0, 0, 136, 4, 191, 187, 251, 63, 50, 0, 1, 0, 0, 0, 0, 55, 3, 51, 51, 243, 63, 56, 0, 1, 0, 0, 0, 0, 178, 254, 51, 51, 243, 63, 57, 0, 1, 0, 0, 0, 0, 68, 8, 191, 187, 251, 63, 60, 0, 1, 214, 4, 78, 251, 77, 8, 51, 51, 243, 63, 63, 0, 1, 0, 0, 0, 0, 240, 242, 191, 187, 251, 63, 4, 0, 1, 171, 246, 160, 130, 34, 232, 117, 119, 247, 63, 7, 0, 1, 127, 2, 127, 0, 141, 1, 117, 119, 247, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 191, 187, 251, 63, 10, 0, 1, 129, 86, 217, 3, 82, 92, 117, 119, 247, 63, 11, 0, 1, 220, 171, 113, 252, 163, 94, 191, 187, 251, 63, 14, 0, 1, 0, 0, 0, 0, 150, 157, 117, 119, 247, 63, 18, 0, 1, 120, 254, 104, 248, 175, 41, 191, 187, 251, 63, 19, 0, 1, 169, 247, 208, 253, 175, 30, 117, 119, 247, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 117, 119, 247, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 117, 119, 247, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 117, 119, 247, 63, 30, 0, 1, 0, 0, 0, 0, 178, 5, 117, 119, 247, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 191, 187, 251, 63, 36, 0, 1, 180, 214, 195, 228, 186, 181, 191, 187, 251, 63, 37, 0, 1, 0, 0, 0, 0, 234, 157, 191, 187, 251, 63, 40, 0, 1, 196, 215, 4, 255, 120, 30, 191, 187, 251, 63, 41, 0, 1, 93, 232, 35, 250, 35, 16, 33, 34, 2, 64, 43, 0, 1, 121, 225, 61, 251, 242, 238, 117, 119, 247, 63, 44, 0, 1, 0, 0, 0, 0, 150, 255, 117, 119, 247, 63, 45, 0, 1, 0, 0, 0, 0, 162, 255, 0, 0, 0, 64, 47, 0, 1, 0, 0, 0, 0, 149, 4, 191, 187, 251, 63, 48, 0, 1, 0, 0, 0, 0, 5, 253, 191, 187, 251, 63, 51, 0, 1, 0, 0, 0, 0, 176, 249, 191, 187, 251, 63, 54, 0, 1, 0, 0, 0, 0, 112, 31, 191, 187, 251, 63, 56, 0, 1, 0, 0, 0, 0, 212, 254, 70, 68, 4, 64, 57, 0, 1, 0, 0, 0, 0, 74, 8, 33, 34, 2, 64, 59, 0, 1, 0, 0, 0, 0, 62, 237, 117, 119, 247, 63, 63, 0, 1, 0, 0, 0, 0, 187, 242, 191, 187, 251, 63, 64, 0, 1, 120, 23, 124, 254, 155, 16, 0, 0, 0, 64, 0, 0, 1, 9, 188, 181, 194, 8, 197, 191, 187, 251, 63, 2, 0, 1, 223, 254, 124, 3, 44, 2, 70, 68, 4, 64, 3, 0, 1, 48, 1, 59, 1, 200, 0, 191, 187, 251, 63, 5, 0, 1, 103, 1, 101, 128, 223, 9, 0, 0, 0, 64, 6, 0, 1, 5, 2, 98, 1, 75, 1, 33, 34, 2, 64, 7, 0, 1, 141, 2, 130, 0, 141, 1, 191, 187, 251, 63, 8, 0, 1, 227, 253, 37, 0, 123, 11, 191, 187, 251, 63, 11, 0, 1, 249, 171, 108, 252, 188, 94, 70, 68, 4, 64, 18, 0, 1, 120, 254, 104, 248, 175, 41, 191, 187, 251, 63, 24, 0, 1, 0, 0, 0, 0, 251, 5, 191, 187, 251, 63, 25, 0, 1, 0, 0, 0, 0, 6, 7, 191, 187, 251, 63, 27, 0, 1, 0, 0, 0, 0, 168, 8, 191, 187, 251, 63, 30, 0, 1, 0, 0, 0, 0, 178, 5, 191, 187, 251, 63, 31, 0, 1, 0, 0, 0, 0, 196, 10, 33, 34, 2, 64, 42, 0, 1, 143, 245, 19, 246, 55, 255, 191, 187, 251, 63, 44, 0, 1, 0, 0, 0, 0, 156, 255, 191, 187, 251, 63, 45, 0, 1, 0, 0, 0, 0, 167, 255, 191, 187, 251, 63, 53, 0, 1, 0, 0, 0, 0, 64, 255, 191, 187, 251, 63, 63, 0, 1, 0, 0, 0, 0, 134, 242, 0, 0, 0, 64, 1, 0, 1, 46, 192, 211, 191, 46, 192, 0, 0, 0, 64, 2, 0, 1, 221, 254, 130, 3, 43, 2, 0, 0, 0, 64, 4, 0, 1, 141, 246, 162, 130, 32, 232, 33, 34, 2, 64, 5, 0, 1, 222, 0, 99, 128, 217, 9, 0, 0, 0, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 0, 64, 10, 0, 1, 130, 86, 217, 3, 81, 92, 0, 0, 0, 64, 11, 0, 1, 21, 172, 103, 252, 214, 94, 0, 0, 0, 64, 14, 0, 1, 0, 0, 0, 0, 134, 157, 0, 0, 0, 64, 15, 0, 1, 79, 165, 255, 20, 207, 13, 0, 0, 0, 64, 17, 0, 1, 68, 7, 113, 253, 53, 35, 33, 34, 2, 64, 19, 0, 1, 169, 247, 208, 253, 175, 30, 0, 0, 0, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 0, 0, 0, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 0, 0, 0, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 0, 0, 0, 64, 30, 0, 1, 0, 0, 0, 0, 178, 5, 70, 68, 4, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 33, 34, 2, 64, 36, 0, 1, 146, 214, 135, 228, 42, 182, 70, 68, 4, 64, 37, 0, 1, 0, 0, 0, 0, 241, 157, 70, 68, 4, 64, 40, 0, 1, 224, 215, 1, 255, 120, 30, 70, 68, 4, 64, 41, 0, 1, 111, 232, 41, 250, 57, 16, 0, 0, 0, 64, 44, 0, 1, 0, 0, 0, 0, 162, 255, 0, 0, 0, 64, 45, 0, 1, 0, 0, 0, 0, 173, 255, 0, 0, 0, 64, 48, 0, 1, 0, 0, 0, 0, 11, 253, 70, 68, 4, 64, 50, 0, 1, 0, 0, 0, 0, 81, 3, 33, 34, 2, 64, 51, 0, 1, 0, 0, 0, 0, 187, 249, 33, 34, 2, 64, 53, 0, 1, 0, 0, 0, 0, 86, 255, 205, 204, 12, 64, 54, 0, 1, 0, 0, 0, 0, 112, 31, 0, 0, 0, 64, 56, 0, 1, 0, 0, 0, 0, 229, 254, 0, 0, 0, 64, 60, 0, 1, 204, 4, 90, 251, 74, 8, 33, 34, 2, 64, 63, 0, 1, 0, 0, 0, 0, 30, 242, 0, 0, 0, 64, 64, 0, 1, 113, 23, 138, 254, 172, 16, 70, 68, 4, 64, 0, 0, 1, 61, 188, 202, 194, 229, 196, 70, 68, 4, 64, 1, 0, 1, 47, 192, 210, 191, 47, 192, 102, 102, 6, 64, 2, 0, 1, 215, 254, 147, 3, 39, 2, 33, 34, 2, 64, 4, 0, 1, 111, 246, 164, 130, 29, 232, 33, 34, 2, 64, 6, 0, 1, 9, 2, 100, 1, 75, 1, 33, 34, 2, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 6, 64, 10, 0, 1, 137, 86, 219, 3, 74, 92, 70, 68, 4, 64, 11, 0, 1, 79, 172, 92, 252, 8, 95, 102, 102, 6, 64, 14, 0, 1, 0, 0, 0, 0, 83, 157, 33, 34, 2, 64, 15, 0, 1, 53, 165, 178, 20, 176, 13, 70, 68, 4, 64, 16, 0, 1, 84, 90, 140, 246, 149, 6, 33, 34, 2, 64, 17, 0, 1, 68, 7, 113, 253, 53, 35, 33, 34, 2, 64, 20, 0, 1, 165, 0, 205, 25, 29, 37, 33, 34, 2, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 33, 34, 2, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 33, 34, 2, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 223, 221, 29, 64, 30, 0, 1, 0, 0, 0, 0, 178, 5, 70, 68, 4, 64, 38, 0, 1, 197, 97, 205, 9, 6, 217, 33, 34, 2, 64, 44, 0, 1, 0, 0, 0, 0, 168, 255, 33, 34, 2, 64, 45, 0, 1, 0, 0, 0, 0, 178, 255, 33, 34, 2, 64, 47, 0, 1, 0, 0, 0, 0, 154, 4, 33, 34, 2, 64, 48, 0, 1, 0, 0, 0, 0, 18, 253, 70, 68, 4, 64, 56, 0, 1, 0, 0, 0, 0, 8, 255, 172, 170, 10, 64, 60, 0, 1, 144, 4, 156, 251, 69, 8, 70, 68, 4, 64, 64, 0, 1, 99, 23, 170, 254, 198, 16, 70, 68, 4, 64, 4, 0, 1, 81, 246, 166, 130, 26, 232, 70, 68, 4, 64, 5, 0, 1, 154, 0, 98, 128, 214, 9, 172, 170, 10, 64, 6, 0, 1, 22, 2, 109, 1, 75, 1, 70, 68, 4, 64, 7, 0, 1, 145, 2, 131, 0, 141, 1, 70, 68, 4, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 70, 68, 4, 64, 15, 0, 1, 26, 165, 101, 20, 146, 13, 102, 102, 6, 64, 17, 0, 1, 68, 7, 113, 253, 53, 35, 70, 68, 4, 64, 19, 0, 1, 169, 247, 208, 253, 175, 30, 102, 102, 6, 64, 20, 0, 1, 165, 0, 205, 25, 29, 37, 70, 68, 4, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 70, 68, 4, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 70, 68, 4, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 70, 68, 4, 64, 36, 0, 1, 129, 214, 105, 228, 99, 182, 205, 204, 12, 64, 39, 0, 1, 209, 194, 56, 232, 98, 0, 70, 68, 4, 64, 42, 0, 1, 147, 245, 23, 246, 65, 255, 70, 68, 4, 64, 43, 0, 1, 131, 225, 68, 251, 251, 238, 70, 68, 4, 64, 44, 0, 1, 0, 0, 0, 0, 173, 255, 135, 136, 8, 64, 45, 0, 1, 0, 0, 0, 0, 193, 255, 70, 68, 4, 64, 47, 0, 1, 0, 0, 0, 0, 158, 4, 70, 68, 4, 64, 48, 0, 1, 0, 0, 0, 0, 24, 253, 102, 102, 6, 64, 51, 0, 1, 0, 0, 0, 0, 197, 249, 70, 68, 4, 64, 53, 0, 1, 0, 0, 0, 0, 97, 255, 135, 136, 8, 64, 59, 0, 1, 0, 0, 0, 0, 75, 237, 70, 68, 4, 64, 61, 0, 1, 0, 0, 255, 255, 134, 90, 70, 68, 4, 64, 63, 0, 1, 0, 0, 0, 0, 234, 241, 135, 136, 8, 64, 0, 0, 1, 113, 188, 222, 194, 192, 196, 102, 102, 6, 64, 1, 0, 1, 47, 192, 210, 191, 47, 192, 102, 102, 6, 64, 3, 0, 1, 50, 1, 61, 1, 200, 0, 135, 136, 8, 64, 4, 0, 1, 20, 246, 171, 130, 21, 232, 102, 102, 6, 64, 5, 0, 1, 88, 0, 98, 128, 211, 9, 172, 170, 10, 64, 7, 0, 1, 157, 2, 133, 0, 141, 1, 102, 102, 6, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 6, 64, 9, 0, 1, 0, 249, 33, 2, 73, 5, 135, 136, 8, 64, 11, 0, 1, 136, 172, 82, 252, 59, 95, 135, 136, 8, 64, 13, 0, 1, 178, 23, 1, 36, 244, 186, 102, 102, 6, 64, 15, 0, 1, 255, 164, 22, 20, 114, 13, 135, 136, 8, 64, 16, 0, 1, 84, 90, 140, 246, 149, 6, 102, 102, 6, 64, 18, 0, 1, 120, 254, 104, 248, 175, 41, 102, 102, 6, 64, 19, 0, 1, 169, 247, 208, 253, 175, 30, 102, 102, 6, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 102, 102, 6, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 205, 204, 12, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 102, 102, 6, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 135, 136, 8, 64, 36, 0, 1, 96, 214, 43, 228, 209, 182, 135, 136, 8, 64, 37, 0, 1, 0, 0, 0, 0, 245, 157, 135, 136, 8, 64, 38, 0, 1, 134, 97, 47, 9, 11, 217, 18, 17, 17, 64, 40, 0, 1, 16, 216, 251, 254, 119, 30, 238, 238, 14, 64, 41, 0, 1, 138, 232, 49, 250, 89, 16, 102, 102, 6, 64, 42, 0, 1, 151, 245, 26, 246, 76, 255, 102, 102, 6, 64, 43, 0, 1, 140, 225, 75, 251, 3, 239, 172, 170, 10, 64, 44, 0, 1, 0, 0, 0, 0, 190, 255, 205, 204, 12, 64, 47, 0, 1, 0, 0, 0, 0, 175, 4, 102, 102, 6, 64, 48, 0, 1, 0, 0, 0, 0, 30, 253, 135, 136, 8, 64, 50, 0, 1, 0, 0, 0, 0, 97, 3, 102, 102, 6, 64, 53, 0, 1, 0, 0, 0, 0, 108, 255, 135, 136, 8, 64, 56, 0, 1, 0, 0, 0, 0, 42, 255, 172, 170, 10, 64, 57, 0, 1, 0, 0, 0, 0, 78, 8, 102, 102, 6, 64, 61, 0, 1, 0, 0, 0, 0, 132, 90, 135, 136, 8, 64, 63, 0, 1, 0, 0, 0, 0, 134, 241, 135, 136, 8, 64, 64, 0, 1, 82, 23, 200, 254, 236, 16, 51, 51, 19, 64, 1, 0, 1, 47, 192, 210, 191, 47, 192, 135, 136, 8, 64, 2, 0, 1, 213, 254, 153, 3, 36, 2, 172, 170, 10, 64, 3, 0, 1, 54, 1, 64, 1, 200, 0, 135, 136, 8, 64, 5, 0, 1, 22, 0, 97, 128, 207, 9, 135, 136, 8, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 12, 64, 9, 0, 1, 211, 248, 105, 2, 203, 7, 172, 170, 10, 64, 10, 0, 1, 142, 86, 220, 3, 68, 92, 205, 204, 12, 64, 14, 0, 1, 0, 0, 0, 0, 28, 157, 135, 136, 8, 64, 15, 0, 1, 228, 164, 197, 19, 82, 13, 186, 187, 27, 64, 17, 0, 1, 68, 7, 113, 253, 53, 35, 205, 204, 12, 64, 18, 0, 1, 120, 254, 104, 248, 175, 41, 51, 51, 19, 64, 19, 0, 1, 169, 247, 208, 253, 175, 30, 18, 17, 17, 64, 20, 0, 1, 165, 0, 205, 25, 29, 37, 135, 136, 8, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 135, 136, 8, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 135, 136, 8, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 135, 136, 8, 64, 42, 0, 1, 154, 245, 29, 246, 86, 255, 51, 51, 19, 64, 43, 0, 1, 190, 225, 111, 251, 49, 239, 135, 136, 8, 64, 48, 0, 1, 0, 0, 0, 0, 36, 253, 135, 136, 8, 64, 51, 0, 1, 0, 0, 0, 0, 202, 249, 135, 136, 8, 64, 53, 0, 1, 0, 0, 0, 0, 119, 255, 238, 238, 14, 64, 61, 0, 1, 0, 0, 0, 0, 128, 90, 205, 204, 12, 64, 0, 0, 1, 165, 188, 242, 194, 155, 196, 172, 170, 10, 64, 2, 0, 1, 212, 254, 157, 3, 34, 2, 205, 204, 12, 64, 4, 0, 1, 218, 245, 175, 130, 17, 232, 238, 238, 14, 64, 5, 0, 0, 85, 255, 97, 128, 198, 9, 172, 170, 10, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 12, 64, 11, 0, 1, 194, 172, 72, 252, 110, 95, 205, 204, 12, 64, 13, 0, 1, 248, 23, 4, 36, 27, 187, 205, 204, 12, 64, 15, 0, 1, 171, 164, 29, 19, 14, 13, 205, 204, 12, 64, 16, 0, 1, 84, 90, 140, 246, 149, 6, 172, 170, 10, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 172, 170, 10, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 172, 170, 10, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 172, 170, 10, 64, 36, 0, 1, 80, 214, 12, 228, 8, 183, 238, 238, 14, 64, 37, 0, 1, 0, 0, 0, 0, 247, 157, 172, 170, 10, 64, 38, 0, 1, 108, 97, 228, 8, 16, 217, 205, 204, 12, 64, 42, 0, 1, 161, 245, 35, 246, 106, 255, 205, 204, 12, 64, 45, 0, 1, 0, 0, 0, 0, 202, 255, 51, 51, 19, 64, 48, 0, 1, 0, 0, 0, 0, 63, 253, 172, 170, 10, 64, 50, 0, 1, 0, 0, 0, 0, 105, 3, 172, 170, 10, 64, 51, 0, 1, 0, 0, 0, 0, 207, 249, 205, 204, 12, 64, 53, 0, 1, 0, 0, 0, 0, 139, 255, 205, 204, 12, 64, 56, 0, 1, 0, 0, 0, 0, 73, 255, 172, 170, 10, 64, 59, 0, 1, 0, 0, 0, 0, 79, 237, 205, 204, 12, 64, 63, 0, 1, 0, 0, 0, 0, 37, 241, 172, 170, 10, 64, 64, 0, 1, 73, 23, 216, 254, 251, 16, 238, 238, 14, 64, 2, 0, 1, 209, 254, 166, 3, 26, 2, 205, 204, 12, 64, 3, 0, 1, 55, 1, 66, 1, 200, 0, 205, 204, 12, 64, 6, 0, 1, 24, 2, 110, 1, 75, 1, 18, 17, 17, 64, 7, 0, 1, 165, 2, 134, 0, 141, 1, 205, 204, 12, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 18, 17, 17, 64, 10, 0, 1, 151, 86, 223, 3, 59, 92, 205, 204, 12, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 205, 204, 12, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 205, 204, 12, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 238, 238, 14, 64, 36, 0, 1, 49, 214, 205, 227, 112, 183, 205, 204, 12, 64, 38, 0, 1, 87, 97, 156, 8, 24, 217, 205, 204, 12, 64, 44, 0, 1, 0, 0, 0, 0, 195, 255, 205, 204, 12, 64, 50, 0, 1, 0, 0, 0, 0, 113, 3, 205, 204, 12, 64, 51, 0, 1, 0, 0, 0, 0, 211, 249, 238, 238, 14, 64, 57, 0, 1, 0, 0, 0, 0, 80, 8, 205, 204, 12, 64, 59, 0, 1, 0, 0, 0, 0, 82, 237, 205, 204, 12, 64, 60, 0, 1, 131, 4, 169, 251, 71, 8, 205, 204, 12, 64, 64, 0, 1, 63, 23, 232, 254, 9, 17, 238, 238, 14, 64, 0, 0, 1, 191, 188, 252, 194, 136, 196, 238, 238, 14, 64, 3, 0, 1, 57, 1, 67, 1, 200, 0, 51, 51, 19, 64, 4, 0, 1, 130, 245, 182, 130, 14, 232, 238, 238, 14, 64, 6, 0, 1, 26, 2, 112, 1, 75, 1, 238, 238, 14, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 19, 64, 9, 0, 1, 187, 248, 142, 2, 151, 9, 238, 238, 14, 64, 11, 0, 1, 223, 172, 66, 252, 135, 95, 51, 51, 19, 64, 13, 0, 1, 112, 24, 6, 36, 100, 187, 18, 17, 17, 64, 14, 0, 1, 0, 0, 0, 0, 245, 156, 51, 51, 19, 64, 15, 0, 1, 81, 164, 13, 18, 160, 12, 18, 17, 17, 64, 16, 0, 1, 84, 90, 140, 246, 149, 6, 238, 238, 14, 64, 18, 0, 1, 120, 254, 104, 248, 175, 41, 238, 238, 14, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 238, 238, 14, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 238, 238, 14, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 238, 238, 14, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 84, 85, 21, 64, 38, 0, 1, 42, 97, 191, 7, 56, 217, 18, 17, 17, 64, 39, 0, 1, 198, 194, 47, 232, 95, 0, 18, 17, 17, 64, 42, 0, 1, 168, 245, 40, 246, 123, 255, 238, 238, 14, 64, 44, 0, 1, 0, 0, 0, 0, 200, 255, 238, 238, 14, 64, 45, 0, 1, 0, 0, 0, 0, 206, 255, 238, 238, 14, 64, 47, 0, 1, 0, 0, 0, 0, 179, 4, 121, 119, 23, 64, 50, 0, 1, 0, 0, 0, 0, 148, 3, 51, 51, 19, 64, 51, 0, 1, 0, 0, 0, 0, 224, 249, 238, 238, 14, 64, 53, 0, 1, 0, 0, 0, 0, 148, 255, 238, 238, 14, 64, 54, 0, 1, 0, 0, 0, 0, 112, 31, 51, 51, 19, 64, 56, 0, 1, 0, 0, 0, 0, 115, 255, 238, 238, 14, 64, 59, 0, 1, 0, 0, 0, 0, 83, 237, 238, 238, 14, 64, 60, 0, 1, 117, 4, 184, 251, 69, 8, 238, 238, 14, 64, 63, 0, 1, 0, 0, 0, 0, 245, 240, 18, 17, 17, 64, 64, 0, 1, 44, 23, 8, 255, 35, 17, 51, 51, 19, 64, 0, 0, 1, 241, 188, 16, 195, 97, 196, 18, 17, 17, 64, 2, 0, 1, 208, 254, 169, 3, 22, 2, 18, 17, 17, 64, 3, 0, 1, 58, 1, 68, 1, 200, 0, 18, 17, 17, 64, 5, 0, 0, 23, 255, 97, 128, 195, 9, 18, 17, 17, 64, 6, 0, 1, 28, 2, 113, 1, 75, 1, 18, 17, 17, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 18, 17, 17, 64, 11, 0, 1, 252, 172, 61, 252, 161, 95, 18, 17, 17, 64, 18, 0, 1, 120, 254, 104, 248, 175, 41, 18, 17, 17, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 18, 17, 17, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 18, 17, 17, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 18, 17, 17, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 18, 17, 17, 64, 36, 0, 1, 34, 214, 173, 227, 162, 183, 18, 17, 17, 64, 37, 0, 1, 0, 0, 0, 0, 247, 157, 121, 119, 23, 64, 41, 0, 1, 158, 232, 55, 250, 113, 16, 18, 17, 17, 64, 44, 0, 1, 0, 0, 0, 0, 204, 255, 18, 17, 17, 64, 45, 0, 1, 0, 0, 0, 0, 210, 255, 18, 17, 17, 64, 47, 0, 1, 0, 0, 0, 0, 182, 4, 18, 17, 17, 64, 53, 0, 1, 0, 0, 0, 0, 157, 255, 18, 17, 17, 64, 54, 0, 1, 0, 0, 0, 0, 112, 31, 51, 51, 19, 64, 57, 0, 1, 0, 0, 0, 0, 82, 8, 84, 85, 21, 64, 59, 0, 1, 0, 0, 0, 0, 83, 237, 51, 51, 19, 64, 60, 0, 1, 89, 4, 214, 251, 67, 8, 186, 187, 27, 64, 61, 0, 1, 0, 0, 0, 0, 132, 90, 18, 17, 17, 64, 63, 0, 1, 0, 0, 0, 0, 199, 240, 238, 238, 46, 64, 65, 0, 1, 254, 255, 252, 255, 132, 90, 84, 85, 21, 64, 2, 0, 1, 206, 254, 173, 3, 11, 2, 84, 85, 21, 64, 3, 0, 1, 59, 1, 70, 1, 200, 0, 51, 51, 19, 64, 5, 0, 0, 219, 254, 98, 128, 192, 9, 51, 51, 19, 64, 6, 0, 1, 30, 2, 114, 1, 75, 1, 186, 187, 27, 64, 7, 0, 1, 167, 2, 135, 0, 141, 1, 51, 51, 19, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 121, 119, 23, 64, 10, 0, 1, 160, 86, 225, 3, 50, 92, 51, 51, 19, 64, 11, 0, 1, 26, 173, 55, 252, 186, 95, 51, 51, 19, 64, 14, 0, 1, 0, 0, 0, 0, 225, 156, 51, 51, 19, 64, 16, 0, 1, 84, 90, 140, 246, 149, 6, 121, 119, 23, 64, 18, 0, 1, 120, 254, 104, 248, 175, 41, 186, 187, 27, 64, 20, 0, 1, 165, 0, 205, 25, 29, 37, 51, 51, 19, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 51, 51, 19, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 51, 51, 19, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 51, 51, 19, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 84, 85, 21, 64, 36, 0, 1, 6, 214, 106, 227, 4, 184, 84, 85, 21, 64, 37, 0, 1, 0, 0, 0, 0, 247, 157, 84, 85, 21, 64, 39, 0, 1, 188, 194, 38, 232, 92, 0, 51, 51, 19, 64, 40, 0, 1, 24, 216, 250, 254, 119, 30, 84, 85, 21, 64, 42, 0, 1, 174, 245, 46, 246, 140, 255, 51, 51, 19, 64, 44, 0, 1, 0, 0, 0, 0, 209, 255, 84, 85, 21, 64, 45, 0, 1, 0, 0, 0, 0, 219, 255, 51, 51, 19, 64, 47, 0, 1, 0, 0, 0, 0, 186, 4, 51, 51, 19, 64, 53, 0, 1, 0, 0, 0, 0, 166, 255, 84, 85, 21, 64, 54, 0, 1, 0, 0, 0, 0, 112, 31, 51, 51, 19, 64, 63, 0, 1, 0, 0, 0, 0, 153, 240, 121, 119, 23, 64, 64, 0, 1, 14, 23, 57, 255, 74, 17, 154, 153, 25, 64, 0, 0, 1, 59, 189, 46, 195, 39, 196, 154, 153, 25, 64, 1, 0, 1, 48, 192, 210, 191, 48, 192, 84, 85, 21, 64, 4, 0, 1, 101, 245, 184, 130, 13, 232, 84, 85, 21, 64, 5, 0, 0, 160, 254, 98, 128, 189, 9, 84, 85, 21, 64, 6, 0, 1, 31, 2, 115, 1, 75, 1, 84, 85, 21, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 121, 119, 23, 64, 9, 0, 1, 185, 248, 139, 2, 62, 10, 121, 119, 23, 64, 11, 0, 1, 84, 173, 44, 252, 236, 95, 84, 85, 21, 64, 13, 0, 1, 157, 24, 5, 36, 130, 187, 84, 85, 21, 64, 14, 0, 1, 0, 0, 0, 0, 203, 156, 84, 85, 21, 64, 15, 0, 1, 50, 164, 172, 17, 121, 12, 84, 85, 21, 64, 16, 0, 1, 84, 90, 140, 246, 149, 6, 186, 187, 27, 64, 19, 0, 1, 169, 247, 208, 253, 175, 30, 84, 85, 21, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 84, 85, 21, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 84, 85, 21, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 84, 85, 21, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 84, 85, 21, 64, 40, 0, 1, 31, 216, 249, 254, 119, 30, 84, 85, 21, 64, 43, 0, 1, 198, 225, 117, 251, 56, 239, 121, 119, 23, 64, 44, 0, 1, 0, 0, 0, 0, 219, 255, 186, 187, 27, 64, 47, 0, 1, 0, 0, 0, 0, 202, 4, 154, 153, 25, 64, 48, 0, 1, 0, 0, 0, 0, 80, 253, 121, 119, 23, 64, 51, 0, 1, 0, 0, 0, 0, 233, 249, 84, 85, 21, 64, 53, 0, 1, 0, 0, 0, 0, 175, 255, 84, 85, 21, 64, 56, 0, 1, 0, 0, 0, 0, 130, 255, 121, 119, 23, 64, 57, 0, 1, 0, 0, 0, 0, 84, 8, 121, 119, 23, 64, 60, 0, 1, 61, 4, 244, 251, 72, 8, 84, 85, 21, 64, 63, 0, 1, 0, 0, 0, 0, 108, 240, 154, 153, 25, 64, 2, 0, 1, 205, 254, 173, 3, 254, 1, 121, 119, 23, 64, 3, 0, 1, 59, 1, 70, 1, 200, 0, 121, 119, 23, 64, 4, 0, 1, 73, 245, 186, 130, 13, 232, 154, 153, 25, 64, 5, 0, 0, 46, 254, 100, 128, 185, 9, 121, 119, 23, 64, 6, 0, 1, 31, 2, 115, 1, 75, 1, 121, 119, 23, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 33, 34, 34, 64, 13, 0, 1, 232, 25, 241, 35, 113, 188, 121, 119, 23, 64, 14, 0, 1, 0, 0, 0, 0, 182, 156, 186, 187, 27, 64, 15, 0, 1, 205, 163, 113, 16, 251, 11, 154, 153, 25, 64, 16, 0, 1, 84, 90, 140, 246, 149, 6, 121, 119, 23, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 121, 119, 23, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 121, 119, 23, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 121, 119, 23, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 121, 119, 23, 64, 36, 0, 1, 249, 213, 70, 227, 52, 184, 186, 187, 27, 64, 37, 0, 1, 0, 0, 0, 0, 252, 157, 121, 119, 23, 64, 38, 0, 1, 16, 97, 170, 7, 36, 217, 121, 119, 23, 64, 39, 0, 1, 182, 194, 33, 232, 91, 0, 70, 68, 36, 64, 40, 0, 1, 81, 216, 240, 254, 116, 30, 154, 153, 25, 64, 42, 0, 1, 181, 245, 52, 246, 160, 255, 186, 187, 27, 64, 43, 0, 1, 224, 225, 136, 251, 80, 239, 223, 221, 29, 64, 45, 0, 1, 0, 0, 0, 0, 238, 255, 121, 119, 23, 64, 53, 0, 1, 0, 0, 0, 0, 185, 255, 33, 34, 34, 64, 54, 0, 1, 0, 0, 0, 0, 113, 31, 121, 119, 23, 64, 56, 0, 1, 0, 0, 0, 0, 145, 255, 121, 119, 23, 64, 59, 0, 1, 0, 0, 0, 0, 81, 237, 121, 119, 23, 64, 63, 0, 1, 0, 0, 0, 0, 64, 240, 186, 187, 27, 64, 3, 0, 1, 59, 1, 70, 1, 200, 0, 154, 153, 25, 64, 4, 0, 1, 46, 245, 188, 130, 13, 232, 154, 153, 25, 64, 6, 0, 1, 31, 2, 115, 1, 75, 1, 154, 153, 25, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 154, 153, 25, 64, 9, 0, 1, 189, 248, 128, 2, 94, 10, 154, 153, 25, 64, 10, 0, 1, 163, 86, 226, 3, 47, 92, 154, 153, 25, 64, 11, 0, 1, 113, 173, 39, 252, 5, 96, 186, 187, 27, 64, 14, 0, 1, 0, 0, 0, 0, 135, 156, 154, 153, 25, 64, 18, 0, 1, 120, 254, 104, 248, 175, 41, 154, 153, 25, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 154, 153, 25, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 186, 187, 27, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 154, 153, 25, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 154, 153, 25, 64, 36, 0, 1, 236, 213, 33, 227, 99, 184, 223, 221, 29, 64, 38, 0, 1, 169, 96, 162, 7, 188, 216, 186, 187, 27, 64, 39, 0, 1, 169, 194, 23, 232, 88, 0, 33, 34, 34, 64, 41, 0, 1, 186, 232, 63, 250, 146, 16, 186, 187, 27, 64, 44, 0, 1, 0, 0, 0, 0, 230, 255, 33, 34, 34, 64, 50, 0, 1, 0, 0, 0, 0, 189, 3, 186, 187, 27, 64, 51, 0, 1, 0, 0, 0, 0, 243, 249, 154, 153, 25, 64, 53, 0, 1, 0, 0, 0, 0, 195, 255, 70, 68, 36, 64, 56, 0, 1, 0, 0, 0, 0, 243, 255, 154, 153, 25, 64, 57, 0, 1, 0, 0, 0, 0, 85, 8, 154, 153, 25, 64, 59, 0, 1, 0, 0, 0, 0, 79, 237, 186, 187, 27, 64, 60, 0, 1, 33, 4, 19, 252, 75, 8, 186, 187, 27, 64, 63, 0, 1, 0, 0, 0, 0, 235, 239, 186, 187, 27, 64, 64, 0, 1, 251, 22, 91, 255, 95, 17, 186, 187, 27, 64, 0, 0, 1, 83, 189, 56, 195, 20, 196, 33, 34, 34, 64, 1, 0, 1, 48, 192, 209, 191, 48, 192, 223, 221, 29, 64, 2, 0, 1, 206, 254, 170, 3, 237, 1, 186, 187, 27, 64, 4, 0, 1, 18, 245, 190, 130, 13, 232, 135, 136, 40, 64, 5, 0, 0, 228, 252, 106, 128, 177, 9, 186, 187, 27, 64, 6, 0, 1, 30, 2, 115, 1, 75, 1, 186, 187, 27, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 186, 187, 27, 64, 9, 0, 1, 195, 248, 120, 2, 129, 10, 186, 187, 27, 64, 10, 0, 1, 166, 86, 226, 3, 44, 92, 186, 187, 27, 64, 11, 0, 1, 142, 173, 34, 252, 31, 96, 186, 187, 27, 64, 16, 0, 1, 84, 90, 140, 246, 149, 6, 186, 187, 27, 64, 18, 0, 1, 120, 254, 104, 248, 175, 41, 186, 187, 27, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 186, 187, 27, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 186, 187, 27, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 186, 187, 27, 64, 36, 0, 1, 225, 213, 250, 226, 145, 184, 223, 221, 29, 64, 42, 0, 1, 188, 245, 58, 246, 180, 255, 186, 187, 27, 64, 48, 0, 1, 0, 0, 0, 0, 86, 253, 223, 221, 29, 64, 53, 0, 1, 0, 0, 0, 0, 216, 255, 223, 221, 29, 64, 57, 0, 1, 0, 0, 0, 0, 88, 8, 0, 0, 32, 64, 59, 0, 1, 0, 0, 0, 0, 67, 237, 0, 0, 32, 64, 0, 0, 1, 129, 189, 77, 195, 239, 195, 223, 221, 29, 64, 3, 0, 1, 58, 1, 69, 1, 200, 0, 0, 0, 32, 64, 4, 0, 1, 221, 244, 194, 130, 16, 232, 223, 221, 29, 64, 6, 0, 1, 29, 2, 114, 1, 75, 1, 223, 221, 29, 64, 7, 0, 1, 166, 2, 135, 0, 141, 1, 223, 221, 29, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 223, 221, 29, 64, 9, 0, 1, 210, 248, 84, 2, 41, 10, 0, 0, 32, 64, 10, 0, 1, 170, 86, 227, 3, 39, 92, 223, 221, 29, 64, 11, 0, 1, 171, 173, 29, 252, 56, 96, 223, 221, 29, 64, 14, 0, 1, 0, 0, 0, 0, 111, 156, 0, 0, 32, 64, 15, 0, 1, 134, 163, 138, 15, 160, 11, 223, 221, 29, 64, 16, 0, 1, 84, 90, 140, 246, 149, 6, 223, 221, 29, 64, 17, 0, 1, 68, 7, 113, 253, 53, 35, 0, 0, 32, 64, 18, 0, 1, 120, 254, 104, 248, 175, 41, 223, 221, 29, 64, 19, 0, 1, 169, 247, 208, 253, 175, 30, 223, 221, 29, 64, 20, 0, 1, 165, 0, 205, 25, 29, 37, 223, 221, 29, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 223, 221, 29, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 223, 221, 29, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 0, 0, 32, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 0, 0, 32, 64, 36, 0, 1, 203, 213, 169, 226, 232, 184, 223, 221, 29, 64, 37, 0, 1, 0, 0, 0, 0, 253, 157, 102, 102, 38, 64, 39, 0, 1, 139, 194, 254, 231, 80, 0, 223, 221, 29, 64, 43, 0, 1, 233, 225, 143, 251, 89, 239, 223, 221, 29, 64, 44, 0, 1, 0, 0, 0, 0, 235, 255, 223, 221, 29, 64, 47, 0, 1, 0, 0, 0, 0, 206, 4, 223, 221, 29, 64, 48, 0, 1, 0, 0, 0, 0, 92, 253, 223, 221, 29, 64, 51, 0, 1, 0, 0, 0, 0, 248, 249, 0, 0, 32, 64, 60, 0, 1, 7, 4, 50, 252, 83, 8, 223, 221, 29, 64, 61, 0, 1, 0, 0, 0, 0, 134, 90, 33, 34, 34, 64, 63, 0, 1, 0, 0, 0, 0, 114, 239, 223, 221, 29, 64, 64, 0, 1, 242, 22, 109, 255, 102, 17, 0, 0, 32, 64, 2, 0, 1, 206, 254, 166, 3, 228, 1, 33, 34, 34, 64, 3, 0, 1, 55, 1, 66, 1, 200, 0, 33, 34, 34, 64, 6, 0, 1, 24, 2, 110, 1, 75, 1, 0, 0, 32, 64, 7, 0, 1, 163, 2, 134, 0, 141, 1, 0, 0, 32, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 32, 64, 9, 0, 1, 239, 248, 245, 1, 224, 8, 0, 0, 32, 64, 11, 0, 1, 200, 173, 24, 252, 81, 96, 0, 0, 32, 64, 14, 0, 1, 0, 0, 0, 0, 86, 156, 70, 68, 36, 64, 16, 0, 1, 84, 90, 140, 246, 149, 6, 172, 170, 42, 64, 17, 0, 1, 67, 7, 113, 253, 53, 35, 0, 0, 32, 64, 19, 0, 1, 169, 247, 208, 253, 175, 30, 135, 136, 40, 64, 20, 0, 1, 166, 0, 205, 25, 29, 37, 0, 0, 32, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 0, 0, 32, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 0, 0, 32, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 0, 0, 32, 64, 30, 0, 1, 0, 0, 0, 0, 178, 5, 102, 102, 38, 64, 37, 0, 1, 0, 0, 0, 0, 243, 157, 0, 0, 32, 64, 38, 0, 1, 132, 96, 164, 7, 149, 216, 0, 0, 32, 64, 42, 0, 1, 192, 245, 61, 246, 191, 255, 0, 0, 32, 64, 43, 0, 1, 242, 225, 150, 251, 97, 239, 0, 0, 32, 64, 44, 0, 1, 0, 0, 0, 0, 241, 255, 0, 0, 32, 64, 45, 0, 1, 0, 0, 0, 0, 243, 255, 33, 34, 34, 64, 47, 0, 1, 0, 0, 0, 0, 215, 4, 33, 34, 34, 64, 48, 0, 1, 0, 0, 0, 0, 104, 253, 33, 34, 34, 64, 51, 0, 1, 0, 0, 0, 0, 2, 250, 0, 0, 32, 64, 53, 0, 1, 0, 0, 0, 0, 227, 255, 0, 0, 32, 64, 57, 0, 1, 0, 0, 0, 0, 89, 8, 0, 0, 32, 64, 61, 0, 1, 0, 0, 0, 0, 132, 90, 33, 34, 34, 64, 64, 0, 1, 224, 22, 143, 255, 121, 17, 33, 34, 34, 64, 0, 0, 1, 151, 189, 87, 195, 220, 195, 33, 34, 34, 64, 2, 0, 1, 207, 254, 161, 3, 218, 1, 70, 68, 36, 64, 4, 0, 1, 171, 244, 198, 130, 20, 232, 33, 34, 34, 64, 7, 0, 1, 160, 2, 133, 0, 141, 1, 33, 34, 34, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 33, 34, 34, 64, 9, 0, 1, 32, 249, 97, 1, 177, 6, 70, 68, 36, 64, 10, 0, 1, 173, 86, 228, 3, 36, 92, 70, 68, 36, 64, 11, 0, 1, 8, 174, 13, 252, 135, 96, 33, 34, 34, 64, 14, 0, 1, 0, 0, 0, 0, 60, 156, 135, 136, 40, 64, 15, 0, 1, 228, 162, 107, 13, 200, 10, 102, 102, 38, 64, 18, 0, 1, 120, 254, 104, 248, 175, 41, 33, 34, 34, 64, 19, 0, 1, 169, 247, 208, 253, 175, 30, 33, 34, 34, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 33, 34, 34, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 33, 34, 34, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 33, 34, 34, 64, 30, 0, 1, 0, 0, 0, 0, 178, 5, 33, 34, 34, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 135, 136, 40, 64, 36, 0, 1, 188, 213, 19, 226, 106, 185, 70, 68, 36, 64, 38, 0, 1, 75, 96, 172, 7, 112, 216, 70, 68, 36, 64, 42, 0, 1, 194, 245, 63, 246, 201, 255, 102, 102, 38, 64, 43, 0, 1, 11, 226, 168, 251, 120, 239, 33, 34, 34, 64, 44, 0, 1, 0, 0, 0, 0, 246, 255, 33, 34, 34, 64, 45, 0, 1, 0, 0, 0, 0, 247, 255, 102, 102, 38, 64, 53, 0, 1, 0, 0, 0, 0, 0, 0, 172, 170, 42, 64, 57, 0, 1, 0, 0, 0, 0, 56, 8, 33, 34, 34, 64, 59, 0, 1, 0, 0, 0, 0, 60, 237, 33, 34, 34, 64, 60, 0, 1, 251, 3, 66, 252, 91, 8, 135, 136, 40, 64, 61, 0, 1, 0, 0, 0, 0, 128, 90, 205, 204, 44, 64, 0, 0, 1, 228, 189, 150, 195, 104, 195, 70, 68, 36, 64, 1, 0, 1, 48, 192, 209, 191, 48, 192, 70, 68, 36, 64, 2, 0, 1, 209, 254, 155, 3, 207, 1, 70, 68, 36, 64, 3, 0, 1, 53, 1, 64, 1, 200, 0, 70, 68, 36, 64, 6, 0, 1, 21, 2, 108, 1, 75, 1, 172, 170, 42, 64, 7, 0, 1, 136, 2, 129, 0, 141, 1, 70, 68, 36, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 70, 68, 36, 64, 9, 0, 1, 103, 249, 132, 0, 78, 3, 135, 136, 40, 64, 13, 0, 1, 202, 26, 215, 35, 37, 189, 70, 68, 36, 64, 14, 0, 1, 0, 0, 0, 0, 32, 156, 70, 68, 36, 64, 19, 0, 1, 169, 247, 208, 253, 175, 30, 70, 68, 36, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 70, 68, 36, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 70, 68, 36, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 70, 68, 36, 64, 30, 0, 1, 0, 0, 0, 0, 178, 5, 102, 102, 38, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 70, 68, 36, 64, 41, 0, 1, 185, 232, 61, 250, 146, 16, 16, 17, 193, 64, 44, 0, 1, 0, 0, 0, 0, 248, 255, 35, 34, 194, 64, 45, 0, 1, 0, 0, 0, 0, 248, 255, 70, 68, 36, 64, 47, 0, 1, 0, 0, 0, 0, 219, 4, 70, 68, 36, 64, 48, 0, 1, 0, 0, 0, 0, 107, 253, 102, 102, 38, 64, 50, 0, 1, 0, 0, 0, 0, 203, 3, 70, 68, 36, 64, 51, 0, 1, 0, 0, 0, 0, 5, 250, 70, 68, 36, 64, 54, 0, 1, 0, 0, 0, 0, 118, 31, 70, 68, 36, 64, 59, 0, 1, 0, 0, 0, 0, 54, 237, 70, 68, 36, 64, 60, 0, 1, 239, 3, 82, 252, 100, 8, 70, 68, 36, 64, 63, 0, 1, 0, 0, 0, 0, 76, 239, 70, 68, 36, 64, 64, 0, 1, 216, 22, 161, 255, 127, 17, 102, 102, 38, 64, 1, 0, 1, 48, 192, 209, 191, 48, 192, 135, 136, 40, 64, 2, 0, 1, 213, 254, 138, 3, 183, 1, 135, 136, 40, 64, 3, 0, 1, 48, 1, 58, 1, 200, 0, 102, 102, 38, 64, 4, 0, 1, 144, 244, 199, 130, 23, 232, 51, 51, 51, 64, 6, 0, 1, 226, 1, 74, 1, 75, 1, 102, 102, 38, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 172, 170, 42, 64, 9, 0, 1, 113, 250, 135, 253, 3, 247, 135, 136, 40, 64, 10, 0, 1, 175, 86, 229, 3, 34, 92, 172, 170, 42, 64, 11, 0, 1, 11, 174, 250, 251, 134, 96, 205, 204, 44, 64, 14, 0, 1, 0, 0, 0, 0, 178, 155, 102, 102, 38, 64, 16, 0, 1, 84, 90, 140, 246, 149, 6, 51, 51, 51, 64, 19, 0, 1, 158, 247, 200, 253, 195, 30, 135, 136, 40, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 102, 102, 38, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 102, 102, 38, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 135, 136, 40, 64, 30, 0, 1, 0, 0, 0, 0, 178, 5, 135, 136, 40, 64, 38, 0, 1, 59, 96, 228, 7, 73, 216, 135, 136, 40, 64, 40, 0, 1, 156, 216, 247, 254, 130, 30, 135, 136, 40, 64, 41, 0, 1, 236, 232, 88, 250, 203, 16, 135, 136, 40, 64, 42, 0, 1, 233, 245, 93, 246, 20, 0, 135, 136, 40, 64, 47, 0, 1, 0, 0, 0, 0, 225, 4, 135, 136, 40, 64, 48, 0, 1, 0, 0, 0, 0, 131, 253, 102, 102, 38, 64, 51, 0, 1, 0, 0, 0, 0, 10, 250, 172, 170, 42, 64, 54, 0, 1, 0, 0, 0, 0, 24, 31, 188, 187, 187, 64, 56, 0, 1, 0, 0, 0, 0, 248, 255, 102, 102, 38, 64, 59, 0, 1, 0, 0, 0, 0, 41, 237, 238, 238, 46, 64, 60, 0, 1, 148, 3, 232, 252, 224, 8, 102, 102, 38, 64, 63, 0, 1, 0, 0, 0, 0, 42, 239, 135, 136, 40, 64, 64, 0, 1, 197, 22, 208, 255, 132, 17, 84, 85, 53, 64, 1, 0, 1, 47, 192, 210, 191, 47, 192, 172, 170, 42, 64, 4, 0, 1, 82, 244, 204, 130, 30, 232, 135, 136, 40, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 238, 238, 46, 64, 16, 0, 1, 89, 90, 133, 246, 150, 6, 172, 170, 42, 64, 18, 0, 1, 120, 254, 104, 248, 175, 41, 135, 136, 40, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 135, 136, 40, 64]).concat([27, 0, 1, 0, 0, 0, 0, 168, 8, 135, 136, 40, 64, 31, 0, 1, 0, 0, 0, 0, 196, 10, 205, 204, 44, 64, 37, 0, 1, 0, 0, 0, 0, 1, 158, 172, 170, 42, 64, 39, 0, 1, 248, 193, 137, 232, 103, 0, 135, 136, 40, 64, 43, 0, 1, 77, 226, 178, 251, 202, 239, 238, 238, 46, 64, 50, 0, 1, 0, 0, 0, 0, 10, 4, 135, 136, 40, 64, 51, 0, 1, 0, 0, 0, 0, 21, 250, 205, 204, 44, 64, 53, 0, 1, 0, 0, 0, 0, 48, 0, 135, 136, 40, 64, 59, 0, 1, 0, 0, 0, 0, 15, 237, 135, 136, 40, 64, 63, 0, 1, 0, 0, 0, 0, 16, 239, 238, 238, 46, 64, 2, 0, 1, 222, 254, 101, 3, 139, 1, 172, 170, 42, 64, 3, 0, 1, 44, 1, 54, 1, 200, 0, 18, 17, 49, 64, 5, 0, 0, 186, 252, 108, 128, 184, 9, 172, 170, 42, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 84, 85, 53, 64, 10, 0, 1, 179, 86, 231, 3, 29, 92, 172, 170, 42, 64, 13, 0, 1, 16, 27, 206, 35, 97, 189, 172, 170, 42, 64, 15, 0, 1, 190, 162, 233, 12, 156, 10, 172, 170, 42, 64, 20, 0, 1, 165, 0, 205, 25, 30, 37, 172, 170, 42, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 172, 170, 42, 64, 25, 0, 1, 0, 0, 0, 0, 6, 7, 172, 170, 42, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 172, 170, 42, 64, 30, 0, 1, 0, 0, 0, 0, 178, 5, 238, 238, 46, 64, 31, 0, 1, 0, 0, 0, 0, 191, 10, 205, 204, 44, 64, 36, 0, 1, 205, 213, 208, 225, 114, 185, 18, 17, 49, 64, 38, 0, 1, 9, 96, 187, 8, 172, 215, 205, 204, 44, 64, 40, 0, 1, 140, 217, 19, 255, 180, 30, 205, 204, 44, 64, 41, 0, 1, 143, 233, 178, 250, 126, 17, 205, 204, 44, 64, 42, 0, 1, 103, 246, 188, 246, 251, 0, 172, 170, 42, 64, 43, 0, 1, 185, 226, 193, 251, 81, 240, 205, 204, 44, 64, 47, 0, 1, 0, 0, 0, 0, 232, 4, 238, 238, 46, 64, 48, 0, 1, 0, 0, 0, 0, 239, 253, 121, 119, 55, 64, 51, 0, 1, 0, 0, 0, 0, 188, 250, 205, 204, 44, 64, 59, 0, 1, 0, 0, 0, 0, 191, 236, 18, 17, 49, 64, 61, 0, 1, 0, 0, 0, 0, 133, 90, 172, 170, 42, 64, 63, 0, 1, 0, 0, 0, 0, 253, 238, 172, 170, 42, 64, 64, 0, 1, 183, 22, 237, 255, 129, 17, 205, 204, 44, 64, 3, 0, 1, 40, 1, 50, 1, 200, 0, 205, 204, 44, 64, 4, 0, 1, 52, 244, 206, 130, 35, 232, 51, 51, 51, 64, 7, 0, 1, 92, 2, 120, 0, 141, 1, 205, 204, 44, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 44, 64, 9, 0, 1, 201, 250, 188, 252, 128, 243, 205, 204, 44, 64, 11, 0, 1, 248, 173, 237, 251, 114, 96, 238, 238, 46, 64, 13, 0, 1, 29, 27, 207, 35, 130, 189, 18, 17, 49, 64, 15, 0, 1, 151, 162, 169, 12, 4, 11, 18, 17, 49, 64, 17, 0, 1, 52, 7, 111, 253, 55, 35, 205, 204, 44, 64, 18, 0, 1, 118, 254, 103, 248, 177, 41, 205, 204, 44, 64, 20, 0, 1, 163, 0, 204, 25, 35, 37, 18, 17, 49, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 205, 204, 44, 64, 25, 0, 1, 0, 0, 0, 0, 7, 7, 205, 204, 44, 64, 27, 0, 1, 0, 0, 0, 0, 168, 8, 238, 238, 46, 64, 30, 0, 1, 0, 0, 0, 0, 180, 5, 84, 85, 53, 64, 39, 0, 1, 51, 191, 50, 235, 212, 0, 18, 17, 49, 64, 43, 0, 1, 190, 228, 12, 252, 213, 242, 238, 238, 46, 64, 54, 0, 1, 0, 0, 0, 0, 104, 30, 18, 17, 49, 64, 57, 0, 1, 0, 0, 0, 0, 204, 7, 205, 204, 44, 64, 63, 0, 1, 0, 0, 0, 0, 244, 238, 51, 51, 51, 64, 64, 0, 1, 56, 22, 126, 0, 26, 17, 51, 51, 51, 64, 0, 0, 1, 221, 189, 152, 195, 255, 194, 18, 17, 49, 64, 3, 0, 1, 30, 1, 40, 1, 200, 0, 238, 238, 46, 64, 4, 0, 1, 25, 244, 207, 130, 39, 232, 238, 238, 46, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 238, 238, 46, 64, 9, 0, 1, 22, 251, 42, 252, 200, 240, 18, 17, 49, 64, 11, 0, 1, 205, 173, 208, 251, 71, 96, 238, 238, 46, 64, 14, 0, 1, 0, 0, 0, 0, 156, 155, 51, 51, 51, 64, 18, 0, 1, 105, 254, 96, 248, 189, 41, 84, 85, 53, 64, 20, 0, 1, 142, 0, 195, 25, 73, 37, 51, 51, 51, 64, 25, 0, 1, 0, 0, 0, 0, 11, 7, 238, 238, 46, 64, 27, 0, 1, 0, 0, 0, 0, 169, 8, 238, 238, 46, 64, 36, 0, 1, 215, 213, 163, 225, 122, 185, 238, 238, 46, 64, 37, 0, 1, 0, 0, 0, 0, 8, 158, 186, 187, 59, 64, 40, 0, 1, 183, 221, 142, 255, 135, 31, 238, 238, 46, 64, 41, 0, 1, 253, 233, 239, 250, 247, 17, 238, 238, 46, 64, 42, 0, 1, 189, 246, 252, 246, 151, 1, 238, 238, 46, 64, 47, 0, 1, 0, 0, 0, 0, 237, 4, 238, 238, 46, 64, 53, 0, 1, 0, 0, 0, 0, 74, 0, 154, 153, 57, 64, 59, 0, 1, 0, 0, 0, 0, 15, 235, 84, 85, 53, 64, 63, 0, 1, 0, 0, 0, 0, 52, 239, 18, 17, 49, 64, 2, 0, 1, 226, 254, 85, 3, 122, 1, 18, 17, 49, 64, 4, 0, 1, 4, 244, 208, 130, 45, 232, 18, 17, 49, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 18, 17, 49, 64, 9, 0, 1, 79, 251, 247, 251, 110, 239, 51, 51, 51, 64, 13, 0, 1, 41, 27, 207, 35, 171, 189, 18, 17, 49, 64, 14, 0, 1, 0, 0, 0, 0, 131, 155, 223, 221, 61, 64, 16, 0, 1, 118, 90, 91, 246, 157, 6, 18, 17, 49, 64, 27, 0, 1, 0, 0, 0, 0, 170, 8, 51, 51, 51, 64, 30, 0, 1, 0, 0, 0, 0, 182, 5, 84, 85, 53, 64, 31, 0, 1, 0, 0, 0, 0, 179, 10, 18, 17, 49, 64, 36, 0, 1, 226, 213, 120, 225, 130, 185, 18, 17, 49, 64, 37, 0, 1, 0, 0, 0, 0, 15, 158, 18, 17, 49, 64, 41, 0, 1, 100, 234, 40, 251, 105, 18, 18, 17, 49, 64, 42, 0, 1, 13, 247, 56, 247, 41, 2, 154, 153, 57, 64, 47, 0, 1, 0, 0, 0, 0, 4, 5, 51, 51, 51, 64, 48, 0, 1, 0, 0, 0, 0, 64, 254, 154, 153, 57, 64, 50, 0, 1, 0, 0, 0, 0, 113, 4, 51, 51, 51, 64, 53, 0, 1, 0, 0, 0, 0, 123, 0, 84, 85, 53, 64, 54, 0, 1, 0, 0, 0, 0, 100, 29, 121, 119, 55, 64, 60, 0, 1, 216, 2, 153, 253, 164, 9, 33, 34, 66, 64, 65, 0, 1, 254, 255, 252, 255, 132, 90, 51, 51, 51, 64, 2, 0, 1, 230, 254, 68, 3, 105, 1, 51, 51, 51, 64, 3, 0, 1, 24, 1, 33, 1, 200, 0, 51, 51, 51, 64, 4, 0, 1, 245, 243, 209, 130, 50, 232, 51, 51, 51, 64, 5, 0, 0, 211, 252, 108, 128, 188, 9, 51, 51, 51, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 84, 85, 53, 64, 9, 0, 1, 179, 251, 17, 252, 86, 238, 51, 51, 51, 64, 11, 0, 1, 185, 173, 195, 251, 50, 96, 84, 85, 53, 64, 14, 0, 1, 0, 0, 0, 0, 74, 155, 121, 119, 55, 64, 15, 0, 1, 119, 162, 85, 12, 118, 11, 186, 187, 59, 64, 17, 0, 1, 18, 7, 108, 253, 60, 35, 154, 153, 57, 64, 24, 0, 1, 0, 0, 0, 0, 252, 5, 186, 187, 59, 64, 27, 0, 1, 0, 0, 0, 0, 174, 8, 84, 85, 53, 64, 36, 0, 1, 246, 213, 30, 225, 143, 185, 84, 85, 53, 64, 37, 0, 1, 0, 0, 0, 0, 30, 158, 84, 85, 53, 64, 38, 0, 1, 233, 95, 32, 9, 98, 215, 121, 119, 55, 64, 41, 0, 1, 151, 235, 208, 251, 184, 19, 51, 51, 51, 64, 42, 0, 1, 92, 247, 116, 247, 187, 2, 84, 85, 53, 64, 43, 0, 1, 20, 230, 61, 252, 125, 244, 51, 51, 51, 64, 57, 0, 1, 0, 0, 0, 0, 169, 7, 51, 51, 51, 64, 61, 0, 1, 0, 0, 0, 0, 135, 90, 84, 85, 53, 64, 0, 0, 1, 210, 189, 141, 195, 213, 194, 154, 153, 57, 64, 2, 0, 1, 246, 254, 6, 3, 43, 1, 84, 85, 53, 64, 3, 0, 1, 17, 1, 27, 1, 200, 0, 121, 119, 55, 64, 4, 0, 1, 229, 243, 208, 130, 64, 232, 223, 221, 61, 64, 5, 0, 0, 245, 253, 103, 128, 221, 9, 121, 119, 55, 64, 6, 0, 1, 203, 1, 58, 1, 75, 1, 121, 119, 55, 64, 7, 0, 1, 63, 2, 114, 0, 142, 1, 84, 85, 53, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 121, 119, 55, 64, 11, 0, 1, 144, 173, 168, 251, 8, 96, 186, 187, 59, 64, 13, 0, 1, 67, 27, 204, 35, 14, 190, 84, 85, 53, 64, 18, 0, 1, 101, 254, 94, 248, 194, 41, 121, 119, 55, 64, 19, 0, 1, 151, 247, 195, 253, 207, 30, 154, 153, 57, 64, 25, 0, 1, 0, 0, 0, 0, 17, 7, 84, 85, 53, 64, 30, 0, 1, 0, 0, 0, 0, 183, 5, 84, 85, 53, 64, 42, 0, 1, 171, 247, 176, 247, 75, 3, 84, 85, 53, 64, 48, 0, 1, 0, 0, 0, 0, 105, 254, 121, 119, 55, 64, 53, 0, 1, 0, 0, 0, 0, 170, 0, 84, 85, 53, 64, 57, 0, 1, 0, 0, 0, 0, 134, 7, 84, 85, 53, 64, 61, 0, 1, 0, 0, 0, 0, 133, 90, 84, 85, 53, 64, 64, 0, 1, 2, 22, 164, 0, 234, 16, 33, 34, 66, 64, 0, 0, 1, 104, 189, 32, 195, 151, 193, 70, 68, 68, 64, 1, 0, 1, 46, 192, 211, 191, 46, 192, 121, 119, 55, 64, 3, 0, 1, 10, 1, 19, 1, 200, 0, 121, 119, 55, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 154, 153, 57, 64, 9, 0, 1, 19, 252, 122, 252, 17, 238, 121, 119, 55, 64, 10, 0, 1, 180, 86, 232, 3, 28, 92, 186, 187, 59, 64, 14, 0, 1, 0, 0, 0, 0, 235, 154, 121, 119, 55, 64, 18, 0, 1, 96, 254, 91, 248, 198, 41, 154, 153, 57, 64, 20, 0, 1, 131, 0, 191, 25, 93, 37, 121, 119, 55, 64, 30, 0, 1, 0, 0, 0, 0, 184, 5, 154, 153, 57, 64, 31, 0, 1, 0, 0, 0, 0, 172, 10, 154, 153, 57, 64, 36, 0, 1, 12, 214, 192, 224, 156, 185, 121, 119, 55, 64, 37, 0, 1, 0, 0, 0, 0, 38, 158, 186, 187, 59, 64, 38, 0, 1, 185, 95, 170, 9, 247, 214, 121, 119, 55, 64, 39, 0, 1, 169, 190, 184, 235, 233, 0, 154, 153, 57, 64, 42, 0, 1, 72, 248, 38, 248, 104, 4, 172, 170, 74, 64, 43, 0, 1, 150, 236, 46, 253, 121, 252, 121, 119, 55, 64, 48, 0, 1, 0, 0, 0, 0, 145, 254, 121, 119, 55, 64, 54, 0, 1, 0, 0, 0, 0, 15, 29, 154, 153, 57, 64, 57, 0, 1, 0, 0, 0, 0, 64, 7, 154, 153, 57, 64, 61, 0, 1, 0, 0, 0, 0, 127, 90, 154, 153, 57, 64, 63, 0, 1, 0, 0, 0, 0, 146, 239, 121, 119, 55, 64, 64, 0, 1, 196, 21, 203, 0, 179, 16, 223, 221, 61, 64, 3, 0, 1, 243, 0, 251, 0, 200, 0, 154, 153, 57, 64, 4, 0, 1, 225, 243, 208, 130, 72, 232, 186, 187, 59, 64, 6, 0, 1, 177, 1, 40, 1, 75, 1, 186, 187, 59, 64, 7, 0, 1, 30, 2, 108, 0, 142, 1, 154, 153, 57, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 186, 187, 59, 64, 10, 0, 1, 182, 86, 233, 3, 27, 92, 186, 187, 59, 64, 11, 0, 1, 105, 173, 142, 251, 223, 95, 186, 187, 59, 64, 15, 0, 1, 91, 162, 24, 12, 203, 11, 154, 153, 57, 64, 18, 0, 1, 91, 254, 89, 248, 202, 41, 186, 187, 59, 64, 19, 0, 1, 144, 247, 190, 253, 219, 30, 33, 34, 66, 64, 30, 0, 1, 0, 0, 0, 0, 189, 5, 154, 153, 57, 64, 34, 0, 1, 0, 0, 0, 0, 246, 255, 154, 153, 57, 64, 37, 0, 1, 0, 0, 0, 0, 47, 158, 186, 187, 59, 64, 39, 0, 1, 156, 189, 193, 236, 20, 1, 154, 153, 57, 64, 41, 0, 1, 252, 235, 8, 252, 37, 20, 154, 153, 57, 64, 48, 0, 1, 0, 0, 0, 0, 185, 254, 154, 153, 57, 64, 51, 0, 1, 0, 0, 0, 0, 213, 250, 186, 187, 59, 64, 53, 0, 1, 0, 0, 0, 0, 218, 0, 186, 187, 59, 64, 54, 0, 1, 0, 0, 0, 0, 102, 28, 186, 187, 59, 64, 60, 0, 1, 85, 2, 251, 253, 30, 10, 154, 153, 57, 64, 64, 0, 1, 129, 21, 243, 0, 118, 16, 223, 221, 61, 64, 2, 0, 1, 2, 255, 214, 2, 249, 0, 0, 0, 64, 64, 4, 0, 1, 227, 243, 204, 130, 99, 232, 186, 187, 59, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 223, 221, 61, 64, 9, 0, 1, 115, 252, 23, 253, 81, 238, 0, 0, 64, 64, 18, 0, 1, 78, 254, 82, 248, 216, 41, 223, 221, 61, 64, 20, 0, 1, 119, 0, 186, 25, 114, 37, 186, 187, 59, 64, 24, 0, 1, 0, 0, 0, 0, 252, 5, 186, 187, 59, 64, 25, 0, 1, 0, 0, 0, 0, 18, 7, 0, 0, 64, 64, 31, 0, 1, 0, 0, 0, 0, 160, 10, 186, 187, 59, 64, 34, 0, 1, 0, 0, 0, 0, 245, 255, 186, 187, 59, 64, 36, 0, 1, 23, 214, 144, 224, 163, 185, 223, 221, 61, 64, 37, 0, 1, 0, 0, 0, 0, 65, 158, 186, 187, 59, 64, 41, 0, 1, 96, 236, 63, 252, 146, 20, 33, 34, 66, 64, 42, 0, 1, 124, 249, 14, 249, 152, 6, 186, 187, 59, 64, 47, 0, 1, 0, 0, 0, 0, 9, 5, 186, 187, 59, 64, 48, 0, 1, 0, 0, 0, 0, 224, 254, 0, 0, 64, 64, 50, 0, 1, 0, 0, 0, 0, 173, 4, 0, 0, 64, 64, 51, 0, 1, 0, 0, 0, 0, 31, 251, 223, 221, 61, 64, 57, 0, 1, 0, 0, 0, 0, 251, 6, 223, 221, 61, 64, 59, 0, 1, 0, 0, 0, 0, 93, 234, 186, 187, 59, 64, 61, 0, 1, 0, 0, 0, 0, 126, 90, 223, 221, 61, 64, 63, 0, 1, 0, 0, 0, 0, 20, 240, 186, 187, 59, 64, 64, 0, 1, 57, 21, 28, 1, 50, 16, 33, 34, 66, 64, 6, 0, 1, 132, 1, 9, 1, 75, 1, 0, 0, 64, 64, 7, 0, 1, 249, 1, 100, 0, 142, 1, 223, 221, 61, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 70, 68, 68, 64, 10, 0, 1, 185, 86, 235, 3, 23, 92, 0, 0, 64, 64, 11, 0, 1, 66, 173, 116, 251, 182, 95, 0, 0, 64, 64, 13, 0, 1, 81, 27, 203, 35, 71, 190, 223, 221, 61, 64, 14, 0, 1, 0, 0, 0, 0, 201, 154, 0, 0, 64, 64, 15, 0, 1, 61, 162, 218, 11, 36, 12, 0, 0, 64, 64, 17, 0, 1, 4, 7, 106, 253, 62, 35, 223, 221, 61, 64, 19, 0, 1, 140, 247, 187, 253, 225, 30, 223, 221, 61, 64, 24, 0, 1, 0, 0, 0, 0, 252, 5, 223, 221, 61, 64, 25, 0, 1, 0, 0, 0, 0, 20, 7, 223, 221, 61, 64, 27, 0, 1, 0, 0, 0, 0, 175, 8, 223, 221, 61, 64, 28, 0, 1, 0, 0, 0, 0, 9, 0, 223, 221, 61, 64, 34, 0, 1, 0, 0, 0, 0, 243, 255, 0, 0, 64, 64, 36, 0, 1, 46, 214, 44, 224, 176, 185, 33, 34, 66, 64, 38, 0, 1, 139, 95, 38, 10, 145, 214, 0, 0, 64, 64, 39, 0, 1, 148, 188, 201, 237, 62, 1, 33, 34, 66, 64, 40, 0, 1, 113, 223, 192, 255, 219, 31, 33, 34, 66, 64, 41, 0, 1, 139, 237, 226, 252, 213, 21, 223, 221, 61, 64, 47, 0, 1, 0, 0, 0, 0, 13, 5, 0, 0, 64, 64, 48, 0, 1, 0, 0, 0, 0, 47, 255, 223, 221, 61, 64, 53, 0, 1, 0, 0, 0, 0, 241, 0, 0, 0, 64, 64, 54, 0, 1, 0, 0, 0, 0, 190, 27, 0, 0, 64, 64, 60, 0, 1, 194, 1, 97, 254, 143, 10, 223, 221, 61, 64, 61, 0, 1, 0, 0, 0, 0, 127, 90, 33, 34, 66, 64, 64, 0, 1, 77, 20, 152, 1, 68, 15, 33, 34, 66, 64, 2, 0, 1, 16, 255, 161, 2, 194, 0, 33, 34, 66, 64, 3, 0, 1, 225, 0, 233, 0, 200, 0, 205, 204, 76, 64, 5, 0, 1, 150, 0, 104, 128, 28, 10, 0, 0, 64, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 70, 68, 68, 64, 9, 0, 1, 8, 253, 73, 254, 130, 239, 33, 34, 66, 64, 14, 0, 1, 0, 0, 0, 0, 132, 154, 172, 170, 74, 64, 16, 0, 1, 144, 90, 55, 246, 162, 6, 0, 0, 64, 64, 19, 0, 1, 137, 247, 184, 253, 231, 30, 33, 34, 66, 64, 20, 0, 1, 108, 0, 182, 25, 134, 37, 0, 0, 64, 64, 24, 0, 1, 0, 0, 0, 0, 253, 5, 33, 34, 66, 64, 25, 0, 1, 0, 0, 0, 0, 24, 7, 0, 0, 64, 64, 27, 0, 1, 0, 0, 0, 0, 176, 8, 0, 0, 64, 64, 28, 0, 1, 0, 0, 0, 0, 10, 0, 0, 0, 64, 64, 34, 0, 1, 0, 0, 0, 0, 242, 255, 33, 34, 66, 64, 37, 0, 1, 0, 0, 0, 0, 84, 158, 70, 68, 68, 64, 47, 0, 1, 0, 0, 0, 0, 27, 5, 0, 0, 64, 64, 53, 0, 1, 0, 0, 0, 0, 8, 1, 70, 68, 68, 64, 57, 0, 1, 0, 0, 0, 0, 150, 6, 0, 0, 64, 64, 59, 0, 1, 0, 0, 0, 0, 4, 234, 33, 34, 66, 64, 61, 0, 1, 0, 0, 0, 0, 132, 90, 0, 0, 64, 64, 63, 0, 1, 0, 0, 0, 0, 98, 240, 135, 136, 72, 64, 4, 0, 1, 21, 244, 195, 130, 144, 232, 70, 68, 68, 64, 7, 0, 1, 210, 1, 92, 0, 142, 1, 33, 34, 66, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 70, 68, 68, 64, 11, 0, 1, 27, 173, 90, 251, 142, 95, 33, 34, 66, 64, 13, 0, 1, 88, 27, 203, 35, 102, 190, 70, 68, 68, 64, 15, 0, 1, 27, 162, 157, 11, 126, 12, 135, 136, 72, 64, 17, 0, 1, 232, 6, 103, 253, 65, 35, 33, 34, 66, 64, 18, 0, 1, 73, 254, 79, 248, 220, 41, 33, 34, 66, 64, 19, 0, 1, 134, 247, 182, 253, 237, 30, 33, 34, 66, 64, 24, 0, 1, 0, 0, 0, 0, 253, 5, 70, 68, 68, 64, 27, 0, 1, 0, 0, 0, 0, 178, 8, 33, 34, 66, 64, 28, 0, 1, 0, 0, 0, 0, 11, 0, 33, 34, 66, 64, 31, 0, 1, 0, 0, 0, 0, 156, 10, 102, 102, 70, 64, 34, 0, 1, 0, 0, 0, 0, 237, 255, 205, 204, 76, 64, 36, 0, 1, 119, 214, 240, 222, 215, 185, 33, 34, 66, 64, 39, 0, 1, 18, 188, 76, 238, 82, 1, 33, 34, 66, 64, 48, 0, 1, 0, 0, 0, 0, 86, 255, 70, 68, 68, 64, 50, 0, 1, 0, 0, 0, 0, 212, 4, 33, 34, 66, 64, 51, 0, 1, 0, 0, 0, 0, 55, 251, 33, 34, 66, 64, 53, 0, 1, 0, 0, 0, 0, 31, 1, 33, 34, 66, 64, 54, 0, 1, 0, 0, 0, 0, 107, 27, 33, 34, 66, 64, 59, 0, 1, 0, 0, 0, 0, 175, 233, 135, 136, 72, 64, 60, 0, 1, 142, 0, 47, 255, 103, 11, 33, 34, 66, 64, 63, 0, 1, 0, 0, 0, 0, 185, 240, 102, 102, 70, 64, 0, 0, 1, 63, 189, 245, 194, 38, 193, 135, 136, 72, 64, 2, 0, 1, 39, 255, 74, 2, 103, 0, 70, 68, 68, 64, 3, 0, 1, 216, 0, 223, 0, 200, 0, 102, 102, 70, 64, 6, 0, 1, 99, 1, 242, 0, 75, 1, 70, 68, 68, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 76, 64, 13, 0, 1, 128, 27, 201, 35, 11, 191, 102, 102, 70, 64, 14, 0, 1, 0, 0, 0, 0, 61, 154, 102, 102, 70, 64, 18, 0, 1, 64, 254, 74, 248, 229, 41, 135, 136, 72, 64, 19, 0, 1, 123, 247, 174, 253, 0, 31, 102, 102, 70, 64, 20, 0, 1, 97, 0, 177, 25, 155, 37, 70, 68, 68, 64, 24, 0, 1, 0, 0, 0, 0, 253, 5, 135, 136, 72, 64, 25, 0, 1, 0, 0, 0, 0, 29, 7, 70, 68, 68, 64, 28, 0, 1, 0, 0, 0, 0, 12, 0, 70, 68, 68, 64, 30, 0, 1, 0, 0, 0, 0, 190, 5, 135, 136, 72, 64, 31, 0, 1, 0, 0, 0, 0, 144, 10, 70, 68, 68, 64, 37, 0, 1, 0, 0, 0, 0, 94, 158, 102, 102, 70, 64, 38, 0, 1, 109, 95, 113, 10, 81, 214, 70, 68, 68, 64, 39, 0, 1, 146, 187, 206, 238, 103, 1, 135, 136, 72, 64, 40, 0, 1, 34, 225, 242, 255, 44, 32, 70, 68, 68, 64, 41, 0, 1, 237, 237, 24, 253, 63, 22, 135, 136, 72, 64, 42, 0, 1, 94, 250, 185, 249, 49, 8, 102, 102, 70, 64, 48, 0, 1, 0, 0, 0, 0, 162, 255, 70, 68, 68, 64, 51, 0, 1, 0, 0, 0, 0, 79, 251, 70, 68, 68, 64, 53, 0, 1, 0, 0, 0, 0, 54, 1, 102, 102, 70, 64, 54, 0, 1, 0, 0, 0, 0, 198, 26, 70, 68, 68, 64, 59, 0, 1, 0, 0, 0, 0, 93, 233, 70, 68, 68, 64, 61, 0, 1, 0, 0, 0, 0, 134, 90, 70, 68, 68, 64, 63, 0, 1, 0, 0, 0, 0, 22, 241, 102, 102, 70, 64, 64, 0, 1, 172, 19, 233, 1, 144, 14, 102, 102, 70, 64, 65, 0, 1, 253, 255, 252, 255, 132, 90, 102, 102, 70, 64, 1, 0, 1, 46, 192, 211, 191, 46, 192, 102, 102, 70, 64, 3, 0, 1, 206, 0, 213, 0, 200, 0, 135, 136, 72, 64, 7, 0, 1, 167, 1, 84, 0, 142, 1, 102, 102, 70, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 76, 64, 9, 0, 1, 218, 253, 23, 0, 6, 242, 172, 170, 74, 64, 10, 0, 1, 188, 86, 237, 3, 20, 92, 135, 136, 72, 64, 11, 0, 1, 246, 172, 66, 251, 102, 95, 102, 102, 70, 64, 15, 0, 1, 10, 162, 127, 11, 171, 12, 135, 136, 72, 64, 24, 0, 1, 0, 0, 0, 0, 253, 5, 238, 238, 78, 64, 27, 0, 1, 0, 0, 0, 0, 183, 8, 102, 102, 70, 64, 28, 0, 1, 0, 0, 0, 0, 13, 0, 102, 102, 70, 64, 30, 0, 1, 0, 0, 0, 0, 191, 5, 135, 136, 72, 64, 37, 0, 1, 0, 0, 0, 0, 115, 158, 205, 204, 76, 64, 39, 0, 1, 161, 185, 205, 240, 183, 1, 102, 102, 70, 64, 41, 0, 1, 79, 238, 77, 253, 167, 22, 172, 170, 74, 64, 47, 0, 1, 0, 0, 0, 0, 40, 5, 102, 102, 70, 64, 50, 0, 1, 0, 0, 0, 0, 232, 4, 102, 102, 70, 64, 51, 0, 1, 0, 0, 0, 0, 102, 251, 102, 102, 70, 64, 53, 0, 1, 0, 0, 0, 0, 77, 1, 102, 102, 70, 64, 57, 0, 1, 0, 0, 0, 0, 116, 6, 102, 102, 70, 64, 59, 0, 1, 0, 0, 0, 0, 15, 233, 205, 204, 76, 64, 61, 0, 1, 0, 0, 0, 0, 130, 90, 102, 102, 70, 64, 63, 0, 1, 0, 0, 0, 0, 121, 241, 172, 170, 74, 64, 0, 0, 1, 23, 189, 204, 194, 187, 192, 205, 204, 76, 64, 1, 0, 1, 46, 192, 211, 191, 46, 192, 172, 170, 74, 64, 3, 0, 1, 186, 0, 192, 0, 200, 0, 172, 170, 74, 64, 6, 0, 1, 64, 1, 218, 0, 75, 1, 135, 136, 72, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 172, 170, 74, 64, 14, 0, 1, 0, 0, 0, 0, 244, 153, 135, 136, 72, 64, 15, 0, 1, 247, 161, 98, 11, 217, 12, 172, 170, 74, 64, 18, 0, 1, 54, 254, 70, 248, 238, 41, 172, 170, 74, 64, 20, 0, 1, 85, 0, 172, 25, 176, 37, 238, 238, 78, 64, 28, 0, 1, 0, 0, 0, 0, 18, 0, 135, 136, 72, 64, 30, 0, 1, 0, 0, 0, 0, 192, 5, 135, 136, 72, 64, 34, 0, 1, 0, 0, 0, 0, 236, 255, 18, 17, 81, 64, 38, 0, 1, 39, 95, 23, 11, 184, 213, 135, 136, 72, 64, 41, 0, 1, 176, 238, 130, 253, 15, 23, 135, 136, 72, 64, 48, 0, 1, 0, 0, 0, 0, 200, 255, 172, 170, 74, 64, 50, 0, 1, 0, 0, 0, 0, 14, 5, 172, 170, 74, 64, 51, 0, 1, 0, 0, 0, 0, 150, 251, 135, 136, 72, 64, 53, 0, 1, 0, 0, 0, 0, 100, 1, 172, 170, 74, 64, 54, 0, 1, 0, 0, 0, 0, 36, 26, 135, 136, 72, 64, 57, 0, 1, 0, 0, 0, 0, 83, 6, 18, 17, 81, 64, 59, 0, 1, 0, 0, 0, 0, 242, 231, 135, 136, 72, 64, 63, 0, 1, 0, 0, 0, 0, 226, 241, 51, 51, 83, 64, 64, 0, 1, 13, 18, 196, 2, 81, 12, 135, 136, 72, 64, 65, 0, 1, 253, 255, 252, 255, 132, 90, 18, 17, 81, 64, 2, 0, 1, 73, 255, 202, 1, 223, 255, 238, 238, 78, 64, 4, 0, 1, 97, 244, 185, 130, 182, 232, 238, 238, 78, 64, 7, 0, 1, 98, 1, 70, 0, 142, 1, 172, 170, 74, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 18, 17, 81, 64, 11, 0, 1, 172, 172, 17, 251, 24, 95, 172, 170, 74, 64, 15, 0, 1, 229, 161, 69, 11, 5, 13, 205, 204, 76, 64, 17, 0, 1, 218, 6, 102, 253, 67, 35, 238, 238, 78, 64, 19, 0, 1, 113, 247, 166, 253, 18, 31, 172, 170, 74, 64, 24, 0, 1, 0, 0, 0, 0, 254, 5, 238, 238, 78, 64, 25, 0, 1, 0, 0, 0, 0, 34, 7, 172, 170, 74, 64, 30, 0, 1, 0, 0, 0, 0, 193, 5, 18, 17, 81, 64, 31, 0, 1, 0, 0, 0, 0, 129, 10, 205, 204, 76, 64, 34, 0, 1, 0, 0, 0, 0, 232, 255, 205, 204, 76, 64, 37, 0, 1, 0, 0, 0, 0, 137, 158, 205, 204, 76, 64, 40, 0, 1, 63, 226, 18, 0, 96, 32, 205, 204, 76, 64, 41, 0, 1, 112, 239, 235, 253, 220, 23, 172, 170, 74, 64, 42, 0, 1, 169, 250, 241, 249, 184, 8, 172, 170, 74, 64, 48, 0, 1, 0, 0, 0, 0, 238, 255, 205, 204, 76, 64, 53, 0, 1, 0, 0, 0, 0, 144, 1, 172, 170, 74, 64, 57, 0, 1, 0, 0, 0, 0, 50, 6, 172, 170, 74, 64, 60, 0, 1, 68, 0, 98, 255, 149, 11, 238, 238, 78, 64, 63, 0, 1, 0, 0, 0, 0, 51, 243, 172, 170, 74, 64, 65, 0, 1, 253, 255, 252, 255, 132, 90, 205, 204, 76, 64, 0, 0, 1, 4, 189, 184, 194, 137, 192, 238, 238, 78, 64, 3, 0, 1, 164, 0, 170, 0, 200, 0, 205, 204, 76, 64, 6, 0, 1, 45, 1, 206, 0, 75, 1, 205, 204, 76, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 238, 238, 78, 64, 10, 0, 1, 189, 86, 238, 3, 18, 92, 238, 238, 78, 64, 14, 0, 1, 0, 0, 0, 0, 170, 153, 205, 204, 76, 64, 15, 0, 1, 209, 161, 41, 11, 49, 13, 205, 204, 76, 64, 16, 0, 1, 148, 90, 49, 246, 163, 6, 51, 51, 83, 64, 18, 0, 1, 36, 254, 60, 248, 0, 42, 238, 238, 78, 64, 20, 0, 1, 74, 0, 168, 25, 196, 37, 205, 204, 76, 64, 24, 0, 1, 0, 0, 0, 0, 254, 5, 205, 204, 76, 64, 30, 0, 1, 0, 0, 0, 0, 194, 5, 18, 17, 81, 64, 42, 0, 1, 132, 251, 151, 250, 68, 10, 205, 204, 76, 64, 43, 0, 1, 56, 237, 70, 253, 62, 253, 51, 51, 83, 64, 47, 0, 1, 0, 0, 0, 0, 57, 5, 238, 238, 78, 64, 48, 0, 1, 0, 0, 0, 0, 56, 0, 238, 238, 78, 64, 50, 0, 1, 0, 0, 0, 0, 52, 5, 238, 238, 78, 64, 51, 0, 1, 0, 0, 0, 0, 196, 251, 205, 204, 76, 64, 54, 0, 1, 0, 0, 0, 0, 212, 25, 205, 204, 76, 64, 57, 0, 1, 0, 0, 0, 0, 18, 6, 205, 204, 76, 64, 60, 0, 1, 253, 255, 147, 255, 190, 11, 205, 204, 76, 64, 65, 0, 1, 253, 255, 252, 255, 132, 90, 238, 238, 78, 64, 0, 0, 1, 242, 188, 165, 194, 92, 192, 18, 17, 81, 64, 1, 0, 1, 45, 192, 212, 191, 45, 192, 121, 119, 87, 64, 5, 0, 1, 149, 2, 114, 128, 70, 10, 238, 238, 78, 64, 6, 0, 1, 26, 1, 193, 0, 75, 1, 238, 238, 78, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 238, 238, 78, 64, 9, 0, 1, 18, 254, 137, 0, 186, 242, 238, 238, 78, 64, 13, 0, 1, 136, 27, 201, 35, 47, 191, 238, 238, 78, 64, 15, 0, 1, 189, 161, 15, 11, 92, 13, 154, 153, 89, 64, 16, 0, 1, 173, 90, 12, 246, 168, 6, 238, 238, 78, 64, 17, 0, 1, 211, 6, 101, 253, 68, 35, 238, 238, 78, 64, 24, 0, 1, 0, 0, 0, 0, 254, 5, 18, 17, 81, 64, 30, 0, 1, 0, 0, 0, 0, 196, 5, 238, 238, 78, 64, 34, 0, 1, 0, 0, 0, 0, 231, 255, 51, 51, 83, 64, 36, 0, 1, 157, 214, 76, 222, 233, 185, 18, 17, 81, 64, 37, 0, 1, 0, 0, 0, 0, 159, 158, 154, 153, 89, 64, 39, 0, 1, 228, 182, 179, 243, 43, 2, 238, 238, 78, 64, 40, 0, 1, 203, 226, 34, 0, 121, 32, 18, 17, 81, 64, 41, 0, 1, 46, 240, 82, 254, 166, 24, 238, 238, 78, 64, 43, 0, 1, 217, 237, 93, 253, 2, 254, 238, 238, 78, 64, 53, 0, 1, 0, 0, 0, 0, 166, 1, 238, 238, 78, 64, 54, 0, 1, 0, 0, 0, 0, 132, 25, 238, 238, 78, 64, 57, 0, 1, 0, 0, 0, 0, 241, 5, 18, 17, 81, 64, 60, 0, 1, 125, 255, 242, 255, 0, 12, 70, 68, 100, 64, 61, 0, 1, 0, 0, 0, 0, 128, 90, 238, 238, 78, 64, 65, 0, 1, 253, 255, 252, 255, 132, 90, 18, 17, 81, 64, 0, 0, 1, 226, 188, 147, 194, 51, 192, 51, 51, 83, 64, 3, 0, 1, 141, 0, 146, 0, 200, 0, 84, 85, 85, 64, 4, 0, 1, 201, 244, 173, 130, 219, 232, 18, 17, 81, 64, 6, 0, 1, 7, 1, 180, 0, 75, 1, 18, 17, 81, 64, 7, 0, 1, 74, 1, 66, 0, 142, 1, 18, 17, 81, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 121, 119, 87, 64, 9, 0, 1, 252, 254, 16, 2, 104, 245, 33, 34, 98, 64, 10, 0, 1, 197, 86, 243, 3, 9, 92, 84, 85, 85, 64, 13, 0, 1, 162, 27, 199, 35, 159, 191, 18, 17, 81, 64, 14, 0, 1, 0, 0, 0, 0, 134, 153, 18, 17, 81, 64, 15, 0, 1, 169, 161, 245, 10, 134, 13, 154, 153, 89, 64, 17, 0, 1, 176, 6, 98, 253, 72, 35, 51, 51, 83, 64, 19, 0, 1, 106, 247, 161, 253, 30, 31, 18, 17, 81, 64, 20, 0, 1, 69, 0, 165, 25, 206, 37, 18, 17, 81, 64, 24, 0, 1, 0, 0, 0, 0, 254, 5, 84, 85, 85, 64, 25, 0, 1, 0, 0, 0, 0, 40, 7, 51, 51, 83, 64, 27, 0, 1, 0, 0, 0, 0, 184, 8, 18, 17, 81, 64, 28, 0, 1, 0, 0, 0, 0, 19, 0, 18, 17, 81, 64, 34, 0, 1, 0, 0, 0, 0, 229, 255, 51, 51, 83, 64, 40, 0, 1, 226, 227, 65, 0, 171, 32, 18, 17, 81, 64, 43, 0, 1, 121, 238, 116, 253, 196, 254, 18, 17, 81, 64, 48, 0, 1, 0, 0, 0, 0, 93, 0, 18, 17, 81, 64, 50, 0, 1, 0, 0, 0, 0, 70, 5, 18, 17, 81, 64, 51, 0, 1, 0, 0, 0, 0, 219, 251, 18, 17, 81, 64, 53, 0, 1, 0, 0, 0, 0, 188, 1, 51, 51, 83, 64, 54, 0, 1, 0, 0, 0, 0, 231, 24, 84, 85, 85, 64, 57, 0, 1, 0, 0, 0, 0, 146, 5, 51, 51, 83, 64, 63, 0, 1, 0, 0, 0, 0, 20, 244, 154, 153, 89, 64, 65, 0, 1, 253, 255, 252, 255, 132, 90, 51, 51, 83, 64, 0, 0, 1, 210, 188, 130, 194, 15, 192, 51, 51, 83, 64, 1, 0, 1, 45, 192, 212, 191, 45, 192, 51, 51, 83, 64, 2, 0, 1, 82, 255, 168, 1, 187, 255, 84, 85, 85, 64, 6, 0, 1, 224, 0, 153, 0, 75, 1, 51, 51, 83, 64, 7, 0, 1, 49, 1, 61, 0, 142, 1, 51, 51, 83, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 83, 64, 11, 0, 1, 154, 172, 5, 251, 5, 95, 84, 85, 85, 64, 14, 0, 1, 0, 0, 0, 0, 60, 153, 84, 85, 85, 64, 15, 0, 1, 127, 161, 198, 10, 213, 13, 84, 85, 85, 64, 20, 0, 1, 57, 0, 161, 25, 227, 37, 84, 85, 85, 64, 24, 0, 1, 0, 0, 0, 0, 255, 5, 51, 51, 83, 64, 28, 0, 1, 0, 0, 0, 0, 20, 0, 51, 51, 83, 64, 30, 0, 1, 0, 0, 0, 0, 198, 5, 51, 51, 83, 64, 31, 0, 1, 0, 0, 0, 0, 125, 10, 51, 51, 83, 64, 34, 0, 1, 0, 0, 0, 0, 228, 255, 51, 51, 83, 64, 37, 0, 1, 0, 0, 0, 0, 171, 158, 84, 85, 85, 64, 38, 0, 1, 13, 95, 82, 11, 126, 213, 51, 51, 83, 64, 41, 0, 1, 140, 240, 134, 254, 9, 25, 51, 51, 83, 64, 42, 0, 1, 204, 251, 205, 250, 198, 10, 51, 51, 83, 64, 43, 0, 1, 24, 239, 139, 253, 132, 255, 84, 85, 85, 64, 48, 0, 1, 0, 0, 0, 0, 166, 0, 84, 85, 85, 64, 50, 0, 1, 0, 0, 0, 0, 107, 5, 84, 85, 85, 64, 51, 0, 1, 0, 0, 0, 0, 8, 252, 51, 51, 83, 64, 53, 0, 1, 0, 0, 0, 0, 210, 1, 51, 51, 83, 64, 59, 0, 1, 0, 0, 0, 0, 211, 231, 84, 85, 85, 64, 60, 0, 1, 21, 255, 75, 0, 44, 12, 186, 187, 91, 64, 0, 0, 1, 166, 188, 80, 194, 193, 191, 154, 153, 89, 64, 1, 0, 1, 44, 192, 213, 191, 44, 192, 84, 85, 85, 64, 2, 0, 1, 91, 255, 133, 1, 151, 255, 84, 85, 85, 64, 3, 0, 1, 130, 0, 134, 0, 200, 0, 84, 85, 85, 64, 7, 0, 1, 24, 1, 56, 0, 142, 1, 84, 85, 85, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 121, 119, 87, 64, 11, 0, 1, 119, 172, 238, 250, 223, 94, 84, 85, 85, 64, 18, 0, 1, 31, 254, 57, 248, 4, 42, 121, 119, 87, 64, 19, 0, 1, 99, 247, 156, 253, 43, 31, 121, 119, 87, 64, 27, 0, 1, 0, 0, 0, 0, 186, 8, 84, 85, 85, 64, 28, 0, 1, 0, 0, 0, 0, 21, 0, 84, 85, 85, 64, 30, 0, 1, 0, 0, 0, 0, 199, 5, 84, 85, 85, 64, 31, 0, 1, 0, 0, 0, 0, 121, 10, 84, 85, 85, 64, 34, 0, 1, 0, 0, 0, 0, 226, 255, 121, 119, 87, 64, 36, 0, 1, 183, 214, 221, 221, 245, 185, 154, 153, 89, 64, 37, 0, 1, 0, 0, 0, 0, 206, 158, 121, 119, 87, 64, 40, 0, 1, 246, 228, 96, 0, 220, 32, 121, 119, 87, 64, 41, 0, 1, 70, 241, 234, 254, 205, 25, 121, 119, 87, 64, 42, 0, 1, 91, 252, 57, 251, 198, 11, 84, 85, 85, 64, 43, 0, 1, 182, 239, 162, 253, 67, 0, 154, 153, 89, 64, 47, 0, 1, 0, 0, 0, 0, 70, 5, 84, 85, 85, 64, 53, 0, 1, 0, 0, 0, 0, 232, 1, 154, 153, 89, 64, 54, 0, 1, 0, 0, 0, 0, 255, 23, 186, 187, 91, 64, 59, 0, 1, 0, 0, 0, 0, 188, 231, 186, 187, 91, 64, 63, 0, 1, 0, 0, 0, 0, 124, 245, 84, 85, 85, 64, 64, 0, 1, 222, 17, 227, 2, 249, 11, 121, 119, 87, 64, 2, 0, 1, 101, 255, 98, 1, 114, 255, 121, 119, 87, 64, 3, 0, 1, 118, 0, 122, 0, 200, 0, 0, 0, 96, 64, 4, 0, 1, 172, 245, 147, 130, 15, 233, 121, 119, 87, 64, 6, 0, 1, 203, 0, 139, 0, 75, 1, 121, 119, 87, 64, 7, 0, 1, 254, 0, 51, 0, 142, 1, 121, 119, 87, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 186, 187, 91, 64, 13, 0, 1, 188, 27, 197, 35, 20, 192, 223, 221, 93, 64, 14, 0, 1, 0, 0, 0, 0, 173, 152, 154, 153, 89, 64, 15, 0, 1, 83, 161, 157, 10, 29, 14, 223, 221, 93, 64, 18, 0, 1, 12, 254, 48, 248, 22, 42, 186, 187, 91, 64, 20, 0, 1, 40, 0, 154, 25, 2, 38, 154, 153, 89, 64, 24, 0, 1, 0, 0, 0, 0, 255, 5, 121, 119, 87, 64, 25, 0, 1, 0, 0, 0, 0, 42, 7, 154, 153, 89, 64, 28, 0, 1, 0, 0, 0, 0, 23, 0, 154, 153, 89, 64, 30, 0, 1, 0, 0, 0, 0, 201, 5, 121, 119, 87, 64, 31, 0, 1, 0, 0, 0, 0, 117, 10, 121, 119, 87, 64, 34, 0, 1, 0, 0, 0, 0, 225, 255, 223, 221, 93, 64, 38, 0, 1, 219, 94, 192, 11, 14, 213, 223, 221, 93, 64, 43, 0, 1, 37, 242, 252, 253, 48, 3, 121, 119, 87, 64, 48, 0, 1, 0, 0, 0, 0, 202, 0, 121, 119, 87, 64, 50, 0, 1, 0, 0, 0, 0, 126, 5, 121, 119, 87, 64, 51, 0, 1, 0, 0, 0, 0, 30, 252, 154, 153, 89, 64, 53, 0, 1, 0, 0, 0, 0, 18, 2, 223, 221, 93, 64, 57, 0, 1, 0, 0, 0, 0, 22, 5, 223, 221, 93, 64, 60, 0, 1, 176, 254, 225, 0, 48, 12, 186, 187, 91, 64, 64, 0, 1, 136, 17, 53, 3, 36, 11, 154, 153, 89, 64, 2, 0, 1, 111, 255, 63, 1, 77, 255, 154, 153, 89, 64, 3, 0, 1, 106, 0, 109, 0, 200, 0, 154, 153, 89, 64, 5, 0, 1, 235, 2, 117, 128, 78, 10, 154, 153, 89, 64, 6, 0, 1, 182, 0, 125, 0, 75, 1, 154, 153, 89, 64, 7, 0, 1, 229, 0, 45, 0, 142, 1, 154, 153, 89, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 223, 221, 93, 64, 9, 0, 1, 185, 255, 200, 2, 222, 246, 186, 187, 91, 64, 11, 0, 1, 84, 172, 215, 250, 186, 94, 186, 187, 91, 64, 19, 0, 1, 92, 247, 151, 253, 55, 31, 154, 153, 89, 64, 25, 0, 1, 0, 0, 0, 0, 43, 7, 154, 153, 89, 64, 27, 0, 1, 0, 0, 0, 0, 187, 8, 154, 153, 89, 64, 31, 0, 1, 0, 0, 0, 0, 113, 10, 154, 153, 89, 64, 34, 0, 1, 0, 0, 0, 0, 223, 255, 186, 187, 91, 64, 36, 0, 1, 209, 214, 111, 221, 1, 186, 186, 187, 91, 64, 40, 0, 1, 5, 230, 127, 0, 11, 33, 154, 153, 89, 64, 41, 0, 1, 161, 241, 28, 255, 45, 26, 223, 221, 93, 64, 42, 0, 1, 45, 253, 216, 251, 63, 13, 154, 153, 89, 64, 48, 0, 1, 0, 0, 0, 0, 238, 0, 186, 187, 91, 64, 50, 0, 1, 0, 0, 0, 0, 162, 5, 154, 153, 89, 64, 51, 0, 1, 0, 0, 0, 0, 53, 252, 186, 187, 91, 64, 1, 0, 1, 44, 192, 213, 191, 44, 192, 223, 221, 93, 64, 2, 0, 1, 130, 255, 246, 0, 2, 255, 186, 187, 91, 64, 3, 0, 1, 94, 0, 97, 0, 200, 0, 33, 34, 98, 64, 5, 0, 1, 210, 3, 125, 128, 103, 10, 186, 187, 91, 64, 6, 0, 1, 161, 0, 110, 0, 75, 1, 186, 187, 91, 64, 7, 0, 1, 202, 0, 40, 0, 142, 1, 186, 187, 91, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 223, 221, 93, 64, 15, 0, 1, 39, 161, 122, 10, 93, 14, 33, 34, 98, 64, 16, 0, 1, 190, 90, 244, 245, 172, 6, 33, 34, 98, 64, 17, 0, 1, 149, 6, 95, 253, 76, 35, 186, 187, 91, 64, 24, 0, 1, 0, 0, 0, 0, 255, 5, 33, 34, 98, 64, 25, 0, 1, 0, 0, 0, 0, 50, 7, 102, 102, 102, 64, 27, 0, 1, 0, 0, 0, 0, 193, 8, 186, 187, 91, 64, 28, 0, 1, 0, 0, 0, 0, 25, 0, 186, 187, 91, 64, 30, 0, 1, 0, 0, 0, 0, 202, 5, 186, 187, 91, 64, 31, 0, 1, 0, 0, 0, 0, 109, 10, 186, 187, 91, 64, 34, 0, 1, 0, 0, 0, 0, 221, 255, 0, 0, 96, 64, 37, 0, 1, 0, 0, 0, 0, 242, 158, 186, 187, 91, 64, 39, 0, 1, 117, 182, 43, 244, 62, 2, 186, 187, 91, 64, 41, 0, 1, 253, 241, 78, 255, 141, 26, 0, 0, 96, 64, 47, 0, 1, 0, 0, 0, 0, 82, 5, 0, 0, 96, 64, 48, 0, 1, 0, 0, 0, 0, 87, 1, 186, 187, 91, 64, 51, 0, 1, 0, 0, 0, 0, 75, 252, 223, 221, 93, 64, 53, 0, 1, 0, 0, 0, 0, 60, 2, 0, 0, 96, 64, 54, 0, 1, 0, 0, 0, 0, 28, 23, 223, 221, 93, 64, 65, 0, 1, 253, 255, 252, 255, 132, 90, 70, 68, 100, 64, 0, 0, 1, 149, 188, 66, 194, 236, 191, 205, 204, 108, 64, 1, 0, 1, 41, 192, 216, 191, 41, 192, 0, 0, 96, 64, 3, 0, 1, 69, 0, 71, 0, 200, 0, 223, 221, 93, 64, 6, 0, 1, 140, 0, 96, 0, 75, 1, 223, 221, 93, 64, 7, 0, 1, 176, 0, 35, 0, 142, 1, 223, 221, 93, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 223, 221, 93, 64, 11, 0, 1, 67, 172, 204, 250, 167, 94, 102, 102, 102, 64, 13, 0, 1, 233, 27, 190, 35, 227, 192, 223, 221, 93, 64, 19, 0, 1, 89, 247, 148, 253, 61, 31, 223, 221, 93, 64, 20, 0, 1, 35, 0, 151, 25, 12, 38, 223, 221, 93, 64, 24, 0, 1, 0, 0, 0, 0, 255, 5, 223, 221, 93, 64, 28, 0, 1, 0, 0, 0, 0, 26, 0, 223, 221, 93, 64, 30, 0, 1, 0, 0, 0, 0, 203, 5, 172, 170, 106, 64, 31, 0, 1, 0, 0, 0, 0, 82, 10, 223, 221, 93, 64, 34, 0, 1, 0, 0, 0, 0, 220, 255, 33, 34, 98, 64, 36, 0, 1, 248, 214, 201, 220, 17, 186, 223, 221, 93, 64, 39, 0, 1, 7, 182, 163, 244, 80, 2, 223, 221, 93, 64, 40, 0, 1, 139, 230, 142, 0, 34, 33, 223, 221, 93, 64, 41, 0, 1, 87, 242, 127, 255, 236, 26, 0, 0, 96, 64, 50, 0, 1, 0, 0, 0, 0, 197, 5, 223, 221, 93, 64, 51, 0, 1, 0, 0, 0, 0, 96, 252, 223, 221, 93, 64, 59, 0, 1, 0, 0, 0, 0, 210, 231, 33, 34, 98, 64, 63, 0, 1, 0, 0, 0, 0, 223, 245, 70, 68, 100, 64, 64, 0, 1, 170, 17, 145, 3, 163, 10, 0, 0, 96, 64, 2, 0, 1, 140, 255, 209, 0, 220, 254, 0, 0, 96, 64, 6, 0, 1, 119, 0, 81, 0, 75, 1, 33, 34, 98, 64, 7, 0, 1, 122, 0, 24, 0, 142, 1, 0, 0, 96, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 96, 64, 9, 0, 1, 250, 255, 240, 2, 61, 247, 0, 0, 96, 64, 11, 0, 1, 50, 172, 193, 250, 149, 94, 0, 0, 96, 64, 14, 0, 1, 0, 0, 0, 0, 138, 152, 70, 68, 100, 64, 15, 0, 1, 227, 160, 86, 10, 171, 14, 33, 34, 98, 64, 18, 0, 1, 3, 254, 43, 248, 31, 42, 70, 68, 100, 64, 19, 0, 1, 78, 247, 140, 253, 80, 31, 33, 34, 98, 64, 20, 0, 1, 23, 0, 147, 25, 33, 38, 70, 68, 100, 64, 24, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 96, 64, 28, 0, 1, 0, 0, 0, 0, 27, 0, 0, 0, 96, 64, 30, 0, 1, 0, 0, 0, 0, 204, 5, 0, 0, 96, 64, 34, 0, 1, 0, 0, 0, 0, 218, 255, 70, 68, 100, 64, 38, 0, 1, 184, 94, 12, 12, 189, 212, 0, 0, 96, 64, 39, 0, 1, 154, 181, 25, 245, 98, 2, 0, 0, 96, 64, 40, 0, 1, 16, 231, 157, 0, 56, 33, 0, 0, 96, 64, 41, 0, 1, 177, 242, 175, 255, 74, 27, 0, 0, 96, 64, 42, 0, 1, 114, 253, 12, 252, 186, 13, 0, 0, 96, 64, 43, 0, 1, 189, 242, 18, 254, 231, 3, 0, 0, 96, 64, 51, 0, 1, 0, 0, 0, 0, 118, 252, 33, 34, 98, 64, 53, 0, 1, 0, 0, 0, 0, 101, 2, 0, 0, 96, 64, 57, 0, 1, 0, 0, 0, 0, 247, 4, 172, 170, 106, 64, 59, 0, 1, 0, 0, 0, 0, 9, 233, 135, 136, 104, 64, 60, 0, 1, 5, 255, 131, 1, 169, 11, 0, 0, 96, 64, 65, 0, 1, 253, 255, 252, 255, 132, 90, 33, 34, 98, 64, 2, 0, 1, 151, 255, 171, 0, 182, 254, 33, 34, 98, 64, 3, 0, 1, 56, 0, 58, 0, 200, 0, 33, 34, 98, 64, 4, 0, 1, 224, 245, 141, 130, 24, 233, 33, 34, 98, 64, 6, 0, 1, 97, 0, 66, 0, 75, 1, 33, 34, 98, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 102, 64, 9, 0, 1, 190, 0, 78, 3, 89, 248, 102, 102, 102, 64, 11, 0, 1, 0, 172, 160, 250, 94, 94, 70, 68, 100, 64, 14, 0, 1, 0, 0, 0, 0, 70, 152, 70, 68, 100, 64, 28, 0, 1, 0, 0, 0, 0, 29, 0, 135, 136, 104, 64, 30, 0, 1, 0, 0, 0, 0, 208, 5, 135, 136, 104, 64, 34, 0, 1, 0, 0, 0, 0, 212, 255, 33, 34, 98, 64, 37, 0, 1, 0, 0, 0, 0, 255, 158, 135, 136, 104, 64, 39, 0, 1, 246, 179, 235, 246, 170, 2, 70, 68, 100, 64, 40, 0, 1, 23, 232, 187, 0, 101, 33, 70, 68, 100, 64, 41, 0, 1, 98, 243, 15, 0, 3, 28, 33, 34, 98, 64, 42, 0, 1, 182, 253, 63, 252, 52, 14, 135, 136, 104, 64, 43, 0, 1, 21, 245, 105, 254, 180, 6, 33, 34, 98, 64, 47, 0, 1, 0, 0, 0, 0, 86, 5, 33, 34, 98, 64, 48, 0, 1, 0, 0, 0, 0, 121, 1, 33, 34, 98, 64, 50, 0, 1, 0, 0, 0, 0, 215, 5, 33, 34, 98, 64, 51, 0, 1, 0, 0, 0, 0, 140, 252, 70, 68, 100, 64, 54, 0, 1, 0, 0, 0, 0, 136, 22, 33, 34, 98, 64, 57, 0, 1, 0, 0, 0, 0, 217, 4, 33, 34, 98, 64, 65, 0, 1, 253, 255, 252, 255, 132, 90, 102, 102, 102, 64, 2, 0, 1, 171, 255, 96, 0, 107, 254, 135, 136, 104, 64, 3, 0, 1, 18, 0, 19, 0, 200, 0, 70, 68, 100, 64, 4, 0, 1, 20, 246, 135, 130, 32, 233, 102, 102, 102, 64, 5, 0, 1, 10, 4, 127, 128, 113, 10, 102, 102, 102, 64, 6, 0, 1, 53, 0, 36, 0, 75, 1, 70, 68, 100, 64, 7, 0, 1, 94, 0, 19, 0, 142, 1, 70, 68, 100, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 70, 68, 100, 64, 10, 0, 1, 198, 86, 243, 3, 8, 92, 102, 102, 102, 64, 16, 0, 1, 199, 90, 232, 245, 174, 6, 172, 170, 106, 64, 17, 0, 1, 120, 6, 92, 253, 79, 35, 70, 68, 100, 64, 18, 0, 1, 254, 253, 40, 248, 36, 42, 70, 68, 100, 64, 20, 0, 1, 18, 0, 144, 25, 43, 38, 70, 68, 100, 64, 25, 0, 1, 0, 0, 0, 0, 52, 7, 102, 102, 102, 64, 36, 0, 1, 19, 215, 92, 220, 28, 186, 102, 102, 102, 64, 37, 0, 1, 0, 0, 0, 0, 23, 159, 70, 68, 100, 64, 42, 0, 1, 250, 253, 114, 252, 174, 14, 172, 170, 106, 64, 47, 0, 1, 0, 0, 0, 0, 102, 5, 70, 68, 100, 64, 48, 0, 1, 0, 0, 0, 0, 156, 1, 70, 68, 100, 64, 50, 0, 1, 0, 0, 0, 0, 232, 5, 70, 68, 100, 64, 51, 0, 1, 0, 0, 0, 0, 161, 252, 102, 102, 102, 64, 53, 0, 1, 0, 0, 0, 0, 142, 2, 102, 102, 102, 64, 57, 0, 1, 0, 0, 0, 0, 158, 4, 172, 170, 106, 64, 63, 0, 1, 0, 0, 0, 0, 155, 245, 172, 170, 106, 64, 65, 0, 1, 253, 255, 252, 255, 132, 90, 238, 238, 110, 64, 0, 0, 1, 135, 188, 87, 194, 152, 192, 102, 102, 102, 64, 4, 0, 1, 74, 246, 130, 130, 40, 233, 102, 102, 102, 64, 7, 0, 1, 67, 0, 13, 0, 142, 1, 102, 102, 102, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 102, 64, 10, 0, 1, 199, 86, 244, 3, 7, 92, 172, 170, 106, 64, 14, 0, 1, 0, 0, 0, 0, 228, 151, 172, 170, 106, 64, 15, 0, 1, 157, 160, 73, 10, 224, 14, 238, 238, 110, 64, 18, 0, 1, 231, 253, 28, 248, 58, 42, 172, 170, 106, 64, 19, 0, 1, 68, 247, 132, 253, 98, 31, 102, 102, 102, 64, 20, 0, 1, 12, 0, 142, 25, 54, 38, 18, 17, 113, 64, 24, 0, 1, 0, 0, 0, 0, 1, 6, 238, 238, 110, 64, 25, 0, 1, 0, 0, 0, 0, 61, 7, 102, 102, 102, 64, 28, 0, 1, 0, 0, 0, 0, 30, 0, 102, 102, 102, 64, 38, 0, 1, 172, 94, 36, 12, 162, 212, 102, 102, 102, 64, 40, 0, 1, 153, 232, 201, 0, 122, 33, 135, 136, 104, 64, 41, 0, 1, 17, 244, 110, 0, 184, 28, 102, 102, 102, 64, 42, 0, 1, 61, 254, 165, 252, 37, 15, 205, 204, 108, 64, 48, 0, 1, 0, 0, 0, 0, 33, 2, 102, 102, 102, 64, 50, 0, 1, 0, 0, 0, 0, 249, 5, 102, 102, 102, 64, 51, 0, 1, 0, 0, 0, 0, 182, 252, 172, 170, 106, 64, 54, 0, 1, 0, 0, 0, 0, 175, 21, 102, 102, 102, 64, 61, 0, 1, 0, 0, 0, 0, 126, 90, 238, 238, 110, 64, 64, 0, 1, 118, 18, 253, 3, 179, 10, 135, 136, 104, 64, 2, 0, 1, 182, 255, 58, 0, 70, 254, 135, 136, 104, 64, 4, 0, 1, 128, 246, 124, 130, 47, 233, 172, 170, 106, 64, 5, 0, 1, 36, 4, 129, 128, 121, 10, 135, 136, 104, 64, 6, 0, 1, 31, 0, 21, 0, 75, 1, 135, 136, 104, 64, 7, 0, 1, 39, 0, 8, 0, 142, 1, 135, 136, 104, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 135, 136, 104, 64, 9, 0, 1, 0, 1, 103, 3, 187, 248, 205, 204, 108, 64, 10, 0, 1, 201, 86, 246, 3, 4, 92, 205, 204, 108, 64, 11, 0, 1, 208, 171, 128, 250, 41, 94, 135, 136, 104, 64, 13, 0, 1, 242, 27, 188, 35, 13, 193, 205, 204, 108, 64, 16, 0, 1, 212, 90, 214, 245, 176, 6, 205, 204, 108, 64, 20, 0, 1, 251, 255, 135, 25, 85, 38, 135, 136, 104, 64, 27, 0, 1, 0, 0, 0, 0, 194, 8, 135, 136, 104, 64, 28, 0, 1, 0, 0, 0, 0, 31, 0, 172, 170, 106, 64, 36, 0, 1, 45, 215, 241, 219, 38, 186, 172, 170, 106, 64, 37, 0, 1, 0, 0, 0, 0, 48, 159, 172, 170, 106, 64, 38, 0, 1, 151, 94, 84, 12, 109, 212, 205, 204, 108, 64, 40, 0, 1, 24, 234, 244, 0, 185, 33, 172, 170, 106, 64, 42, 0, 1, 193, 254, 9, 253, 18, 16, 205, 204, 108, 64, 50, 0, 1, 0, 0, 0, 0, 44, 6, 135, 136, 104, 64, 51, 0, 1, 0, 0, 0, 0, 203, 252, 135, 136, 104, 64, 53, 0, 1, 0, 0, 0, 0, 162, 2, 238, 238, 110, 64, 57, 0, 1, 0, 0, 0, 0, 42, 4, 172, 170, 106, 64, 61, 0, 1, 0, 0, 0, 0, 130, 90, 18, 17, 113, 64, 2, 0, 1, 224, 255, 161, 255, 179, 253, 205, 204, 108, 64, 3, 0, 1, 248, 255, 248, 255, 200, 0, 238, 238, 110, 64, 4, 0, 1, 41, 247, 106, 130, 65, 233, 172, 170, 106, 64, 6, 0, 1, 9, 0, 6, 0, 75, 1, 205, 204, 108, 64, 7, 0, 1, 239, 255, 253, 255, 142, 1, 172, 170, 106, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 172, 170, 106, 64, 9, 0, 1, 67, 1, 126, 3, 30, 249, 238, 238, 110, 64, 13, 0, 1, 12, 28, 181, 35, 140, 193, 172, 170, 106, 64, 27, 0, 1, 0, 0, 0, 0, 194, 8, 172, 170, 106, 64, 28, 0, 1, 0, 0, 0, 0, 32, 0, 238, 238, 110, 64, 30, 0, 1, 0, 0, 0, 0, 211, 5, 172, 170, 106, 64, 34, 0, 1, 0, 0, 0, 0, 211, 255, 238, 238, 110, 64, 39, 0, 1, 203, 178, 61, 248, 222, 2, 172, 170, 106, 64, 41, 0, 1, 103, 244, 156, 0, 17, 29, 172, 170, 106, 64, 43, 0, 1, 168, 245, 126, 254, 98, 7, 172, 170, 106, 64, 51, 0, 1, 0, 0, 0, 0, 223, 252, 238, 238, 110, 64, 53, 0, 1, 0, 0, 0, 0, 221, 2, 172, 170, 106, 64, 60, 0, 1, 42, 255, 162, 1, 124, 11, 205, 204, 108, 64, 5, 0, 1, 39, 4, 129, 128, 125, 10, 205, 204, 108, 64, 6, 0, 1, 243, 255, 247, 255, 75, 1, 205, 204, 108, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 108, 64, 9, 0, 1, 133, 1, 145, 3, 129, 249, 238, 238, 110, 64, 14, 0, 1, 0, 0, 0, 0, 166, 151, 205, 204, 108, 64, 15, 0, 1, 133, 160, 74, 10, 235, 14, 205, 204, 108, 64, 17, 0, 1, 113, 6, 91, 253, 80, 35, 238, 238, 110, 64, 19, 0, 1, 61, 247, 127, 253, 111, 31, 205, 204, 108, 64, 27, 0, 1, 0, 0, 0, 0, 195, 8, 205, 204, 108, 64, 28, 0, 1, 0, 0, 0, 0, 34, 0, 205, 204, 108, 64, 31, 0, 1, 0, 0, 0, 0, 78, 10, 205, 204, 108, 64, 34, 0, 1, 0, 0, 0, 0, 209, 255, 238, 238, 110, 64, 36, 0, 1, 71, 215, 135, 219, 47, 186, 205, 204, 108, 64, 37, 0, 1, 0, 0, 0, 0, 61, 159, 205, 204, 108, 64, 38, 0, 1, 140, 94, 109, 12, 83, 212, 205, 204, 108, 64, 41, 0, 1, 188, 244, 202, 0, 105, 29, 205, 204, 108, 64, 42, 0, 1, 2, 255, 59, 253, 134, 16, 205, 204, 108, 64, 43, 0, 1, 58, 246, 147, 254, 16, 8, 205, 204, 108, 64, 47, 0, 1, 0, 0, 0, 0, 105, 5, 205, 204, 108, 64, 51, 0, 1, 0, 0, 0, 0, 244, 252, 205, 204, 108, 64, 54, 0, 1, 0, 0, 0, 0, 103, 21, 205, 204, 108, 64, 59, 0, 1, 0, 0, 0, 0, 83, 233, 238, 238, 110, 64, 60, 0, 1, 132, 255, 224, 1, 30, 11, 84, 85, 117, 64, 61, 0, 1, 0, 0, 0, 0, 132, 90, 18, 17, 113, 64, 63, 0, 1, 0, 0, 0, 0, 254, 244, 205, 204, 108, 64, 65, 0, 1, 253, 255, 252, 255, 132, 90, 51, 51, 115, 64, 1, 0, 1, 39, 192, 218, 191, 39, 192, 18, 17, 113, 64, 3, 0, 1, 222, 255, 221, 255, 200, 0, 51, 51, 115, 64, 5, 0, 1, 19, 4, 129, 128, 135, 10, 238, 238, 110, 64, 6, 0, 1, 220, 255, 232, 255, 75, 1, 238, 238, 110, 64, 7, 0, 1, 212, 255, 247, 255, 142, 1, 238, 238, 110, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 238, 238, 110, 64, 9, 0, 1, 200, 1, 162, 3, 229, 249, 238, 238, 110, 64, 10, 0, 1, 202, 86, 246, 3, 3, 92, 238, 238, 110, 64, 11, 0, 1, 192, 171, 118, 250, 24, 94, 238, 238, 110, 64, 15, 0, 1, 110, 160, 79, 10, 242, 14, 51, 51, 115, 64, 16, 0, 1, 224, 90, 196, 245, 179, 6, 18, 17, 113, 64, 17, 0, 1, 99, 6, 90, 253, 82, 35, 18, 17, 113, 64, 20, 0, 1, 239, 255, 130, 25, 106, 38, 18, 17, 113, 64, 27, 0, 1, 0, 0, 0, 0, 197, 8, 238, 238, 110, 64, 28, 0, 1, 0, 0, 0, 0, 35, 0, 154, 153, 121, 64, 31, 0, 1, 0, 0, 0, 0, 54, 10, 238, 238, 110, 64, 34, 0, 1, 0, 0, 0, 0, 207, 255, 238, 238, 110, 64, 37, 0, 1, 0, 0, 0, 0, 73, 159, 51, 51, 115, 64, 38, 0, 1, 113, 94, 193, 12, 1, 212, 51, 51, 115, 64, 40, 0, 1, 142, 235, 30, 1, 245, 33, 84, 85, 117, 64, 41, 0, 1, 10, 246, 126, 1, 192, 30]).concat([238, 238, 110, 64, 42, 0, 1, 67, 255, 108, 253, 249, 16, 84, 85, 117, 64, 43, 0, 1, 116, 248, 230, 254, 179, 10, 238, 238, 110, 64, 47, 0, 1, 0, 0, 0, 0, 109, 5, 238, 238, 110, 64, 48, 0, 1, 0, 0, 0, 0, 66, 2, 238, 238, 110, 64, 50, 0, 1, 0, 0, 0, 0, 61, 6, 238, 238, 110, 64, 51, 0, 1, 0, 0, 0, 0, 8, 253, 238, 238, 110, 64, 54, 0, 1, 0, 0, 0, 0, 33, 21, 18, 17, 113, 64, 59, 0, 1, 0, 0, 0, 0, 245, 233, 51, 51, 115, 64, 65, 0, 1, 252, 255, 252, 255, 132, 90, 18, 17, 113, 64, 0, 0, 1, 133, 188, 95, 194, 197, 192, 51, 51, 115, 64, 4, 0, 1, 159, 247, 94, 130, 75, 233, 18, 17, 113, 64, 6, 0, 1, 198, 255, 217, 255, 75, 1, 18, 17, 113, 64, 7, 0, 1, 184, 255, 242, 255, 142, 1, 18, 17, 113, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 115, 64, 9, 0, 1, 77, 2, 188, 3, 173, 250, 121, 119, 119, 64, 10, 0, 1, 205, 86, 248, 3, 255, 91, 18, 17, 113, 64, 11, 0, 1, 177, 171, 107, 250, 6, 94, 223, 221, 125, 64, 13, 0, 1, 62, 28, 147, 35, 174, 194, 51, 51, 115, 64, 14, 0, 1, 0, 0, 0, 0, 107, 151, 51, 51, 115, 64, 15, 0, 1, 63, 160, 104, 10, 243, 14, 84, 85, 117, 64, 18, 0, 1, 216, 253, 21, 248, 71, 42, 51, 51, 115, 64, 19, 0, 1, 54, 247, 122, 253, 123, 31, 223, 221, 125, 64, 25, 0, 1, 0, 0, 0, 0, 73, 7, 51, 51, 115, 64, 28, 0, 1, 0, 0, 0, 0, 37, 0, 18, 17, 113, 64, 30, 0, 1, 0, 0, 0, 0, 212, 5, 18, 17, 113, 64, 34, 0, 1, 0, 0, 0, 0, 206, 255, 84, 85, 117, 64, 36, 0, 1, 109, 215, 238, 218, 59, 186, 84, 85, 117, 64, 37, 0, 1, 0, 0, 0, 0, 110, 159, 18, 17, 113, 64, 39, 0, 1, 106, 178, 172, 248, 239, 2, 121, 119, 119, 64, 42, 0, 1, 63, 0, 43, 254, 186, 18, 18, 17, 113, 64, 47, 0, 1, 0, 0, 0, 0, 113, 5, 84, 85, 117, 64, 48, 0, 1, 0, 0, 0, 0, 162, 2, 18, 17, 113, 64, 50, 0, 1, 0, 0, 0, 0, 77, 6, 18, 17, 113, 64, 51, 0, 1, 0, 0, 0, 0, 28, 253, 18, 17, 113, 64, 53, 0, 1, 0, 0, 0, 0, 240, 2, 51, 51, 115, 64, 54, 0, 1, 0, 0, 0, 0, 150, 20, 51, 51, 115, 64, 57, 0, 1, 0, 0, 0, 0, 242, 3, 18, 17, 113, 64, 60, 0, 1, 183, 255, 254, 1, 235, 10, 84, 85, 117, 64, 64, 0, 1, 68, 19, 54, 4, 251, 10, 51, 51, 115, 64, 0, 0, 1, 132, 188, 104, 194, 245, 192, 84, 85, 117, 64, 2, 0, 1, 245, 255, 84, 255, 110, 253, 84, 85, 117, 64, 3, 0, 1, 197, 255, 195, 255, 200, 0, 51, 51, 115, 64, 6, 0, 1, 176, 255, 201, 255, 75, 1, 51, 51, 115, 64, 7, 0, 1, 156, 255, 236, 255, 142, 1, 51, 51, 115, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 115, 64, 11, 0, 1, 161, 171, 97, 250, 245, 93, 121, 119, 119, 64, 17, 0, 1, 78, 6, 88, 253, 84, 35, 121, 119, 119, 64, 20, 0, 1, 222, 255, 123, 25, 137, 38, 154, 153, 121, 64, 24, 0, 1, 0, 0, 0, 0, 2, 6, 121, 119, 119, 64, 27, 0, 1, 0, 0, 0, 0, 200, 8, 51, 51, 115, 64, 30, 0, 1, 0, 0, 0, 0, 214, 5, 51, 51, 115, 64, 34, 0, 1, 0, 0, 0, 0, 204, 255, 51, 51, 115, 64, 39, 0, 1, 10, 178, 26, 249, 255, 2, 84, 85, 117, 64, 47, 0, 1, 0, 0, 0, 0, 120, 5, 51, 51, 115, 64, 50, 0, 1, 0, 0, 0, 0, 93, 6, 121, 119, 119, 64, 51, 0, 1, 0, 0, 0, 0, 88, 253, 121, 119, 119, 64, 53, 0, 1, 0, 0, 0, 0, 40, 3, 51, 51, 115, 64, 59, 0, 1, 0, 0, 0, 0, 78, 234, 51, 51, 115, 64, 60, 0, 1, 238, 255, 28, 2, 180, 10, 51, 51, 115, 64, 63, 0, 1, 0, 0, 0, 0, 188, 244, 84, 85, 117, 64, 0, 0, 1, 131, 188, 113, 194, 39, 193, 121, 119, 119, 64, 1, 0, 1, 38, 192, 219, 191, 38, 192, 84, 85, 117, 64, 4, 0, 1, 220, 247, 88, 130, 80, 233, 84, 85, 117, 64, 5, 0, 1, 130, 4, 131, 128, 121, 10, 84, 85, 117, 64, 6, 0, 1, 154, 255, 186, 255, 75, 1, 84, 85, 117, 64, 7, 0, 1, 128, 255, 231, 255, 142, 1, 84, 85, 117, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 154, 153, 121, 64, 9, 0, 1, 20, 3, 207, 3, 215, 251, 121, 119, 119, 64, 11, 0, 1, 131, 171, 77, 250, 212, 93, 121, 119, 119, 64, 14, 0, 1, 0, 0, 0, 0, 51, 151, 84, 85, 117, 64, 15, 0, 1, 40, 160, 125, 10, 236, 14, 121, 119, 119, 64, 16, 0, 1, 233, 90, 183, 245, 181, 6, 154, 153, 121, 64, 19, 0, 1, 44, 247, 114, 253, 142, 31, 84, 85, 117, 64, 28, 0, 1, 0, 0, 0, 0, 38, 0, 84, 85, 117, 64, 30, 0, 1, 0, 0, 0, 0, 215, 5, 84, 85, 117, 64, 34, 0, 1, 0, 0, 0, 0, 203, 255, 84, 85, 117, 64, 38, 0, 1, 105, 94, 225, 12, 229, 211, 121, 119, 119, 64, 39, 0, 1, 79, 177, 242, 249, 32, 3, 121, 119, 119, 64, 40, 0, 1, 129, 236, 57, 1, 27, 34, 84, 85, 117, 64, 50, 0, 1, 0, 0, 0, 0, 109, 6, 84, 85, 117, 64, 54, 0, 1, 0, 0, 0, 0, 81, 20, 121, 119, 119, 64, 57, 0, 1, 0, 0, 0, 0, 187, 3, 121, 119, 119, 64, 59, 0, 1, 0, 0, 0, 0, 11, 235, 84, 85, 117, 64, 60, 0, 1, 39, 0, 57, 2, 120, 10, 84, 85, 117, 64, 63, 0, 1, 0, 0, 0, 0, 38, 245, 84, 85, 117, 64, 65, 0, 1, 235, 255, 241, 255, 101, 90, 121, 119, 119, 64, 0, 0, 1, 131, 188, 122, 194, 91, 193, 154, 153, 121, 64, 2, 0, 1, 11, 0, 9, 255, 43, 253, 154, 153, 121, 64, 3, 0, 1, 171, 255, 168, 255, 200, 0, 154, 153, 121, 64, 4, 0, 1, 89, 248, 76, 130, 89, 233, 121, 119, 119, 64, 5, 0, 1, 244, 3, 130, 128, 165, 10, 121, 119, 119, 64, 6, 0, 1, 132, 255, 171, 255, 75, 1, 121, 119, 119, 64, 7, 0, 1, 101, 255, 225, 255, 142, 1, 121, 119, 119, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 223, 221, 125, 64, 15, 0, 1, 206, 159, 68, 11, 114, 14, 186, 187, 123, 64, 18, 0, 1, 203, 253, 13, 248, 85, 42, 154, 153, 121, 64, 28, 0, 1, 0, 0, 0, 0, 40, 0, 154, 153, 121, 64, 30, 0, 1, 0, 0, 0, 0, 217, 5, 121, 119, 119, 64, 34, 0, 1, 0, 0, 0, 0, 201, 255, 223, 221, 125, 64, 36, 0, 1, 158, 215, 45, 218, 72, 186, 223, 221, 125, 64, 37, 0, 1, 0, 0, 0, 0, 159, 159, 186, 187, 123, 64, 38, 0, 1, 84, 94, 73, 13, 144, 211, 186, 187, 123, 64, 41, 0, 1, 252, 246, 0, 2, 184, 31, 154, 153, 121, 64, 43, 0, 1, 137, 249, 14, 255, 250, 11, 121, 119, 119, 64, 47, 0, 1, 0, 0, 0, 0, 124, 5, 154, 153, 121, 64, 48, 0, 1, 0, 0, 0, 0, 224, 2, 223, 221, 125, 64, 50, 0, 1, 0, 0, 0, 0, 172, 6, 186, 187, 123, 64, 54, 0, 1, 0, 0, 0, 0, 136, 19, 121, 119, 119, 64, 60, 0, 1, 98, 0, 84, 2, 59, 10, 121, 119, 119, 64, 61, 0, 1, 0, 0, 0, 0, 134, 90, 121, 119, 119, 64, 63, 0, 1, 0, 0, 0, 0, 43, 244, 121, 119, 119, 64, 64, 0, 1, 76, 19, 82, 4, 18, 11, 121, 119, 119, 64, 65, 0, 1, 0, 0, 0, 0, 130, 90, 223, 221, 125, 64, 0, 0, 1, 135, 188, 152, 194, 251, 193, 51, 51, 131, 64, 1, 0, 1, 14, 192, 243, 191, 14, 192, 154, 153, 121, 64, 5, 0, 0, 63, 0, 135, 128, 132, 11, 154, 153, 121, 64, 6, 0, 1, 110, 255, 156, 255, 75, 1, 154, 153, 121, 64, 7, 0, 1, 73, 255, 220, 255, 142, 1, 154, 153, 121, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 154, 153, 121, 64, 10, 0, 1, 206, 86, 249, 3, 254, 91, 154, 153, 121, 64, 11, 0, 1, 116, 171, 68, 250, 195, 93, 16, 17, 129, 64, 14, 0, 1, 0, 0, 0, 0, 182, 150, 102, 102, 134, 64, 16, 0, 1, 235, 90, 180, 245, 181, 6, 154, 153, 121, 64, 17, 0, 1, 71, 6, 87, 253, 85, 35, 186, 187, 123, 64, 20, 0, 1, 211, 255, 119, 25, 157, 38, 186, 187, 123, 64, 27, 0, 1, 0, 0, 0, 0, 202, 8, 186, 187, 123, 64, 34, 0, 1, 0, 0, 0, 0, 198, 255, 16, 17, 129, 64, 39, 0, 1, 149, 175, 252, 251, 111, 3, 223, 221, 125, 64, 40, 0, 1, 229, 237, 96, 1, 82, 34, 186, 187, 123, 64, 42, 0, 1, 186, 0, 136, 254, 147, 19, 154, 153, 121, 64, 47, 0, 1, 0, 0, 0, 0, 128, 5, 154, 153, 121, 64, 51, 0, 1, 0, 0, 0, 0, 107, 253, 186, 187, 123, 64, 53, 0, 1, 0, 0, 0, 0, 77, 3, 154, 153, 121, 64, 57, 0, 1, 0, 0, 0, 0, 160, 3, 0, 0, 128, 64, 59, 0, 1, 0, 0, 0, 0, 168, 236, 154, 153, 121, 64, 60, 0, 1, 159, 0, 111, 2, 1, 10, 154, 153, 121, 64, 61, 0, 1, 0, 0, 0, 0, 132, 90, 186, 187, 123, 64, 63, 0, 1, 0, 0, 0, 0, 165, 232, 154, 153, 121, 64, 64, 0, 1, 81, 18, 155, 4, 64, 11, 154, 153, 121, 64, 65, 0, 1, 154, 0, 83, 0, 81, 91, 186, 187, 123, 64, 2, 0, 1, 24, 0, 227, 254, 12, 253, 223, 221, 125, 64, 3, 0, 1, 146, 255, 143, 255, 200, 0, 223, 221, 125, 64, 4, 0, 1, 218, 248, 65, 130, 96, 233, 186, 187, 123, 64, 5, 0, 0, 223, 251, 186, 128, 181, 12, 186, 187, 123, 64, 6, 0, 1, 88, 255, 142, 255, 75, 1, 186, 187, 123, 64, 7, 0, 1, 46, 255, 214, 255, 142, 1, 186, 187, 123, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 186, 187, 123, 64, 9, 0, 1, 87, 3, 208, 3, 57, 252, 223, 221, 125, 64, 10, 0, 1, 208, 86, 250, 3, 253, 91, 186, 187, 123, 64, 11, 0, 1, 101, 171, 58, 250, 179, 93, 223, 221, 125, 64, 17, 0, 1, 60, 6, 86, 253, 87, 35, 154, 153, 137, 64, 19, 0, 1, 52, 247, 120, 253, 127, 31, 0, 0, 128, 64, 24, 0, 1, 0, 0, 0, 0, 3, 6, 186, 187, 123, 64, 28, 0, 1, 0, 0, 0, 0, 41, 0, 186, 187, 123, 64, 30, 0, 1, 0, 0, 0, 0, 218, 5, 0, 0, 128, 64, 31, 0, 1, 0, 0, 0, 0, 46, 10, 186, 187, 123, 64, 43, 0, 1, 17, 250, 34, 255, 154, 12, 0, 0, 128, 64, 47, 0, 1, 0, 0, 0, 0, 138, 5, 223, 221, 125, 64, 48, 0, 1, 0, 0, 0, 0, 29, 3, 186, 187, 123, 64, 51, 0, 1, 0, 0, 0, 0, 126, 253, 223, 221, 125, 64, 57, 0, 1, 0, 0, 0, 0, 106, 3, 186, 187, 123, 64, 60, 0, 1, 220, 0, 137, 2, 198, 9, 51, 51, 131, 64, 61, 0, 1, 0, 0, 0, 0, 132, 90, 186, 187, 123, 64, 64, 0, 1, 34, 17, 232, 4, 253, 10, 186, 187, 123, 64, 65, 0, 1, 50, 1, 217, 0, 94, 92, 0, 0, 128, 64, 2, 0, 1, 56, 0, 154, 254, 207, 252, 223, 221, 125, 64, 5, 0, 0, 173, 248, 6, 129, 207, 13, 223, 221, 125, 64, 6, 0, 1, 67, 255, 127, 255, 75, 1, 0, 0, 128, 64, 7, 0, 1, 249, 254, 204, 255, 142, 1, 223, 221, 125, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 128, 64, 9, 0, 1, 218, 3, 205, 3, 250, 252, 0, 0, 128, 64, 11, 0, 1, 72, 171, 39, 250, 146, 93, 0, 0, 128, 64, 18, 0, 1, 197, 253, 11, 248, 90, 42, 16, 17, 129, 64, 20, 0, 1, 204, 255, 116, 25, 170, 38, 0, 0, 128, 64, 27, 0, 1, 0, 0, 0, 0, 203, 8, 223, 221, 125, 64, 28, 0, 1, 0, 0, 0, 0, 42, 0, 51, 51, 131, 64, 30, 0, 1, 0, 0, 0, 0, 218, 5, 223, 221, 125, 64, 34, 0, 1, 0, 0, 0, 0, 197, 255, 16, 17, 129, 64, 38, 0, 1, 67, 94, 189, 13, 55, 211, 0, 0, 128, 64, 41, 0, 1, 153, 247, 85, 2, 88, 32, 16, 17, 129, 64, 42, 0, 1, 108, 1, 15, 255, 208, 20, 0, 0, 128, 64, 43, 0, 1, 30, 251, 73, 255, 214, 13, 223, 221, 125, 64, 51, 0, 1, 0, 0, 0, 0, 145, 253, 223, 221, 125, 64, 53, 0, 1, 0, 0, 0, 0, 95, 3, 223, 221, 125, 64, 54, 0, 1, 0, 0, 0, 0, 70, 19, 0, 0, 128, 64, 60, 0, 1, 87, 1, 186, 2, 74, 9, 223, 221, 125, 64, 63, 0, 1, 0, 0, 0, 0, 230, 228, 223, 221, 125, 64, 64, 0, 1, 70, 16, 25, 5, 118, 9, 223, 221, 125, 64, 65, 0, 1, 112, 1, 131, 1, 134, 93, 51, 51, 131, 64, 0, 0, 1, 150, 188, 184, 194, 205, 194, 51, 51, 131, 64, 3, 0, 1, 98, 255, 92, 255, 200, 0, 0, 0, 128, 64, 4, 0, 1, 28, 249, 60, 130, 99, 233, 0, 0, 128, 64, 5, 0, 0, 120, 246, 87, 129, 244, 14, 0, 0, 128, 64, 6, 0, 1, 46, 255, 112, 255, 75, 1, 0, 0, 128, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 35, 34, 130, 64, 10, 0, 1, 208, 86, 250, 3, 252, 91, 68, 68, 132, 64, 13, 0, 1, 77, 28, 120, 35, 108, 195, 0, 0, 128, 64, 15, 0, 1, 188, 159, 50, 11, 125, 14, 68, 68, 132, 64, 17, 0, 1, 66, 6, 86, 253, 86, 35, 0, 0, 128, 64, 25, 0, 1, 0, 0, 0, 0, 74, 7, 16, 17, 129, 64, 28, 0, 1, 0, 0, 0, 0, 43, 0, 51, 51, 131, 64, 34, 0, 1, 0, 0, 0, 0, 197, 255, 0, 0, 128, 64, 36, 0, 1, 170, 215, 255, 217, 75, 186, 0, 0, 128, 64, 37, 0, 1, 0, 0, 0, 0, 170, 159, 0, 0, 128, 64, 40, 0, 1, 89, 238, 109, 1, 100, 34, 0, 0, 128, 64, 48, 0, 1, 0, 0, 0, 0, 59, 3, 0, 0, 128, 64, 50, 0, 1, 0, 0, 0, 0, 187, 6, 16, 17, 129, 64, 51, 0, 1, 0, 0, 0, 0, 182, 253, 0, 0, 128, 64, 53, 0, 1, 0, 0, 0, 0, 113, 3, 0, 0, 128, 64, 54, 0, 1, 0, 0, 0, 0, 5, 19, 16, 17, 129, 64, 57, 0, 1, 0, 0, 0, 0, 54, 3, 0, 0, 128, 64, 63, 0, 1, 0, 0, 0, 0, 242, 226, 0, 0, 128, 64, 64, 0, 1, 230, 15, 73, 5, 167, 7, 0, 0, 128, 64, 65, 0, 1, 45, 1, 92, 2, 79, 94, 35, 34, 130, 64, 2, 0, 1, 91, 0, 82, 254, 151, 252, 16, 17, 129, 64, 4, 0, 1, 95, 249, 55, 130, 103, 233, 16, 17, 129, 64, 5, 0, 0, 252, 245, 142, 129, 24, 16, 16, 17, 129, 64, 6, 0, 1, 25, 255, 98, 255, 75, 1, 16, 17, 129, 64, 7, 0, 1, 222, 254, 198, 255, 142, 1, 16, 17, 129, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 35, 34, 130, 64, 9, 0, 1, 92, 4, 194, 3, 180, 253, 35, 34, 130, 64, 11, 0, 1, 44, 171, 21, 250, 114, 93, 16, 17, 129, 64, 15, 0, 1, 176, 159, 154, 10, 227, 14, 16, 17, 129, 64, 18, 0, 1, 197, 253, 10, 248, 90, 42, 16, 17, 129, 64, 24, 0, 1, 0, 0, 0, 0, 3, 6, 16, 17, 129, 64, 25, 0, 1, 0, 0, 0, 0, 74, 7, 16, 17, 129, 64, 27, 0, 1, 0, 0, 0, 0, 203, 8, 16, 17, 129, 64, 31, 0, 1, 0, 0, 0, 0, 46, 10, 35, 34, 130, 64, 36, 0, 1, 194, 215, 167, 217, 80, 186, 35, 34, 130, 64, 37, 0, 1, 0, 0, 0, 0, 194, 159, 35, 34, 130, 64, 40, 0, 1, 62, 239, 134, 1, 135, 34, 68, 68, 132, 64, 41, 0, 1, 202, 248, 248, 2, 140, 33, 16, 17, 129, 64, 43, 0, 1, 162, 251, 92, 255, 113, 14, 35, 34, 130, 64, 47, 0, 1, 0, 0, 0, 0, 145, 5, 35, 34, 130, 64, 48, 0, 1, 0, 0, 0, 0, 119, 3, 16, 17, 129, 64, 50, 0, 1, 0, 0, 0, 0, 202, 6, 35, 34, 130, 64, 53, 0, 1, 0, 0, 0, 0, 148, 3, 51, 51, 131, 64, 54, 0, 1, 0, 0, 0, 0, 69, 18, 51, 51, 131, 64, 59, 0, 1, 0, 0, 0, 0, 233, 237, 119, 119, 135, 64, 60, 0, 1, 190, 2, 59, 3, 181, 7, 16, 17, 129, 64, 63, 0, 1, 0, 0, 0, 0, 174, 227, 16, 17, 129, 64, 64, 0, 1, 127, 16, 127, 5, 123, 6, 16, 17, 129, 64, 65, 0, 1, 13, 0, 121, 3, 2, 94, 68, 68, 132, 64, 4, 0, 1, 37, 250, 41, 130, 111, 233, 51, 51, 131, 64, 5, 0, 0, 207, 246, 223, 129, 99, 18, 35, 34, 130, 64, 6, 0, 1, 4, 255, 84, 255, 75, 1, 35, 34, 130, 64, 7, 0, 1, 196, 254, 193, 255, 142, 1, 35, 34, 130, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 35, 34, 130, 64, 14, 0, 1, 0, 0, 0, 0, 159, 150, 35, 34, 130, 64, 15, 0, 1, 164, 159, 2, 10, 75, 15, 51, 51, 131, 64, 18, 0, 1, 200, 253, 12, 248, 87, 42, 35, 34, 130, 64, 20, 0, 1, 205, 255, 116, 25, 169, 38, 35, 34, 130, 64, 24, 0, 1, 0, 0, 0, 0, 3, 6, 35, 34, 130, 64, 25, 0, 1, 0, 0, 0, 0, 74, 7, 51, 51, 131, 64, 27, 0, 1, 0, 0, 0, 0, 202, 8, 51, 51, 131, 64, 28, 0, 1, 0, 0, 0, 0, 42, 0, 35, 34, 130, 64, 31, 0, 1, 0, 0, 0, 0, 46, 10, 35, 34, 130, 64, 38, 0, 1, 61, 94, 231, 13, 25, 211, 51, 51, 131, 64, 39, 0, 1, 238, 174, 197, 252, 142, 3, 51, 51, 131, 64, 42, 0, 1, 224, 1, 103, 255, 157, 21, 35, 34, 130, 64, 43, 0, 1, 37, 252, 111, 255, 10, 15, 35, 34, 130, 64, 50, 0, 1, 0, 0, 0, 0, 217, 6, 35, 34, 130, 64, 51, 0, 1, 0, 0, 0, 0, 200, 253, 68, 68, 132, 64, 57, 0, 1, 0, 0, 0, 0, 234, 2, 35, 34, 130, 64, 63, 0, 1, 0, 0, 0, 0, 204, 229, 35, 34, 130, 64, 64, 0, 1, 154, 17, 180, 5, 93, 5, 35, 34, 130, 64, 65, 0, 1, 116, 254, 183, 4, 66, 93, 51, 51, 131, 64, 2, 0, 1, 110, 0, 48, 254, 125, 252, 51, 51, 131, 64, 6, 0, 1, 240, 254, 70, 255, 75, 1, 86, 85, 133, 64, 7, 0, 1, 121, 254, 178, 255, 142, 1, 51, 51, 131, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 68, 68, 132, 64, 9, 0, 1, 219, 4, 175, 3, 103, 254, 51, 51, 131, 64, 10, 0, 1, 207, 86, 250, 3, 253, 91, 86, 85, 133, 64, 11, 0, 1, 3, 171, 250, 249, 68, 93, 137, 136, 136, 64, 14, 0, 1, 0, 0, 0, 0, 44, 150, 68, 68, 132, 64, 15, 0, 1, 125, 159, 24, 10, 77, 15, 51, 51, 131, 64, 20, 0, 1, 208, 255, 117, 25, 163, 38, 51, 51, 131, 64, 24, 0, 1, 0, 0, 0, 0, 2, 6, 51, 51, 131, 64, 25, 0, 1, 0, 0, 0, 0, 73, 7, 68, 68, 132, 64, 31, 0, 1, 0, 0, 0, 0, 51, 10, 86, 85, 133, 64, 36, 0, 1, 227, 215, 43, 217, 86, 186, 86, 85, 133, 64, 37, 0, 1, 0, 0, 0, 0, 227, 159, 51, 51, 131, 64, 38, 0, 1, 56, 94, 17, 14, 250, 210, 102, 102, 134, 64, 40, 0, 1, 248, 240, 183, 1, 200, 34, 137, 136, 136, 64, 43, 0, 1, 22, 255, 220, 255, 121, 18, 51, 51, 131, 64, 47, 0, 1, 0, 0, 0, 0, 148, 5, 51, 51, 131, 64, 48, 0, 1, 0, 0, 0, 0, 148, 3, 86, 85, 133, 64, 50, 0, 1, 0, 0, 0, 0, 5, 7, 86, 85, 133, 64, 51, 0, 1, 0, 0, 0, 0, 254, 253, 86, 85, 133, 64, 53, 0, 1, 0, 0, 0, 0, 199, 3, 51, 51, 131, 64, 63, 0, 1, 0, 0, 0, 0, 62, 232, 51, 51, 131, 64, 64, 0, 1, 238, 18, 234, 5, 7, 4, 68, 68, 132, 64, 65, 0, 1, 148, 250, 65, 7, 169, 91, 86, 85, 133, 64, 0, 0, 1, 161, 188, 194, 194, 43, 195, 86, 85, 133, 64, 1, 0, 1, 3, 192, 254, 191, 3, 192, 68, 68, 132, 64, 2, 0, 1, 130, 0, 13, 254, 101, 252, 102, 102, 134, 64, 3, 0, 1, 64, 255, 57, 255, 200, 0, 86, 85, 133, 64, 5, 0, 0, 108, 248, 46, 130, 182, 20, 68, 68, 132, 64, 6, 0, 1, 219, 254, 56, 255, 75, 1, 68, 68, 132, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 68, 68, 132, 64, 10, 0, 1, 207, 86, 249, 3, 254, 91, 119, 119, 135, 64, 18, 0, 1, 212, 253, 18, 248, 76, 42, 102, 102, 134, 64, 20, 0, 1, 219, 255, 122, 25, 142, 38, 68, 68, 132, 64, 24, 0, 1, 0, 0, 0, 0, 2, 6, 68, 68, 132, 64, 25, 0, 1, 0, 0, 0, 0, 72, 7, 170, 170, 138, 64, 27, 0, 1, 0, 0, 0, 0, 198, 8, 68, 68, 132, 64, 28, 0, 1, 0, 0, 0, 0, 41, 0, 119, 119, 135, 64, 30, 0, 1, 0, 0, 0, 0, 216, 5, 68, 68, 132, 64, 34, 0, 1, 0, 0, 0, 0, 198, 255, 68, 68, 132, 64, 38, 0, 1, 51, 94, 61, 14, 219, 210, 68, 68, 132, 64, 39, 0, 1, 156, 174, 39, 253, 156, 3, 68, 68, 132, 64, 42, 0, 1, 25, 2, 146, 255, 1, 22, 68, 68, 132, 64, 47, 0, 1, 0, 0, 0, 0, 152, 5, 86, 85, 133, 64, 48, 0, 1, 0, 0, 0, 0, 205, 3, 86, 85, 133, 64, 54, 0, 1, 0, 0, 0, 0, 201, 17, 68, 68, 132, 64, 59, 0, 1, 0, 0, 0, 0, 82, 238, 68, 68, 132, 64, 61, 0, 1, 0, 0, 0, 0, 134, 90, 68, 68, 132, 64, 63, 0, 1, 0, 0, 0, 0, 45, 235, 68, 68, 132, 64, 64, 0, 1, 108, 20, 23, 6, 116, 2, 86, 85, 133, 64, 2, 0, 1, 149, 0, 236, 253, 78, 252, 86, 85, 133, 64, 4, 0, 1, 102, 250, 37, 130, 114, 233, 86, 85, 133, 64, 6, 0, 1, 200, 254, 43, 255, 75, 1, 86, 85, 133, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 134, 64, 9, 0, 1, 88, 5, 150, 3, 16, 255, 102, 102, 134, 64, 10, 0, 1, 206, 86, 249, 3, 255, 91, 86, 85, 133, 64, 13, 0, 1, 76, 28, 114, 35, 143, 195, 102, 102, 134, 64, 15, 0, 1, 88, 159, 49, 10, 76, 15, 137, 136, 136, 64, 17, 0, 1, 83, 6, 88, 253, 84, 35, 137, 136, 136, 64, 24, 0, 1, 0, 0, 0, 0, 2, 6, 102, 102, 134, 64, 25, 0, 1, 0, 0, 0, 0, 69, 7, 86, 85, 133, 64, 28, 0, 1, 0, 0, 0, 0, 40, 0, 154, 153, 137, 64, 31, 0, 1, 0, 0, 0, 0, 64, 10, 86, 85, 133, 64, 34, 0, 1, 0, 0, 0, 0, 199, 255, 86, 85, 133, 64, 38, 0, 1, 46, 94, 105, 14, 188, 210, 86, 85, 133, 64, 39, 0, 1, 76, 174, 137, 253, 171, 3, 102, 102, 134, 64, 41, 0, 1, 93, 249, 71, 3, 31, 34, 102, 102, 134, 64, 42, 0, 1, 136, 2, 231, 255, 198, 22, 137, 136, 136, 64, 47, 0, 1, 0, 0, 0, 0, 165, 5, 102, 102, 134, 64, 57, 0, 1, 0, 0, 0, 0, 185, 2, 102, 102, 134, 64, 59, 0, 1, 0, 0, 0, 0, 29, 239, 119, 119, 135, 64, 61, 0, 1, 0, 0, 0, 0, 133, 90, 86, 85, 133, 64, 63, 0, 1, 0, 0, 0, 0, 148, 238, 102, 102, 134, 64, 64, 0, 1, 118, 23, 64, 6, 67, 254, 86, 85, 133, 64, 65, 0, 1, 210, 247, 89, 9, 202, 90, 170, 170, 138, 64, 0, 0, 1, 203, 188, 187, 194, 215, 195, 102, 102, 134, 64, 1, 0, 1, 254, 191, 3, 192, 254, 191, 137, 136, 136, 64, 2, 0, 1, 206, 0, 139, 253, 20, 252, 102, 102, 134, 64, 4, 0, 1, 166, 250, 34, 130, 116, 233, 102, 102, 134, 64, 5, 0, 0, 93, 249, 83, 130, 193, 21, 137, 136, 136, 64, 6, 0, 1, 143, 254, 4, 255, 75, 1, 137, 136, 136, 64, 7, 0, 1, 50, 254, 164, 255, 142, 1, 102, 102, 134, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 134, 64, 11, 0, 1, 246, 170, 241, 249, 53, 93, 137, 136, 136, 64, 13, 0, 1, 68, 28, 94, 35, 239, 195, 102, 102, 134, 64, 28, 0, 1, 0, 0, 0, 0, 40, 0, 102, 102, 134, 64, 34, 0, 1, 0, 0, 0, 0, 200, 255, 119, 119, 135, 64, 36, 0, 1, 248, 215, 223, 216, 88, 186, 154, 153, 137, 64, 37, 0, 1, 0, 0, 0, 0, 13, 160, 102, 102, 134, 64, 38, 0, 1, 41, 94, 151, 14, 156, 210, 102, 102, 134, 64, 39, 0, 1, 253, 173, 233, 253, 185, 3, 137, 136, 136, 64, 48, 0, 1, 0, 0, 0, 0, 32, 4, 102, 102, 134, 64, 50, 0, 1, 0, 0, 0, 0, 19, 7, 119, 119, 135, 64, 51, 0, 1, 0, 0, 0, 0, 33, 254, 102, 102, 134, 64, 53, 0, 1, 0, 0, 0, 0, 216, 3, 119, 119, 135, 64, 54, 0, 1, 0, 0, 0, 0, 81, 17, 102, 102, 134, 64, 63, 0, 1, 0, 0, 0, 0, 234, 241, 102, 102, 134, 64, 65, 0, 1, 158, 246, 206, 9, 105, 90, 170, 170, 138, 64, 1, 0, 1, 233, 191, 24, 192, 233, 191, 154, 153, 137, 64, 3, 0, 1, 31, 255, 24, 255, 200, 0, 119, 119, 135, 64, 4, 0, 1, 227, 250, 30, 130, 119, 233, 119, 119, 135, 64, 5, 0, 0, 84, 250, 108, 130, 131, 22, 119, 119, 135, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 119, 119, 135, 64, 9, 0, 1, 149, 5, 136, 3, 97, 255, 119, 119, 135, 64, 10, 0, 1, 205, 86, 248, 3, 0, 92, 119, 119, 135, 64, 11, 0, 1, 233, 170, 233, 249, 38, 93, 154, 153, 137, 64, 15, 0, 1, 34, 159, 91, 10, 73, 15, 170, 170, 138, 64, 16, 0, 1, 224, 90, 195, 245, 179, 6, 137, 136, 136, 64, 20, 0, 1, 226, 255, 125, 25, 129, 38, 137, 136, 136, 64, 25, 0, 1, 0, 0, 0, 0, 67, 7, 154, 153, 137, 64, 28, 0, 1, 0, 0, 0, 0, 38, 0, 119, 119, 135, 64, 34, 0, 1, 0, 0, 0, 0, 201, 255, 119, 119, 135, 64, 38, 0, 1, 37, 94, 197, 14, 124, 210, 154, 153, 137, 64, 39, 0, 1, 25, 173, 3, 255, 228, 3, 154, 153, 137, 64, 40, 0, 1, 54, 242, 218, 1, 246, 34, 137, 136, 136, 64, 41, 0, 1, 236, 249, 147, 3, 175, 34, 119, 119, 135, 64, 42, 0, 1, 191, 2, 17, 0, 39, 23, 119, 119, 135, 64, 50, 0, 1, 0, 0, 0, 0, 33, 7, 154, 153, 137, 64, 53, 0, 1, 0, 0, 0, 0, 9, 4, 119, 119, 135, 64, 57, 0, 1, 0, 0, 0, 0, 161, 2, 119, 119, 135, 64, 59, 0, 1, 0, 0, 0, 0, 125, 239, 119, 119, 135, 64, 63, 0, 1, 0, 0, 0, 0, 202, 244, 119, 119, 135, 64, 64, 0, 1, 74, 24, 37, 6, 144, 252, 137, 136, 136, 64, 65, 0, 1, 37, 255, 47, 255, 83, 92, 154, 153, 137, 64, 4, 0, 1, 87, 251, 24, 130, 123, 233, 137, 136, 136, 64, 5, 0, 0, 16, 251, 125, 130, 1, 23, 137, 136, 136, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 137, 136, 136, 64, 9, 0, 1, 209, 5, 120, 3, 175, 255, 188, 187, 139, 64, 10, 0, 1, 203, 86, 247, 3, 2, 92, 137, 136, 136, 64, 11, 0, 1, 220, 170, 224, 249, 23, 93, 137, 136, 136, 64, 18, 0, 1, 215, 253, 20, 248, 73, 42, 137, 136, 136, 64, 30, 0, 1, 0, 0, 0, 0, 215, 5, 137, 136, 136, 64, 34, 0, 1, 0, 0, 0, 0, 202, 255, 137, 136, 136, 64, 36, 0, 1, 2, 216, 188, 216, 88, 186, 137, 136, 136, 64, 38, 0, 1, 32, 94, 245, 14, 92, 210, 154, 153, 137, 64, 42, 0, 1, 43, 3, 98, 0, 228, 23, 154, 153, 137, 64, 50, 0, 1, 0, 0, 0, 0, 61, 7, 137, 136, 136, 64, 51, 0, 1, 0, 0, 0, 0, 50, 254, 137, 136, 136, 64, 54, 0, 1, 0, 0, 0, 0, 21, 17, 137, 136, 136, 64, 57, 0, 1, 0, 0, 0, 0, 137, 2, 205, 204, 140, 64, 59, 0, 1, 0, 0, 0, 0, 237, 240, 137, 136, 136, 64, 60, 0, 1, 224, 2, 72, 3, 132, 7, 137, 136, 136, 64, 61, 0, 1, 0, 0, 0, 0, 135, 90, 137, 136, 136, 64, 63, 0, 1, 0, 0, 0, 0, 200, 246, 137, 136, 136, 64, 64, 0, 1, 192, 24, 10, 6, 103, 251, 154, 153, 137, 64, 2, 0, 1, 224, 0, 108, 253, 4, 252, 154, 153, 137, 64, 5, 0, 0, 40, 251, 130, 130, 25, 23, 240, 238, 142, 64, 6, 0, 1, 44, 254, 192, 254, 75, 1, 154, 153, 137, 64, 7, 0, 1, 27, 254, 160, 255, 142, 1, 154, 153, 137, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 170, 170, 138, 64, 9, 0, 1, 69, 6, 86, 3, 64, 0, 188, 187, 139, 64, 11, 0, 1, 182, 170, 199, 249, 236, 92, 205, 204, 140, 64, 13, 0, 1, 36, 28, 56, 35, 87, 196, 170, 170, 138, 64, 14, 0, 1, 0, 0, 0, 0, 14, 150, 154, 153, 137, 64, 17, 0, 1, 88, 6, 89, 253, 83, 35, 154, 153, 137, 64, 18, 0, 1, 218, 253, 21, 248, 70, 42, 221, 221, 141, 64, 20, 0, 1, 244, 255, 132, 25, 97, 38, 221, 221, 141, 64, 24, 0, 1, 0, 0, 0, 0, 1, 6, 188, 187, 139, 64, 25, 0, 1, 0, 0, 0, 0, 64, 7, 154, 153, 137, 64, 30, 0, 1, 0, 0, 0, 0, 214, 5, 170, 170, 138, 64, 34, 0, 1, 0, 0, 0, 0, 204, 255, 170, 170, 138, 64, 36, 0, 1, 21, 216, 121, 216, 89, 186, 154, 153, 137, 64, 38, 0, 1, 27, 94, 37, 15, 59, 210, 170, 170, 138, 64, 41, 0, 1, 120, 250, 222, 3, 59, 35, 170, 170, 138, 64, 43, 0, 1, 5, 0, 254, 255, 142, 19, 154, 153, 137, 64, 47, 0, 1, 0, 0, 0, 0, 168, 5, 154, 153, 137, 64, 48, 0, 1, 0, 0, 0, 0, 59, 4, 154, 153, 137, 64, 51, 0, 1, 0, 0, 0, 0, 66, 254, 170, 170, 138, 64, 54, 0, 1, 0, 0, 0, 0, 161, 16, 154, 153, 137, 64, 57, 0, 1, 0, 0, 0, 0, 113, 2, 221, 221, 141, 64, 60, 0, 1, 26, 3, 119, 3, 9, 7, 154, 153, 137, 64, 61, 0, 1, 0, 0, 0, 0, 133, 90, 154, 153, 137, 64, 63, 0, 1, 0, 0, 0, 0, 244, 246, 154, 153, 137, 64, 64, 0, 1, 229, 24, 20, 6, 71, 251, 154, 153, 137, 64, 65, 0, 1, 176, 255, 134, 254, 103, 92, 188, 187, 139, 64, 2, 0, 1, 0, 1, 50, 253, 234, 251, 188, 187, 139, 64, 3, 0, 1, 12, 255, 3, 255, 200, 0, 188, 187, 139, 64, 4, 0, 1, 189, 251, 20, 130, 127, 233, 205, 204, 140, 64, 5, 0, 0, 17, 251, 135, 130, 23, 23, 170, 170, 138, 64, 7, 0, 1, 6, 254, 155, 255, 142, 1, 170, 170, 138, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 188, 187, 139, 64, 15, 0, 1, 0, 159, 121, 10, 71, 15, 188, 187, 139, 64, 17, 0, 1, 97, 6, 89, 253, 82, 35, 170, 170, 138, 64, 18, 0, 1, 221, 253, 23, 248, 67, 42, 170, 170, 138, 64, 19, 0, 1, 54, 247, 122, 253, 123, 31, 170, 170, 138, 64, 28, 0, 1, 0, 0, 0, 0, 37, 0, 188, 187, 139, 64, 30, 0, 1, 0, 0, 0, 0, 213, 5, 240, 238, 142, 64, 31, 0, 1, 0, 0, 0, 0, 76, 10, 221, 221, 141, 64, 37, 0, 1, 0, 0, 0, 0, 50, 160, 170, 170, 138, 64, 38, 0, 1, 22, 94, 85, 15, 26, 210, 188, 187, 139, 64, 39, 0, 1, 136, 172, 185, 255, 255, 3, 170, 170, 138, 64, 40, 0, 1, 157, 242, 229, 1, 5, 35, 221, 221, 141, 64, 42, 0, 1, 248, 3, 255, 0, 78, 25, 170, 170, 138, 64, 47, 0, 1, 0, 0, 0, 0, 171, 5, 170, 170, 138, 64, 48, 0, 1, 0, 0, 0, 0, 85, 4, 0, 0, 144, 64, 50, 0, 1, 0, 0, 0, 0, 139, 7, 170, 170, 138, 64, 51, 0, 1, 0, 0, 0, 0, 83, 254, 205, 204, 140, 64, 53, 0, 1, 0, 0, 0, 0, 56, 4, 0, 0, 144, 64, 57, 0, 1, 0, 0, 0, 0, 235, 1, 188, 187, 139, 64, 61, 0, 1, 0, 0, 0, 0, 127, 90, 170, 170, 138, 64, 63, 0, 1, 0, 0, 0, 0, 127, 246, 188, 187, 139, 64, 64, 0, 1, 230, 24, 55, 6, 140, 251, 170, 170, 138, 64, 65, 0, 1, 37, 255, 47, 255, 82, 92, 188, 187, 139, 64, 0, 0, 1, 214, 188, 178, 194, 234, 195, 0, 0, 144, 64, 1, 0, 1, 219, 191, 38, 192, 219, 191, 221, 221, 141, 64, 7, 0, 1, 201, 253, 143, 255, 142, 1, 188, 187, 139, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 240, 238, 142, 64, 9, 0, 1, 29, 7, 8, 3, 56, 1, 188, 187, 139, 64, 14, 0, 1, 0, 0, 0, 0, 0, 150, 221, 221, 141, 64, 16, 0, 1, 217, 90, 207, 245, 177, 6, 188, 187, 139, 64, 18, 0, 1, 224, 253, 24, 248, 64, 42, 0, 0, 144, 64, 19, 0, 1, 65, 247, 130, 253, 104, 31, 221, 221, 141, 64, 27, 0, 1, 0, 0, 0, 0, 196, 8, 188, 187, 139, 64, 28, 0, 1, 0, 0, 0, 0, 36, 0, 188, 187, 139, 64, 34, 0, 1, 0, 0, 0, 0, 205, 255, 35, 34, 146, 64, 36, 0, 1, 75, 216, 220, 215, 72, 186, 188, 187, 139, 64, 38, 0, 1, 17, 94, 134, 15, 248, 209, 205, 204, 140, 64, 40, 0, 1, 103, 243, 252, 1, 33, 35, 188, 187, 139, 64, 41, 0, 1, 188, 250, 2, 4, 127, 35, 188, 187, 139, 64, 43, 0, 1, 121, 0, 15, 0, 21, 20, 221, 221, 141, 64, 47, 0, 1, 0, 0, 0, 0, 180, 5, 221, 221, 141, 64, 48, 0, 1, 0, 0, 0, 0, 163, 4, 188, 187, 139, 64, 51, 0, 1, 0, 0, 0, 0, 99, 254, 188, 187, 139, 64, 54, 0, 1, 0, 0, 0, 0, 104, 16, 188, 187, 139, 64, 63, 0, 1, 0, 0, 0, 0, 101, 246, 102, 102, 150, 64, 65, 0, 1, 37, 255, 71, 255, 66, 92, 0, 0, 144, 64, 0, 0, 1, 7, 189, 110, 194, 246, 195, 205, 204, 140, 64, 2, 0, 1, 13, 1, 22, 253, 224, 251, 205, 204, 140, 64, 3, 0, 1, 2, 255, 250, 254, 200, 0, 205, 204, 140, 64, 4, 0, 1, 233, 251, 18, 130, 129, 233, 205, 204, 140, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 140, 64, 10, 0, 1, 203, 86, 247, 3, 3, 92, 205, 204, 140, 64, 11, 0, 1, 170, 170, 192, 249, 222, 92, 221, 221, 141, 64, 14, 0, 1, 0, 0, 0, 0, 235, 149, 205, 204, 140, 64, 15, 0, 1, 239, 158, 137, 10, 70, 15, 205, 204, 140, 64, 17, 0, 1, 101, 6, 90, 253, 82, 35, 205, 204, 140, 64, 18, 0, 1, 227, 253, 26, 248, 62, 42, 205, 204, 140, 64, 25, 0, 1, 0, 0, 0, 0, 63, 7, 205, 204, 140, 64, 28, 0, 1, 0, 0, 0, 0, 36, 0, 205, 204, 140, 64, 30, 0, 1, 0, 0, 0, 0, 212, 5, 205, 204, 140, 64, 34, 0, 1, 0, 0, 0, 0, 206, 255, 240, 238, 142, 64, 38, 0, 1, 1, 94, 29, 16, 146, 209, 240, 238, 142, 64, 39, 0, 1, 184, 171, 192, 0, 38, 4, 205, 204, 140, 64, 41, 0, 1, 255, 250, 38, 4, 194, 35, 205, 204, 140, 64, 43, 0, 1, 236, 0, 32, 0, 154, 20, 205, 204, 140, 64, 51, 0, 1, 0, 0, 0, 0, 115, 254, 221, 221, 141, 64, 54, 0, 1, 0, 0, 0, 0, 248, 15, 205, 204, 140, 64, 61, 0, 1, 0, 0, 0, 0, 126, 90, 0, 0, 144, 64, 63, 0, 1, 0, 0, 0, 0, 97, 246, 0, 0, 144, 64, 64, 0, 1, 164, 24, 95, 6, 128, 251, 35, 34, 146, 64, 2, 0, 1, 53, 1, 162, 252, 246, 251, 240, 238, 142, 64, 3, 0, 1, 240, 254, 231, 254, 200, 0, 221, 221, 141, 64, 4, 0, 1, 16, 252, 16, 130, 131, 233, 0, 0, 144, 64, 5, 0, 0, 62, 251, 137, 130, 45, 23, 221, 221, 141, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 144, 64, 10, 0, 1, 201, 86, 246, 3, 4, 92, 0, 0, 144, 64, 11, 0, 1, 135, 170, 168, 249, 181, 92, 35, 34, 146, 64, 13, 0, 1, 19, 28, 234, 34, 177, 196, 221, 221, 141, 64, 15, 0, 1, 223, 158, 154, 10, 70, 15, 221, 221, 141, 64, 17, 0, 1, 105, 6, 90, 253, 81, 35, 240, 238, 142, 64, 18, 0, 1, 233, 253, 29, 248, 56, 42, 221, 221, 141, 64, 25, 0, 1, 0, 0, 0, 0, 62, 7, 240, 238, 142, 64, 28, 0, 1, 0, 0, 0, 0, 34, 0, 221, 221, 141, 64, 30, 0, 1, 0, 0, 0, 0, 212, 5, 221, 221, 141, 64, 34, 0, 1, 0, 0, 0, 0, 207, 255, 221, 221, 141, 64, 40, 0, 1, 202, 243, 6, 2, 47, 35, 221, 221, 141, 64, 41, 0, 1, 66, 251, 74, 4, 5, 36, 221, 221, 141, 64, 43, 0, 1, 94, 1, 48, 0, 29, 21, 240, 238, 142, 64, 51, 0, 1, 0, 0, 0, 0, 147, 254, 16, 17, 145, 64, 53, 0, 1, 0, 0, 0, 0, 115, 4, 16, 17, 145, 64, 59, 0, 1, 0, 0, 0, 0, 69, 241, 68, 68, 148, 64, 61, 0, 1, 0, 0, 0, 0, 132, 90, 240, 238, 142, 64, 4, 0, 1, 48, 252, 15, 130, 133, 233, 240, 238, 142, 64, 7, 0, 1, 182, 253, 140, 255, 141, 1, 240, 238, 142, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 35, 34, 146, 64, 14, 0, 1, 0, 0, 0, 0, 241, 149, 0, 0, 144, 64, 15, 0, 1, 192, 158, 187, 10, 72, 15, 240, 238, 142, 64, 16, 0, 1, 214, 90, 210, 245, 177, 6, 240, 238, 142, 64, 17, 0, 1, 110, 6, 91, 253, 81, 35, 16, 17, 145, 64, 20, 0, 1, 255, 255, 137, 25, 78, 38, 0, 0, 144, 64, 24, 0, 1, 0, 0, 0, 0, 1, 6, 68, 68, 148, 64, 25, 0, 1, 0, 0, 0, 0, 55, 7, 240, 238, 142, 64, 27, 0, 1, 0, 0, 0, 0, 196, 8, 0, 0, 144, 64, 30, 0, 1, 0, 0, 0, 0, 210, 5, 0, 0, 144, 64, 34, 0, 1, 0, 0, 0, 0, 209, 255, 0, 0, 144, 64, 37, 0, 1, 0, 0, 0, 0, 67, 160, 0, 0, 144, 64, 40, 0, 1, 140, 244, 28, 2, 74, 35, 0, 0, 144, 64, 41, 0, 1, 196, 251, 143, 4, 134, 36, 240, 238, 142, 64, 42, 0, 1, 42, 4, 36, 1, 165, 25, 240, 238, 142, 64, 43, 0, 1, 206, 1, 64, 0, 159, 21, 240, 238, 142, 64, 47, 0, 1, 0, 0, 0, 0, 183, 5, 16, 17, 145, 64, 48, 0, 1, 0, 0, 0, 0, 237, 4, 16, 17, 145, 64, 54, 0, 1, 0, 0, 0, 0, 87, 15, 0, 0, 144, 64, 60, 0, 1, 242, 2, 129, 3, 14, 7, 35, 34, 146, 64, 3, 0, 1, 219, 254, 209, 254, 200, 0, 35, 34, 146, 64, 4, 0, 1, 79, 252, 14, 130, 136, 233, 0, 0, 144, 64, 6, 0, 1, 30, 254, 183, 254, 75, 1, 0, 0, 144, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 0, 0, 144, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 144, 64, 9, 0, 1, 79, 7, 243, 2, 107, 1, 35, 34, 146, 64, 16, 0, 1, 206, 90, 222, 245, 175, 6, 16, 17, 145, 64, 17, 0, 1, 118, 6, 92, 253, 80, 35, 35, 34, 146, 64, 18, 0, 1, 241, 253, 34, 248, 48, 42, 16, 17, 145, 64, 27, 0, 1, 0, 0, 0, 0, 195, 8, 0, 0, 144, 64, 28, 0, 1, 0, 0, 0, 0, 33, 0, 0, 0, 144, 64, 31, 0, 1, 0, 0, 0, 0, 78, 10, 16, 17, 145, 64, 38, 0, 1, 249, 93, 132, 16, 74, 209, 16, 17, 145, 64, 39, 0, 1, 52, 171, 104, 1, 63, 4, 0, 0, 144, 64, 42, 0, 1, 91, 4, 73, 1, 250, 25, 16, 17, 145, 64, 43, 0, 1, 168, 2, 96, 0, 154, 22, 35, 34, 146, 64, 47, 0, 1, 0, 0, 0, 0, 191, 5, 0, 0, 144, 64, 51, 0, 1, 0, 0, 0, 0, 162, 254, 35, 34, 146, 64, 0, 0, 1, 36, 189, 55, 194, 214, 195, 51, 51, 147, 64, 1, 0, 1, 217, 191, 40, 192, 217, 191, 68, 68, 148, 64, 5, 0, 0, 24, 251, 140, 130, 78, 23, 51, 51, 147, 64, 6, 0, 1, 1, 254, 163, 254, 75, 1, 68, 68, 148, 64, 7, 0, 1, 122, 253, 128, 255, 141, 1, 16, 17, 145, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 16, 17, 145, 64, 9, 0, 1, 124, 7, 220, 2, 146, 1, 35, 34, 146, 64, 10, 0, 1, 200, 86, 245, 3, 6, 92, 35, 34, 146, 64, 11, 0, 1, 112, 170, 154, 249, 154, 92, 68, 68, 148, 64, 15, 0, 1, 140, 158, 56, 11, 39, 15, 86, 85, 149, 64, 19, 0, 1, 75, 247, 138, 253, 85, 31, 102, 102, 150, 64, 24, 0, 1, 0, 0, 0, 0, 0, 6, 16, 17, 145, 64, 28, 0, 1, 0, 0, 0, 0, 33, 0, 35, 34, 146, 64, 30, 0, 1, 0, 0, 0, 0, 209, 5, 35, 34, 146, 64, 31, 0, 1, 0, 0, 0, 0, 83, 10, 16, 17, 145, 64, 34, 0, 1, 0, 0, 0, 0, 210, 255, 35, 34, 146, 64, 37, 0, 1, 0, 0, 0, 0, 80, 160, 16, 17, 145, 64, 40, 0, 1, 234, 244, 38, 2, 87, 35, 35, 34, 146, 64, 41, 0, 1, 66, 252, 210, 4, 2, 37, 51, 51, 147, 64, 42, 0, 1, 232, 4, 181, 1, 243, 26, 68, 68, 148, 64, 50, 0, 1, 0, 0, 0, 0, 187, 7, 16, 17, 145, 64, 51, 0, 1, 0, 0, 0, 0, 177, 254, 16, 17, 145, 64, 57, 0, 1, 0, 0, 0, 0, 214, 1, 86, 85, 149, 64, 60, 0, 1, 2, 2, 136, 3, 157, 7, 16, 17, 145, 64, 63, 0, 1, 0, 0, 0, 0, 118, 246, 16, 17, 145, 64, 64, 0, 1, 125, 24, 101, 6, 113, 251, 35, 34, 146, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 68, 68, 148, 64, 9, 0, 1, 210, 7, 125, 2, 141, 1, 51, 51, 147, 64, 17, 0, 1, 127, 6, 93, 253, 78, 35, 86, 85, 149, 64, 20, 0, 1, 12, 0, 142, 25, 53, 38, 51, 51, 147, 64, 27, 0, 1, 0, 0, 0, 0, 194, 8, 51, 51, 147, 64, 28, 0, 1, 0, 0, 0, 0, 31, 0, 51, 51, 147, 64, 34, 0, 1, 0, 0, 0, 0, 212, 255, 102, 102, 150, 64, 38, 0, 1, 245, 93, 247, 17, 75, 208, 86, 85, 149, 64, 39, 0, 1, 61, 170, 169, 2, 110, 4, 86, 85, 149, 64, 40, 0, 1, 85, 246, 78, 2, 136, 35, 51, 51, 147, 64, 43, 0, 1, 123, 3, 127, 0, 141, 23, 86, 85, 149, 64, 48, 0, 1, 0, 0, 0, 0, 74, 5, 35, 34, 146, 64, 51, 0, 1, 0, 0, 0, 0, 192, 254, 51, 51, 147, 64, 53, 0, 1, 0, 0, 0, 0, 143, 4, 51, 51, 147, 64, 54, 0, 1, 0, 0, 0, 0, 240, 14, 35, 34, 146, 64, 57, 0, 1, 0, 0, 0, 0, 193, 1, 35, 34, 146, 64, 59, 0, 1, 0, 0, 0, 0, 58, 241, 51, 51, 147, 64, 63, 0, 1, 0, 0, 0, 0, 165, 246, 35, 34, 146, 64, 64, 0, 1, 78, 24, 107, 6, 104, 251, 51, 51, 147, 64, 0, 0, 1, 52, 189, 23, 194, 192, 195, 68, 68, 148, 64, 2, 0, 1, 58, 1, 141, 252, 93, 252, 51, 51, 147, 64, 3, 0, 1, 215, 254, 205, 254, 200, 0, 102, 102, 150, 64, 4, 0, 1, 155, 251, 22, 130, 120, 233, 51, 51, 147, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 154, 153, 153, 64, 10, 0, 1, 196, 86, 243, 3, 10, 92, 68, 68, 148, 64, 11, 0, 1, 90, 170, 139, 249, 129, 92, 102, 102, 150, 64, 13, 0, 1, 116, 27, 40, 34, 110, 196, 119, 119, 151, 64, 14, 0, 1, 0, 0, 0, 0, 132, 150, 51, 51, 147, 64, 16, 0, 1, 204, 90, 225, 245, 175, 6, 51, 51, 147, 64, 18, 0, 1, 244, 253, 35, 248, 45, 42, 68, 68, 148, 64, 30, 0, 1, 0, 0, 0, 0, 208, 5, 51, 51, 147, 64, 31, 0, 1, 0, 0, 0, 0, 85, 10, 119, 119, 151, 64, 36, 0, 1, 74, 216, 80, 216, 246, 185, 68, 68, 148, 64, 37, 0, 1, 0, 0, 0, 0, 89, 160, 102, 102, 150, 64, 41, 0, 1, 50, 253, 82, 5, 238, 37, 51, 51, 147, 64, 47, 0, 1, 0, 0, 0, 0, 194, 5, 68, 68, 148, 64, 51, 0, 1, 0, 0, 0, 0, 221, 254, 86, 85, 149, 64, 57, 0, 1, 0, 0, 0, 0, 132, 1, 119, 119, 151, 64, 59, 0, 1, 0, 0, 0, 0, 131, 240, 102, 102, 150, 64, 64, 0, 1, 83, 23, 131, 6, 51, 251, 86, 85, 149, 64, 0, 0, 1, 87, 189, 207, 193, 136, 195, 102, 102, 150, 64, 1, 0, 1, 216, 191, 41, 192, 216, 191, 86, 85, 149, 64, 3, 0, 1, 211, 254, 201, 254, 200, 0, 102, 102, 150, 64, 6, 0, 1, 249, 253, 157, 254, 75, 1, 68, 68, 148, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 86, 85, 149, 64, 16, 0, 1, 198, 90, 233, 245, 174, 6, 86, 85, 149, 64, 17, 0, 1, 135, 6, 93, 253, 77, 35, 102, 102, 150, 64, 18, 0, 1, 253, 253, 39, 248, 37, 42, 68, 68, 148, 64, 27, 0, 1, 0, 0, 0, 0, 193, 8, 68, 68, 148, 64, 28, 0, 1, 0, 0, 0, 0, 31, 0, 68, 68, 148, 64, 31, 0, 1, 0, 0, 0, 0, 88, 10, 68, 68, 148, 64, 34, 0, 1, 0, 0, 0, 0, 213, 255, 68, 68, 148, 64, 42, 0, 1, 22, 5, 216, 1, 67, 27, 86, 85, 149, 64, 43, 0, 1, 71, 4, 156, 0, 120, 24, 119, 119, 151, 64, 47, 0, 1, 0, 0, 0, 0, 204, 5, 86, 85, 149, 64, 53, 0, 1, 0, 0, 0, 0, 170, 4, 86, 85, 149, 64, 54, 0, 1, 0, 0, 0, 0, 140, 14, 68, 68, 148, 64, 63, 0, 1, 0, 0, 0, 0, 188, 246, 154, 153, 153, 64, 2, 0, 1, 51, 1, 141, 252, 21, 254, 86, 85, 149, 64, 5, 0, 0, 238, 250, 142, 130, 86, 23, 86, 85, 149, 64, 7, 0, 1, 118, 253, 127, 255, 141, 1, 86, 85, 149, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 86, 85, 149, 64, 9, 0, 1, 225, 7, 88, 2, 106, 1, 86, 85, 149, 64, 11, 0, 1, 80, 170, 133, 249, 117, 92, 137, 136, 152, 64, 15, 0, 1, 110, 158, 54, 12, 171, 14, 86, 85, 149, 64, 25, 0, 1, 0, 0, 0, 0, 54, 7, 86, 85, 149, 64, 27, 0, 1, 0, 0, 0, 0, 192, 8, 86, 85, 149, 64, 28, 0, 1, 0, 0, 0, 0, 30, 0, 102, 102, 150, 64, 30, 0, 1, 0, 0, 0, 0, 206, 5, 86, 85, 149, 64, 31, 0, 1, 0, 0, 0, 0, 90, 10, 102, 102, 150, 64, 34, 0, 1, 0, 0, 0, 0, 215, 255, 154, 153, 153, 64, 37, 0, 1, 0, 0, 0, 0, 95, 160, 137, 136, 152, 64, 42, 0, 1, 196, 5, 93, 2, 115, 28, 86, 85, 149, 64, 50, 0, 1, 0, 0, 0, 0, 199, 7, 102, 102, 150, 64, 51, 0, 1, 0, 0, 0, 0, 249, 254, 86, 85, 149, 64, 61, 0, 1, 0, 0, 0, 0, 134, 90, 119, 119, 151, 64, 63, 0, 1, 0, 0, 0, 0, 4, 247, 119, 119, 151, 64, 0, 0, 1, 126, 189, 124, 193, 67, 195, 102, 102, 150, 64, 3, 0, 1, 210, 254, 200, 254, 200, 0, 154, 153, 153, 64, 5, 0, 0, 0, 250, 153, 130, 117, 23, 154, 153, 153, 64, 7, 0, 1, 125, 253, 128, 255, 141, 1, 102, 102, 150, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 150, 64, 9, 0, 1, 235, 7, 50, 2, 58, 1, 102, 102, 150, 64, 11, 0, 1, 69, 170, 126, 249, 104, 92, 154, 153, 153, 64, 16, 0, 1, 188, 90, 247, 245, 171, 6, 102, 102, 150, 64, 17, 0, 1, 139, 6, 94, 253, 77, 35, 119, 119, 151, 64, 19, 0, 1, 79, 247, 141, 253, 78, 31, 154, 153, 153, 64, 20, 0, 1, 26, 0, 148, 25, 28, 38, 137, 136, 152, 64, 25, 0, 1, 0, 0, 0, 0, 51, 7, 102, 102, 150, 64, 27, 0, 1, 0, 0, 0, 0, 192, 8, 102, 102, 150, 64, 28, 0, 1, 0, 0, 0, 0, 29, 0, 170, 170, 154, 64, 31, 0, 1, 0, 0, 0, 0, 102, 10, 119, 119, 151, 64, 39, 0, 1, 201, 169, 65, 3, 132, 4, 119, 119, 151, 64, 40, 0, 1, 2, 247, 96, 2, 159, 35, 102, 102, 150, 64, 43, 0, 1, 170, 4, 170, 0, 233, 24, 102, 102, 150, 64, 48, 0, 1, 0, 0, 0, 0, 96, 5, 119, 119, 151, 64, 50, 0, 1, 0, 0, 0, 0, 221, 7, 102, 102, 150, 64, 53, 0, 1, 0, 0, 0, 0, 184, 4, 119, 119, 151, 64, 54, 0, 1, 0, 0, 0, 0, 44, 14, 102, 102, 150, 64, 57, 0, 1, 0, 0, 0, 0, 113, 1, 102, 102, 150, 64, 60, 0, 1, 192, 1, 135, 3, 210, 7, 102, 102, 150, 64, 61, 0, 1, 0, 0, 0, 0, 132, 90, 119, 119, 151, 64, 1, 0, 1, 215, 191, 42, 192, 215, 191, 119, 119, 151, 64, 3, 0, 1, 211, 254, 201, 254, 200, 0, 154, 153, 153, 64, 4, 0, 1, 178, 250, 35, 130, 98, 233, 221, 221, 157, 64, 6, 0, 1, 16, 254, 173, 254, 75, 1, 119, 119, 151, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 188, 187, 155, 64, 9, 0, 1, 229, 7, 113, 1, 204, 255, 119, 119, 151, 64, 11, 0, 1, 59, 170, 119, 249, 92, 92, 137, 136, 152, 64, 13, 0, 1, 253, 26, 168, 33, 38, 196, 154, 153, 153, 64, 17, 0, 1, 152, 6, 95, 253, 75, 35, 154, 153, 153, 64, 18, 0, 1, 5, 254, 44, 248, 29, 42, 170, 170, 154, 64, 24, 0, 1, 0, 0, 0, 0, 0, 6, 137, 136, 152, 64, 27, 0, 1, 0, 0, 0, 0, 191, 8, 119, 119, 151, 64, 28, 0, 1, 0, 0, 0, 0, 29, 0, 154, 153, 153, 64, 30, 0, 1, 0, 0, 0, 0, 204, 5, 119, 119, 151, 64, 34, 0, 1, 0, 0, 0, 0, 216, 255, 154, 153, 153, 64, 38, 0, 1, 222, 93, 11, 19, 143, 207, 154, 153, 153, 64, 41, 0, 1, 218, 253, 171, 5, 147, 38, 154, 153, 153, 64, 43, 0, 1, 201, 5, 212, 0, 49, 26, 170, 170, 154, 64, 48, 0, 1, 0, 0, 0, 0, 181, 5, 170, 170, 154, 64, 51, 0, 1, 0, 0, 0, 0, 46, 255, 119, 119, 151, 64, 53, 0, 1, 0, 0, 0, 0, 197, 4, 137, 136, 152, 64, 57, 0, 1, 0, 0, 0, 0, 75, 1, 137, 136, 152, 64, 60, 0, 1, 44, 1, 130, 3, 72, 8, 205, 204, 156, 64, 61, 0, 1, 0, 0, 0, 0, 128, 90, 137, 136, 152, 64, 64, 0, 1, 180, 22, 142, 6, 28, 251, 205, 204, 156, 64, 65, 0, 1, 36, 255, 95, 255, 38, 92, 137, 136, 152, 64, 0, 0, 1, 146, 189, 79, 193, 28, 195, 137, 136, 152, 64, 1, 0, 1, 215, 191, 42, 192, 215, 191, 154, 153, 153, 64, 3, 0, 1, 214, 254, 204, 254, 200, 0, 137, 136, 152, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 137, 136, 152, 64, 11, 0, 1, 49, 170, 113, 249, 81, 92, 137, 136, 152, 64, 14, 0, 1, 0, 0, 0, 0, 175, 150, 170, 170, 154, 64, 19, 0, 1, 86, 247, 145, 253, 67, 31, 154, 153, 153, 64, 28, 0, 1, 0, 0, 0, 0, 27, 0, 137, 136, 152, 64, 34, 0, 1, 0, 0, 0, 0, 217, 255, 154, 153, 153, 64, 36, 0, 1, 66, 216, 167, 216, 202, 185, 188, 187, 155, 64, 39, 0, 1, 242, 168, 95, 4, 174, 4, 205, 204, 156, 64, 40, 0, 1, 146, 248, 140, 2, 211, 35, 137, 136, 152, 64, 47, 0, 1, 0, 0, 0, 0, 207, 5, 188, 187, 155, 64, 50, 0, 1, 0, 0, 0, 0, 7, 8, 170, 170, 154, 64, 53, 0, 1, 0, 0, 0, 0, 234, 4, 154, 153, 153, 64, 54, 0, 1, 0, 0, 0, 0, 207, 13, 154, 153, 153, 64, 59, 0, 1, 0, 0, 0, 0, 11, 240, 154, 153, 153, 64, 63, 0, 1, 0, 0, 0, 0, 55, 247, 154, 153, 153, 64, 0, 0, 1, 167, 189, 33, 193, 241, 194, 35, 34, 162, 64, 1, 0, 1, 211, 191, 46, 192, 211, 191, 154, 153, 153, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 170, 170, 154, 64, 11, 0, 1, 30, 170, 100, 249, 58, 92, 154, 153, 153, 64, 13, 0, 1, 189, 26, 100, 33, 253, 195, 154, 153, 153, 64, 14, 0, 1, 0, 0, 0, 0, 220, 150, 205, 204, 156, 64, 15, 0, 1, 99, 158, 101, 13, 17, 14, 188, 187, 155, 64, 25, 0, 1, 0, 0, 0, 0, 48, 7, 154, 153, 153, 64, 27, 0, 1, 0, 0, 0, 0, 190, 8, 154, 153, 153, 64, 34, 0, 1, 0, 0, 0, 0, 218, 255, 170, 170, 154, 64, 42, 0, 1, 22, 6, 155, 2, 2, 29, 170, 170, 154, 64, 47, 0, 1, 0, 0, 0, 0, 212, 5, 170, 170, 154, 64, 57, 0, 1, 0, 0, 0, 0, 38, 1, 154, 153, 153, 64, 60, 0, 1, 219, 0, 126, 3, 135, 8, 170, 170, 154, 64, 64, 0, 1, 4, 22, 153, 6, 6, 251, 170, 170, 154, 64, 0, 0, 1, 189, 189, 241, 192, 197, 194, 170, 170, 154, 64, 2, 0, 1, 48, 1, 147, 252, 124, 254, 170, 170, 154, 64, 3, 0, 1, 216, 254, 206, 254, 200, 0, 205, 204, 156, 64, 4, 0, 1, 183, 249, 51, 130, 73, 233, 221, 221, 157, 64, 5, 0, 0, 255, 248, 164, 130, 143, 23, 170, 170, 154, 64, 7, 0, 1, 129, 253, 129, 255, 141, 1, 170, 170, 154, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 170, 170, 154, 64, 10, 0, 1, 196, 86, 242, 3, 10, 92, 170, 170, 154, 64, 13, 0, 1, 124, 26, 31, 33, 209, 195, 170, 170, 154, 64, 14, 0, 1, 0, 0, 0, 0, 11, 151, 0, 0, 160, 64, 16, 0, 1, 174, 90, 12, 246, 168, 6, 221, 221, 157, 64, 17, 0, 1, 168, 6, 97, 253, 73, 35, 35, 34, 162, 64, 18, 0, 1, 27, 254, 55, 248, 8, 42, 221, 221, 157, 64, 20, 0, 1, 39, 0, 153, 25, 4, 38, 205, 204, 156, 64, 27, 0, 1, 0, 0, 0, 0, 189, 8, 170, 170, 154, 64, 28, 0, 1, 0, 0, 0, 0, 27, 0, 170, 170, 154, 64, 30, 0, 1, 0, 0, 0, 0, 204, 5, 170, 170, 154, 64, 34, 0, 1, 0, 0, 0, 0, 218, 255, 170, 170, 154, 64, 36, 0, 1, 62, 216, 214, 216, 180, 185, 188, 187, 155, 64, 37, 0, 1, 0, 0]).concat([0, 0, 93, 160, 205, 204, 156, 64, 38, 0, 1, 184, 93, 31, 20, 211, 206, 170, 170, 154, 64, 41, 0, 1, 16, 254, 199, 5, 200, 38, 188, 187, 155, 64, 43, 0, 1, 125, 6, 238, 0, 255, 26, 188, 187, 155, 64, 54, 0, 1, 0, 0, 0, 0, 119, 13, 188, 187, 155, 64, 59, 0, 1, 0, 0, 0, 0, 133, 239, 170, 170, 154, 64, 60, 0, 1, 133, 0, 121, 3, 200, 8, 170, 170, 154, 64, 63, 0, 1, 0, 0, 0, 0, 81, 247, 188, 187, 155, 64, 0, 0, 1, 211, 189, 192, 192, 150, 194, 205, 204, 156, 64, 2, 0, 1, 41, 1, 161, 252, 74, 255, 188, 187, 155, 64, 3, 0, 1, 219, 254, 209, 254, 200, 0, 188, 187, 155, 64, 7, 0, 1, 135, 253, 130, 255, 141, 1, 188, 187, 155, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 156, 64, 10, 0, 1, 195, 86, 242, 3, 11, 92, 188, 187, 155, 64, 11, 0, 1, 20, 170, 94, 249, 47, 92, 188, 187, 155, 64, 13, 0, 1, 59, 26, 219, 32, 165, 195, 205, 204, 156, 64, 14, 0, 1, 0, 0, 0, 0, 107, 151, 221, 221, 157, 64, 19, 0, 1, 92, 247, 150, 253, 56, 31, 221, 221, 157, 64, 24, 0, 1, 0, 0, 0, 0, 255, 5, 188, 187, 155, 64, 28, 0, 1, 0, 0, 0, 0, 26, 0, 221, 221, 157, 64, 30, 0, 1, 0, 0, 0, 0, 202, 5, 188, 187, 155, 64, 31, 0, 1, 0, 0, 0, 0, 104, 10, 188, 187, 155, 64, 34, 0, 1, 0, 0, 0, 0, 219, 255, 188, 187, 155, 64, 36, 0, 1, 57, 216, 5, 217, 157, 185, 205, 204, 156, 64, 41, 0, 1, 120, 254, 255, 5, 45, 39, 221, 221, 157, 64, 42, 0, 1, 139, 6, 244, 2, 205, 29, 16, 17, 161, 64, 47, 0, 1, 0, 0, 0, 0, 225, 5, 188, 187, 155, 64, 48, 0, 1, 0, 0, 0, 0, 201, 5, 205, 204, 156, 64, 51, 0, 1, 0, 0, 0, 0, 71, 255, 240, 238, 158, 64, 53, 0, 1, 0, 0, 0, 0, 24, 5, 188, 187, 155, 64, 57, 0, 1, 0, 0, 0, 0, 21, 1, 188, 187, 155, 64, 60, 0, 1, 44, 0, 116, 3, 14, 9, 221, 221, 157, 64, 63, 0, 1, 0, 0, 0, 0, 161, 247, 188, 187, 155, 64, 64, 0, 1, 165, 21, 158, 6, 251, 250, 205, 204, 156, 64, 0, 0, 1, 235, 189, 141, 192, 101, 194, 221, 221, 157, 64, 3, 0, 1, 224, 254, 214, 254, 200, 0, 205, 204, 156, 64, 7, 0, 1, 141, 253, 131, 255, 141, 1, 205, 204, 156, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 156, 64, 9, 0, 1, 223, 7, 79, 1, 119, 255, 205, 204, 156, 64, 11, 0, 1, 11, 170, 88, 249, 36, 92, 221, 221, 157, 64, 13, 0, 1, 191, 25, 89, 32, 76, 195, 205, 204, 156, 64, 25, 0, 1, 0, 0, 0, 0, 46, 7, 205, 204, 156, 64, 28, 0, 1, 0, 0, 0, 0, 25, 0, 35, 34, 162, 64, 31, 0, 1, 0, 0, 0, 0, 117, 10, 221, 221, 157, 64, 34, 0, 1, 0, 0, 0, 0, 221, 255, 205, 204, 156, 64, 36, 0, 1, 53, 216, 53, 217, 135, 185, 240, 238, 158, 64, 37, 0, 1, 0, 0, 0, 0, 91, 160, 221, 221, 157, 64, 39, 0, 1, 143, 168, 229, 4, 194, 4, 205, 204, 156, 64, 43, 0, 1, 213, 6, 251, 0, 99, 27, 0, 0, 160, 64, 48, 0, 1, 0, 0, 0, 0, 21, 6, 221, 221, 157, 64, 50, 0, 1, 0, 0, 0, 0, 27, 8, 240, 238, 158, 64, 54, 0, 1, 0, 0, 0, 0, 249, 12, 205, 204, 156, 64, 57, 0, 1, 0, 0, 0, 0, 4, 1, 221, 221, 157, 64, 59, 0, 1, 0, 0, 0, 0, 241, 238, 221, 221, 157, 64, 60, 0, 1, 110, 255, 103, 3, 165, 9, 221, 221, 157, 64, 64, 0, 1, 222, 20, 168, 6, 235, 250, 240, 238, 158, 64, 0, 0, 1, 27, 190, 36, 192, 254, 193, 221, 221, 157, 64, 2, 0, 1, 37, 1, 168, 252, 172, 255, 221, 221, 157, 64, 4, 0, 1, 104, 249, 57, 130, 64, 233, 221, 221, 157, 64, 7, 0, 1, 146, 253, 132, 255, 141, 1, 221, 221, 157, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 221, 221, 157, 64, 9, 0, 1, 217, 7, 48, 1, 35, 255, 221, 221, 157, 64, 10, 0, 1, 194, 86, 241, 3, 12, 92, 240, 238, 158, 64, 11, 0, 1, 249, 169, 76, 249, 15, 92, 0, 0, 160, 64, 14, 0, 1, 0, 0, 0, 0, 243, 151, 221, 221, 157, 64, 15, 0, 1, 99, 158, 174, 13, 237, 13, 35, 34, 162, 64, 25, 0, 1, 0, 0, 0, 0, 41, 7, 221, 221, 157, 64, 27, 0, 1, 0, 0, 0, 0, 188, 8, 221, 221, 157, 64, 28, 0, 1, 0, 0, 0, 0, 25, 0, 0, 0, 160, 64, 36, 0, 1, 40, 216, 181, 217, 76, 185, 35, 34, 162, 64, 38, 0, 1, 90, 93, 143, 21, 200, 205, 240, 238, 158, 64, 40, 0, 1, 38, 249, 156, 2, 230, 35, 221, 221, 157, 64, 41, 0, 1, 170, 254, 25, 6, 95, 39, 221, 221, 157, 64, 43, 0, 1, 42, 7, 7, 1, 196, 27, 221, 221, 157, 64, 51, 0, 1, 0, 0, 0, 0, 83, 255, 0, 0, 160, 64, 57, 0, 1, 0, 0, 0, 0, 210, 0, 240, 238, 158, 64, 61, 0, 1, 0, 0, 0, 0, 127, 90, 35, 34, 162, 64, 65, 0, 1, 36, 255, 123, 255, 18, 92, 240, 238, 158, 64, 2, 0, 1, 34, 1, 175, 252, 8, 0, 0, 0, 160, 64, 3, 0, 1, 229, 254, 219, 254, 200, 0, 35, 34, 162, 64, 4, 0, 1, 127, 248, 76, 130, 34, 233, 35, 34, 162, 64, 5, 0, 0, 97, 248, 170, 130, 162, 23, 16, 17, 161, 64, 6, 0, 1, 27, 254, 181, 254, 75, 1, 240, 238, 158, 64, 7, 0, 1, 152, 253, 134, 255, 141, 1, 240, 238, 158, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 240, 238, 158, 64, 9, 0, 1, 213, 7, 22, 1, 210, 254, 0, 0, 160, 64, 10, 0, 1, 193, 86, 241, 3, 13, 92, 35, 34, 162, 64, 13, 0, 1, 11, 25, 145, 31, 189, 194, 0, 0, 160, 64, 15, 0, 1, 99, 158, 53, 14, 175, 13, 35, 34, 162, 64, 17, 0, 1, 184, 6, 98, 253, 71, 35, 240, 238, 158, 64, 19, 0, 1, 94, 247, 152, 253, 53, 31, 16, 17, 161, 64, 20, 0, 1, 49, 0, 157, 25, 242, 37, 240, 238, 158, 64, 24, 0, 1, 0, 0, 0, 0, 255, 5, 0, 0, 160, 64, 27, 0, 1, 0, 0, 0, 0, 187, 8, 240, 238, 158, 64, 28, 0, 1, 0, 0, 0, 0, 24, 0, 240, 238, 158, 64, 30, 0, 1, 0, 0, 0, 0, 201, 5, 240, 238, 158, 64, 34, 0, 1, 0, 0, 0, 0, 222, 255, 240, 238, 158, 64, 39, 0, 1, 95, 168, 37, 5, 203, 4, 240, 238, 158, 64, 41, 0, 1, 219, 254, 51, 6, 142, 39, 240, 238, 158, 64, 42, 0, 1, 176, 6, 16, 3, 13, 30, 240, 238, 158, 64, 43, 0, 1, 125, 7, 19, 1, 35, 28, 0, 0, 160, 64, 50, 0, 1, 0, 0, 0, 0, 46, 8, 240, 238, 158, 64, 51, 0, 1, 0, 0, 0, 0, 95, 255, 35, 34, 162, 64, 59, 0, 1, 0, 0, 0, 0, 194, 237, 240, 238, 158, 64, 60, 0, 1, 11, 255, 95, 3, 238, 9, 240, 238, 158, 64, 63, 0, 1, 0, 0, 0, 0, 185, 247, 240, 238, 158, 64, 64, 0, 1, 118, 20, 173, 6, 222, 250, 0, 0, 160, 64, 0, 0, 1, 53, 190, 239, 191, 200, 193, 51, 51, 163, 64, 2, 0, 1, 27, 1, 189, 252, 21, 1, 0, 0, 160, 64, 7, 0, 1, 157, 253, 135, 255, 141, 1, 0, 0, 160, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 163, 64, 9, 0, 1, 229, 7, 228, 0, 210, 253, 16, 17, 161, 64, 11, 0, 1, 233, 169, 66, 249, 251, 91, 0, 0, 160, 64, 19, 0, 1, 96, 247, 153, 253, 49, 31, 0, 0, 160, 64, 24, 0, 1, 0, 0, 0, 0, 255, 5, 68, 68, 164, 64, 28, 0, 1, 0, 0, 0, 0, 21, 0, 0, 0, 160, 64, 30, 0, 1, 0, 0, 0, 0, 201, 5, 0, 0, 160, 64, 34, 0, 1, 0, 0, 0, 0, 223, 255, 0, 0, 160, 64, 37, 0, 1, 0, 0, 0, 0, 90, 160, 68, 68, 164, 64, 39, 0, 1, 135, 167, 77, 6, 246, 4, 16, 17, 161, 64, 40, 0, 1, 179, 249, 171, 2, 247, 35, 0, 0, 160, 64, 41, 0, 1, 11, 255, 77, 6, 189, 39, 16, 17, 161, 64, 42, 0, 1, 246, 6, 70, 3, 137, 30, 16, 17, 161, 64, 43, 0, 1, 29, 8, 42, 1, 217, 28, 16, 17, 161, 64, 51, 0, 1, 0, 0, 0, 0, 117, 255, 68, 68, 164, 64, 53, 0, 1, 0, 0, 0, 0, 76, 5, 16, 17, 161, 64, 54, 0, 1, 0, 0, 0, 0, 170, 12, 16, 17, 161, 64, 60, 0, 1, 62, 254, 77, 3, 127, 10, 86, 85, 165, 64, 61, 0, 1, 0, 0, 0, 0, 132, 90, 35, 34, 162, 64, 63, 0, 1, 0, 0, 0, 0, 1, 248, 35, 34, 162, 64, 64, 0, 1, 50, 19, 189, 6, 184, 250, 35, 34, 162, 64, 0, 0, 1, 105, 190, 131, 191, 88, 193, 16, 17, 161, 64, 3, 0, 1, 230, 254, 221, 254, 200, 0, 16, 17, 161, 64, 7, 0, 1, 160, 253, 135, 255, 141, 1, 16, 17, 161, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 163, 64, 10, 0, 1, 192, 86, 240, 3, 15, 92, 119, 119, 167, 64, 14, 0, 1, 0, 0, 0, 0, 189, 152, 86, 85, 165, 64, 15, 0, 1, 96, 158, 15, 15, 115, 13, 16, 17, 161, 64, 16, 0, 1, 171, 90, 15, 246, 168, 6, 16, 17, 161, 64, 19, 0, 1, 97, 247, 155, 253, 46, 31, 35, 34, 162, 64, 24, 0, 1, 0, 0, 0, 0, 255, 5, 68, 68, 164, 64, 27, 0, 1, 0, 0, 0, 0, 185, 8, 137, 136, 168, 64, 30, 0, 1, 0, 0, 0, 0, 196, 5, 16, 17, 161, 64, 34, 0, 1, 0, 0, 0, 0, 224, 255, 102, 102, 166, 64, 36, 0, 1, 36, 216, 34, 218, 16, 185, 16, 17, 161, 64, 37, 0, 1, 0, 0, 0, 0, 90, 160, 16, 17, 161, 64, 41, 0, 1, 57, 255, 101, 6, 234, 39, 16, 17, 161, 64, 48, 0, 1, 0, 0, 0, 0, 39, 6, 51, 51, 163, 64, 50, 0, 1, 0, 0, 0, 0, 72, 8, 16, 17, 161, 64, 57, 0, 1, 0, 0, 0, 0, 195, 0, 35, 34, 162, 64, 3, 0, 1, 232, 254, 222, 254, 200, 0, 35, 34, 162, 64, 6, 0, 1, 29, 254, 182, 254, 75, 1, 35, 34, 162, 64, 7, 0, 1, 163, 253, 136, 255, 141, 1, 35, 34, 162, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 163, 64, 11, 0, 1, 217, 169, 55, 249, 233, 91, 102, 102, 166, 64, 16, 0, 1, 160, 90, 32, 246, 165, 6, 35, 34, 162, 64, 19, 0, 1, 99, 247, 156, 253, 42, 31, 51, 51, 163, 64, 20, 0, 1, 55, 0, 160, 25, 231, 37, 35, 34, 162, 64, 34, 0, 1, 0, 0, 0, 0, 225, 255, 35, 34, 162, 64, 37, 0, 1, 0, 0, 0, 0, 90, 160, 51, 51, 163, 64, 40, 0, 1, 56, 250, 186, 2, 8, 36, 35, 34, 162, 64, 41, 0, 1, 102, 255, 125, 6, 22, 40, 68, 68, 164, 64, 42, 0, 1, 89, 7, 145, 3, 53, 31, 51, 51, 163, 64, 43, 0, 1, 180, 8, 64, 1, 132, 29, 86, 85, 165, 64, 47, 0, 1, 0, 0, 0, 0, 232, 5, 35, 34, 162, 64, 48, 0, 1, 0, 0, 0, 0, 56, 6, 68, 68, 164, 64, 51, 0, 1, 0, 0, 0, 0, 148, 255, 51, 51, 163, 64, 54, 0, 1, 0, 0, 0, 0, 96, 12, 35, 34, 162, 64, 57, 0, 1, 0, 0, 0, 0, 180, 0, 35, 34, 162, 64, 60, 0, 1, 213, 253, 67, 3, 201, 10, 51, 51, 163, 64, 0, 0, 1, 131, 190, 77, 191, 31, 193, 154, 153, 169, 64, 1, 0, 1, 208, 191, 49, 192, 208, 191, 68, 68, 164, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 51, 51, 163, 64, 4, 0, 1, 100, 248, 79, 130, 28, 233, 86, 85, 165, 64, 5, 0, 0, 92, 248, 167, 130, 172, 23, 68, 68, 164, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 51, 51, 163, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 51, 51, 163, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 163, 64, 13, 0, 1, 244, 24, 114, 31, 167, 194, 51, 51, 163, 64, 17, 0, 1, 188, 6, 99, 253, 71, 35, 86, 85, 165, 64, 18, 0, 1, 34, 254, 59, 248, 1, 42, 51, 51, 163, 64, 19, 0, 1, 101, 247, 157, 253, 39, 31, 68, 68, 164, 64, 24, 0, 1, 0, 0, 0, 0, 255, 5, 51, 51, 163, 64, 25, 0, 1, 0, 0, 0, 0, 40, 7, 170, 170, 170, 64, 31, 0, 1, 0, 0, 0, 0, 134, 10, 51, 51, 163, 64, 34, 0, 1, 0, 0, 0, 0, 226, 255, 51, 51, 163, 64, 37, 0, 1, 0, 0, 0, 0, 91, 160, 68, 68, 164, 64, 38, 0, 1, 45, 93, 230, 21, 125, 205, 102, 102, 166, 64, 41, 0, 1, 13, 0, 213, 6, 183, 40, 68, 68, 164, 64, 48, 0, 1, 0, 0, 0, 0, 89, 6, 51, 51, 163, 64, 57, 0, 1, 0, 0, 0, 0, 165, 0, 51, 51, 163, 64, 59, 0, 1, 0, 0, 0, 0, 119, 237, 68, 68, 164, 64, 60, 0, 1, 253, 252, 46, 3, 103, 11, 51, 51, 163, 64, 63, 0, 1, 0, 0, 0, 0, 24, 248, 51, 51, 163, 64, 64, 0, 1, 194, 18, 194, 6, 175, 250, 51, 51, 163, 64, 65, 0, 1, 35, 255, 130, 255, 12, 92, 68, 68, 164, 64, 0, 0, 1, 158, 190, 24, 191, 229, 192, 86, 85, 165, 64, 2, 0, 1, 27, 1, 188, 252, 94, 1, 86, 85, 165, 64, 4, 0, 1, 67, 248, 84, 130, 18, 233, 68, 68, 164, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 68, 68, 164, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 86, 85, 165, 64, 9, 0, 1, 2, 8, 240, 0, 119, 253, 68, 68, 164, 64, 10, 0, 1, 192, 86, 239, 3, 15, 92, 86, 85, 165, 64, 11, 0, 1, 202, 169, 46, 249, 215, 91, 170, 170, 170, 64, 13, 0, 1, 191, 24, 0, 31, 73, 194, 86, 85, 165, 64, 17, 0, 1, 195, 6, 100, 253, 70, 35, 154, 153, 169, 64, 19, 0, 1, 112, 247, 166, 253, 20, 31, 170, 170, 170, 64, 20, 0, 1, 76, 0, 168, 25, 193, 37, 119, 119, 167, 64, 25, 0, 1, 0, 0, 0, 0, 37, 7, 68, 68, 164, 64, 34, 0, 1, 0, 0, 0, 0, 226, 255, 86, 85, 165, 64, 37, 0, 1, 0, 0, 0, 0, 93, 160, 68, 68, 164, 64, 40, 0, 1, 119, 250, 193, 2, 16, 36, 68, 68, 164, 64, 43, 0, 1, 252, 8, 74, 1, 213, 29, 86, 85, 165, 64, 50, 0, 1, 0, 0, 0, 0, 88, 8, 102, 102, 166, 64, 54, 0, 1, 0, 0, 0, 0, 250, 11, 86, 85, 165, 64, 57, 0, 1, 0, 0, 0, 0, 137, 0, 68, 68, 164, 64, 59, 0, 1, 0, 0, 0, 0, 45, 237, 102, 102, 166, 64, 63, 0, 1, 0, 0, 0, 0, 90, 248, 102, 102, 166, 64, 64, 0, 1, 113, 17, 207, 6, 153, 250, 86, 85, 165, 64, 65, 0, 1, 35, 255, 142, 255, 255, 91, 86, 85, 165, 64, 0, 0, 1, 186, 190, 226, 190, 171, 192, 102, 102, 166, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 102, 102, 166, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 86, 85, 165, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 86, 85, 165, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 86, 85, 165, 64, 10, 0, 1, 191, 86, 239, 3, 16, 92, 86, 85, 165, 64, 24, 0, 1, 0, 0, 0, 0, 254, 5, 154, 153, 169, 64, 27, 0, 1, 0, 0, 0, 0, 183, 8, 86, 85, 165, 64, 28, 0, 1, 0, 0, 0, 0, 20, 0, 86, 85, 165, 64, 34, 0, 1, 0, 0, 0, 0, 227, 255, 102, 102, 166, 64, 38, 0, 1, 6, 93, 38, 22, 60, 205, 102, 102, 166, 64, 39, 0, 1, 59, 167, 183, 6, 6, 5, 86, 85, 165, 64, 40, 0, 1, 180, 250, 199, 2, 23, 36, 137, 136, 168, 64, 42, 0, 1, 206, 7, 234, 3, 255, 31, 119, 119, 167, 64, 43, 0, 1, 196, 9, 103, 1, 185, 30, 137, 136, 168, 64, 48, 0, 1, 0, 0, 0, 0, 148, 6, 86, 85, 165, 64, 51, 0, 1, 0, 0, 0, 0, 158, 255, 137, 136, 168, 64, 53, 0, 1, 0, 0, 0, 0, 111, 5, 86, 85, 165, 64, 59, 0, 1, 0, 0, 0, 0, 227, 236, 86, 85, 165, 64, 60, 0, 1, 145, 252, 34, 3, 176, 11, 119, 119, 167, 64, 0, 0, 1, 242, 190, 121, 190, 54, 192, 102, 102, 166, 64, 2, 0, 1, 27, 1, 188, 252, 124, 1, 102, 102, 166, 64, 4, 0, 1, 57, 248, 86, 130, 13, 233, 119, 119, 167, 64, 5, 0, 0, 107, 248, 164, 130, 176, 23, 102, 102, 166, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 102, 102, 166, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 166, 64, 9, 0, 1, 19, 8, 254, 0, 73, 253, 102, 102, 166, 64, 10, 0, 1, 191, 86, 239, 3, 16, 92, 119, 119, 167, 64, 11, 0, 1, 189, 169, 37, 249, 199, 91, 102, 102, 166, 64, 15, 0, 1, 94, 158, 40, 15, 118, 13, 119, 119, 167, 64, 17, 0, 1, 203, 6, 100, 253, 69, 35, 119, 119, 167, 64, 18, 0, 1, 39, 254, 62, 248, 252, 41, 119, 119, 167, 64, 24, 0, 1, 0, 0, 0, 0, 254, 5, 102, 102, 166, 64, 28, 0, 1, 0, 0, 0, 0, 20, 0, 102, 102, 166, 64, 34, 0, 1, 0, 0, 0, 0, 228, 255, 102, 102, 166, 64, 37, 0, 1, 0, 0, 0, 0, 93, 160, 102, 102, 166, 64, 40, 0, 1, 239, 250, 206, 2, 30, 36, 102, 102, 166, 64, 47, 0, 1, 0, 0, 0, 0, 234, 5, 102, 102, 166, 64, 50, 0, 1, 0, 0, 0, 0, 96, 8, 102, 102, 166, 64, 51, 0, 1, 0, 0, 0, 0, 168, 255, 119, 119, 167, 64, 57, 0, 1, 0, 0, 0, 0, 111, 0, 119, 119, 167, 64, 59, 0, 1, 0, 0, 0, 0, 83, 236, 119, 119, 167, 64, 60, 0, 1, 182, 251, 9, 3, 64, 12, 119, 119, 167, 64, 61, 0, 1, 0, 0, 0, 0, 134, 90, 119, 119, 167, 64, 65, 0, 1, 35, 255, 155, 255, 243, 91, 137, 136, 168, 64, 2, 0, 1, 27, 1, 188, 252, 175, 1, 119, 119, 167, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 137, 136, 168, 64, 4, 0, 1, 48, 248, 89, 130, 5, 233, 119, 119, 167, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 137, 136, 168, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 119, 119, 167, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 221, 221, 173, 64, 9, 0, 1, 174, 8, 207, 1, 227, 251, 119, 119, 167, 64, 10, 0, 1, 190, 86, 238, 3, 17, 92, 119, 119, 167, 64, 15, 0, 1, 94, 158, 63, 15, 121, 13, 205, 204, 172, 64, 16, 0, 1, 147, 90, 50, 246, 163, 6, 119, 119, 167, 64, 28, 0, 1, 0, 0, 0, 0, 19, 0, 137, 136, 168, 64, 34, 0, 1, 0, 0, 0, 0, 230, 255, 16, 17, 177, 64, 36, 0, 1, 45, 216, 53, 218, 250, 184, 154, 153, 169, 64, 37, 0, 1, 0, 0, 0, 0, 96, 160, 137, 136, 168, 64, 38, 0, 1, 220, 92, 94, 22, 254, 204, 119, 119, 167, 64, 39, 0, 1, 23, 167, 233, 6, 13, 5, 137, 136, 168, 64, 40, 0, 1, 94, 251, 218, 2, 44, 36, 119, 119, 167, 64, 41, 0, 1, 51, 0, 233, 6, 220, 40, 119, 119, 167, 64, 47, 0, 1, 0, 0, 0, 0, 236, 5, 119, 119, 167, 64, 50, 0, 1, 0, 0, 0, 0, 103, 8, 119, 119, 167, 64, 51, 0, 1, 0, 0, 0, 0, 177, 255, 137, 136, 168, 64, 54, 0, 1, 0, 0, 0, 0, 187, 11, 170, 170, 170, 64, 63, 0, 1, 0, 0, 0, 0, 143, 248, 119, 119, 167, 64, 64, 0, 1, 1, 17, 211, 6, 145, 250, 137, 136, 168, 64, 0, 0, 1, 14, 191, 69, 190, 251, 191, 137, 136, 168, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 154, 153, 169, 64, 5, 0, 0, 127, 248, 160, 130, 179, 23, 137, 136, 168, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 137, 136, 168, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 240, 238, 174, 64, 10, 0, 1, 187, 86, 237, 3, 20, 92, 137, 136, 168, 64, 11, 0, 1, 182, 169, 33, 249, 191, 91, 170, 170, 170, 64, 14, 0, 1, 0, 0, 0, 0, 252, 152, 170, 170, 170, 64, 15, 0, 1, 94, 158, 119, 15, 135, 13, 154, 153, 169, 64, 17, 0, 1, 210, 6, 101, 253, 68, 35, 154, 153, 169, 64, 18, 0, 1, 44, 254, 64, 248, 248, 41, 137, 136, 168, 64, 24, 0, 1, 0, 0, 0, 0, 254, 5, 137, 136, 168, 64, 25, 0, 1, 0, 0, 0, 0, 36, 7, 137, 136, 168, 64, 28, 0, 1, 0, 0, 0, 0, 19, 0, 154, 153, 169, 64, 39, 0, 1, 212, 166, 70, 7, 27, 5, 137, 136, 168, 64, 41, 0, 1, 88, 0, 253, 6, 255, 40, 154, 153, 169, 64, 43, 0, 1, 61, 10, 121, 1, 65, 31, 137, 136, 168, 64, 47, 0, 1, 0, 0, 0, 0, 238, 5, 137, 136, 168, 64, 50, 0, 1, 0, 0, 0, 0, 110, 8, 137, 136, 168, 64, 51, 0, 1, 0, 0, 0, 0, 185, 255, 137, 136, 168, 64, 57, 0, 1, 0, 0, 0, 0, 99, 0, 137, 136, 168, 64, 59, 0, 1, 0, 0, 0, 0, 15, 236, 170, 170, 170, 64, 60, 0, 1, 115, 250, 224, 2, 19, 13, 137, 136, 168, 64, 61, 0, 1, 0, 0, 0, 0, 134, 90, 154, 153, 169, 64, 64, 0, 1, 34, 16, 219, 6, 134, 250, 205, 204, 172, 64, 65, 0, 1, 34, 255, 191, 255, 210, 91, 188, 187, 171, 64, 0, 0, 1, 100, 191, 178, 189, 78, 191, 154, 153, 169, 64, 2, 0, 1, 27, 1, 187, 252, 196, 1, 154, 153, 169, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 170, 170, 170, 64, 4, 0, 1, 50, 248, 92, 130, 254, 232, 154, 153, 169, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 205, 204, 172, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 154, 153, 169, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 221, 221, 173, 64, 11, 0, 1, 154, 169, 15, 249, 158, 91, 154, 153, 169, 64, 24, 0, 1, 0, 0, 0, 0, 254, 5, 154, 153, 169, 64, 25, 0, 1, 0, 0, 0, 0, 35, 7, 154, 153, 169, 64, 28, 0, 1, 0, 0, 0, 0, 18, 0, 154, 153, 169, 64, 30, 0, 1, 0, 0, 0, 0, 196, 5, 154, 153, 169, 64, 34, 0, 1, 0, 0, 0, 0, 231, 255, 0, 0, 176, 64, 38, 0, 1, 82, 92, 243, 22, 101, 204, 188, 187, 171, 64, 40, 0, 1, 243, 251, 234, 2, 62, 36, 154, 153, 169, 64, 41, 0, 1, 123, 0, 15, 7, 33, 41, 188, 187, 171, 64, 42, 0, 1, 25, 8, 35, 4, 129, 32, 188, 187, 171, 64, 47, 0, 1, 0, 0, 0, 0, 242, 5, 170, 170, 170, 64, 48, 0, 1, 0, 0, 0, 0, 174, 6, 154, 153, 169, 64, 50, 0, 1, 0, 0, 0, 0, 117, 8, 170, 170, 170, 64, 51, 0, 1, 0, 0, 0, 0, 202, 255, 221, 221, 173, 64, 53, 0, 1, 0, 0, 0, 0, 147, 5, 221, 221, 173, 64, 54, 0, 1, 0, 0, 0, 0, 56, 11, 170, 170, 170, 64, 57, 0, 1, 0, 0, 0, 0, 76, 0, 170, 170, 170, 64, 59, 0, 1, 0, 0, 0, 0, 140, 235, 154, 153, 169, 64, 61, 0, 1, 0, 0, 0, 0, 134, 90, 188, 187, 171, 64, 1, 0, 1, 207, 191, 50, 192, 207, 191, 170, 170, 170, 64, 2, 0, 1, 27, 1, 187, 252, 214, 1, 170, 170, 170, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 188, 187, 171, 64, 5, 0, 0, 152, 248, 157, 130, 181, 23, 170, 170, 170, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 170, 170, 170, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 172, 64, 17, 0, 1, 220, 6, 102, 253, 67, 35, 188, 187, 171, 64, 18, 0, 1, 48, 254, 66, 248, 243, 41, 188, 187, 171, 64, 19, 0, 1, 116, 247, 168, 253, 14, 31, 170, 170, 170, 64, 24, 0, 1, 0, 0, 0, 0, 254, 5, 205, 204, 172, 64, 25, 0, 1, 0, 0, 0, 0, 32, 7, 188, 187, 171, 64, 27, 0, 1, 0, 0, 0, 0, 182, 8, 0, 0, 176, 64, 28, 0, 1, 0, 0, 0, 0, 15, 0, 170, 170, 170, 64, 30, 0, 1, 0, 0, 0, 0, 195, 5, 170, 170, 170, 64, 34, 0, 1, 0, 0, 0, 0, 231, 255, 170, 170, 170, 64, 37, 0, 1, 0, 0, 0, 0, 97, 160, 35, 34, 178, 64, 39, 0, 1, 14, 166, 93, 8, 67, 5, 188, 187, 171, 64, 41, 0, 1, 188, 0, 49, 7, 95, 41, 170, 170, 170, 64, 43, 0, 1, 117, 10, 129, 1, 129, 31, 188, 187, 171, 64, 50, 0, 1, 0, 0, 0, 0, 130, 8, 205, 204, 172, 64, 61, 0, 1, 0, 0, 0, 0, 130, 90, 188, 187, 171, 64, 64, 0, 1, 73, 15, 225, 6, 130, 250, 240, 238, 174, 64, 2, 0, 1, 28, 1, 187, 252, 6, 2, 188, 187, 171, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 221, 221, 173, 64, 4, 0, 1, 69, 248, 94, 130, 246, 232, 188, 187, 171, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 188, 187, 171, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 176, 64, 13, 0, 1, 228, 24, 235, 30, 46, 194, 188, 187, 171, 64, 14, 0, 1, 0, 0, 0, 0, 15, 153, 205, 204, 172, 64, 15, 0, 1, 96, 158, 147, 15, 146, 13, 188, 187, 171, 64, 20, 0, 1, 78, 0, 169, 25, 188, 37, 205, 204, 172, 64, 24, 0, 1, 0, 0, 0, 0, 254, 5, 188, 187, 171, 64, 30, 0, 1, 0, 0, 0, 0, 195, 5, 221, 221, 173, 64, 31, 0, 1, 0, 0, 0, 0, 139, 10, 0, 0, 176, 64, 34, 0, 1, 0, 0, 0, 0, 235, 255, 102, 102, 182, 64, 37, 0, 1, 0, 0, 0, 0, 102, 160, 188, 187, 171, 64, 43, 0, 1, 171, 10, 137, 1, 189, 31, 188, 187, 171, 64, 48, 0, 1, 0, 0, 0, 0, 186, 6, 188, 187, 171, 64, 51, 0, 1, 0, 0, 0, 0, 209, 255, 221, 221, 173, 64, 57, 0, 1, 0, 0, 0, 0, 47, 0, 188, 187, 171, 64, 59, 0, 1, 0, 0, 0, 0, 78, 235, 221, 221, 173, 64, 60, 0, 1, 60, 249, 179, 2, 214, 13, 221, 221, 173, 64, 63, 0, 1, 0, 0, 0, 0, 162, 248, 221, 221, 173, 64, 0, 0, 1, 156, 191, 87, 189, 223, 190, 205, 204, 172, 64, 1, 0, 1, 207, 191, 50, 192, 207, 191, 205, 204, 172, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 205, 204, 172, 64, 5, 0, 0, 165, 248, 155, 130, 182, 23, 205, 204, 172, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 205, 204, 172, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 221, 221, 173, 64, 14, 0, 1, 0, 0, 0, 0, 50, 153, 205, 204, 172, 64, 18, 0, 1, 51, 254, 68, 248, 241, 41, 205, 204, 172, 64, 19, 0, 1, 117, 247, 169, 253, 11, 31, 0, 0, 176, 64, 20, 0, 1, 89, 0, 174, 25, 169, 37, 240, 238, 174, 64, 27, 0, 1, 0, 0, 0, 0, 181, 8, 205, 204, 172, 64, 30, 0, 1, 0, 0, 0, 0, 194, 5, 221, 221, 173, 64, 40, 0, 1, 73, 252, 243, 2, 72, 36, 205, 204, 172, 64, 41, 0, 1, 217, 0, 65, 7, 124, 41, 205, 204, 172, 64, 42, 0, 1, 47, 8, 52, 4, 167, 32, 205, 204, 172, 64, 43, 0, 1, 221, 10, 144, 1, 246, 31, 205, 204, 172, 64, 47, 0, 1, 0, 0, 0, 0, 243, 5, 205, 204, 172, 64, 48, 0, 1, 0, 0, 0, 0, 198, 6, 68, 68, 180, 64, 50, 0, 1, 0, 0, 0, 0, 164, 8, 221, 221, 173, 64, 51, 0, 1, 0, 0, 0, 0, 223, 255, 240, 238, 174, 64, 59, 0, 1, 0, 0, 0, 0, 161, 234, 240, 238, 174, 64, 64, 0, 1, 20, 14, 231, 6, 139, 250, 221, 221, 173, 64, 1, 0, 1, 207, 191, 50, 192, 207, 191, 221, 221, 173, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 240, 238, 174, 64, 5, 0, 0, 190, 248, 150, 130, 182, 23, 221, 221, 173, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 221, 221, 173, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 221, 221, 173, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 240, 238, 174, 64, 15, 0, 1, 103, 158, 167, 15, 155, 13, 51, 51, 179, 64, 16, 0, 1, 136, 90, 66, 246, 160, 6, 221, 221, 173, 64, 17, 0, 1, 223, 6, 102, 253, 66, 35, 240, 238, 174, 64, 18, 0, 1, 55, 254, 70, 248, 237, 41, 51, 51, 179, 64, 19, 0, 1, 127, 247, 176, 253, 250, 30, 221, 221, 173, 64, 24, 0, 1, 0, 0, 0, 0, 254, 5, 240, 238, 174, 64, 25, 0, 1, 0, 0, 0, 0, 31, 7, 240, 238, 174, 64, 30, 0, 1, 0, 0, 0, 0, 193, 5, 240, 238, 174, 64, 41, 0, 1, 15, 1, 93, 7, 175, 41, 68, 68, 180, 64, 42, 0, 1, 156, 8, 135, 4, 100, 33, 221, 221, 173, 64, 43, 0, 1, 12, 11, 151, 1, 43, 32, 221, 221, 173, 64, 47, 0, 1, 0, 0, 0, 0, 244, 5, 240, 238, 174, 64, 48, 0, 1, 0, 0, 0, 0, 218, 6, 240, 238, 174, 64, 61, 0, 1, 0, 0, 0, 0, 134, 90, 240, 238, 174, 64, 65, 0, 1, 34, 255, 206, 255, 194, 91, 0, 0, 176, 64, 0, 0, 1, 212, 191, 3, 189, 117, 190, 240, 238, 174, 64, 1, 0, 1, 207, 191, 51, 192, 207, 191, 240, 238, 174, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 0, 0, 176, 64, 4, 0, 1, 87, 248, 95, 130, 243, 232, 240, 238, 174, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 240, 238, 174, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 240, 238, 174, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 119, 119, 183, 64, 9, 0, 1, 177, 9, 180, 3, 192, 249, 240, 238, 174, 64, 11, 0, 1, 150, 169, 12, 249, 152, 91, 240, 238, 174, 64, 14, 0, 1, 0, 0, 0, 0, 66, 153, 0, 0, 176, 64, 17, 0, 1, 229, 6, 103, 253, 65, 35, 240, 238, 174, 64, 24, 0, 1, 0, 0, 0, 0, 254, 5, 51, 51, 179, 64, 31, 0, 1, 0, 0, 0, 0, 148, 10, 240, 238, 174, 64, 40, 0, 1, 112, 252, 247, 2, 77, 36, 0, 0, 176, 64, 43, 0, 1, 96, 11, 163, 1, 137, 32, 35, 34, 178, 64, 47, 0, 1, 0, 0, 0, 0, 249, 5, 0, 0, 176, 64, 51, 0, 1, 0, 0, 0, 0, 235, 255, 0, 0, 176, 64, 53, 0, 1, 0, 0, 0, 0, 158, 5, 16, 17, 177, 64, 54, 0, 1, 0, 0, 0, 0, 253, 10, 240, 238, 174, 64, 57, 0, 1, 0, 0, 0, 0, 38, 0, 16, 17, 177, 64, 60, 0, 1, 29, 248, 133, 2, 130, 14, 240, 238, 174, 64, 63, 0, 1, 0, 0, 0, 0, 162, 248, 16, 17, 177, 64, 1, 0, 1, 206, 191, 51, 192, 206, 191, 0, 0, 176, 64, 2, 0, 1, 29, 1, 187, 252, 13, 2, 0, 0, 176, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 16, 17, 177, 64, 5, 0, 0, 204, 248, 147, 130, 181, 23, 0, 0, 176, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 0, 0, 176, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 0, 0, 176, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 176, 64, 10, 0, 1, 187, 86, 236, 3, 20, 92, 16, 17, 177, 64, 11, 0, 1, 142, 169, 7, 249, 143, 91, 35, 34, 178, 64, 14, 0, 1, 0, 0, 0, 0, 107, 153, 35, 34, 178, 64, 15, 0, 1, 123, 158, 185, 15, 156, 13, 0, 0, 176, 64, 18, 0, 1, 57, 254, 71, 248, 235, 41, 0, 0, 176, 64, 24, 0, 1, 0, 0, 0, 0, 253, 5, 0, 0, 176, 64, 25, 0, 1, 0, 0, 0, 0, 30, 7, 0, 0, 176, 64, 27, 0, 1, 0, 0, 0, 0, 180, 8, 0, 0, 176, 64, 30, 0, 1, 0, 0, 0, 0, 193, 5, 0, 0, 176, 64, 40, 0, 1, 147, 252, 251, 2, 81, 36, 35, 34, 178, 64, 41, 0, 1, 80, 1, 127, 7, 237, 41, 16, 17, 177, 64, 48, 0, 1, 0, 0, 0, 0, 236, 6, 0, 0, 176, 64, 57, 0, 1, 0, 0, 0, 0, 30, 0, 35, 34, 178, 64, 59, 0, 1, 0, 0, 0, 0, 10, 234, 0, 0, 176, 64, 61, 0, 1, 0, 0, 0, 0, 132, 90, 51, 51, 179, 64, 63, 0, 1, 0, 0, 0, 0, 113, 248, 16, 17, 177, 64, 64, 0, 1, 86, 13, 234, 6, 147, 250, 35, 34, 178, 64, 65, 0, 1, 33, 255, 229, 255, 177, 91, 51, 51, 179, 64, 0, 0, 1, 37, 192, 150, 188, 225, 189, 16, 17, 177, 64, 2, 0, 1, 29, 1, 187, 252, 18, 2, 16, 17, 177, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 16, 17, 177, 64, 4, 0, 1, 97, 248, 95, 130, 241, 232, 16, 17, 177, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 86, 85, 181, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 16, 17, 177, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 35, 34, 178, 64, 10, 0, 1, 186, 86, 236, 3, 21, 92, 86, 85, 181, 64, 13, 0, 1, 51, 25, 242, 30, 50, 194, 51, 51, 179, 64, 17, 0, 1, 239, 6, 104, 253, 64, 35, 16, 17, 177, 64, 18, 0, 1, 59, 254, 72, 248, 233, 41, 35, 34, 178, 64, 20, 0, 1, 94, 0, 176, 25, 160, 37, 16, 17, 177, 64, 24, 0, 1, 0, 0, 0, 0, 253, 5, 16, 17, 177, 64, 25, 0, 1, 0, 0, 0, 0, 29, 7, 35, 34, 178, 64, 27, 0, 1, 0, 0, 0, 0, 179, 8, 16, 17, 177, 64, 28, 0, 1, 0, 0, 0, 0, 15, 0, 16, 17, 177, 64, 30, 0, 1, 0, 0, 0, 0, 192, 5, 16, 17, 177, 64, 34, 0, 1, 0, 0, 0, 0, 236, 255, 35, 34, 178, 64, 38, 0, 1, 82, 92, 26, 23, 114, 204, 16, 17, 177, 64, 40, 0, 1, 179, 252, 254, 2, 85, 36, 68, 68, 180, 64, 43, 0, 1, 210, 11, 179, 1, 10, 33, 16, 17, 177, 64, 51, 0, 1, 0, 0, 0, 0, 240, 255, 35, 34, 178, 64, 53, 0, 1, 0, 0, 0, 0, 167, 5, 51, 51, 179, 64, 57, 0, 1, 0, 0, 0, 0, 11, 0, 51, 51, 179, 64, 61, 0, 1, 0, 0, 0, 0, 130, 90, 188, 187, 187, 64, 1, 0, 1, 204, 191, 53, 192, 204, 191, 35, 34, 178, 64, 2, 0, 1, 29, 1, 187, 252, 22, 2, 35, 34, 178, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 35, 34, 178, 64, 4, 0, 1, 106, 248, 96, 130, 241, 232, 51, 51, 179, 64, 5, 0, 0, 212, 248, 144, 130, 179, 23, 35, 34, 178, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 35, 34, 178, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 86, 85, 181, 64, 11, 0, 1, 132, 169, 0, 249, 131, 91, 68, 68, 180, 64, 18, 0, 1, 65, 254, 75, 248, 227, 41, 35, 34, 178, 64, 24, 0, 1, 0, 0, 0, 0, 253, 5, 51, 51, 179, 64, 25, 0, 1, 0, 0, 0, 0, 27, 7, 51, 51, 179, 64, 28, 0, 1, 0, 0, 0, 0, 14, 0, 35, 34, 178, 64, 30, 0, 1, 0, 0, 0, 0, 192, 5, 35, 34, 178, 64, 34, 0, 1, 0, 0, 0, 0, 236, 255, 137, 136, 184, 64, 36, 0, 1, 51, 216, 21, 218, 6, 185, 137, 136, 184, 64, 40, 0, 1, 21, 253, 9, 3, 97, 36, 35, 34, 178, 64, 48, 0, 1, 0, 0, 0, 0, 243, 6, 35, 34, 178, 64, 51, 0, 1, 0, 0, 0, 0, 244, 255, 51, 51, 179, 64, 54, 0, 1, 0, 0, 0, 0, 223, 10, 35, 34, 178, 64, 60, 0, 1, 197, 247, 117, 2, 181, 14, 35, 34, 178, 64, 64, 0, 1, 253, 12, 234, 6, 157, 250, 51, 51, 179, 64, 2, 0, 1, 30, 1, 187, 252, 25, 2, 51, 51, 179, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 51, 51, 179, 64, 4, 0, 1, 114, 248, 96, 130, 240, 232, 51, 51, 179, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 51, 51, 179, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 179, 64, 10, 0, 1, 186, 86, 236, 3, 22, 92, 51, 51, 179, 64, 14, 0, 1, 0, 0, 0, 0, 119, 153, 51, 51, 179, 64, 15, 0, 1, 136, 158, 187, 15, 149, 13, 68, 68, 180, 64, 20, 0, 1, 99, 0, 178, 25, 151, 37, 102, 102, 182, 64, 24, 0, 1, 0, 0, 0, 0, 253, 5, 68, 68, 180, 64, 27, 0, 1, 0, 0, 0, 0, 179, 8, 68, 68, 180, 64, 30, 0, 1, 0, 0, 0, 0, 191, 5, 51, 51, 179, 64, 34, 0, 1, 0, 0, 0, 0, 237, 255, 68, 68, 180, 64, 38, 0, 1, 72, 92, 53, 23, 123, 204, 170, 170, 186, 64, 39, 0, 1, 225, 165, 162, 8, 77, 5, 137, 136, 184, 64, 41, 0, 1, 126, 1, 152, 7, 26, 42, 86, 85, 181, 64, 47, 0, 1, 0, 0, 0, 0, 250, 5, 86, 85, 181, 64, 48, 0, 1, 0, 0, 0, 0, 0, 7, 51, 51, 179, 64, 51, 0, 1, 0, 0, 0, 0, 248, 255, 51, 51, 179, 64, 53, 0, 1, 0, 0, 0, 0, 171, 5, 137, 136, 184, 64, 59, 0, 1, 0, 0, 0, 0, 37, 233, 68, 68, 180, 64, 60, 0, 1, 33, 247, 85, 2, 21, 15, 137, 136, 184, 64, 64, 0, 1, 80, 11, 220, 6, 12, 251, 51, 51, 179, 64, 65, 0, 1, 33, 255, 237, 255, 169, 91, 102, 102, 182, 64, 0, 0, 1, 113, 192, 65, 188, 96, 189, 68, 68, 180, 64, 2, 0, 1, 30, 1, 187, 252, 27, 2, 68, 68, 180, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 68, 68, 180, 64, 4, 0, 1, 121, 248, 96, 130, 240, 232, 86, 85, 181, 64, 5, 0, 0, 208, 248, 142, 130, 176, 23, 68, 68, 180, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 68, 68, 180, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 68, 68, 180, 64, 10, 0, 1, 185, 86, 235, 3, 22, 92, 170, 170, 186, 64, 14, 0, 1, 0, 0, 0, 0, 213, 153, 86, 85, 181, 64, 15, 0, 1, 185, 158, 183, 15, 111, 13, 86, 85, 181, 64, 16, 0, 1, 130, 90, 74, 246, 159, 6, 119, 119, 183, 64, 17, 0, 1, 15, 7, 107, 253, 60, 35, 119, 119, 183, 64, 19, 0, 1, 143, 247, 189, 253, 221, 30, 102, 102, 182, 64, 25, 0, 1, 0, 0, 0, 0, 25, 7, 68, 68, 180, 64, 28, 0, 1, 0, 0, 0, 0, 13, 0, 68, 68, 180, 64, 31, 0, 1, 0, 0, 0, 0, 150, 10, 68, 68, 180, 64, 34, 0, 1, 0, 0, 0, 0, 238, 255, 86, 85, 197, 64, 51, 0, 1, 0, 0, 0, 0, 248, 255, 102, 102, 182, 64, 53, 0, 1, 0, 0, 0, 0, 176, 5, 86, 85, 181, 64, 54, 0, 1, 0, 0, 0, 0, 208, 10, 68, 68, 180, 64, 57, 0, 1, 0, 0, 0, 0, 7, 0, 86, 85, 181, 64, 61, 0, 1, 0, 0, 0, 0, 126, 90, 68, 68, 180, 64, 63, 0, 1, 0, 0, 0, 0, 92, 248, 68, 68, 180, 64, 65, 0, 1, 33, 255, 245, 255, 161, 91, 86, 85, 181, 64, 2, 0, 1, 31, 1, 187, 252, 29, 2, 86, 85, 181, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 86, 85, 181, 64, 4, 0, 1, 127, 248, 97, 130, 240, 232, 86, 85, 181, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 86, 85, 181, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 182, 64, 10, 0, 1, 185, 86, 235, 3, 23, 92, 102, 102, 182, 64, 18, 0, 1, 71, 254, 78, 248, 222, 41, 86, 85, 181, 64, 20, 0, 1, 103, 0, 180, 25, 143, 37, 102, 102, 182, 64, 27, 0, 1, 0, 0, 0, 0, 178, 8, 86, 85, 181, 64, 28, 0, 1, 0, 0, 0, 0, 12, 0, 86, 85, 181, 64, 30, 0, 1, 0, 0, 0, 0, 190, 5, 137, 136, 184, 64, 31, 0, 1, 0, 0, 0, 0, 193, 10, 154, 153, 185, 64, 34, 0, 1, 0, 0, 0, 0, 25, 0, 86, 85, 181, 64, 38, 0, 1, 31, 92, 54, 23, 88, 204, 86, 85, 181, 64, 42, 0, 1, 161, 8, 139, 4, 110, 33, 102, 102, 182, 64, 43, 0, 1, 231, 11, 182, 1, 34, 33, 86, 85, 181, 64, 50, 0, 1, 0, 0, 0, 0, 165, 8, 119, 119, 199, 64, 57, 0, 1, 0, 0, 0, 0, 247, 255, 86, 85, 181, 64, 60, 0, 1, 214, 246, 68, 2, 64, 15, 86, 85, 181, 64, 63, 0, 1, 0, 0, 0, 0, 66, 248, 119, 119, 183, 64, 65, 0, 1, 32, 255, 12, 0, 137, 91, 102, 102, 182, 64, 2, 0, 1, 31, 1, 187, 252, 30, 2, 102, 102, 182, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 102, 102, 182, 64, 4, 0, 1, 130, 248, 97, 130, 241, 232, 119, 119, 183, 64, 5, 0, 0, 187, 248, 141, 130, 173, 23, 102, 102, 182, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 102, 102, 182, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 102, 102, 182, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 188, 187, 187, 64, 11, 0, 1, 129, 169, 254, 248, 127, 91, 119, 119, 183, 64, 13, 0, 1, 89, 25, 246, 30, 58, 194, 102, 102, 182, 64, 15, 0, 1, 33, 159, 160, 15, 9, 13, 102, 102, 182, 64, 16, 0, 1, 129, 90, 76, 246, 159, 6, 119, 119, 183, 64, 20, 0, 1, 123, 0, 188, 25, 107, 37, 102, 102, 182, 64, 28, 0, 1, 0, 0, 0, 0, 12, 0, 170, 170, 186, 64, 30, 0, 1, 0, 0, 0, 0, 122, 5, 137, 136, 184, 64, 38, 0, 1, 218, 90, 255, 22, 17, 203, 102, 102, 182, 64, 42, 0, 1, 165, 8, 142, 4, 116, 33, 102, 102, 182, 64, 47, 0, 1, 0, 0, 0, 0, 250, 5, 137, 136, 184, 64, 48, 0, 1, 0, 0, 0, 0, 4, 7, 102, 102, 182, 64, 50, 0, 1, 0, 0, 0, 0, 166, 8, 119, 119, 183, 64, 54, 0, 1, 0, 0, 0, 0, 201, 10, 170, 170, 186, 64, 60, 0, 1, 181, 245, 243, 1, 210, 15, 154, 153, 185, 64, 61, 0, 1, 0, 0, 0, 0, 126, 90, 119, 119, 183, 64, 63, 0, 1, 0, 0, 0, 0, 0, 248, 119, 119, 183, 64, 0, 0, 1, 136, 192, 43, 188, 58, 189, 137, 136, 184, 64, 2, 0, 1, 32, 1, 187, 252, 31, 2, 119, 119, 183, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 119, 119, 183, 64, 4, 0, 1, 131, 248, 97, 130, 242, 232, 119, 119, 183, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 137, 136, 184, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 119, 119, 183, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 137, 136, 184, 64, 10, 0, 1, 176, 86, 229, 3, 33, 92, 119, 119, 183, 64, 15, 0, 1, 98, 159, 146, 15, 207, 12, 137, 136, 184, 64, 16, 0, 1, 87, 90, 136, 246, 150, 6, 137, 136, 184, 64, 18, 0, 1, 117, 254, 102, 248, 178, 41, 119, 119, 183, 64, 24, 0, 1, 0, 0, 0, 0, 252, 5, 137, 136, 184, 64, 25, 0, 1, 0, 0, 0, 0, 7, 7, 119, 119, 183, 64, 27, 0, 1, 0, 0, 0, 0, 175, 8, 170, 170, 186, 64, 28, 0, 1, 0, 0, 0, 0, 197, 255, 205, 204, 188, 64, 37, 0, 1, 0, 0, 0, 0, 103, 160, 154, 153, 185, 64, 42, 0, 1, 172, 8, 148, 4, 128, 33, 137, 136, 184, 64, 43, 0, 1, 243, 11, 184, 1, 47, 33, 188, 187, 187, 64, 47, 0, 1, 0, 0, 0, 0, 249, 5, 119, 119, 183, 64, 50, 0, 1, 0, 0, 0, 0, 166, 8, 154, 153, 185, 64, 53, 0, 1, 0, 0, 0, 0, 177, 5, 137, 136, 184, 64, 0, 0, 1, 158, 192, 23, 188, 22, 189, 137, 136, 184, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 154, 153, 185, 64, 4, 0, 1, 124, 248, 99, 130, 246, 232, 137, 136, 184, 64, 5, 0, 0, 170, 248, 141, 130, 171, 23, 137, 136, 184, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 137, 136, 184, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 170, 170, 186, 64, 9, 0, 1, 13, 10, 116, 4, 243, 248, 154, 153, 185, 64, 13, 0, 1, 106, 25, 228, 30, 34, 194, 154, 153, 185, 64, 15, 0, 1, 82, 158, 215, 15, 10, 14, 137, 136, 184, 64, 17, 0, 1, 62, 7, 112, 253, 54, 35, 137, 136, 184, 64, 19, 0, 1, 166, 247, 206, 253, 179, 30, 137, 136, 184, 64, 20, 0, 1, 162, 0, 203, 25, 37, 37, 137, 136, 184, 64, 24, 0, 1, 0, 0, 0, 0, 251, 5, 137, 136, 184, 64, 27, 0, 1, 0, 0, 0, 0, 169, 8, 137, 136, 184, 64, 50, 0, 1, 0, 0, 0, 0, 167, 8, 170, 170, 186, 64, 54, 0, 1, 0, 0, 0, 0, 194, 10, 137, 136, 184, 64, 63, 0, 1, 0, 0, 0, 0, 217, 247, 205, 204, 188, 64, 65, 0, 1, 31, 255, 52, 0, 100, 91, 154, 153, 185, 64, 0, 0, 1, 180, 192, 7, 188, 245, 188, 154, 153, 185, 64, 2, 0, 1, 32, 1, 186, 252, 32, 2, 154, 153, 185, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 154, 153, 185, 64, 5, 0, 0, 148, 248, 141, 130, 170, 23, 154, 153, 185, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 170, 170, 186, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 154, 153, 185, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 188, 64, 10, 0, 1, 58, 86, 151, 3, 167, 92, 154, 153, 185, 64, 16, 0, 1, 16, 90, 236, 246, 135, 6, 154, 153, 185, 64, 17, 0, 1, 178, 7, 124, 253, 39, 35, 154, 153, 185, 64, 18, 0, 1, 194, 254, 143, 248, 104, 41, 154, 153, 185, 64, 19, 0, 1, 223, 247, 250, 253, 77, 30, 154, 153, 185, 64, 20, 0, 1, 255, 0, 241, 25, 121, 36, 205, 204, 188, 64, 24, 0, 1, 0, 0, 0, 0, 222, 5, 188, 187, 187, 64, 25, 0, 1, 0, 0, 0, 0, 88, 6, 0, 0, 192, 64, 27, 0, 1, 0, 0, 0, 0, 187, 7, 154, 153, 185, 64, 31, 0, 1, 0, 0, 0, 0, 1, 11, 154, 153, 185, 64, 36, 0, 1, 52, 216, 15, 218, 9, 185, 154, 153, 185, 64, 38, 0, 1, 118, 90, 237, 22, 175, 202, 170, 170, 186, 64, 40, 0, 1, 26, 253, 10, 3, 98, 36, 154, 153, 185, 64, 41, 0, 1, 129, 1, 154, 7, 28, 42, 188, 187, 187, 64, 43, 0, 1, 248, 11, 182, 1, 54, 33, 154, 153, 185, 64, 48, 0, 1, 0, 0, 0, 0, 5, 7, 188, 187, 187, 64, 50, 0, 1, 0, 0, 0, 0, 165, 8, 154, 153, 185, 64, 59, 0, 1, 0, 0, 0, 0, 9, 233, 154, 153, 185, 64, 63, 0, 1, 0, 0, 0, 0, 174, 247, 154, 153, 185, 64, 64, 0, 1, 30, 11, 215, 6, 38, 251, 170, 170, 186, 64, 0, 0, 1, 200, 192, 251, 187, 215, 188, 205, 204, 188, 64, 2, 0, 1, 34, 1, 184, 252, 36, 2, 221, 221, 189, 64, 3, 0, 1, 231, 254, 221, 254, 200, 0, 221, 221, 189, 64, 4, 0, 1, 58, 248, 103, 130, 4, 233, 188, 187, 187, 64, 5, 0, 0, 88, 248, 142, 130, 166, 23, 205, 204, 188, 64, 6, 0, 1, 29, 254, 182, 254, 75, 1, 170, 170, 186, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 188, 187, 187, 64, 13, 0, 1, 95, 25, 139, 30, 201, 193, 205, 204, 188, 64, 15, 0, 1, 95, 158, 223, 15, 108, 14, 170, 170, 186, 64, 16, 0, 1, 113, 89, 203, 247, 101, 6, 188, 187, 187, 64, 17, 0, 1, 232, 9, 183, 253, 221, 34, 240, 238, 190, 64, 18, 0, 1, 130, 2, 134, 250, 198, 37, 170, 170, 186, 64, 19, 0, 1, 95, 248, 91, 254, 105, 29, 170, 170, 186, 64, 20, 0, 1, 208, 1, 70, 26, 249, 34, 240, 238, 190, 64, 31, 0, 1, 0, 0, 0, 0, 32, 14, 170, 170, 186, 64, 34, 0, 1, 0, 0, 0, 0, 82, 0, 188, 187, 187, 64, 36, 0, 1, 53, 216, 7, 218, 13, 185, 221, 221, 189, 64, 38, 0, 1, 196, 89, 204, 22, 40, 202, 188, 187, 187, 64, 41, 0, 1, 129, 1, 154, 7, 28, 42, 240, 238, 190, 64, 42, 0, 1, 173, 8, 148, 4, 127, 33, 240, 238, 190, 64, 48, 0, 1, 0, 0, 0, 0, 2, 7, 205, 204, 188, 64, 53, 0, 1, 0, 0, 0, 0, 172, 5, 205, 204, 188, 64, 59, 0, 1, 0, 0, 0, 0, 190, 232, 188, 187, 187, 64, 61, 0, 1, 0, 0, 0, 0, 130, 90, 170, 170, 186, 64, 63, 0, 1, 0, 0, 0, 0, 125, 247, 221, 221, 189, 64, 64, 0, 1, 146, 10, 183, 6, 166, 251, 205, 204, 188, 64, 0, 0, 1, 239, 192, 237, 187, 160, 188, 188, 187, 187, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 188, 187, 187, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 188, 187, 187, 64, 9, 0, 1, 44, 10, 182, 4, 172, 248, 188, 187, 187, 64, 14, 0, 1, 0, 0, 0, 0, 236, 153, 240, 238, 190, 64, 16, 0, 1, 124, 86, 199, 251, 203, 5, 51, 51, 195, 64, 19, 0, 1, 226, 252, 192, 1, 74, 21, 221, 221, 189, 64, 20, 0, 1, 157, 4, 92, 27, 197, 29, 188, 187, 187, 64, 28, 0, 1, 0, 0, 0, 0, 148, 255, 188, 187, 187, 64, 30, 0, 1, 0, 0, 0, 0, 75, 5, 188, 187, 187, 64, 34, 0, 1, 0, 0, 0, 0, 152, 0, 188, 187, 187, 64, 39, 0, 1, 226, 165, 164, 8, 78, 5, 205, 204, 188, 64, 40, 0, 1, 26, 253, 11, 3, 98, 36, 188, 187, 187, 64, 54, 0, 1, 0, 0, 0, 0, 193, 10, 188, 187, 187, 64, 60, 0, 1, 142, 245, 227, 1, 226, 15, 205, 204, 188, 64, 63, 0, 1, 0, 0, 0, 0, 23, 247, 16, 17, 193, 64, 1, 0, 1, 203, 191, 54, 192, 203, 191, 16, 17, 193, 64, 5, 0, 0, 132, 247, 150, 130, 160, 23, 205, 204, 188, 64, 7, 0, 1, 162, 253, 136, 255, 141, 1, 205, 204, 188, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 240, 238, 190, 64, 9, 0, 1, 146, 10, 136, 5, 212, 247, 205, 204, 188, 64, 11, 0, 1, 129, 169, 253, 248, 127, 91, 240, 238, 190, 64, 13, 0, 1, 62, 25, 253, 29, 69, 193, 221, 221, 189, 64, 14, 0, 1, 0, 0, 0, 0, 13, 154, 221, 221, 189, 64, 17, 0, 1, 37, 12, 243, 253, 143, 34, 205, 204, 188, 64, 25, 0, 1, 0, 0, 0, 0, 15, 6, 205, 204, 188, 64, 28, 0, 1, 0, 0, 0, 0, 102, 255, 221, 221, 189, 64, 30, 0, 1, 0, 0, 0, 0, 244, 4, 221, 221, 189, 64, 34, 0, 1, 0, 0, 0, 0, 24, 1, 221, 221, 189, 64, 36, 0, 1, 55, 216, 254, 217, 16, 185, 68, 68, 196, 64, 39, 0, 1, 226, 165, 184, 8, 82, 5, 221, 221, 189, 64, 41, 0, 1, 129, 1, 155, 7, 28, 42, 205, 204, 188, 64, 43, 0, 1, 248, 11, 181, 1, 54, 33, 221, 221, 189, 64, 47, 0, 1, 0, 0, 0, 0, 247, 5, 221, 221, 189, 64, 50, 0, 1, 0, 0, 0, 0, 162, 8, 240, 238, 190, 64, 54, 0, 1, 0, 0, 0, 0, 190, 10, 221, 221, 189, 64, 56, 0, 1, 0, 0, 0, 0, 242, 255, 221, 221, 189, 64, 60, 0, 1, 75, 245, 191, 1, 1, 16, 240, 238, 190, 64, 61, 0, 1, 0, 0, 0, 0, 127, 90, 221, 221, 189, 64, 0, 0, 1, 2, 193, 234, 187, 133, 188, 240, 238, 190, 64, 2, 0, 1, 36, 1, 179, 252, 39, 2, 0, 0, 192, 64, 6, 0, 1, 23, 254, 178, 254, 75, 1, 221, 221, 189, 64, 7, 0, 1, 161, 253, 135, 255, 141, 1, 221, 221, 189, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 221, 221, 189, 64, 10, 0, 1, 22, 86, 128, 3, 206, 92, 221, 221, 189, 64, 11, 0, 1, 129, 169, 253, 248, 127, 91, 221, 221, 189, 64, 15, 0, 1, 78, 158, 234, 15, 168, 14, 0, 0, 192, 64, 24, 0, 1, 0, 0, 0, 0, 196, 5, 16, 17, 193, 64, 25, 0, 1, 0, 0, 0, 0, 233, 4, 221, 221, 189, 64, 28, 0, 1, 0, 0, 0, 0, 56, 255, 221, 221, 189, 64, 37, 0, 1, 0, 0, 0, 0, 103, 160, 0, 0, 192, 64, 40, 0, 1, 26, 253, 12, 3, 99, 36, 0, 0, 192, 64, 43, 0, 1, 248, 11, 179, 1, 56, 33, 221, 221, 189, 64, 53, 0, 1, 0, 0, 0, 0, 171, 5, 240, 238, 190, 64, 59, 0, 1, 0, 0, 0, 0, 142, 232, 240, 238, 190, 64, 63, 0, 1, 0, 0, 0, 0, 167, 246, 240, 238, 190, 64, 65, 0, 1, 31, 255, 67, 0, 85, 91, 16, 17, 193, 64, 0, 0, 1, 57, 193, 245, 187, 56, 188, 240, 238, 190, 64, 3, 0, 1, 230, 254, 220, 254, 200, 0, 240, 238, 190, 64, 4, 0, 1, 29, 248, 104, 130, 10, 233, 240, 238, 190, 64, 7, 0, 1, 158, 253, 135, 255, 141, 1, 240, 238, 190, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 16, 17, 193, 64, 10, 0, 1, 172, 85, 57, 3, 68, 93, 0, 0, 192, 64, 11, 0, 1, 128, 169, 252, 248, 126, 91, 16, 17, 193, 64, 14, 0, 1, 0, 0, 0, 0, 40, 154, 0, 0, 192, 64, 15, 0, 1, 49, 158, 232, 15, 52, 15, 240, 238, 190, 64, 17, 0, 1, 67, 13, 16, 254, 102, 34, 240, 238, 190, 64, 20, 0, 1, 134, 5, 179, 27, 17, 28, 0, 0, 192, 64, 28, 0, 1, 0, 0, 0, 0, 221, 254, 240, 238, 190, 64, 30, 0, 1, 0, 0, 0, 0, 200, 4, 240, 238, 190, 64, 34, 0, 1, 0, 0, 0, 0, 89, 1, 240, 238, 190, 64, 36, 0, 1, 55, 216, 250, 217, 17, 185, 16, 17, 193, 64, 37, 0, 1, 0, 0, 0, 0, 106, 160, 240, 238, 190, 64, 38, 0, 1, 159, 89, 193, 22, 16, 202, 240, 238, 190, 64, 41, 0, 1, 129, 1, 155, 7, 28, 42, 35, 34, 194, 64, 47, 0, 1, 0, 0, 0, 0, 244, 5, 102, 102, 198, 64, 50, 0, 1, 0, 0, 0, 0, 151, 8, 240, 238, 190, 64, 53, 0, 1, 0, 0, 0, 0, 169, 5, 0, 0, 192, 64, 56, 0, 1, 0, 0, 0, 0, 236, 255, 16, 17, 193, 64, 60, 0, 1, 2, 245, 134, 1, 34, 16, 35, 34, 194, 64, 64, 0, 1, 77, 10, 132, 6, 56, 252, 0, 0, 192, 64, 2, 0, 1, 37, 1, 175, 252, 40, 2, 0, 0, 192, 64, 3, 0, 1, 228, 254, 219, 254, 200, 0, 0, 0, 192, 64, 4, 0, 1, 253, 247, 106, 130, 16, 233, 0, 0, 192, 64, 7]).concat([0, 1, 156, 253, 134, 255, 141, 1, 0, 0, 192, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 16, 17, 193, 64, 9, 0, 1, 219, 10, 26, 6, 69, 247, 35, 34, 194, 64, 13, 0, 1, 9, 25, 109, 29, 192, 192, 16, 17, 193, 64, 16, 0, 1, 249, 84, 187, 253, 127, 5, 102, 102, 198, 64, 17, 0, 1, 10, 21, 226, 254, 59, 33, 16, 17, 193, 64, 18, 0, 1, 2, 4, 81, 251, 75, 36, 68, 68, 196, 64, 20, 0, 1, 8, 10, 76, 29, 119, 19, 0, 0, 192, 64, 30, 0, 1, 0, 0, 0, 0, 156, 4, 16, 17, 193, 64, 31, 0, 1, 0, 0, 0, 0, 96, 15, 0, 0, 192, 64, 34, 0, 1, 0, 0, 0, 0, 153, 1, 86, 85, 197, 64, 36, 0, 1, 62, 216, 223, 217, 18, 185, 0, 0, 192, 64, 38, 0, 1, 124, 89, 180, 22, 250, 201, 0, 0, 192, 64, 41, 0, 1, 129, 1, 155, 7, 28, 42, 119, 119, 199, 64, 42, 0, 1, 175, 8, 149, 4, 124, 33, 0, 0, 192, 64, 48, 0, 1, 0, 0, 0, 0, 1, 7, 16, 17, 193, 64, 53, 0, 1, 0, 0, 0, 0, 165, 5, 35, 34, 194, 64, 54, 0, 1, 0, 0, 0, 0, 187, 10, 0, 0, 192, 64, 59, 0, 1, 0, 0, 0, 0, 118, 232, 0, 0, 192, 64, 61, 0, 1, 0, 0, 0, 0, 126, 90, 0, 0, 192, 64, 63, 0, 1, 0, 0, 0, 0, 108, 246, 16, 17, 193, 64, 65, 0, 1, 30, 255, 83, 0, 71, 91, 16, 17, 193, 64, 2, 0, 1, 38, 1, 171, 252, 42, 2, 16, 17, 193, 64, 3, 0, 1, 227, 254, 217, 254, 200, 0, 35, 34, 194, 64, 4, 0, 1, 175, 247, 111, 130, 31, 233, 86, 85, 197, 64, 6, 0, 1, 8, 254, 167, 254, 75, 1, 16, 17, 193, 64, 7, 0, 1, 152, 253, 134, 255, 141, 1, 16, 17, 193, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 16, 17, 193, 64, 11, 0, 1, 128, 169, 252, 248, 126, 91, 16, 17, 193, 64, 15, 0, 1, 35, 158, 225, 15, 131, 15, 35, 34, 194, 64, 24, 0, 1, 0, 0, 0, 0, 179, 5, 68, 68, 196, 64, 27, 0, 1, 0, 0, 0, 0, 37, 7, 16, 17, 193, 64, 28, 0, 1, 0, 0, 0, 0, 175, 254, 16, 17, 193, 64, 30, 0, 1, 0, 0, 0, 0, 113, 4, 16, 17, 193, 64, 34, 0, 1, 0, 0, 0, 0, 217, 1, 16, 17, 193, 64, 38, 0, 1, 89, 89, 165, 22, 228, 201, 16, 17, 193, 64, 40, 0, 1, 26, 253, 12, 3, 100, 36, 16, 17, 193, 64, 41, 0, 1, 129, 1, 155, 7, 28, 42, 16, 17, 193, 64, 43, 0, 1, 248, 11, 178, 1, 57, 33, 16, 17, 193, 64, 48, 0, 1, 0, 0, 0, 0, 1, 7, 16, 17, 193, 64, 56, 0, 1, 0, 0, 0, 0, 233, 255, 51, 51, 195, 64, 59, 0, 1, 0, 0, 0, 0, 47, 232, 35, 34, 194, 64, 61, 0, 1, 0, 0, 0, 0, 134, 90, 51, 51, 195, 64, 63, 0, 1, 0, 0, 0, 0, 181, 245, 68, 68, 196, 64, 0, 0, 1, 109, 193, 23, 188, 240, 187, 102, 102, 198, 64, 1, 0, 1, 203, 191, 54, 192, 203, 191, 51, 51, 195, 64, 2, 0, 1, 41, 1, 160, 252, 44, 2, 35, 34, 194, 64, 3, 0, 1, 225, 254, 215, 254, 200, 0, 35, 34, 194, 64, 5, 0, 0, 81, 247, 152, 130, 160, 23, 35, 34, 194, 64, 7, 0, 1, 149, 253, 133, 255, 141, 1, 35, 34, 194, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 35, 34, 194, 64, 9, 0, 1, 0, 11, 99, 6, 254, 246, 35, 34, 194, 64, 10, 0, 1, 136, 85, 33, 3, 107, 93, 35, 34, 194, 64, 11, 0, 1, 128, 169, 251, 248, 125, 91, 102, 102, 198, 64, 14, 0, 1, 0, 0, 0, 0, 53, 154, 68, 68, 196, 64, 15, 0, 1, 248, 157, 181, 15, 146, 16, 102, 102, 198, 64, 16, 0, 1, 1, 81, 158, 2, 188, 4, 86, 85, 197, 64, 18, 0, 1, 5, 7, 234, 252, 75, 33, 35, 34, 194, 64, 25, 0, 1, 0, 0, 0, 0, 159, 4, 51, 51, 195, 64, 28, 0, 1, 0, 0, 0, 0, 84, 254, 35, 34, 194, 64, 30, 0, 1, 0, 0, 0, 0, 69, 4, 51, 51, 195, 64, 31, 0, 1, 0, 0, 0, 0, 159, 16, 51, 51, 195, 64, 34, 0, 1, 0, 0, 0, 0, 89, 2, 35, 34, 194, 64, 37, 0, 1, 0, 0, 0, 0, 107, 160, 86, 85, 197, 64, 38, 0, 1, 214, 88, 85, 22, 155, 201, 35, 34, 194, 64, 40, 0, 1, 26, 253, 13, 3, 100, 36, 51, 51, 195, 64, 41, 0, 1, 129, 1, 156, 7, 28, 42, 35, 34, 194, 64, 43, 0, 1, 249, 11, 177, 1, 58, 33, 35, 34, 194, 64, 44, 0, 1, 0, 0, 0, 0, 247, 255, 68, 68, 196, 64, 48, 0, 1, 0, 0, 0, 0, 254, 6, 51, 51, 195, 64, 53, 0, 1, 0, 0, 0, 0, 162, 5, 35, 34, 194, 64, 56, 0, 1, 0, 0, 0, 0, 230, 255, 51, 51, 195, 64, 60, 0, 1, 226, 244, 93, 1, 43, 16, 35, 34, 194, 64, 65, 0, 1, 30, 255, 90, 0, 63, 91, 51, 51, 195, 64, 3, 0, 1, 223, 254, 213, 254, 200, 0, 51, 51, 195, 64, 4, 0, 1, 132, 247, 113, 130, 40, 233, 68, 68, 196, 64, 5, 0, 0, 227, 246, 157, 130, 159, 23, 68, 68, 196, 64, 7, 0, 1, 141, 253, 131, 255, 141, 1, 51, 51, 195, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 195, 64, 9, 0, 1, 37, 11, 173, 6, 184, 246, 51, 51, 195, 64, 10, 0, 1, 100, 85, 10, 3, 146, 93, 51, 51, 195, 64, 11, 0, 1, 127, 169, 251, 248, 125, 91, 102, 102, 198, 64, 13, 0, 1, 164, 24, 174, 28, 1, 192, 51, 51, 195, 64, 24, 0, 1, 0, 0, 0, 0, 171, 5, 51, 51, 195, 64, 25, 0, 1, 0, 0, 0, 0, 86, 4, 51, 51, 195, 64, 30, 0, 1, 0, 0, 0, 0, 25, 4, 68, 68, 196, 64, 37, 0, 1, 0, 0, 0, 0, 110, 160, 102, 102, 198, 64, 40, 0, 1, 26, 253, 14, 3, 102, 36, 51, 51, 195, 64, 43, 0, 1, 249, 11, 176, 1, 59, 33, 51, 51, 195, 64, 44, 0, 1, 0, 0, 0, 0, 246, 255, 51, 51, 195, 64, 45, 0, 1, 0, 0, 0, 0, 247, 255, 51, 51, 195, 64, 47, 0, 1, 0, 0, 0, 0, 243, 5, 51, 51, 195, 64, 54, 0, 1, 0, 0, 0, 0, 186, 10, 68, 68, 196, 64, 56, 0, 1, 0, 0, 0, 0, 223, 255, 102, 102, 198, 64, 61, 0, 1, 0, 0, 0, 0, 130, 90, 51, 51, 195, 64, 64, 0, 1, 69, 10, 117, 6, 96, 252, 86, 85, 197, 64, 65, 0, 1, 30, 255, 112, 0, 40, 91, 102, 102, 198, 64, 2, 0, 1, 47, 1, 142, 252, 46, 2, 68, 68, 196, 64, 3, 0, 1, 221, 254, 211, 254, 200, 0, 86, 85, 197, 64, 4, 0, 1, 36, 247, 119, 130, 59, 233, 68, 68, 196, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 86, 85, 197, 64, 9, 0, 1, 111, 11, 62, 7, 47, 246, 68, 68, 196, 64, 10, 0, 1, 65, 85, 242, 2, 185, 93, 68, 68, 196, 64, 11, 0, 1, 127, 169, 250, 248, 124, 91, 68, 68, 196, 64, 19, 0, 1, 114, 253, 43, 2, 71, 20, 119, 119, 199, 64, 24, 0, 1, 0, 0, 0, 0, 120, 5, 68, 68, 196, 64, 25, 0, 1, 0, 0, 0, 0, 13, 4, 68, 68, 196, 64, 28, 0, 1, 0, 0, 0, 0, 38, 254, 68, 68, 196, 64, 30, 0, 1, 0, 0, 0, 0, 237, 3, 86, 85, 197, 64, 31, 0, 1, 0, 0, 0, 0, 227, 17, 86, 85, 197, 64, 34, 0, 1, 0, 0, 0, 0, 220, 2, 86, 85, 197, 64, 41, 0, 1, 129, 1, 157, 7, 28, 42, 102, 102, 198, 64, 43, 0, 1, 249, 11, 173, 1, 61, 33, 68, 68, 196, 64, 44, 0, 1, 0, 0, 0, 0, 245, 255, 68, 68, 196, 64, 45, 0, 1, 0, 0, 0, 0, 246, 255, 68, 68, 196, 64, 47, 0, 1, 0, 0, 0, 0, 243, 5, 86, 85, 197, 64, 53, 0, 1, 0, 0, 0, 0, 158, 5, 68, 68, 196, 64, 54, 0, 1, 0, 0, 0, 0, 185, 10, 119, 119, 199, 64, 59, 0, 1, 0, 0, 0, 0, 216, 231, 102, 102, 198, 64, 60, 0, 1, 201, 244, 28, 1, 53, 16, 86, 85, 197, 64, 63, 0, 1, 0, 0, 0, 0, 55, 245, 68, 68, 196, 64, 64, 0, 1, 65, 10, 101, 6, 137, 252, 86, 85, 197, 64, 0, 0, 1, 126, 193, 39, 188, 218, 187, 86, 85, 197, 64, 3, 0, 1, 219, 254, 209, 254, 200, 0, 86, 85, 197, 64, 5, 0, 0, 168, 246, 160, 130, 159, 23, 86, 85, 197, 64, 7, 0, 1, 136, 253, 130, 255, 141, 1, 86, 85, 197, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 86, 85, 197, 64, 10, 0, 1, 30, 85, 220, 2, 222, 93, 137, 136, 200, 64, 11, 0, 1, 126, 169, 248, 248, 122, 91, 86, 85, 197, 64, 15, 0, 1, 1, 158, 158, 15, 55, 17, 86, 85, 197, 64, 19, 0, 1, 4, 254, 152, 2, 64, 19, 102, 102, 198, 64, 20, 0, 1, 209, 11, 227, 29, 253, 15, 86, 85, 197, 64, 25, 0, 1, 0, 0, 0, 0, 196, 3, 119, 119, 199, 64, 27, 0, 1, 0, 0, 0, 0, 155, 6, 154, 153, 201, 64, 28, 0, 1, 0, 0, 0, 0, 23, 253, 86, 85, 197, 64, 30, 0, 1, 0, 0, 0, 0, 199, 3, 86, 85, 197, 64, 37, 0, 1, 0, 0, 0, 0, 112, 160, 170, 170, 202, 64, 39, 0, 1, 227, 165, 201, 8, 85, 5, 86, 85, 197, 64, 44, 0, 1, 0, 0, 0, 0, 244, 255, 86, 85, 197, 64, 45, 0, 1, 0, 0, 0, 0, 245, 255, 119, 119, 199, 64, 47, 0, 1, 0, 0, 0, 0, 240, 5, 119, 119, 199, 64, 48, 0, 1, 0, 0, 0, 0, 252, 6, 86, 85, 197, 64, 54, 0, 1, 0, 0, 0, 0, 184, 10, 86, 85, 197, 64, 56, 0, 1, 0, 0, 0, 0, 220, 255, 86, 85, 197, 64, 64, 0, 1, 64, 10, 83, 6, 177, 252, 119, 119, 199, 64, 0, 0, 1, 158, 193, 76, 188, 175, 187, 102, 102, 198, 64, 3, 0, 1, 217, 254, 207, 254, 200, 0, 102, 102, 198, 64, 4, 0, 1, 240, 246, 122, 130, 69, 233, 119, 119, 199, 64, 5, 0, 0, 48, 246, 167, 130, 159, 23, 188, 187, 203, 64, 6, 0, 1, 241, 253, 152, 254, 75, 1, 102, 102, 198, 64, 7, 0, 1, 131, 253, 130, 255, 141, 1, 102, 102, 198, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 137, 136, 200, 64, 9, 0, 1, 218, 11, 14, 8, 110, 245, 170, 170, 202, 64, 10, 0, 1, 59, 84, 31, 2, 212, 94, 102, 102, 198, 64, 15, 0, 1, 222, 157, 139, 15, 91, 17, 102, 102, 198, 64, 18, 0, 1, 194, 7, 77, 253, 140, 32, 188, 187, 203, 64, 19, 0, 1, 248, 0, 216, 4, 127, 13, 102, 102, 198, 64, 25, 0, 1, 0, 0, 0, 0, 122, 3, 154, 153, 201, 64, 30, 0, 1, 0, 0, 0, 0, 143, 2, 137, 136, 200, 64, 31, 0, 1, 0, 0, 0, 0, 105, 19, 102, 102, 198, 64, 34, 0, 1, 0, 0, 0, 0, 26, 3, 205, 204, 204, 64, 36, 0, 1, 72, 216, 184, 217, 19, 185, 137, 136, 200, 64, 37, 0, 1, 0, 0, 0, 0, 117, 160, 102, 102, 198, 64, 38, 0, 1, 183, 88, 60, 22, 141, 201, 170, 170, 202, 64, 41, 0, 1, 130, 1, 158, 7, 27, 42, 102, 102, 198, 64, 44, 0, 1, 0, 0, 0, 0, 243, 255, 102, 102, 198, 64, 45, 0, 1, 0, 0, 0, 0, 244, 255, 102, 102, 198, 64, 51, 0, 1, 0, 0, 0, 0, 248, 255, 119, 119, 199, 64, 53, 0, 1, 0, 0, 0, 0, 154, 5, 119, 119, 199, 64, 54, 0, 1, 0, 0, 0, 0, 182, 10, 102, 102, 198, 64, 56, 0, 1, 0, 0, 0, 0, 216, 255, 102, 102, 198, 64, 63, 0, 1, 0, 0, 0, 0, 247, 244, 119, 119, 199, 64, 64, 0, 1, 72, 10, 47, 6, 5, 253, 119, 119, 199, 64, 65, 0, 1, 29, 255, 126, 0, 26, 91, 51, 51, 211, 64, 1, 0, 1, 203, 191, 54, 192, 203, 191, 119, 119, 199, 64, 2, 0, 1, 48, 1, 135, 252, 47, 2, 119, 119, 199, 64, 3, 0, 1, 215, 254, 205, 254, 200, 0, 137, 136, 200, 64, 4, 0, 1, 130, 246, 129, 130, 90, 233, 119, 119, 199, 64, 7, 0, 1, 127, 253, 129, 255, 141, 1, 119, 119, 199, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 137, 136, 200, 64, 13, 0, 1, 51, 25, 11, 27, 27, 192, 119, 119, 199, 64, 14, 0, 1, 0, 0, 0, 0, 68, 154, 119, 119, 199, 64, 15, 0, 1, 57, 157, 140, 15, 252, 15, 205, 204, 204, 64, 16, 0, 1, 165, 76, 60, 6, 62, 4, 137, 136, 200, 64, 17, 0, 1, 6, 23, 3, 255, 251, 32, 119, 119, 199, 64, 18, 0, 1, 112, 8, 164, 253, 217, 31, 119, 119, 199, 64, 20, 0, 1, 162, 12, 58, 30, 119, 14, 154, 153, 201, 64, 25, 0, 1, 0, 0, 0, 0, 121, 2, 154, 153, 201, 64, 33, 0, 1, 0, 0, 0, 0, 252, 254, 137, 136, 200, 64, 34, 0, 1, 0, 0, 0, 0, 109, 3, 137, 136, 200, 64, 38, 0, 1, 127, 88, 4, 22, 117, 201, 119, 119, 199, 64, 40, 0, 1, 26, 253, 15, 3, 102, 36, 119, 119, 199, 64, 43, 0, 1, 249, 11, 171, 1, 62, 33, 119, 119, 199, 64, 44, 0, 1, 0, 0, 0, 0, 241, 255, 119, 119, 199, 64, 45, 0, 1, 0, 0, 0, 0, 243, 255, 119, 119, 199, 64, 50, 0, 1, 0, 0, 0, 0, 150, 8, 119, 119, 199, 64, 51, 0, 1, 0, 0, 0, 0, 247, 255, 119, 119, 199, 64, 56, 0, 1, 0, 0, 0, 0, 212, 255, 137, 136, 200, 64, 60, 0, 1, 197, 244, 239, 0, 49, 16, 51, 51, 211, 64, 61, 0, 1, 0, 0, 0, 0, 134, 90, 137, 136, 200, 64, 63, 0, 1, 0, 0, 0, 0, 119, 244, 154, 153, 201, 64, 0, 0, 1, 189, 193, 120, 188, 136, 187, 188, 187, 203, 64, 2, 0, 1, 56, 1, 110, 252, 44, 2, 137, 136, 200, 64, 3, 0, 1, 213, 254, 202, 254, 200, 0, 137, 136, 200, 64, 5, 0, 0, 242, 245, 171, 130, 160, 23, 137, 136, 200, 64, 7, 0, 1, 122, 253, 128, 255, 141, 1, 137, 136, 200, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 137, 136, 200, 64, 14, 0, 1, 0, 0, 0, 0, 87, 154, 188, 187, 203, 64, 15, 0, 1, 59, 154, 171, 15, 128, 8, 137, 136, 200, 64, 18, 0, 1, 25, 9, 245, 253, 43, 31, 137, 136, 200, 64, 20, 0, 1, 108, 13, 150, 30, 1, 13, 137, 136, 200, 64, 21, 0, 1, 0, 0, 0, 0, 201, 255, 137, 136, 200, 64, 22, 0, 1, 0, 0, 0, 0, 207, 255, 154, 153, 201, 64, 24, 0, 1, 0, 0, 0, 0, 59, 5, 154, 153, 201, 64, 27, 0, 1, 0, 0, 0, 0, 8, 6, 188, 187, 203, 64, 40, 0, 1, 26, 253, 17, 3, 104, 36, 154, 153, 201, 64, 42, 0, 1, 175, 8, 149, 4, 123, 33, 170, 170, 202, 64, 43, 0, 1, 250, 11, 168, 1, 64, 33, 154, 153, 201, 64, 44, 0, 1, 0, 0, 0, 0, 239, 255, 137, 136, 200, 64, 45, 0, 1, 0, 0, 0, 0, 242, 255, 137, 136, 200, 64, 47, 0, 1, 0, 0, 0, 0, 239, 5, 137, 136, 200, 64, 48, 0, 1, 0, 0, 0, 0, 251, 6, 137, 136, 200, 64, 50, 0, 1, 0, 0, 0, 0, 148, 8, 137, 136, 200, 64, 51, 0, 1, 0, 0, 0, 0, 246, 255, 137, 136, 200, 64, 53, 0, 1, 0, 0, 0, 0, 152, 5, 188, 187, 203, 64, 54, 0, 1, 0, 0, 0, 0, 177, 10, 137, 136, 200, 64, 56, 0, 1, 0, 0, 0, 0, 209, 255, 137, 136, 200, 64, 57, 0, 1, 0, 0, 0, 0, 247, 255, 137, 136, 200, 64, 59, 0, 1, 0, 0, 0, 0, 195, 231, 35, 34, 210, 64, 64, 0, 1, 3, 11, 80, 5, 176, 254, 154, 153, 201, 64, 65, 0, 1, 29, 255, 139, 0, 12, 91, 170, 170, 202, 64, 3, 0, 1, 208, 254, 198, 254, 200, 0, 154, 153, 201, 64, 4, 0, 1, 73, 246, 132, 130, 102, 233, 170, 170, 202, 64, 5, 0, 0, 114, 245, 179, 130, 160, 23, 221, 221, 205, 64, 7, 0, 1, 99, 253, 123, 255, 141, 1, 154, 153, 201, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 170, 170, 202, 64, 9, 0, 1, 28, 12, 143, 8, 247, 244, 170, 170, 202, 64, 11, 0, 1, 125, 169, 247, 248, 121, 91, 188, 187, 203, 64, 13, 0, 1, 28, 26, 107, 24, 89, 192, 170, 170, 202, 64, 14, 0, 1, 0, 0, 0, 0, 123, 154, 154, 153, 201, 64, 17, 0, 1, 6, 24, 18, 255, 219, 32, 170, 170, 202, 64, 18, 0, 1, 111, 10, 156, 254, 200, 29, 154, 153, 201, 64, 20, 0, 1, 58, 14, 242, 30, 129, 11, 154, 153, 201, 64, 21, 0, 1, 0, 0, 0, 0, 169, 255, 170, 170, 202, 64, 22, 0, 1, 0, 0, 0, 0, 152, 255, 154, 153, 201, 64, 31, 0, 1, 0, 0, 0, 0, 221, 19, 154, 153, 201, 64, 34, 0, 1, 0, 0, 0, 0, 148, 3, 205, 204, 204, 64, 37, 0, 1, 0, 0, 0, 0, 123, 160, 170, 170, 202, 64, 38, 0, 1, 77, 88, 195, 21, 101, 201, 154, 153, 201, 64, 45, 0, 1, 0, 0, 0, 0, 241, 255, 154, 153, 201, 64, 47, 0, 1, 0, 0, 0, 0, 238, 5, 170, 170, 202, 64, 48, 0, 1, 0, 0, 0, 0, 249, 6, 154, 153, 201, 64, 50, 0, 1, 0, 0, 0, 0, 147, 8, 154, 153, 201, 64, 51, 0, 1, 0, 0, 0, 0, 245, 255, 154, 153, 201, 64, 53, 0, 1, 0, 0, 0, 0, 150, 5, 154, 153, 201, 64, 56, 0, 1, 0, 0, 0, 0, 205, 255, 154, 153, 201, 64, 57, 0, 1, 0, 0, 0, 0, 246, 255, 154, 153, 201, 64, 59, 0, 1, 0, 0, 0, 0, 176, 231, 170, 170, 202, 64, 60, 0, 1, 204, 244, 193, 0, 38, 16, 154, 153, 201, 64, 63, 0, 1, 0, 0, 0, 0, 55, 244, 188, 187, 203, 64, 0, 0, 1, 218, 193, 169, 188, 100, 187, 188, 187, 203, 64, 4, 0, 1, 212, 245, 140, 130, 124, 233, 170, 170, 202, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 170, 170, 202, 64, 17, 0, 1, 1, 25, 32, 255, 187, 32, 205, 204, 204, 64, 20, 0, 1, 125, 16, 225, 31, 58, 7, 170, 170, 202, 64, 21, 0, 1, 0, 0, 0, 0, 139, 255, 170, 170, 202, 64, 24, 0, 1, 0, 0, 0, 0, 29, 5, 170, 170, 202, 64, 25, 0, 1, 0, 0, 0, 0, 35, 2, 170, 170, 202, 64, 27, 0, 1, 0, 0, 0, 0, 192, 5, 188, 187, 203, 64, 28, 0, 1, 0, 0, 0, 0, 163, 252, 188, 187, 203, 64, 30, 0, 1, 0, 0, 0, 0, 227, 1, 170, 170, 202, 64, 31, 0, 1, 0, 0, 0, 0, 78, 20, 170, 170, 202, 64, 33, 0, 1, 0, 0, 0, 0, 160, 254, 170, 170, 202, 64, 34, 0, 1, 0, 0, 0, 0, 187, 3, 188, 187, 203, 64, 42, 0, 1, 176, 8, 149, 4, 123, 33, 170, 170, 202, 64, 44, 0, 1, 0, 0, 0, 0, 238, 255, 205, 204, 204, 64, 45, 0, 1, 0, 0, 0, 0, 237, 255, 170, 170, 202, 64, 47, 0, 1, 0, 0, 0, 0, 237, 5, 221, 221, 205, 64, 50, 0, 1, 0, 0, 0, 0, 139, 8, 170, 170, 202, 64, 51, 0, 1, 0, 0, 0, 0, 244, 255, 221, 221, 205, 64, 53, 0, 1, 0, 0, 0, 0, 141, 5, 188, 187, 203, 64, 56, 0, 1, 0, 0, 0, 0, 197, 255, 170, 170, 202, 64, 57, 0, 1, 0, 0, 0, 0, 245, 255, 170, 170, 202, 64, 59, 0, 1, 0, 0, 0, 0, 157, 231, 188, 187, 203, 64, 63, 0, 1, 0, 0, 0, 0, 182, 243, 205, 204, 204, 64, 65, 0, 1, 29, 255, 158, 0, 251, 90, 205, 204, 204, 64, 3, 0, 1, 204, 254, 194, 254, 200, 0, 188, 187, 203, 64, 5, 0, 0, 49, 245, 184, 130, 160, 23, 188, 187, 203, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 204, 64, 9, 0, 1, 88, 12, 4, 9, 139, 244, 188, 187, 203, 64, 10, 0, 1, 12, 84, 245, 1, 7, 95, 188, 187, 203, 64, 11, 0, 1, 125, 169, 247, 248, 121, 91, 188, 187, 203, 64, 14, 0, 1, 0, 0, 0, 0, 145, 154, 188, 187, 203, 64, 17, 0, 1, 242, 25, 48, 255, 154, 32, 240, 238, 206, 64, 18, 0, 1, 196, 12, 203, 255, 90, 27, 188, 187, 203, 64, 21, 0, 1, 0, 0, 0, 0, 112, 255, 205, 204, 204, 64, 22, 0, 1, 0, 0, 0, 0, 111, 255, 16, 17, 209, 64, 24, 0, 1, 0, 0, 0, 0, 188, 4, 205, 204, 204, 64, 25, 0, 1, 0, 0, 0, 0, 136, 1, 35, 34, 210, 64, 27, 0, 1, 0, 0, 0, 0, 137, 4, 205, 204, 204, 64, 31, 0, 1, 0, 0, 0, 0, 45, 21, 188, 187, 203, 64, 33, 0, 1, 0, 0, 0, 0, 81, 254, 188, 187, 203, 64, 34, 0, 1, 0, 0, 0, 0, 227, 3, 205, 204, 204, 64, 38, 0, 1, 33, 88, 122, 21, 95, 201, 68, 68, 212, 64, 39, 0, 1, 228, 165, 236, 8, 93, 5, 188, 187, 203, 64, 41, 0, 1, 130, 1, 159, 7, 27, 42, 188, 187, 203, 64, 43, 0, 1, 250, 11, 167, 1, 65, 33, 188, 187, 203, 64, 44, 0, 1, 0, 0, 0, 0, 236, 255, 205, 204, 204, 64, 47, 0, 1, 0, 0, 0, 0, 235, 5, 188, 187, 203, 64, 48, 0, 1, 0, 0, 0, 0, 249, 6, 188, 187, 203, 64, 51, 0, 1, 0, 0, 0, 0, 243, 255, 188, 187, 203, 64, 57, 0, 1, 0, 0, 0, 0, 244, 255, 221, 221, 205, 64, 59, 0, 1, 0, 0, 0, 0, 109, 231, 205, 204, 204, 64, 60, 0, 1, 219, 244, 145, 0, 13, 16, 221, 221, 205, 64, 0, 0, 1, 245, 193, 223, 188, 68, 187, 240, 238, 206, 64, 2, 0, 1, 60, 1, 93, 252, 38, 2, 221, 221, 205, 64, 4, 0, 1, 93, 245, 149, 130, 148, 233, 205, 204, 204, 64, 5, 0, 0, 240, 244, 188, 130, 161, 23, 221, 221, 205, 64, 6, 0, 1, 234, 253, 147, 254, 75, 1, 205, 204, 204, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 204, 64, 10, 0, 1, 220, 83, 203, 1, 57, 95, 35, 34, 210, 64, 11, 0, 1, 123, 169, 243, 248, 117, 91, 221, 221, 205, 64, 13, 0, 1, 103, 26, 12, 23, 165, 192, 240, 238, 206, 64, 14, 0, 1, 0, 0, 0, 0, 230, 154, 221, 221, 205, 64, 15, 0, 1, 58, 153, 191, 15, 14, 5, 0, 0, 208, 64, 17, 0, 1, 63, 29, 122, 255, 21, 32, 51, 51, 211, 64, 19, 0, 1, 218, 3, 2, 7, 5, 8, 205, 204, 204, 64, 21, 0, 1, 0, 0, 0, 0, 92, 255, 205, 204, 204, 64, 28, 0, 1, 0, 0, 0, 0, 113, 252, 205, 204, 204, 64, 30, 0, 1, 0, 0, 0, 0, 158, 1, 0, 0, 208, 64, 33, 0, 1, 0, 0, 0, 0, 204, 253, 205, 204, 204, 64, 34, 0, 1, 0, 0, 0, 0, 11, 4, 221, 221, 205, 64, 40, 0, 1, 26, 253, 18, 3, 105, 36, 221, 221, 205, 64, 41, 0, 1, 130, 1, 160, 7, 27, 42, 205, 204, 204, 64, 42, 0, 1, 176, 8, 149, 4, 122, 33, 240, 238, 206, 64, 43, 0, 1, 251, 11, 162, 1, 68, 33, 205, 204, 204, 64, 44, 0, 1, 0, 0, 0, 0, 235, 255, 221, 221, 205, 64, 48, 0, 1, 0, 0, 0, 0, 247, 6, 205, 204, 204, 64, 51, 0, 1, 0, 0, 0, 0, 243, 255, 16, 17, 209, 64, 54, 0, 1, 0, 0, 0, 0, 170, 10, 205, 204, 204, 64, 56, 0, 1, 0, 0, 0, 0, 192, 255, 205, 204, 204, 64, 57, 0, 1, 0, 0, 0, 0, 243, 255, 205, 204, 204, 64, 63, 0, 1, 0, 0, 0, 0, 118, 243, 221, 221, 205, 64, 3, 0, 1, 202, 254, 192, 254, 200, 0, 240, 238, 206, 64, 5, 0, 0, 111, 244, 198, 130, 161, 23, 221, 221, 205, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 208, 64, 9, 0, 1, 163, 12, 151, 9, 0, 244, 221, 221, 205, 64, 10, 0, 1, 175, 83, 161, 1, 106, 95, 16, 17, 209, 64, 16, 0, 1, 21, 74, 202, 8, 216, 3, 35, 34, 210, 64, 20, 0, 1, 175, 19, 231, 32, 223, 0, 221, 221, 205, 64, 21, 0, 1, 0, 0, 0, 0, 82, 255, 221, 221, 205, 64, 22, 0, 1, 0, 0, 0, 0, 102, 255, 221, 221, 205, 64, 25, 0, 1, 0, 0, 0, 0, 75, 1, 221, 221, 205, 64, 28, 0, 1, 0, 0, 0, 0, 73, 252, 221, 221, 205, 64, 30, 0, 1, 0, 0, 0, 0, 109, 1, 240, 238, 206, 64, 31, 0, 1, 0, 0, 0, 0, 8, 22, 240, 238, 206, 64, 34, 0, 1, 0, 0, 0, 0, 96, 4, 137, 136, 216, 64, 36, 0, 1, 80, 216, 117, 217, 29, 185, 16, 17, 209, 64, 37, 0, 1, 0, 0, 0, 0, 128, 160, 221, 221, 205, 64, 38, 0, 1, 14, 88, 83, 21, 96, 201, 0, 0, 208, 64, 42, 0, 1, 177, 8, 149, 4, 121, 33, 221, 221, 205, 64, 44, 0, 1, 0, 0, 0, 0, 233, 255, 221, 221, 205, 64, 45, 0, 1, 0, 0, 0, 0, 236, 255, 221, 221, 205, 64, 47, 0, 1, 0, 0, 0, 0, 234, 5, 240, 238, 206, 64, 51, 0, 1, 0, 0, 0, 0, 241, 255, 221, 221, 205, 64, 56, 0, 1, 0, 0, 0, 0, 188, 255, 221, 221, 205, 64, 57, 0, 1, 0, 0, 0, 0, 242, 255, 221, 221, 205, 64, 60, 0, 1, 230, 244, 121, 0, 3, 16, 221, 221, 205, 64, 63, 0, 1, 0, 0, 0, 0, 55, 243, 221, 221, 205, 64, 65, 0, 1, 29, 255, 164, 0, 245, 90, 0, 0, 208, 64, 0, 0, 1, 16, 194, 24, 189, 40, 187, 240, 238, 206, 64, 3, 0, 1, 200, 254, 190, 254, 200, 0, 0, 0, 208, 64, 4, 0, 1, 230, 244, 158, 130, 171, 233, 240, 238, 206, 64, 6, 0, 1, 231, 253, 145, 254, 75, 1, 0, 0, 208, 64, 7, 0, 1, 92, 253, 122, 255, 141, 1, 240, 238, 206, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 35, 34, 210, 64, 10, 0, 1, 247, 82, 248, 0, 41, 96, 68, 68, 212, 64, 13, 0, 1, 73, 26, 135, 19, 108, 193, 86, 85, 213, 64, 15, 0, 1, 218, 150, 239, 15, 173, 249, 240, 238, 206, 64, 21, 0, 1, 0, 0, 0, 0, 77, 255, 240, 238, 206, 64, 22, 0, 1, 0, 0, 0, 0, 97, 255, 0, 0, 208, 64, 25, 0, 1, 0, 0, 0, 0, 214, 0, 0, 0, 208, 64, 28, 0, 1, 0, 0, 0, 0, 253, 251, 240, 238, 206, 64, 30, 0, 1, 0, 0, 0, 0, 68, 1, 68, 68, 212, 64, 38, 0, 1, 213, 87, 66, 20, 176, 201, 240, 238, 206, 64, 40, 0, 1, 26, 253, 18, 3, 105, 36, 0, 0, 208, 64, 41, 0, 1, 130, 1, 160, 7, 27, 42, 240, 238, 206, 64, 44, 0, 1, 0, 0, 0, 0, 232, 255, 240, 238, 206, 64, 45, 0, 1, 0, 0, 0, 0, 235, 255, 240, 238, 206, 64, 47, 0, 1, 0, 0, 0, 0, 233, 5, 68, 68, 212, 64, 48, 0, 1, 0, 0, 0, 0, 240, 6, 16, 17, 209, 64, 50, 0, 1, 0, 0, 0, 0, 133, 8, 16, 17, 209, 64, 53, 0, 1, 0, 0, 0, 0, 133, 5, 240, 238, 206, 64, 56, 0, 1, 0, 0, 0, 0, 183, 255, 240, 238, 206, 64, 57, 0, 1, 0, 0, 0, 0, 242, 255, 35, 34, 210, 64, 59, 0, 1, 0, 0, 0, 0, 62, 231, 240, 238, 206, 64, 60, 0, 1, 242, 244, 97, 0, 249, 15, 240, 238, 206, 64, 63, 0, 1, 0, 0, 0, 0, 248, 242, 16, 17, 209, 64, 65, 0, 1, 28, 255, 180, 0, 225, 90, 0, 0, 208, 64, 2, 0, 1, 61, 1, 88, 252, 35, 2, 51, 51, 211, 64, 3, 0, 1, 195, 254, 185, 254, 200, 0, 35, 34, 210, 64, 5, 0, 0, 175, 243, 214, 130, 160, 23, 0, 0, 208, 64, 6, 0, 1, 229, 253, 143, 254, 75, 1, 0, 0, 208, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 208, 64, 14, 0, 1, 0, 0, 0, 0, 1, 155, 16, 17, 209, 64, 18, 0, 1, 219, 13, 93, 0, 53, 26, 16, 17, 209, 64, 21, 0, 1, 0, 0, 0, 0, 59, 255, 16, 17, 209, 64, 22, 0, 1, 0, 0, 0, 0, 82, 255, 0, 0, 208, 64, 30, 0, 1, 0, 0, 0, 0, 21, 1, 0, 0, 208, 64, 31, 0, 1, 0, 0, 0, 0, 117, 22, 16, 17, 209, 64, 34, 0, 1, 0, 0, 0, 0, 180, 4, 16, 17, 209, 64, 40, 0, 1, 26, 253, 20, 3, 106, 36, 68, 68, 212, 64, 43, 0, 1, 252, 11, 154, 1, 74, 33, 0, 0, 208, 64, 44, 0, 1, 0, 0, 0, 0, 230, 255, 16, 17, 209, 64, 45, 0, 1, 0, 0, 0, 0, 232, 255, 0, 0, 208, 64, 47, 0, 1, 0, 0, 0, 0, 232, 5, 16, 17, 209, 64, 51, 0, 1, 0, 0, 0, 0, 239, 255, 0, 0, 208, 64, 56, 0, 1, 0, 0, 0, 0, 179, 255, 0, 0, 208, 64, 57, 0, 1, 0, 0, 0, 0, 241, 255, 16, 17, 209, 64, 60, 0, 1, 15, 245, 49, 0, 226, 15, 0, 0, 208, 64, 63, 0, 1, 0, 0, 0, 0, 187, 242, 35, 34, 210, 64, 0, 0, 1, 40, 194, 82, 189, 16, 187, 35, 34, 210, 64, 2, 0, 1, 63, 1, 81, 252, 27, 2, 35, 34, 210, 64, 4, 0, 1, 114, 244, 167, 130, 193, 233, 16, 17, 209, 64, 6, 0, 1, 226, 253, 142, 254, 75, 1, 68, 68, 212, 64, 7, 0, 1, 84, 253, 120, 255, 141, 1, 16, 17, 209, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 86, 85, 213, 64, 9, 0, 1, 236, 12, 41, 10, 98, 243, 35, 34, 210, 64, 14, 0, 1, 0, 0, 0, 0, 49, 155, 68, 68, 212, 64, 17, 0, 1, 111, 32, 197, 255, 139, 31, 35, 34, 210, 64, 25, 0, 1, 0, 0, 0, 0, 94, 0, 16, 17, 209, 64, 28, 0, 1, 0, 0, 0, 0, 214, 251, 16, 17, 209, 64, 30, 0, 1, 0, 0, 0, 0, 231, 0, 35, 34, 210, 64, 31, 0, 1, 0, 0, 0, 0, 78, 23, 16, 17, 209, 64, 33, 0, 1, 0, 0, 0, 0, 178, 253, 35, 34, 210, 64, 41, 0, 1, 130, 1, 161, 7, 27, 42, 102, 102, 214, 64, 42, 0, 1, 179, 8, 150, 4, 117, 33, 35, 34, 210, 64, 44, 0, 1, 0, 0, 0, 0, 227, 255, 68, 68, 212, 64, 47, 0, 1, 0, 0, 0, 0, 227, 5, 16, 17, 209, 64, 56, 0, 1, 0, 0, 0, 0, 173, 255, 51, 51, 211, 64, 57, 0, 1, 0, 0, 0, 0, 237, 255, 35, 34, 210, 64, 63, 0, 1, 0, 0, 0, 0, 63, 242, 35, 34, 210, 64, 6, 0, 1, 224, 253, 140, 254, 75, 1, 35, 34, 210, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 35, 34, 210, 64, 16, 0, 1, 109, 73, 108, 9, 191, 3, 51, 51, 211, 64, 18, 0, 1, 242, 14, 238, 0, 15, 25, 35, 34, 210, 64, 21, 0, 1, 0, 0, 0, 0, 50, 255, 51, 51, 211, 64, 22, 0, 1, 0, 0, 0, 0, 66, 255, 35, 34, 210, 64, 24, 0, 1, 0, 0, 0, 0, 175, 4, 68, 68, 212, 64, 28, 0, 1, 0, 0, 0, 0, 97, 251, 35, 34, 210, 64, 30, 0, 1, 0, 0, 0, 0, 183, 0, 35, 34, 210, 64, 33, 0, 1, 0, 0, 0, 0, 150, 253, 51, 51, 211, 64, 34, 0, 1, 0, 0, 0, 0, 8, 5, 35, 34, 210, 64, 37, 0, 1, 0, 0, 0, 0, 129, 160, 51, 51, 211, 64, 40, 0, 1, 26, 253, 21, 3, 108, 36, 35, 34, 210, 64, 45, 0, 1, 0, 0, 0, 0, 230, 255, 154, 153, 217, 64, 50, 0, 1, 0, 0, 0, 0, 113, 8, 35, 34, 210, 64, 51, 0, 1, 0, 0, 0, 0, 237, 255, 68, 68, 212, 64, 53, 0, 1, 0, 0, 0, 0, 123, 5, 51, 51, 211, 64, 54, 0, 1, 0, 0, 0, 0, 166, 10, 51, 51, 211, 64, 56, 0, 1, 0, 0, 0, 0, 163, 255, 35, 34, 210, 64, 60, 0, 1, 32, 245, 24, 0, 207, 15, 137, 136, 216, 64, 65, 0, 1, 28, 255, 212, 0, 192, 90, 51, 51, 211, 64, 0, 0, 1, 52, 194, 112, 189, 6, 187, 68, 68, 212, 64, 2, 0, 1, 65, 1, 77, 252, 17, 2, 119, 119, 215, 64, 4, 0, 1, 109, 243, 190, 130, 243, 233, 86, 85, 213, 64, 5, 0, 0, 244, 242, 230, 130, 157, 23, 51, 51, 211, 64, 6, 0, 1, 223, 253, 139, 254, 75, 1, 51, 51, 211, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 211, 64, 10, 0, 1, 200, 82, 205, 0, 88, 96, 51, 51, 211, 64, 11, 0, 1, 122, 169, 242, 248, 117, 91, 68, 68, 212, 64, 14, 0, 1, 0, 0, 0, 0, 97, 155, 51, 51, 211, 64, 16, 0, 1, 197, 72, 13, 10, 166, 3, 102, 102, 214, 64, 20, 0, 1, 25, 22, 146, 33, 242, 251, 68, 68, 212, 64, 21, 0, 1, 0, 0, 0, 0, 35, 255, 51, 51, 211, 64, 24, 0, 1, 0, 0, 0, 0, 163, 4, 51, 51, 211, 64, 25, 0, 1, 0, 0, 0, 0, 34, 0, 68, 68, 212, 64, 27, 0, 1, 0, 0, 0, 0, 63, 4, 51, 51, 211, 64, 30, 0, 1, 0, 0, 0, 0, 136, 0, 51, 51, 211, 64, 31, 0, 1, 0, 0, 0, 0, 186, 23, 51, 51, 211, 64, 33, 0, 1, 0, 0, 0, 0, 124, 253, 51, 51, 211, 64, 37, 0, 1, 0, 0, 0, 0, 129, 160, 51, 51, 211, 64, 41, 0, 1, 130, 1, 162, 7, 27, 42, 68, 68, 212, 64, 44, 0, 1, 0, 0, 0, 0, 223, 255, 68, 68, 212, 64, 45, 0, 1, 0, 0, 0, 0, 227, 255, 51, 51, 211, 64, 51, 0, 1, 0, 0, 0, 0, 236, 255, 51, 51, 211, 64, 59, 0, 1, 0, 0, 0, 0, 54, 231, 86, 85, 213, 64, 60, 0, 1, 89, 245, 207, 255, 153, 15, 51, 51, 211, 64, 63, 0, 1, 0, 0, 0, 0, 1, 242, 51, 51, 211, 64, 64, 0, 1, 31, 11, 55, 5, 219, 254, 102, 102, 214, 64, 0, 0, 1, 84, 194, 200, 189, 237, 186, 0, 0, 224, 64, 1, 0, 1, 205, 191, 52, 192, 205, 191, 68, 68, 212, 64, 3, 0, 1, 195, 254, 184, 254, 200, 0, 68, 68, 212, 64, 6, 0, 1, 222, 253, 139, 254, 75, 1, 68, 68, 212, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 86, 85, 213, 64, 10, 0, 1, 108, 82, 119, 0, 182, 96, 68, 68, 212, 64, 11, 0, 1, 122, 169, 241, 248, 116, 91, 86, 85, 213, 64, 16, 0, 1, 124, 71, 85, 11, 114, 3, 137, 136, 216, 64, 18, 0, 1, 106, 17, 69, 2, 114, 22, 68, 68, 212, 64, 19, 0, 1, 64, 4, 78, 7, 68, 7, 68, 68, 212, 64, 22, 0, 1, 0, 0, 0, 0, 60, 255, 170, 170, 218, 64, 24, 0, 1, 0, 0, 0, 0, 159, 4, 68, 68, 212, 64, 25, 0, 1, 0, 0, 0, 0, 232, 255, 119, 119, 215, 64, 30, 0, 1, 0, 0, 0, 0, 6, 0, 86, 85, 213, 64, 31, 0, 1, 0, 0, 0, 0, 145, 24, 68, 68, 212, 64, 33, 0, 1, 0, 0, 0, 0, 104, 253, 86, 85, 213, 64, 34, 0, 1, 0, 0, 0, 0, 93, 5, 137, 136, 216, 64, 37, 0, 1, 0, 0, 0, 0, 115, 160, 102, 102, 214, 64, 40, 0, 1, 26, 253, 23, 3, 110, 36, 86, 85, 213, 64, 41, 0, 1, 130, 1, 163, 7, 27, 42, 68, 68, 212, 64, 51, 0, 1, 0, 0, 0, 0, 235, 255, 154, 153, 217, 64, 54, 0, 1, 0, 0, 0, 0, 154, 10, 68, 68, 212, 64, 56, 0, 1, 0, 0, 0, 0, 157, 255, 68, 68, 212, 64, 57, 0, 1, 0, 0, 0, 0, 236, 255, 102, 102, 214, 64, 59, 0, 1, 0, 0, 0, 0, 39, 231, 119, 119, 215, 64, 61, 0, 1, 0, 0, 0, 0, 130, 90, 137, 136, 216, 64, 63, 0, 1, 0, 0, 0, 0, 214, 240, 68, 68, 212, 64, 64, 0, 1, 60, 11, 30, 5, 2, 255, 86, 85, 213, 64, 2, 0, 1, 65, 1, 76, 252, 10, 2, 86, 85, 213, 64, 3, 0, 1, 195, 254, 184, 254, 200, 0, 102, 102, 214, 64, 6, 0, 1, 221, 253, 138, 254, 75, 1, 86, 85, 213, 64, 7, 0, 1, 83, 253, 120, 255, 141, 1, 86, 85, 213, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 214, 64, 11, 0, 1, 121, 169, 239, 248, 114, 91, 119, 119, 215, 64, 13, 0, 1, 252, 25, 42, 18, 221, 193, 102, 102, 214, 64, 14, 0, 1, 0, 0, 0, 0, 155, 155, 86, 85, 213, 64, 17, 0, 1, 50, 33, 217, 255, 103, 31, 86, 85, 213, 64, 19, 0, 1, 164, 4, 152, 7, 138, 6, 86, 85, 213, 64, 21, 0, 1, 0, 0, 0, 0, 31, 255, 86, 85, 213, 64, 22, 0, 1, 0, 0, 0, 0, 56, 255, 86, 85, 213, 64, 25, 0, 1, 0, 0, 0, 0, 178, 255, 86, 85, 213, 64, 27, 0, 1, 0, 0, 0, 0, 32, 4, 119, 119, 215, 64, 28, 0, 1, 0, 0, 0, 0, 6, 251, 86, 85, 213, 64, 33, 0, 1, 0, 0, 0, 0, 92, 253, 86, 85, 213, 64, 38, 0, 1, 217, 87, 16, 20, 206, 201, 86, 85, 213, 64, 39, 0, 1, 228, 165, 241, 8, 94, 5, 86, 85, 213, 64, 43, 0, 1, 252, 11, 152, 1, 75, 33, 102, 102, 214, 64, 44, 0, 1, 0, 0, 0, 0, 219, 255, 102, 102, 214, 64, 45, 0, 1, 0, 0, 0, 0, 223, 255, 86, 85, 213, 64, 47, 0, 1, 0, 0, 0, 0, 225, 5, 86, 85, 213, 64, 48, 0, 1, 0, 0, 0, 0, 238, 6, 102, 102, 214, 64, 51, 0, 1, 0, 0, 0, 0, 232, 255, 86, 85, 213, 64, 53, 0, 1, 0, 0, 0, 0, 120, 5, 102, 102, 214, 64, 56, 0, 1, 0, 0, 0, 0, 145, 255, 86, 85, 213, 64, 57, 0, 1, 0, 0, 0, 0, 235, 255, 86, 85, 213, 64, 64, 0, 1, 90, 11, 5, 5, 42, 255, 137, 136, 216, 64, 2, 0, 1, 64, 1, 80, 252, 243, 1, 102, 102, 214, 64, 3, 0, 1, 195, 254, 184, 254, 200, 0, 119, 119, 215, 64, 5, 0, 0, 127, 242, 241, 130, 153, 23, 102, 102, 214, 64, 7, 0, 1, 83, 253, 120, 255, 141, 1, 102, 102, 214, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 119, 119, 215, 64, 9, 0, 1, 243, 12, 57, 10, 66, 243, 102, 102, 214, 64, 10, 0, 1, 62, 82, 76, 0, 227, 96, 119, 119, 215, 64, 15, 0, 1, 137, 150, 0, 16, 160, 246, 154, 153, 217, 64, 16, 0, 1, 38, 69, 10, 14, 251, 2, 102, 102, 214, 64, 17, 0, 1, 237, 33, 237, 255, 68, 31, 102, 102, 214, 64, 19, 0, 1, 5, 5, 224, 7, 215, 5, 102, 102, 214, 64, 21, 0, 1, 0, 0, 0, 0, 31, 255, 102, 102, 214, 64, 22, 0, 1, 0, 0, 0, 0, 56, 255, 102, 102, 214, 64, 25, 0, 1, 0, 0, 0, 0, 129, 255, 102, 102, 214, 64, 27, 0, 1, 0, 0, 0, 0, 7, 4, 137, 136, 216, 64, 31, 0, 1, 0, 0, 0, 0, 207, 25, 137, 136, 216, 64, 33, 0, 1, 0, 0, 0, 0, 139, 253, 102, 102, 214, 64, 34, 0, 1, 0, 0, 0, 0, 136, 5, 102, 102, 214, 64, 38, 0, 1, 226, 87, 222, 19, 244, 201, 154, 153, 217, 64, 39, 0, 1, 229, 165, 5, 9, 98, 5, 119, 119, 215, 64, 41, 0, 1, 131, 1, 164, 7, 27, 42, 102, 102, 214, 64, 43, 0, 1, 252, 11, 150, 1, 76, 33, 137, 136, 216, 64, 47, 0, 1, 0, 0, 0, 0, 216, 5, 170, 170, 218, 64, 48, 0, 1, 0, 0, 0, 0, 3, 7, 119, 119, 215, 64, 53, 0, 1, 0, 0, 0, 0, 113, 5, 119, 119, 215, 64, 57, 0, 1, 0, 0, 0, 0, 232, 255, 137, 136, 216, 64, 60, 0, 1, 154, 245, 133, 255, 86, 15, 102, 102, 214, 64, 64, 0, 1, 121, 11, 236, 4, 85, 255, 137, 136, 216, 64, 0, 0, 1, 104, 194, 0, 190, 227, 186, 119, 119, 215, 64, 3, 0, 1, 195, 254, 184, 254, 200, 0, 137, 136, 216, 64, 6, 0, 1, 223, 253, 140, 254, 75, 1, 119, 119, 215, 64, 7, 0, 1, 84, 253, 120, 255, 141, 1, 119, 119, 215, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 137, 136, 216, 64, 10, 0, 1, 227, 81, 245, 255, 61, 97, 154, 153, 217, 64, 11, 0, 1, 119, 169, 237, 248, 112, 91, 119, 119, 215, 64, 14, 0, 1, 0, 0, 0, 0, 190, 155, 170, 170, 218, 64, 17, 0, 1, 111, 36, 74, 0, 180, 30, 119, 119, 215, 64, 19, 0, 1, 97, 5, 36, 8, 47, 5, 154, 153, 217, 64, 20, 0, 1, 156, 23, 205, 33, 172, 248, 188, 187, 219, 64, 21, 0, 1, 0, 0, 0, 0, 125, 255, 137, 136, 216, 64, 22, 0, 1, 0, 0, 0, 0, 70, 255, 119, 119, 215, 64, 25, 0, 1, 0, 0, 0, 0, 85, 255, 119, 119, 215, 64, 27, 0, 1, 0, 0, 0, 0, 245, 3, 137, 136, 216, 64, 34, 0, 1, 0, 0, 0, 0, 225, 5, 119, 119, 215, 64, 38, 0, 1, 243, 87, 171, 19, 35, 202, 170, 170, 218, 64, 40, 0, 1, 26, 253, 11, 3, 99, 36, 188, 187, 219, 64, 42, 0, 1, 162, 8, 144, 4, 148, 33, 154, 153, 217, 64, 43, 0, 1, 253, 11, 144, 1, 81, 33, 119, 119, 215, 64, 44, 0, 1, 0, 0, 0, 0, 217, 255, 119, 119, 215, 64, 45, 0, 1, 0, 0, 0, 0, 221, 255, 119, 119, 215, 64, 51, 0, 1, 0, 0, 0, 0, 231, 255, 119, 119, 215, 64, 56, 0, 1, 0, 0, 0, 0, 138, 255, 137, 136, 216, 64, 59, 0, 1, 0, 0, 0, 0, 37, 231, 119, 119, 215, 64, 64, 0, 1, 152, 11, 210, 4, 128, 255, 137, 136, 216, 64, 3, 0, 1, 196, 254, 185, 254, 200, 0, 137, 136, 216, 64, 4, 0, 1, 63, 243, 194, 130, 252, 233, 154, 153, 217, 64, 5, 0, 0, 16, 242, 251, 130, 148, 23, 137, 136, 216, 64, 7, 0, 1, 86, 253, 120, 255, 141, 1, 137, 136, 216, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 170, 170, 218, 64, 9, 0, 1, 212, 12, 7, 10, 67, 243, 170, 170, 218, 64, 13, 0, 1, 141, 25, 149, 17, 154, 194, 154, 153, 217, 64, 14, 0, 1, 0, 0, 0, 0, 26, 156, 154, 153, 217, 64, 15, 0, 1, 131, 150, 32, 16, 215, 243, 137, 136, 216, 64, 19, 0, 1, 186, 5, 100, 8, 146, 4, 154, 153, 217, 64, 25, 0, 1, 0, 0, 0, 0, 18, 255, 137, 136, 216, 64, 27, 0, 1, 0, 0, 0, 0, 236, 3, 137, 136, 216, 64, 28, 0, 1, 0, 0, 0, 0, 241, 250, 170, 170, 218, 64, 30, 0, 1, 0, 0, 0, 0, 21, 0, 137, 136, 216, 64, 38, 0, 1, 1, 88, 175, 19, 53, 202, 170, 170, 218, 64, 41, 0, 1, 129, 1, 154, 7, 28, 42, 170, 170, 218, 64, 44, 0, 1, 0, 0, 0, 0, 252, 255, 170, 170, 218, 64, 45, 0, 1, 0, 0, 0, 0, 252, 255, 137, 136, 216, 64, 51, 0, 1, 0, 0, 0, 0, 225, 255, 154, 153, 217, 64, 53, 0, 1, 0, 0, 0, 0, 106, 5, 154, 153, 217, 64, 56, 0, 1, 0, 0, 0, 0, 125, 255, 137, 136, 216, 64, 57, 0, 1, 0, 0, 0, 0, 227, 255, 170, 170, 218, 64, 61, 0, 1, 0, 0, 0, 0, 132, 90, 154, 153, 217, 64, 64, 0, 1, 216, 11, 159, 4, 210, 255, 205, 204, 220, 64, 0, 0, 1, 137, 194, 102, 190, 221, 186, 154, 153, 217, 64, 2, 0, 1, 63, 1, 84, 252, 233, 1, 154, 153, 217, 64, 3, 0, 1, 197, 254, 186, 254, 200, 0, 170, 170, 218, 64, 4, 0, 1, 239, 242, 202, 130, 11, 234, 154, 153, 217, 64, 6, 0, 1, 226, 253, 141, 254, 75, 1, 221, 221, 221, 64, 7, 0, 1, 110, 253, 125, 255, 141, 1, 154, 153, 217, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 188, 187, 219, 64, 10, 0, 1, 98, 81, 115, 255, 187, 97, 188, 187, 219, 64, 18, 0, 1, 138, 18, 245, 2, 68, 21, 188, 187, 219, 64, 19, 0, 1, 159, 6, 8, 9, 28, 3, 154, 153, 217, 64, 22, 0, 1, 0, 0, 0, 0, 86, 255, 154, 153, 217, 64, 27, 0, 1, 0, 0, 0, 0, 237, 3, 170, 170, 218, 64, 28, 0, 1, 0, 0, 0, 0, 218, 250, 205, 204, 220, 64, 31, 0, 1, 0, 0, 0, 0, 108, 27, 170, 170, 218, 64, 33, 0, 1, 0, 0, 0, 0, 8, 254, 205, 204, 220, 64, 34, 0, 1, 0, 0, 0, 0, 165, 6, 154, 153, 217, 64, 36, 0, 1, 85, 216, 103, 217, 52, 185, 154, 153, 217, 64, 37, 0, 1, 0, 0, 0, 0, 127, 160, 154, 153, 217, 64, 38, 0, 1, 55, 88, 75, 19, 171, 202, 188, 187, 219, 64, 47, 0, 1, 0, 0, 0, 0, 39, 6, 188, 187, 219, 64, 51, 0, 1, 0, 0, 0, 0, 38, 0, 188, 187, 219, 64, 57, 0, 1, 0, 0, 0, 0, 36, 0, 0, 0, 224, 64, 59, 0, 1, 0, 0, 0, 0, 82, 231, 170, 170, 218, 64, 60, 0, 1, 200, 245, 85, 255, 32, 15, 154, 153, 217, 64, 63, 0, 1, 0, 0, 0, 0, 155, 240, 154, 153, 217, 64, 65, 0, 1, 27, 255, 215, 0, 188, 90, 188, 187, 219, 64, 2, 0, 1, 59, 1, 96, 252, 212, 1, 170, 170, 218, 64, 3, 0, 1, 199, 254, 188, 254, 200, 0, 16, 17, 225, 64, 5, 0, 0, 211, 240, 25, 131, 112, 23, 170, 170, 218, 64, 6, 0, 1, 229, 253, 143, 254, 75, 1, 170, 170, 218, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 220, 64, 11, 0, 1, 170, 169, 64, 249, 188, 91, 170, 170, 218, 64, 14, 0, 1, 0, 0, 0, 0, 83, 156, 170, 170, 218, 64, 15, 0, 1, 157, 150, 53, 16, 141, 242, 205, 204, 220, 64, 16, 0, 1, 200, 67, 82, 16, 141, 2, 188, 187, 219, 64, 20, 0, 1, 102, 24, 194, 33, 210, 246, 170, 170, 218, 64, 22, 0, 1, 0, 0, 0, 0, 107, 255, 205, 204, 220, 64, 25, 0, 1, 0, 0, 0, 0, 251, 254, 205, 204, 220, 64, 27, 0, 1, 0, 0, 0, 0, 70, 4, 170, 170, 218, 64, 36, 0, 1, 108, 216, 47, 217, 168, 185, 170, 170, 218, 64, 37, 0, 1, 0, 0, 0, 0, 203, 160, 170, 170, 218, 64, 38, 0, 1, 194, 88, 250, 17, 7, 204, 188, 187, 219, 64, 39, 0, 1, 220, 165, 14, 8, 46, 5, 188, 187, 219, 64, 43, 0, 1, 240, 11, 241, 1, 12, 33, 188, 187, 219, 64, 50, 0, 1, 0, 0, 0, 0, 244, 8, 188, 187, 219, 64, 53, 0, 1, 0, 0, 0, 0, 23, 6, 170, 170, 218, 64, 54, 0, 1, 0, 0, 0, 0, 191, 10, 170, 170, 218, 64, 56, 0, 1, 0, 0, 0, 0, 243, 255, 170, 170, 218, 64, 63, 0, 1, 0, 0, 0, 0, 96, 240, 188, 187, 219, 64, 64, 0, 1, 23, 12, 108, 4, 39, 0, 170, 170, 218, 64, 65, 0, 1, 27, 255, 219, 0, 183, 90, 188, 187, 219, 64, 3, 0, 1, 201, 254, 190, 254, 200, 0, 0, 0, 224, 64, 4, 0, 1, 107, 242, 215, 130, 33, 234, 188, 187, 219, 64, 6, 0, 1, 232, 253, 146, 254, 75, 1, 188, 187, 219, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 188, 187, 219, 64, 9, 0, 1, 184, 12, 217, 9, 86, 243, 205, 204, 220, 64, 13, 0, 1, 45, 25, 240, 17, 104, 195, 205, 204, 220, 64, 14, 0, 1, 0, 0, 0, 0, 236, 156, 188, 187, 219, 64, 15, 0, 1, 218, 150, 84, 16, 105, 241, 188, 187, 219, 64, 17, 0, 1, 231, 36, 101, 0, 144, 30, 188, 187, 219, 64, 22, 0, 1, 0, 0, 0, 0, 140, 255, 221, 221, 221, 64, 24, 0, 1, 0, 0, 0, 0, 18, 5, 221, 221, 221, 64, 28, 0, 1, 0, 0, 0, 0, 27, 251, 205, 204, 220, 64, 30, 0, 1, 0, 0, 0, 0, 128, 0, 205, 204, 220, 64, 33, 0, 1, 0, 0, 0, 0, 9, 255, 188, 187, 219, 64, 36, 0, 1, 149, 216, 223, 216, 102, 186, 188, 187, 219, 64, 37, 0, 1, 0, 0, 0, 0, 73, 161, 188, 187, 219, 64, 38, 0, 1, 137, 89, 183, 15, 54, 206, 205, 204, 220, 64, 40, 0, 1, 22, 253, 207, 2, 45, 36, 188, 187, 219, 64, 41, 0, 1, 126, 1, 136, 7, 31, 42, 221, 221, 221, 64, 44, 0, 1, 0, 0, 0, 0, 4, 1, 240, 238, 222, 64, 45, 0, 1, 0, 0, 0, 0, 61, 1, 240, 238, 222, 64, 48, 0, 1, 0, 0, 0, 0, 244, 7, 16, 17, 225, 64, 54, 0, 1, 0, 0, 0, 0, 211, 12, 188, 187, 219, 64, 56, 0, 1, 0, 0, 0, 0, 181, 0, 188, 187, 219, 64, 60, 0, 1, 223, 245, 61, 255, 4, 15, 188, 187, 219, 64, 61, 0, 1, 0, 0, 0, 0, 134, 90, 205, 204, 220, 64, 63, 0, 1, 0, 0, 0, 0, 236, 239, 188, 187, 219, 64, 65, 0, 1, 27, 255, 221, 0, 179, 90, 240, 238, 222, 64, 2, 0, 1, 51, 1, 125, 252, 172, 1, 205, 204, 220, 64, 3, 0, 1, 204, 254, 193, 254, 200, 0, 221, 221, 221, 64, 6, 0, 1, 243, 253, 153, 254, 75, 1, 205, 204, 220, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 240, 238, 222, 64, 9, 0, 1, 49, 12, 249, 8, 193, 243, 205, 204, 220, 64, 10, 0, 1, 57, 81, 72, 255, 227, 97, 205, 204, 220, 64, 15, 0, 1, 56, 151, 126, 16, 101, 240, 205, 204, 220, 64, 17, 0, 1, 75, 37, 131, 0, 108, 30, 221, 221, 221, 64, 18, 0, 1, 238, 18, 77, 3, 229, 20, 205, 204, 220, 64, 19, 0, 1, 220, 6, 49, 9, 203, 2, 205, 204, 220, 64, 20, 0, 1, 177, 24, 166, 33, 10, 246, 221, 221, 221, 64, 21, 0, 1, 0, 0, 0, 0, 1, 0, 221, 221, 221, 64, 22, 0, 1, 0, 0, 0, 0, 1, 0, 221, 221, 221, 64, 36, 0, 1, 38, 217, 14, 216, 194, 188, 240, 238, 222, 64, 37, 0, 1, 0, 0, 0, 0, 159, 163, 221, 221, 221, 64, 38, 0, 1, 102, 91, 184, 7, 99, 213, 35, 34, 226, 64, 39, 0, 1, 197, 165, 105, 2, 251, 3, 205, 204, 220, 64, 41, 0, 1, 122, 1, 110, 7, 35, 42, 205, 204, 220, 64, 42, 0, 1, 146, 8, 138, 4, 177, 33, 205, 204, 220, 64, 43, 0, 1, 227, 11, 72, 2, 206, 32, 205, 204, 220, 64, 47, 0, 1, 0, 0, 0, 0, 107, 6, 240, 238, 222, 64, 50, 0, 1, 0, 0, 0, 0, 106, 10, 205, 204, 220, 64, 51, 0, 1, 0, 0, 0, 0, 98, 0, 221, 221, 221, 64, 53, 0, 1, 0, 0, 0, 0, 99, 7, 221, 221, 221, 64, 56, 0, 1, 0, 0, 0, 0, 12, 3, 205, 204, 220, 64, 57, 0, 1, 0, 0, 0, 0, 92, 0, 205, 204, 220, 64, 60, 0, 1, 247, 245, 38, 255, 238, 14, 221, 221, 221, 64, 61, 0, 1, 0, 0, 0, 0, 126, 90, 205, 204, 220, 64, 64, 0, 1, 55, 12, 83, 4, 80, 0, 86, 85, 229, 64, 65, 0, 1, 26, 255, 238, 0, 162, 90, 0, 0, 224, 64, 0, 0, 1, 156, 194, 164, 190, 231, 186, 221, 221, 221, 64, 3, 0, 1, 207, 254, 197, 254, 200, 0, 221, 221, 221, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 221, 221, 221, 64, 10, 0, 1, 20, 81, 29, 255, 7, 98, 240, 238, 222, 64, 11, 0, 1, 222, 169, 150, 249, 9, 92, 221, 221, 221, 64, 13, 0, 1, 234, 24, 178, 18, 20, 196, 221, 221, 221, 64, 14, 0, 1, 0, 0, 0, 0, 97, 157, 221, 221, 221, 64, 15, 0, 1, 242, 151, 192, 16, 195, 239, 221, 221, 221, 64, 16, 0, 1, 142, 67, 59, 17, 93, 2, 221, 221, 221, 64, 17, 0, 1, 115, 37, 168, 0, 72, 30, 221, 221, 221, 64, 19, 0, 1, 254, 6, 68, 9, 194, 2, 221, 221, 221, 64, 20, 0, 1, 204, 24, 97, 33, 141, 245, 221, 221, 221, 64, 25, 0, 1, 0, 0, 0, 0, 40, 255, 221, 221, 221, 64, 27, 0, 1, 0, 0, 0, 0, 171, 4, 221, 221, 221, 64, 30, 0, 1, 0, 0, 0, 0, 6, 1, 51, 51, 227, 64, 31, 0, 1, 0, 0, 0, 0, 107, 29, 221, 221, 221, 64, 33, 0, 1, 0, 0, 0, 0, 4, 0, 240, 238, 222, 64, 34, 0, 1, 0, 0, 0, 0, 40, 7, 240, 238, 222, 64, 40, 0, 1, 17, 253, 130, 2, 232, 35, 221, 221, 221, 64, 41, 0, 1, 117, 1, 81, 7, 40, 42, 240, 238, 222, 64, 42, 0, 1, 112, 8, 126, 4, 240, 33, 16, 17, 225, 64, 43, 0, 1, 174, 11, 192, 3, 193, 31, 240, 238, 222, 64, 47, 0, 1, 0, 0, 0, 0, 255, 6, 240, 238, 222, 64, 51, 0, 1, 0, 0, 0, 0, 227, 0, 221, 221, 221, 64, 57, 0, 1, 0, 0, 0, 0, 156, 0, 221, 221, 221, 64, 60, 0, 1, 14, 246, 15, 255, 216, 14, 16, 17, 225, 64, 63, 0, 1, 0, 0, 0, 0, 10, 239, 0, 0, 224, 64, 64, 0, 1, 146, 12, 8, 4, 198, 0, 240, 238, 222, 64, 3, 0, 1, 211, 254, 200, 254, 200, 0, 35, 34, 226, 64, 6, 0, 1, 19, 254, 175, 254, 75, 1, 0, 0, 224, 64, 7, 0, 1, 127, 253, 129, 255, 141, 1, 240, 238, 222, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 224, 64, 10, 0, 1, 223, 80, 203, 254, 60, 98, 240, 238, 222, 64, 13, 0, 1, 129, 24, 100, 20, 50, 197, 240, 238, 222, 64, 14, 0, 1, 0, 0, 0, 0, 22, 158, 240, 238, 222, 64, 15, 0, 1, 100, 153, 59, 17, 220, 239, 240, 238, 222, 64, 16, 0, 1, 168, 67, 92, 18, 27, 2, 240, 238, 222, 64, 17, 0, 1, 39, 37, 219, 0, 37, 30, 240, 238, 222, 64, 18, 0, 1, 190, 18, 90, 3, 37, 21, 240, 238, 222, 64, 19, 0, 1, 240, 6, 47, 9, 63, 3, 240, 238, 222, 64, 20, 0, 1, 140, 24, 202, 32, 157, 245, 16, 17, 225, 64, 21, 0, 1, 0, 0, 0, 0, 43, 2, 16, 17, 225, 64, 22, 0, 1, 0, 0, 0, 0, 235, 1, 16, 17, 225, 64, 24, 0, 1, 0, 0, 0, 0, 177, 6, 0, 0, 224, 64, 25, 0, 1, 0, 0, 0, 0, 73, 0, 0, 0, 224, 64, 27, 0, 1, 0, 0, 0, 0, 120, 6, 16, 17, 225, 64, 28, 0, 1, 0, 0, 0, 0, 193, 252, 240, 238, 222, 64, 30, 0, 1, 0, 0, 0, 0, 15, 2, 240, 238, 222, 64, 33, 0, 1, 0, 0, 0, 0, 203, 1, 240, 238, 222, 64, 36, 0, 1, 117, 217, 178, 215, 247, 189, 16, 17, 225, 64, 38, 0, 1, 213, 92, 209, 250, 104, 225, 240, 238, 222, 64, 41, 0, 1, 112, 1, 53, 7, 44, 42, 240, 238, 222, 64, 44, 0, 1, 0, 0, 0, 0, 102, 1, 240, 238, 222, 64, 53, 0, 1, 0, 0, 0, 0, 6, 8, 240, 238, 222, 64, 56, 0, 1, 0, 0, 0, 0, 50, 4, 240]).concat([238, 222, 64, 57, 0, 1, 0, 0, 0, 0, 214, 0, 0, 0, 224, 64, 60, 0, 1, 61, 246, 224, 254, 154, 14, 240, 238, 222, 64, 61, 0, 1, 0, 0, 0, 0, 127, 90, 0, 0, 224, 64, 2, 0, 1, 48, 1, 138, 252, 157, 1, 51, 51, 227, 64, 3, 0, 1, 232, 254, 223, 254, 200, 0, 0, 0, 224, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 227, 64, 9, 0, 1, 22, 11, 42, 7, 179, 244, 35, 34, 226, 64, 11, 0, 1, 48, 170, 26, 250, 126, 92, 0, 0, 224, 64, 13, 0, 1, 7, 24, 159, 22, 161, 198, 0, 0, 224, 64, 14, 0, 1, 0, 0, 0, 0, 252, 158, 0, 0, 224, 64, 15, 0, 1, 66, 155, 201, 17, 99, 240, 16, 17, 225, 64, 16, 0, 1, 101, 68, 217, 20, 129, 1, 16, 17, 225, 64, 17, 0, 1, 207, 35, 83, 1, 227, 29, 16, 17, 225, 64, 18, 0, 1, 224, 17, 73, 3, 55, 22, 0, 0, 224, 64, 19, 0, 1, 196, 6, 0, 9, 13, 4, 0, 0, 224, 64, 20, 0, 1, 19, 24, 5, 32, 4, 246, 16, 17, 225, 64, 30, 0, 1, 0, 0, 0, 0, 229, 4, 0, 0, 224, 64, 33, 0, 1, 0, 0, 0, 0, 5, 4, 16, 17, 225, 64, 34, 0, 1, 0, 0, 0, 0, 198, 7, 35, 34, 226, 64, 36, 0, 1, 98, 218, 150, 214, 226, 193, 35, 34, 226, 64, 37, 0, 1, 0, 0, 0, 0, 33, 166, 16, 17, 225, 64, 40, 0, 1, 13, 253, 54, 2, 164, 35, 35, 34, 226, 64, 41, 0, 1, 97, 1, 222, 6, 58, 42, 16, 17, 225, 64, 42, 0, 1, 78, 8, 114, 4, 47, 34, 51, 51, 227, 64, 44, 0, 1, 0, 0, 0, 0, 18, 3, 0, 0, 224, 64, 45, 0, 1, 0, 0, 0, 0, 149, 1, 16, 17, 225, 64, 47, 0, 1, 0, 0, 0, 0, 146, 7, 0, 0, 224, 64, 48, 0, 1, 0, 0, 0, 0, 54, 8, 0, 0, 224, 64, 50, 0, 1, 0, 0, 0, 0, 231, 10, 0, 0, 224, 64, 51, 0, 1, 0, 0, 0, 0, 34, 1, 0, 0, 224, 64, 53, 0, 1, 0, 0, 0, 0, 172, 8, 16, 17, 225, 64, 56, 0, 1, 0, 0, 0, 0, 145, 6, 0, 0, 224, 64, 57, 0, 1, 0, 0, 0, 0, 18, 1, 35, 34, 226, 64, 61, 0, 1, 0, 0, 0, 0, 134, 90, 16, 17, 225, 64, 0, 0, 1, 162, 194, 181, 190, 236, 186, 35, 34, 226, 64, 1, 0, 1, 205, 191, 52, 192, 205, 191, 35, 34, 226, 64, 2, 0, 1, 39, 1, 169, 252, 123, 1, 68, 68, 228, 64, 4, 0, 1, 96, 242, 216, 130, 30, 234, 35, 34, 226, 64, 7, 0, 1, 150, 253, 133, 255, 141, 1, 16, 17, 225, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 16, 17, 225, 64, 10, 0, 1, 203, 80, 162, 254, 80, 98, 16, 17, 225, 64, 13, 0, 1, 137, 23, 38, 25, 83, 200, 35, 34, 226, 64, 14, 0, 1, 0, 0, 0, 0, 83, 161, 16, 17, 225, 64, 15, 0, 1, 84, 157, 74, 18, 51, 241, 35, 34, 226, 64, 19, 0, 1, 47, 6, 113, 8, 63, 6, 35, 34, 226, 64, 20, 0, 1, 181, 22, 43, 30, 131, 247, 68, 68, 228, 64, 25, 0, 1, 0, 0, 0, 0, 178, 3, 51, 51, 227, 64, 27, 0, 1, 0, 0, 0, 0, 42, 10, 16, 17, 225, 64, 33, 0, 1, 0, 0, 0, 0, 127, 6, 16, 17, 225, 64, 45, 0, 1, 0, 0, 0, 0, 240, 1, 16, 17, 225, 64, 48, 0, 1, 0, 0, 0, 0, 122, 8, 68, 68, 228, 64, 50, 0, 1, 0, 0, 0, 0, 35, 13, 35, 34, 226, 64, 51, 0, 1, 0, 0, 0, 0, 168, 1, 68, 68, 228, 64, 53, 0, 1, 0, 0, 0, 0, 161, 11, 35, 34, 226, 64, 57, 0, 1, 0, 0, 0, 0, 145, 1, 16, 17, 225, 64, 59, 0, 1, 0, 0, 0, 0, 94, 231, 16, 17, 225, 64, 60, 0, 1, 83, 246, 201, 254, 122, 14, 16, 17, 225, 64, 64, 0, 1, 175, 12, 240, 3, 241, 0, 35, 34, 226, 64, 0, 0, 1, 167, 194, 195, 190, 244, 186, 51, 51, 227, 64, 5, 0, 0, 146, 240, 30, 131, 96, 23, 35, 34, 226, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 68, 68, 228, 64, 10, 0, 1, 157, 80, 43, 254, 129, 98, 51, 51, 227, 64, 13, 0, 1, 167, 22, 195, 30, 79, 204, 51, 51, 227, 64, 15, 0, 1, 14, 162, 65, 19, 91, 243, 68, 68, 228, 64, 16, 0, 1, 29, 70, 193, 24, 131, 0, 68, 68, 228, 64, 17, 0, 1, 225, 32, 23, 2, 134, 29, 35, 34, 226, 64, 18, 0, 1, 72, 17, 50, 3, 238, 22, 86, 85, 229, 64, 21, 0, 1, 0, 0, 0, 0, 250, 5, 86, 85, 229, 64, 22, 0, 1, 0, 0, 0, 0, 75, 5, 51, 51, 227, 64, 24, 0, 1, 0, 0, 0, 0, 18, 8, 35, 34, 226, 64, 28, 0, 1, 0, 0, 0, 0, 122, 253, 68, 68, 228, 64, 30, 0, 1, 0, 0, 0, 0, 255, 9, 68, 68, 228, 64, 33, 0, 1, 0, 0, 0, 0, 208, 14, 35, 34, 226, 64, 34, 0, 1, 0, 0, 0, 0, 24, 8, 35, 34, 226, 64, 38, 0, 1, 231, 92, 161, 246, 132, 229, 51, 51, 227, 64, 40, 0, 1, 8, 253, 225, 1, 87, 35, 51, 51, 227, 64, 42, 0, 1, 41, 8, 101, 4, 117, 34, 86, 85, 229, 64, 43, 0, 1, 108, 11, 135, 5, 121, 30, 86, 85, 229, 64, 45, 0, 1, 0, 0, 0, 0, 164, 3, 51, 51, 227, 64, 47, 0, 1, 0, 0, 0, 0, 54, 8, 68, 68, 228, 64, 48, 0, 1, 0, 0, 0, 0, 100, 9, 35, 34, 226, 64, 54, 0, 1, 0, 0, 0, 0, 58, 13, 68, 68, 228, 64, 56, 0, 1, 0, 0, 0, 0, 176, 10, 35, 34, 226, 64, 59, 0, 1, 0, 0, 0, 0, 109, 231, 35, 34, 226, 64, 60, 0, 1, 106, 246, 178, 254, 90, 14, 35, 34, 226, 64, 63, 0, 1, 0, 0, 0, 0, 209, 238, 86, 85, 229, 64, 64, 0, 1, 47, 13, 144, 3, 161, 1, 51, 51, 227, 64, 0, 0, 1, 171, 194, 208, 190, 253, 186, 51, 51, 227, 64, 1, 0, 1, 205, 191, 52, 192, 205, 191, 51, 51, 227, 64, 2, 0, 1, 34, 1, 188, 252, 105, 1, 51, 51, 227, 64, 6, 0, 1, 30, 254, 182, 254, 75, 1, 51, 51, 227, 64, 7, 0, 1, 164, 253, 136, 255, 141, 1, 51, 51, 227, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 227, 64, 11, 0, 1, 79, 170, 76, 250, 170, 92, 86, 85, 229, 64, 14, 0, 1, 0, 0, 0, 0, 166, 165, 51, 51, 227, 64, 18, 0, 1, 166, 16, 23, 3, 175, 23, 86, 85, 229, 64, 19, 0, 1, 9, 5, 96, 7, 64, 10, 68, 68, 228, 64, 20, 0, 1, 16, 21, 24, 28, 113, 249, 119, 119, 231, 64, 28, 0, 1, 0, 0, 0, 0, 154, 1, 51, 51, 227, 64, 34, 0, 1, 0, 0, 0, 0, 106, 8, 68, 68, 228, 64, 36, 0, 1, 244, 218, 158, 213, 224, 196, 51, 51, 227, 64, 37, 0, 1, 0, 0, 0, 0, 17, 167, 68, 68, 228, 64, 38, 0, 1, 145, 92, 145, 239, 27, 237, 51, 51, 227, 64, 39, 0, 1, 197, 165, 84, 1, 192, 3, 68, 68, 228, 64, 41, 0, 1, 86, 1, 154, 6, 68, 42, 51, 51, 227, 64, 51, 0, 1, 0, 0, 0, 0, 242, 1, 68, 68, 228, 64, 54, 0, 1, 0, 0, 0, 0, 31, 14, 51, 51, 227, 64, 57, 0, 1, 0, 0, 0, 0, 215, 1, 68, 68, 228, 64, 59, 0, 1, 0, 0, 0, 0, 149, 231, 86, 85, 229, 64, 60, 0, 1, 200, 246, 112, 254, 237, 13, 102, 102, 230, 64, 61, 0, 1, 0, 0, 0, 0, 130, 90, 51, 51, 227, 64, 63, 0, 1, 0, 0, 0, 0, 152, 238, 102, 102, 230, 64, 0, 0, 1, 151, 194, 214, 190, 107, 187, 68, 68, 228, 64, 1, 0, 1, 206, 191, 51, 192, 206, 191, 68, 68, 228, 64, 2, 0, 1, 29, 1, 209, 252, 85, 1, 68, 68, 228, 64, 3, 0, 1, 239, 254, 230, 254, 200, 0, 102, 102, 230, 64, 5, 0, 0, 69, 240, 35, 131, 67, 23, 86, 85, 229, 64, 6, 0, 1, 54, 254, 199, 254, 75, 1, 137, 136, 232, 64, 7, 0, 1, 248, 253, 153, 255, 142, 1, 68, 68, 228, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 68, 68, 228, 64, 9, 0, 1, 192, 10, 160, 6, 254, 244, 119, 119, 231, 64, 11, 0, 1, 239, 170, 76, 251, 131, 93, 68, 68, 228, 64, 13, 0, 1, 74, 22, 194, 33, 136, 206, 68, 68, 228, 64, 15, 0, 1, 184, 164, 186, 19, 161, 244, 102, 102, 230, 64, 18, 0, 1, 112, 14, 174, 2, 75, 26, 68, 68, 228, 64, 24, 0, 1, 0, 0, 0, 0, 206, 8, 119, 119, 231, 64, 27, 0, 1, 0, 0, 0, 0, 241, 15, 68, 68, 228, 64, 31, 0, 1, 0, 0, 0, 0, 179, 29, 86, 85, 229, 64, 34, 0, 1, 0, 0, 0, 0, 22, 9, 86, 85, 229, 64, 37, 0, 1, 0, 0, 0, 0, 45, 169, 86, 85, 229, 64, 39, 0, 1, 206, 165, 221, 254, 57, 3, 137, 136, 232, 64, 40, 0, 1, 246, 252, 186, 0, 78, 34, 102, 102, 230, 64, 42, 0, 1, 226, 7, 76, 4, 247, 34, 119, 119, 231, 64, 44, 0, 1, 0, 0, 0, 0, 97, 5, 68, 68, 228, 64, 47, 0, 1, 0, 0, 0, 0, 146, 8, 119, 119, 231, 64, 51, 0, 1, 0, 0, 0, 0, 105, 3, 68, 68, 228, 64, 57, 0, 1, 0, 0, 0, 0, 35, 2, 68, 68, 228, 64, 63, 0, 1, 0, 0, 0, 0, 85, 238, 137, 136, 232, 64, 1, 0, 1, 207, 191, 50, 192, 207, 191, 86, 85, 229, 64, 2, 0, 1, 23, 1, 231, 252, 64, 1, 86, 85, 229, 64, 3, 0, 1, 246, 254, 237, 254, 200, 0, 119, 119, 231, 64, 4, 0, 1, 231, 242, 201, 130, 5, 234, 86, 85, 229, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 236, 64, 9, 0, 1, 176, 7, 196, 1, 192, 247, 86, 85, 229, 64, 10, 0, 1, 144, 80, 3, 254, 144, 98, 119, 119, 231, 64, 13, 0, 1, 72, 21, 108, 43, 2, 214, 119, 119, 231, 64, 15, 0, 1, 76, 174, 56, 21, 50, 249, 86, 85, 229, 64, 16, 0, 1, 197, 70, 37, 26, 40, 0, 137, 136, 232, 64, 17, 0, 1, 24, 28, 52, 3, 2, 29, 154, 153, 233, 64, 20, 0, 1, 43, 16, 59, 22, 100, 255, 170, 170, 234, 64, 24, 0, 1, 0, 0, 0, 0, 113, 13, 86, 85, 229, 64, 25, 0, 1, 0, 0, 0, 0, 176, 4, 102, 102, 230, 64, 30, 0, 1, 0, 0, 0, 0, 212, 13, 86, 85, 229, 64, 31, 0, 1, 0, 0, 0, 0, 253, 29, 137, 136, 232, 64, 33, 0, 1, 0, 0, 0, 0, 44, 27, 102, 102, 230, 64, 36, 0, 1, 115, 219, 76, 212, 77, 200, 86, 85, 229, 64, 38, 0, 1, 68, 92, 209, 236, 116, 240, 102, 102, 230, 64, 41, 0, 1, 72, 1, 73, 6, 81, 42, 86, 85, 229, 64, 47, 0, 1, 0, 0, 0, 0, 246, 8, 137, 136, 232, 64, 48, 0, 1, 0, 0, 0, 0, 23, 11, 119, 119, 231, 64, 50, 0, 1, 0, 0, 0, 0, 104, 15, 102, 102, 230, 64, 53, 0, 1, 0, 0, 0, 0, 135, 13, 86, 85, 229, 64, 54, 0, 1, 0, 0, 0, 0, 162, 14, 102, 102, 230, 64, 56, 0, 1, 0, 0, 0, 0, 26, 14, 86, 85, 229, 64, 57, 0, 1, 0, 0, 0, 0, 118, 2, 137, 136, 232, 64, 59, 0, 1, 0, 0, 0, 0, 128, 232, 86, 85, 229, 64, 63, 0, 1, 0, 0, 0, 0, 0, 238, 102, 102, 230, 64, 2, 0, 1, 17, 1, 254, 252, 43, 1, 102, 102, 230, 64, 3, 0, 1, 254, 254, 245, 254, 200, 0, 102, 102, 230, 64, 6, 0, 1, 68, 254, 208, 254, 75, 1, 102, 102, 230, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 137, 136, 232, 64, 10, 0, 1, 110, 80, 141, 253, 182, 98, 154, 153, 233, 64, 14, 0, 1, 0, 0, 0, 0, 101, 172, 154, 153, 233, 64, 16, 0, 1, 122, 73, 129, 31, 192, 254, 170, 170, 234, 64, 19, 0, 1, 206, 2, 86, 5, 148, 17, 102, 102, 230, 64, 21, 0, 1, 0, 0, 0, 0, 7, 7, 102, 102, 230, 64, 22, 0, 1, 0, 0, 0, 0, 58, 6, 119, 119, 231, 64, 25, 0, 1, 0, 0, 0, 0, 190, 6, 102, 102, 230, 64, 31, 0, 1, 0, 0, 0, 0, 69, 30, 137, 136, 232, 64, 34, 0, 1, 0, 0, 0, 0, 30, 10, 119, 119, 231, 64, 37, 0, 1, 0, 0, 0, 0, 184, 171, 102, 102, 230, 64, 38, 0, 1, 247, 91, 197, 234, 93, 243, 119, 119, 231, 64, 39, 0, 1, 228, 165, 217, 251, 147, 2, 137, 136, 232, 64, 43, 0, 1, 38, 11, 101, 7, 29, 29, 137, 136, 232, 64, 45, 0, 1, 0, 0, 0, 0, 110, 5, 137, 136, 232, 64, 47, 0, 1, 0, 0, 0, 0, 110, 10, 137, 136, 232, 64, 54, 0, 1, 0, 0, 0, 0, 135, 16, 102, 102, 230, 64, 57, 0, 1, 0, 0, 0, 0, 210, 2, 119, 119, 231, 64, 60, 0, 1, 63, 247, 68, 254, 108, 13, 102, 102, 230, 64, 63, 0, 1, 0, 0, 0, 0, 158, 237, 102, 102, 230, 64, 64, 0, 1, 99, 13, 118, 3, 224, 1, 137, 136, 232, 64, 65, 0, 1, 42, 255, 221, 0, 152, 90, 119, 119, 231, 64, 0, 0, 1, 133, 194, 205, 190, 173, 187, 137, 136, 232, 64, 2, 0, 1, 3, 1, 48, 253, 253, 0, 119, 119, 231, 64, 3, 0, 1, 6, 255, 254, 254, 200, 0, 119, 119, 231, 64, 5, 0, 0, 89, 240, 35, 131, 74, 23, 137, 136, 232, 64, 6, 0, 1, 97, 254, 228, 254, 75, 1, 119, 119, 231, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 119, 119, 231, 64, 18, 0, 1, 163, 13, 134, 2, 57, 27, 119, 119, 231, 64, 21, 0, 1, 0, 0, 0, 0, 22, 8, 119, 119, 231, 64, 22, 0, 1, 0, 0, 0, 0, 41, 7, 119, 119, 231, 64, 30, 0, 1, 0, 0, 0, 0, 198, 15, 119, 119, 231, 64, 31, 0, 1, 0, 0, 0, 0, 139, 30, 119, 119, 231, 64, 36, 0, 1, 168, 219, 115, 211, 58, 202, 119, 119, 231, 64, 38, 0, 1, 189, 91, 141, 233, 182, 245, 137, 136, 232, 64, 41, 0, 1, 55, 1, 227, 5, 96, 42, 119, 119, 231, 64, 42, 0, 1, 197, 7, 65, 4, 44, 35, 137, 136, 232, 64, 53, 0, 1, 0, 0, 0, 0, 225, 15, 119, 119, 231, 64, 56, 0, 1, 0, 0, 0, 0, 24, 16, 119, 119, 231, 64, 57, 0, 1, 0, 0, 0, 0, 56, 3, 0, 0, 240, 64, 61, 0, 1, 0, 0, 0, 0, 128, 90, 119, 119, 231, 64, 63, 0, 1, 0, 0, 0, 0, 190, 237, 119, 119, 231, 64, 64, 0, 1, 188, 13, 78, 3, 217, 1, 137, 136, 232, 64, 0, 0, 1, 110, 194, 193, 190, 250, 187, 137, 136, 232, 64, 3, 0, 1, 15, 255, 7, 255, 200, 0, 205, 204, 236, 64, 4, 0, 1, 162, 244, 158, 130, 190, 233, 137, 136, 232, 64, 5, 0, 0, 31, 240, 37, 131, 38, 23, 137, 136, 232, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 170, 170, 234, 64, 11, 0, 1, 166, 171, 106, 252, 111, 94, 154, 153, 233, 64, 13, 0, 1, 124, 20, 108, 49, 66, 219, 137, 136, 232, 64, 15, 0, 1, 138, 177, 147, 21, 189, 250, 170, 170, 234, 64, 18, 0, 1, 79, 11, 8, 2, 230, 29, 170, 170, 234, 64, 21, 0, 1, 0, 0, 0, 0, 8, 11, 170, 170, 234, 64, 22, 0, 1, 0, 0, 0, 0, 198, 9, 137, 136, 232, 64, 25, 0, 1, 0, 0, 0, 0, 194, 7, 170, 170, 234, 64, 27, 0, 1, 0, 0, 0, 0, 28, 20, 188, 187, 235, 64, 28, 0, 1, 0, 0, 0, 0, 194, 4, 170, 170, 234, 64, 30, 0, 1, 0, 0, 0, 0, 54, 21, 154, 153, 233, 64, 31, 0, 1, 0, 0, 0, 0, 8, 31, 137, 136, 232, 64, 36, 0, 1, 214, 219, 115, 210, 84, 204, 137, 136, 232, 64, 37, 0, 1, 0, 0, 0, 0, 52, 173, 137, 136, 232, 64, 38, 0, 1, 171, 91, 74, 233, 106, 247, 137, 136, 232, 64, 39, 0, 1, 247, 165, 16, 250, 49, 2, 137, 136, 232, 64, 42, 0, 1, 165, 7, 54, 4, 104, 35, 170, 170, 234, 64, 44, 0, 1, 0, 0, 0, 0, 236, 7, 154, 153, 233, 64, 50, 0, 1, 0, 0, 0, 0, 108, 17, 188, 187, 235, 64, 51, 0, 1, 0, 0, 0, 0, 169, 5, 137, 136, 232, 64, 56, 0, 1, 0, 0, 0, 0, 84, 18, 188, 187, 235, 64, 57, 0, 1, 0, 0, 0, 0, 89, 5, 154, 153, 233, 64, 60, 0, 1, 215, 247, 25, 254, 202, 12, 137, 136, 232, 64, 63, 0, 1, 0, 0, 0, 0, 186, 236, 137, 136, 232, 64, 64, 0, 1, 229, 13, 64, 3, 115, 2, 154, 153, 233, 64, 0, 0, 1, 85, 194, 178, 190, 79, 188, 154, 153, 233, 64, 1, 0, 1, 207, 191, 50, 192, 207, 191, 205, 204, 236, 64, 2, 0, 1, 228, 0, 163, 253, 150, 0, 154, 153, 233, 64, 3, 0, 1, 24, 255, 16, 255, 200, 0, 170, 170, 234, 64, 5, 0, 0, 124, 237, 71, 131, 203, 21, 170, 170, 234, 64, 6, 0, 1, 129, 254, 250, 254, 75, 1, 154, 153, 233, 64, 7, 0, 1, 12, 254, 157, 255, 142, 1, 154, 153, 233, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 170, 170, 234, 64, 10, 0, 1, 91, 80, 62, 253, 203, 98, 154, 153, 233, 64, 15, 0, 1, 144, 180, 197, 21, 50, 252, 188, 187, 235, 64, 17, 0, 1, 181, 24, 231, 3, 175, 28, 154, 153, 233, 64, 25, 0, 1, 0, 0, 0, 0, 188, 8, 170, 170, 234, 64, 33, 0, 1, 0, 0, 0, 0, 196, 32, 154, 153, 233, 64, 34, 0, 1, 0, 0, 0, 0, 110, 10, 154, 153, 233, 64, 36, 0, 1, 249, 219, 61, 209, 171, 206, 170, 170, 234, 64, 37, 0, 1, 0, 0, 0, 0, 179, 176, 154, 153, 233, 64, 38, 0, 1, 215, 91, 72, 234, 76, 248, 170, 170, 234, 64, 39, 0, 1, 57, 166, 205, 245, 70, 1, 188, 187, 235, 64, 40, 0, 1, 230, 252, 171, 255, 89, 33, 170, 170, 234, 64, 41, 0, 1, 34, 1, 98, 5, 116, 42, 188, 187, 235, 64, 42, 0, 1, 45, 7, 11, 4, 69, 36, 188, 187, 235, 64, 43, 0, 1, 195, 10, 251, 9, 55, 27, 205, 204, 236, 64, 45, 0, 1, 0, 0, 0, 0, 213, 8, 170, 170, 234, 64, 47, 0, 1, 0, 0, 0, 0, 187, 11, 221, 221, 237, 64, 48, 0, 1, 0, 0, 0, 0, 90, 14, 170, 170, 234, 64, 53, 0, 1, 0, 0, 0, 0, 217, 18, 154, 153, 233, 64, 54, 0, 1, 0, 0, 0, 0, 86, 17, 170, 170, 234, 64, 56, 0, 1, 0, 0, 0, 0, 166, 23, 170, 170, 234, 64, 59, 0, 1, 0, 0, 0, 0, 52, 233, 170, 170, 234, 64, 63, 0, 1, 0, 0, 0, 0, 241, 226, 154, 153, 233, 64, 64, 0, 1, 112, 13, 129, 3, 254, 4, 154, 153, 233, 64, 65, 0, 1, 90, 255, 177, 0, 24, 91, 170, 170, 234, 64, 0, 0, 1, 57, 194, 161, 190, 170, 188, 205, 204, 236, 64, 1, 0, 1, 208, 191, 49, 192, 208, 191, 170, 170, 234, 64, 3, 0, 1, 34, 255, 26, 255, 200, 0, 188, 187, 235, 64, 7, 0, 1, 53, 254, 165, 255, 142, 1, 170, 170, 234, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 170, 170, 234, 64, 13, 0, 1, 255, 19, 13, 52, 211, 221, 188, 187, 235, 64, 14, 0, 1, 0, 0, 0, 0, 16, 176, 170, 170, 234, 64, 15, 0, 1, 52, 183, 206, 21, 128, 253, 188, 187, 235, 64, 16, 0, 1, 172, 74, 156, 33, 45, 254, 188, 187, 235, 64, 20, 0, 1, 96, 14, 49, 20, 166, 1, 205, 204, 236, 64, 25, 0, 1, 0, 0, 0, 0, 56, 11, 240, 238, 238, 64, 31, 0, 1, 0, 0, 0, 0, 172, 31, 240, 238, 238, 64, 34, 0, 1, 0, 0, 0, 0, 133, 11, 188, 187, 235, 64, 36, 0, 1, 56, 220, 124, 206, 229, 211, 170, 170, 234, 64, 38, 0, 1, 44, 92, 42, 236, 151, 248, 221, 221, 237, 64, 50, 0, 1, 0, 0, 0, 0, 123, 22, 221, 221, 237, 64, 54, 0, 1, 0, 0, 0, 0, 34, 21, 170, 170, 234, 64, 60, 0, 1, 41, 248, 3, 254, 111, 12, 170, 170, 234, 64, 64, 0, 1, 195, 12, 207, 3, 237, 7, 170, 170, 234, 64, 65, 0, 1, 122, 255, 153, 0, 211, 91, 205, 204, 236, 64, 0, 0, 1, 254, 193, 125, 190, 103, 189, 205, 204, 236, 64, 3, 0, 1, 54, 255, 47, 255, 200, 0, 188, 187, 235, 64, 5, 0, 0, 130, 236, 78, 131, 13, 21, 221, 221, 237, 64, 6, 0, 1, 181, 254, 30, 255, 75, 1, 188, 187, 235, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 221, 221, 237, 64, 10, 0, 1, 66, 80, 198, 252, 232, 98, 240, 238, 238, 64, 11, 0, 1, 224, 172, 76, 254, 230, 95, 188, 187, 235, 64, 13, 0, 1, 109, 19, 71, 54, 64, 224, 188, 187, 235, 64, 15, 0, 1, 55, 185, 158, 21, 141, 254, 188, 187, 235, 64, 18, 0, 1, 161, 10, 224, 1, 172, 30, 221, 221, 237, 64, 19, 0, 1, 172, 1, 82, 4, 9, 21, 188, 187, 235, 64, 21, 0, 1, 0, 0, 0, 0, 217, 11, 188, 187, 235, 64, 22, 0, 1, 0, 0, 0, 0, 127, 10, 188, 187, 235, 64, 24, 0, 1, 0, 0, 0, 0, 17, 14, 221, 221, 237, 64, 27, 0, 1, 0, 0, 0, 0, 63, 23, 205, 204, 236, 64, 30, 0, 1, 0, 0, 0, 0, 19, 24, 205, 204, 236, 64, 33, 0, 1, 0, 0, 0, 0, 64, 37, 221, 221, 237, 64, 37, 0, 1, 0, 0, 0, 0, 234, 182, 188, 187, 235, 64, 38, 0, 1, 154, 92, 194, 238, 105, 248, 221, 221, 237, 64, 39, 0, 1, 234, 166, 110, 238, 173, 255, 205, 204, 236, 64, 41, 0, 1, 9, 1, 208, 4, 138, 42, 188, 187, 235, 64, 44, 0, 1, 0, 0, 0, 0, 237, 8, 221, 221, 237, 64, 47, 0, 1, 0, 0, 0, 0, 254, 13, 240, 238, 238, 64, 53, 0, 1, 0, 0, 0, 0, 190, 25, 221, 221, 237, 64, 56, 0, 1, 0, 0, 0, 0, 201, 32, 205, 204, 236, 64, 59, 0, 1, 0, 0, 0, 0, 2, 234, 221, 221, 237, 64, 60, 0, 1, 36, 249, 195, 253, 76, 11, 188, 187, 235, 64, 63, 0, 1, 0, 0, 0, 0, 175, 222, 188, 187, 235, 64, 64, 0, 1, 36, 12, 9, 4, 233, 9, 188, 187, 235, 64, 65, 0, 1, 47, 255, 240, 0, 204, 92, 205, 204, 236, 64, 5, 0, 0, 54, 236, 57, 131, 76, 20, 205, 204, 236, 64, 7, 0, 1, 75, 254, 169, 255, 142, 1, 205, 204, 236, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 236, 64, 13, 0, 1, 199, 18, 51, 56, 152, 226, 240, 238, 238, 64, 14, 0, 1, 0, 0, 0, 0, 253, 181, 205, 204, 236, 64, 15, 0, 1, 173, 186, 58, 21, 104, 255, 221, 221, 237, 64, 16, 0, 1, 184, 75, 43, 35, 189, 253, 16, 17, 241, 64, 17, 0, 1, 42, 20, 166, 4, 96, 28, 240, 238, 238, 64, 18, 0, 1, 209, 8, 108, 1, 179, 32, 240, 238, 238, 64, 20, 0, 1, 27, 12, 199, 17, 162, 4, 205, 204, 236, 64, 21, 0, 1, 0, 0, 0, 0, 148, 12, 16, 17, 241, 64, 22, 0, 1, 0, 0, 0, 0, 78, 13, 221, 221, 237, 64, 24, 0, 1, 0, 0, 0, 0, 33, 15, 205, 204, 236, 64, 28, 0, 1, 0, 0, 0, 0, 99, 5, 240, 238, 238, 64, 36, 0, 1, 206, 220, 48, 202, 158, 220, 205, 204, 236, 64, 38, 0, 1, 8, 93, 207, 241, 237, 247, 221, 221, 237, 64, 40, 0, 1, 218, 252, 223, 254, 159, 32, 205, 204, 236, 64, 42, 0, 1, 0, 7, 251, 3, 152, 36, 35, 34, 242, 64, 43, 0, 1, 224, 9, 190, 15, 231, 22, 0, 0, 240, 64, 44, 0, 1, 0, 0, 0, 0, 42, 13, 205, 204, 236, 64, 51, 0, 1, 0, 0, 0, 0, 83, 6, 221, 221, 237, 64, 57, 0, 1, 0, 0, 0, 0, 157, 6, 205, 204, 236, 64, 63, 0, 1, 0, 0, 0, 0, 167, 219, 221, 221, 237, 64, 64, 0, 1, 252, 10, 248, 3, 83, 13, 205, 204, 236, 64, 65, 0, 1, 252, 254, 31, 1, 151, 93, 221, 221, 237, 64, 0, 0, 1, 225, 193, 107, 190, 196, 189, 240, 238, 238, 64, 1, 0, 1, 209, 191, 48, 192, 209, 191, 240, 238, 238, 64, 2, 0, 1, 211, 0, 226, 253, 95, 0, 221, 221, 237, 64, 3, 0, 1, 64, 255, 58, 255, 200, 0, 0, 0, 240, 64, 4, 0, 1, 205, 245, 133, 130, 145, 233, 221, 221, 237, 64, 5, 0, 0, 30, 237, 246, 130, 144, 19, 240, 238, 238, 64, 7, 0, 1, 121, 254, 178, 255, 142, 1, 221, 221, 237, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 221, 221, 237, 64, 9, 0, 1, 75, 7, 40, 1, 29, 248, 240, 238, 238, 64, 13, 0, 1, 61, 17, 62, 59, 38, 231, 221, 221, 237, 64, 15, 0, 1, 136, 187, 162, 20, 13, 0, 240, 238, 238, 64, 21, 0, 1, 0, 0, 0, 0, 215, 13, 35, 34, 242, 64, 25, 0, 1, 0, 0, 0, 0, 96, 14, 221, 221, 237, 64, 28, 0, 1, 0, 0, 0, 0, 244, 5, 16, 17, 241, 64, 30, 0, 1, 0, 0, 0, 0, 159, 28, 0, 0, 240, 64, 33, 0, 1, 0, 0, 0, 0, 149, 42, 240, 238, 238, 64, 38, 0, 1, 174, 93, 80, 248, 174, 246, 240, 238, 238, 64, 41, 0, 1, 239, 0, 54, 4, 161, 42, 221, 221, 237, 64, 42, 0, 1, 210, 6, 234, 3, 237, 36, 240, 238, 238, 64, 45, 0, 1, 0, 0, 0, 0, 187, 10, 221, 221, 237, 64, 51, 0, 1, 0, 0, 0, 0, 1, 7, 240, 238, 238, 64, 59, 0, 1, 0, 0, 0, 0, 216, 234, 221, 221, 237, 64, 63, 0, 1, 0, 0, 0, 0, 186, 218, 221, 221, 237, 64, 65, 0, 1, 143, 255, 97, 0, 182, 93, 35, 34, 242, 64, 0, 0, 1, 125, 193, 51, 190, 255, 190, 240, 238, 238, 64, 3, 0, 1, 75, 255, 69, 255, 200, 0, 240, 238, 238, 64, 5, 0, 0, 6, 239, 144, 130, 210, 18, 240, 238, 238, 64, 6, 0, 1, 200, 254, 43, 255, 75, 1, 240, 238, 238, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 51, 51, 243, 64, 9, 0, 1, 125, 5, 103, 254, 208, 249, 240, 238, 238, 64, 10, 0, 1, 58, 80, 156, 252, 242, 98, 240, 238, 238, 64, 15, 0, 1, 252, 187, 225, 19, 144, 0, 35, 34, 242, 64, 16, 0, 1, 186, 77, 121, 37, 14, 253, 0, 0, 240, 64, 19, 0, 1, 248, 0, 180, 3, 18, 23, 240, 238, 238, 64, 24, 0, 1, 0, 0, 0, 0, 153, 15, 240, 238, 238, 64, 27, 0, 1, 0, 0, 0, 0, 31, 24, 240, 238, 238, 64, 28, 0, 1, 0, 0, 0, 0, 124, 6, 0, 0, 240, 64, 37, 0, 1, 0, 0, 0, 0, 109, 187, 16, 17, 241, 64, 39, 0, 1, 241, 167, 4, 231, 15, 254, 240, 238, 238, 64, 40, 0, 1, 212, 252, 119, 254, 64, 32, 0, 0, 240, 64, 42, 0, 1, 118, 6, 201, 3, 149, 37, 0, 0, 240, 64, 47, 0, 1, 0, 0, 0, 0, 136, 15, 16, 17, 241, 64, 48, 0, 1, 0, 0, 0, 0, 114, 16, 0, 0, 240, 64, 50, 0, 1, 0, 0, 0, 0, 32, 25, 0, 0, 240, 64, 51, 0, 1, 0, 0, 0, 0, 90, 8, 240, 238, 238, 64, 54, 0, 1, 0, 0, 0, 0, 35, 22, 16, 17, 241, 64, 56, 0, 1, 0, 0, 0, 0, 224, 41, 35, 34, 242, 64, 57, 0, 1, 0, 0, 0, 0, 23, 9, 240, 238, 238, 64, 60, 0, 1, 114, 249, 173, 253, 234, 10, 240, 238, 238, 64, 63, 0, 1, 0, 0, 0, 0, 147, 219, 240, 238, 238, 64, 64, 0, 1, 115, 10, 154, 3, 215, 14, 240, 238, 238, 64, 65, 0, 1, 25, 0, 173, 255, 103, 93, 16, 17, 241, 64, 1, 0, 1, 210, 191, 48, 192, 210, 191, 35, 34, 242, 64, 2, 0, 1, 184, 0, 72, 254, 7, 0, 0, 0, 240, 64, 3, 0, 1, 86, 255, 80, 255, 200, 0, 0, 0, 240, 64, 5, 0, 0, 22, 242, 16, 130, 14, 18, 0, 0, 240, 64, 6, 0, 1, 219, 254, 56, 255, 75, 1, 0, 0, 240, 64, 7, 0, 1, 145, 254, 183, 255, 142, 1, 0, 0, 240, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 35, 34, 242, 64, 10, 0, 1, 35, 80, 22, 252, 12, 99, 51, 51, 243, 64, 11, 0, 1, 28, 174, 39, 0, 63, 97, 16, 17, 241, 64, 13, 0, 1, 128, 15, 212, 61, 226, 235, 86, 85, 245, 64, 14, 0, 1, 0, 0, 0, 0, 199, 195, 0, 0, 240, 64, 15, 0, 1, 56, 188, 3, 19, 7, 1, 0, 0, 240, 64, 18, 0, 1, 59, 8, 67, 1, 88, 33, 16, 17, 241, 64, 20, 0, 1, 166, 10, 80, 16, 158, 6, 86, 85, 245, 64, 21, 0, 1, 0, 0, 0, 0, 21, 17, 35, 34, 242, 64, 24, 0, 1, 0, 0, 0, 0, 239, 16, 0, 0, 240, 64, 27, 0, 1, 0, 0, 0, 0, 252, 24, 0, 0, 240, 64, 28, 0, 1, 0, 0, 0, 0, 3, 7, 0, 0, 240, 64, 31, 0, 1, 0, 0, 0, 0, 185, 31, 0, 0, 240, 64, 34, 0, 1, 0, 0, 0, 0, 173, 11, 16, 17, 241, 64, 36, 0, 1, 126, 221, 189, 199, 150, 226, 0, 0, 240, 64, 38, 0, 1, 211, 93, 66, 251, 59, 246, 51, 51, 243, 64, 40, 0, 1, 190, 252, 241, 252, 219, 30, 35, 34, 242, 64, 41, 0, 1, 202, 0, 90, 3, 193, 42, 51, 51, 243, 64, 45, 0, 1, 0, 0, 0, 0, 75, 14, 0, 0, 240, 64, 53, 0, 1, 0, 0, 0, 0, 120, 27, 119, 119, 247, 64, 54, 0, 1, 0, 0, 0, 0, 146, 29, 51, 51, 243, 64, 59, 0, 1, 0, 0, 0, 0, 126, 236, 0, 0, 240, 64, 60, 0, 1, 184, 249, 152, 253, 145, 10, 0, 0, 240, 64, 63, 0, 1, 0, 0, 0, 0, 114, 222, 0, 0, 240, 64, 64, 0, 1, 219, 9, 253, 2, 36, 16, 0, 0, 240, 64, 65, 0, 1, 200, 255, 2, 0, 165, 92, 35, 34, 242, 64, 3, 0, 1, 109, 255, 104, 255, 200, 0, 16, 17, 241, 64, 4, 0, 1, 44, 246, 126, 130, 131, 233, 16, 17, 241, 64, 5, 0, 0, 199, 245, 152, 129, 77, 17, 16, 17, 241, 64, 6, 0, 1, 239, 254, 69, 255, 75, 1, 51, 51, 243, 64, 7, 0, 1, 221, 254, 198, 255, 142, 1, 16, 17, 241, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 16, 17, 241, 64, 15, 0, 1, 56, 188, 12, 18, 109, 1, 16, 17, 241, 64, 18, 0, 1, 167, 7, 26, 1, 251, 33, 35, 34, 242, 64, 19, 0, 1, 67, 0, 23, 3, 14, 25, 16, 17, 241, 64, 27, 0, 1, 0, 0, 0, 0, 209, 25, 16, 17, 241, 64, 28, 0, 1, 0, 0, 0, 0, 134, 7, 16, 17, 241, 64, 31, 0, 1, 0, 0, 0, 0, 195, 31, 51, 51, 243, 64, 33, 0, 1, 0, 0, 0, 0, 69, 47, 16, 17, 241, 64, 34, 0, 1, 0, 0, 0, 0, 209, 11, 35, 34, 242, 64, 37, 0, 1, 0, 0, 0, 0, 253, 191, 16, 17, 241, 64, 38, 0, 1, 208, 93, 182, 253, 22, 246, 35, 34, 242, 64, 42, 0, 1, 31, 6, 170, 3, 51, 38, 51, 51, 243, 64, 44, 0, 1, 0, 0, 0, 0, 32, 16, 51, 51, 243, 64, 47, 0, 1, 0, 0, 0, 0, 175, 17, 16, 17, 241, 64, 50, 0, 1, 0, 0, 0, 0, 103, 26, 16, 17, 241, 64, 51, 0, 1, 0, 0, 0, 0, 2, 9, 119, 119, 247, 64, 53, 0, 1, 0, 0, 0, 0, 175, 38, 51, 51, 243, 64, 60, 0, 1, 123, 250, 82, 253, 113, 9, 16, 17, 241, 64, 61, 0, 1, 0, 0, 0, 0, 126, 90, 16, 17, 241, 64, 63, 0, 1, 0, 0, 0, 0, 153, 226, 16, 17, 241, 64, 64, 0, 1, 70, 9, 60, 2, 242, 16, 16, 17, 241, 64, 65, 0, 1, 94, 255, 130, 0, 192, 91, 68, 68, 244, 64, 1, 0, 1, 211, 191, 46, 192, 211, 191, 102, 102, 246, 64, 4, 0, 1, 22, 248, 96, 130, 64, 233, 35, 34, 242, 64, 5, 0, 1, 22, 250, 53, 129, 122, 16, 51, 51, 243, 64, 6, 0, 1, 24, 255, 97, 255, 75, 1, 35, 34, 242, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 68, 68, 244, 64, 13, 0, 1, 183, 12, 225, 64, 253, 242, 51, 51, 243, 64, 15, 0, 1, 164, 187, 229, 15, 12, 2, 51, 51, 243, 64, 17, 0, 1, 111, 18, 226, 4, 73, 28, 35, 34, 242, 64, 18, 0, 1, 20, 7, 240, 0, 156, 34, 86, 85, 245, 64, 20, 0, 1, 225, 7, 168, 13, 120, 10, 51, 51, 243, 64, 22, 0, 1, 0, 0, 0, 0, 68, 14, 102, 102, 246, 64, 27, 0, 1, 0, 0, 0, 0, 126, 29, 119, 119, 247, 64, 28, 0, 1, 0, 0, 0, 0, 53, 10, 35, 34, 242, 64, 30, 0, 1, 0, 0, 0, 0, 168, 29, 51, 51, 243, 64, 31, 0, 1, 0, 0, 0, 0, 203, 31, 137, 136, 248, 64, 34, 0, 1, 0, 0, 0, 0, 143, 12, 51, 51, 243, 64, 36, 0, 1, 142, 222, 233, 197, 119, 232, 35, 34, 242, 64, 38, 0, 1, 163, 93, 80, 255, 119, 246, 102, 102, 246, 64, 39, 0, 1, 50, 170, 136, 219, 134, 251, 68, 68, 244, 64, 48, 0, 1, 0, 0, 0, 0, 103, 18, 35, 34, 242, 64, 50, 0, 1, 0, 0, 0, 0, 155, 27, 51, 51, 243, 64, 51, 0, 1, 0, 0, 0, 0, 61, 10, 68, 68, 244, 64, 56, 0, 1, 0, 0, 0, 0, 47, 50, 35, 34, 242, 64, 61, 0, 1, 0, 0, 0, 0, 128, 90, 51, 51, 243, 64, 63, 0, 1, 0, 0, 0, 0, 181, 236, 35, 34, 242, 64, 64, 0, 1, 158, 8, 93, 1, 186, 16, 35, 34, 242, 64, 65, 0, 1, 123, 255, 121, 0, 11, 91, 51, 51, 243, 64, 0, 0, 1, 101, 193, 39, 190, 71, 191, 51, 51, 243, 64, 2, 0, 1, 174, 0, 108, 254, 232, 255, 51, 51, 243, 64, 3, 0, 1, 121, 255, 117, 255, 200, 0, 51, 51, 243, 64, 5, 0, 1, 149, 253, 2, 129, 201, 15, 51, 51, 243, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 68, 68, 244, 64, 10, 0, 1, 21, 80, 187, 251, 28, 99, 102, 102, 246, 64, 16, 0, 1, 158, 79, 38, 39, 133, 252, 51, 51, 243, 64, 18, 0, 1, 132, 6, 198, 0, 56, 35, 102, 102, 246, 64, 19, 0, 1, 236, 254, 239, 1, 178, 28, 68, 68, 244, 64, 24, 0, 1, 0, 0, 0, 0, 188, 17, 51, 51, 243, 64, 25, 0, 1, 0, 0, 0, 0, 244, 14, 68, 68, 244, 64, 30, 0, 1, 0, 0, 0, 0, 154, 31, 102, 102, 246, 64, 37, 0, 1, 0, 0, 0, 0, 193, 201, 51, 51, 243, 64, 38, 0, 1, 74, 93, 73, 0, 65, 247, 51, 51, 243, 64, 41, 0, 1, 191, 0, 21, 3, 204, 42, 68, 68, 244, 64, 42, 0, 1, 201, 5, 139, 3, 207, 38, 86, 85, 245, 64, 43, 0, 1, 112, 9, 125, 18, 207, 20, 68, 68, 244, 64, 50, 0, 1, 0, 0, 0, 0, 13, 30, 51, 51, 243, 64, 57, 0, 1, 0, 0, 0, 0, 172, 9, 119, 119, 247, 64, 61, 0, 1, 0, 0, 0, 0, 130, 90, 51, 51, 243, 64, 64, 0, 1, 63, 8, 160, 0, 64, 16, 51, 51, 243, 64, 65, 0, 1, 175, 255, 84, 0, 138, 90, 102, 102, 246, 64, 0, 0, 1, 29, 193, 2, 190, 1, 192, 68, 68, 244, 64, 2, 0, 1, 164, 0, 144, 254, 201, 255, 86, 85, 245, 64, 3, 0, 1, 146, 255, 142, 255, 200, 0, 68, 68, 244, 64, 5, 0, 1, 47, 254, 242, 128, 92, 15, 68, 68, 244, 64, 6, 0, 1, 45, 255, 112, 255, 75, 1, 102, 102, 246, 64, 7, 0, 1, 45, 255, 214, 255, 142, 1, 68, 68, 244, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 119, 119, 247, 64, 9, 0, 1, 97, 4, 205, 252, 225, 250, 68, 68, 244, 64, 11, 0, 1, 111, 174, 161, 0, 148, 97, 86, 85, 245, 64, 15, 0, 1, 130, 186, 150, 13, 119, 2, 137, 136, 248, 64, 17, 0, 1, 137, 14, 91, 5, 30, 28, 86, 85, 245, 64, 18, 0, 1, 111, 5, 116, 0, 99, 36, 86, 85, 245, 64, 22, 0, 1, 0, 0, 0, 0, 36, 15, 86, 85, 245, 64, 25, 0, 1, 0, 0, 0, 0, 10, 16, 102, 102, 246, 64, 31, 0, 1, 0, 0, 0, 0, 199, 31, 102, 102, 246, 64, 33, 0, 1, 0, 0, 0, 0, 78, 51, 68, 68, 244, 64, 36, 0, 1, 89, 223, 51, 197, 175, 235, 68, 68, 244, 64, 38, 0, 1, 172, 92, 170, 0, 117, 248, 68, 68, 244, 64, 40, 0, 1, 184, 252, 143, 252, 129, 30, 102, 102, 246, 64, 41, 0, 1, 154, 0, 59, 2, 235, 42, 68, 68, 244, 64, 44, 0, 1, 0, 0, 0, 0, 35, 17, 86, 85, 245, 64, 45, 0, 1, 0, 0, 0, 0, 22, 16, 86, 85, 245, 64, 47, 0, 1, 0, 0, 0, 0, 39, 19, 86, 85, 245, 64, 51, 0, 1, 0, 0, 0, 0, 135, 11, 86, 85, 245, 64, 57, 0, 1, 0, 0, 0, 0, 227, 10, 102, 102, 246, 64, 59, 0, 1, 0, 0, 0, 0, 178, 237, 68, 68, 244, 64, 60, 0, 1, 188, 250, 56, 253, 12, 9, 68, 68, 244, 64, 63, 0, 1, 0, 0, 0, 0, 57, 237, 68, 68, 244, 64, 64, 0, 1, 185, 8, 97, 0, 71, 16, 119, 119, 247, 64, 65, 0, 1, 178, 255, 81, 0, 138, 90, 119, 119, 247, 64, 1, 0, 1, 212, 191, 45, 192, 212, 191, 86, 85, 245, 64, 2, 0, 1, 154, 0, 181, 254, 169, 255, 86, 85, 245, 64, 5, 0, 1, 218, 253, 234, 128, 14, 15, 86, 85, 245, 64, 6, 0, 1, 66, 255, 126, 255, 75, 1, 86, 85, 245, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 246, 64, 10, 0, 1, 7, 80, 99, 251, 43, 99, 86, 85, 245, 64, 11, 0, 1, 194, 174, 27, 1, 232, 97, 119, 119, 247, 64, 13, 0, 1, 252, 9, 16, 67, 156, 249, 102, 102, 246, 64, 24, 0, 1, 0, 0, 0, 0, 119, 18, 86, 85, 245, 64, 30, 0, 1, 0, 0, 0, 0, 130, 32, 102, 102, 246, 64, 36, 0, 1, 24, 225, 254, 195, 33, 242, 86, 85, 245, 64, 38, 0, 1, 234, 91, 160, 0, 233, 249, 86, 85, 245, 64, 40, 0, 1, 178, 252, 44, 252, 39, 30, 86, 85, 245, 64, 42, 0, 1, 157, 5, 124, 3, 31, 39, 86, 85, 245, 64, 44, 0, 1, 0, 0, 0, 0, 38, 18, 137, 136, 248, 64, 48, 0, 1, 0, 0, 0, 0, 234, 20, 119, 119, 247, 64, 50, 0, 1, 0, 0, 0, 0, 172, 33, 102, 102, 246, 64, 56, 0, 1, 0, 0, 0, 0, 179, 55, 119, 119, 247, 64, 60, 0, 1, 45, 251, 245, 252, 37, 8, 86, 85, 245, 64, 63, 0, 1, 0, 0, 0, 0, 121, 236, 86, 85, 245, 64, 64, 0, 1, 103, 9, 75, 0, 99, 16, 102, 102, 246, 64, 2, 0, 1, 144, 0, 218, 254, 137, 255, 119, 119, 247, 64, 3, 0, 1, 171, 255, 168, 255, 200, 0, 102, 102, 246, 64, 5, 0, 1, 4, 254, 226, 128, 215, 14, 102, 102, 246, 64, 6, 0, 1, 88, 255, 141, 255, 75, 1, 102, 102, 246, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 246, 64, 11, 0, 1, 20, 175, 147, 1, 57, 98, 137, 136, 248, 64, 14, 0, 1, 0, 0, 0, 0, 197, 202, 154, 153, 249, 64, 15, 0, 1, 161, 183, 31, 9, 227, 2, 119, 119, 247, 64, 18, 0, 1, 110, 4, 37, 0, 119, 37, 102, 102, 246, 64, 20, 0, 1, 61, 7, 15, 13, 96, 11, 137, 136, 248, 64, 21, 0, 1, 0, 0, 0, 0, 97, 18, 119, 119, 247, 64, 22, 0, 1, 0, 0, 0, 0, 238, 15, 102, 102, 246, 64, 25, 0, 1, 0, 0, 0, 0, 140, 16, 102, 102, 246, 64, 30, 0, 1, 0, 0, 0, 0, 95, 33, 119, 119, 247, 64, 38, 0, 1, 52, 90, 230, 255, 21, 253, 154, 153, 249, 64, 40, 0, 1, 159, 252, 215, 250, 235, 28, 119, 119, 247, 64, 42, 0, 1, 73, 5, 94, 3, 183, 39, 137, 136, 248, 64, 43, 0, 1, 6, 9, 10, 21, 215, 18, 137, 136, 248, 64, 44, 0, 1, 0, 0, 0, 0, 235, 20, 102, 102, 246, 64, 45, 0, 1, 0, 0, 0, 0, 247, 16, 102, 102, 246, 64, 47, 0, 1, 0, 0, 0, 0, 223, 19, 154, 153, 249, 64, 51, 0, 1, 0, 0, 0, 0, 195, 13, 102, 102, 246, 64, 57, 0, 1, 0, 0, 0, 0, 124, 11, 119, 119, 247, 64, 63, 0, 1, 0, 0, 0, 0, 132, 236, 119, 119, 247, 64, 64, 0, 1, 248, 9, 4, 0, 89, 16, 137, 136, 248, 64, 0, 0, 1, 5, 193, 253, 189, 14, 192, 119, 119, 247, 64, 2, 0, 1, 133, 0, 1, 255, 105, 255, 154, 153, 249, 64, 4, 0, 1, 146, 248, 93, 130, 43, 233, 170, 170, 250, 64, 5, 0, 1, 210, 254, 204, 128, 37, 14, 119, 119, 247, 64, 6, 0, 1, 110, 255, 156, 255, 75, 1, 119, 119, 247, 64, 7, 0, 1, 73, 255, 220, 255, 142, 1, 119, 119, 247, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 137, 136, 248, 64, 10, 0, 1, 251, 79, 17, 251, 57, 99, 154, 153, 249, 64, 11, 0, 1, 229, 175, 202, 2, 0, 99, 119, 119, 247, 64, 16, 0, 1, 13, 80, 125, 39, 104, 252, 170, 170, 250, 64, 19, 0, 1, 202, 253, 246, 0, 177, 31, 154, 153, 249, 64, 20, 0, 1, 126, 5, 114, 11, 217, 13, 137, 136, 248, 64, 24, 0, 1, 0, 0, 0, 0, 30, 19, 119, 119, 247, 64, 25, 0, 1, 0, 0, 0, 0, 8, 17, 170, 170, 250, 64, 27, 0, 1, 0, 0, 0, 0, 204, 31, 170, 170, 250, 64, 30, 0, 1, 0, 0, 0, 0, 86, 36, 119, 119, 247, 64, 31, 0, 1, 0, 0, 0, 0, 195, 31, 154, 153, 249, 64, 33, 0, 1, 0, 0, 0, 0, 172, 54, 119, 119, 247, 64, 36, 0, 1, 5, 226, 135, 195, 47, 245, 154, 153, 249, 64, 37, 0, 1, 0, 0, 0, 0, 76, 209, 137, 136, 248, 64, 39, 0, 1, 51, 171, 118, 215, 158, 250, 188, 187, 251, 64, 41, 0, 1, 112, 0, 61, 1, 15, 43, 119, 119, 247, 64, 45, 0, 1, 0, 0, 0, 0, 203, 17, 119, 119, 247, 64, 47, 0, 1, 0, 0, 0, 0, 141, 20, 119, 119, 247, 64, 56, 0, 1, 0, 0, 0, 0, 61, 58, 154, 153, 249, 64, 57, 0, 1, 0, 0, 0, 0, 0, 13, 137, 136, 248, 64, 59, 0, 1, 0, 0, 0, 0, 249, 237, 137, 136, 248, 64, 1, 0, 1, 213, 191, 45, 192, 213, 191, 154, 153, 249, 64, 2, 0, 1, 112, 0, 79, 255, 39, 255, 154, 153, 249, 64, 3, 0, 1, 198, 255, 196, 255, 200, 0, 137, 136, 248, 64, 6, 0, 1, 132, 255, 172, 255, 75, 1, 137, 136, 248, 64, 7, 0, 1, 101, 255, 225, 255, 142, 1, 137, 136, 248, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 137, 136, 248, 64, 9, 0, 1, 44, 4, 133, 252, 22, 251, 154, 153, 249, 64, 13, 0, 1, 88, 8, 34, 68, 124, 253, 188, 187, 251, 64, 16, 0, 1, 133, 81, 158, 40, 6, 252, 137, 136, 248, 64, 18, 0, 1, 246, 3, 0, 0, 247, 37, 170, 170, 250, 64, 22, 0, 1, 0, 0, 0, 0, 242, 16, 205, 204, 252, 64, 25, 0, 1, 0, 0, 0, 0, 3, 19, 154, 153, 249, 64, 28, 0, 1, 0, 0, 0, 0, 240, 10, 188, 187, 251, 64, 31, 0, 1, 0, 0, 0, 0, 176, 31, 137, 136, 248, 64, 36, 0, 1, 231, 226, 32, 195, 242, 247, 137, 136, 248, 64, 38, 0, 1, 112, 89, 120, 255, 141, 254, 188, 187, 251, 64, 42, 0, 1, 217, 4, 53, 3, 130, 40, 154, 153, 249, 64, 45, 0, 1, 0, 0, 0, 0, 49, 19, 137, 136, 248, 64, 47, 0, 1, 0, 0, 0, 0, 42, 21, 154, 153, 249, 64, 50, 0, 1, 0, 0, 0, 0, 157, 35, 154, 153, 249, 64, 53, 0, 1, 0, 0, 0, 0, 55, 41, 154, 153, 249, 64, 54, 0, 1, 0, 0, 0, 0, 9, 31, 137, 136, 248, 64, 56, 0, 1, 0, 0, 0, 0, 133, 60, 170, 170, 250, 64, 60, 0, 1, 235, 250, 206, 252, 2, 8, 205, 204, 252, 64, 61, 0, 1, 0, 0, 0, 0, 132, 90, 137, 136, 248, 64, 63, 0, 1, 0, 0, 0, 0, 181, 236, 205, 204, 252, 64, 64, 0, 1, 55, 10, 162, 255, 128, 15, 170, 170, 250, 64, 65, 0, 1, 183, 255, 76, 0, 137, 90, 188, 187, 251, 64, 0, 0, 1, 250, 192, 13, 190, 171, 191, 170, 170, 250, 64, 1, 0, 1, 214, 191, 44, 192, 214, 191, 154, 153, 249, 64, 6, 0, 1, 155, 255, 187, 255, 75, 1, 170, 170, 250, 64, 7, 0, 1, 159, 255, 237, 255, 142, 1, 154, 153, 249, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 170, 170, 250, 64, 9, 0, 1, 217, 3, 27, 252, 109, 251, 188, 187, 251, 64, 10, 0, 1, 235, 79, 167, 250, 73, 99, 170, 170, 250, 64, 14, 0, 1, 0, 0, 0, 0, 25, 207, 205, 204, 252, 64, 17, 0, 1, 37, 12, 161, 5, 3, 28, 154, 153, 249, 64, 18, 0, 1, 133, 3, 222, 255, 111, 38, 240, 238, 254, 64, 21, 0, 1, 0, 0, 0, 0, 68, 20, 188, 187, 251, 64, 24, 0, 1, 0, 0, 0, 0, 243, 19, 170, 170, 250, 64, 34, 0, 1, 0, 0, 0, 0, 181, 12, 154, 153, 249, 64, 36, 0, 1, 166, 227, 196, 194, 78, 250, 154, 153, 249, 64, 38, 0, 1, 219, 88, 38, 255, 206, 255, 154, 153, 249, 64, 39, 0, 1, 165, 171, 205, 213, 63, 250, 170, 170, 250, 64, 43, 0, 1, 212, 8, 59, 22, 233, 17, 170, 170, 250, 64, 44, 0, 1, 0, 0, 0, 0, 55, 22, 170, 170, 250, 64, 47, 0, 1, 0, 0, 0, 0, 28, 22, 188, 187, 251, 64, 48, 0, 1, 0, 0, 0, 0, 16, 22, 154, 153, 249, 64, 56, 0, 1, 0, 0, 0, 0, 119, 62, 205, 204, 252, 64, 59, 0, 1, 0, 0, 0, 0, 181, 237, 154, 153, 249, 64, 63, 0, 1, 0, 0, 0, 0, 246, 236, 170, 170, 250, 64, 2, 0, 1, 101, 0, 118, 255, 5, 255, 188, 187, 251, 64, 3, 0, 1, 224, 255, 223, 255, 200, 0, 188, 187, 251, 64, 4, 0, 1, 178, 248, 94, 130, 34, 233, 170, 170, 250, 64, 6, 0, 1, 178, 255, 203, 255, 75, 1, 170, 170, 250, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 188, 187, 251, 64, 11, 0, 1, 51, 176, 71, 3, 72, 99, 188, 187, 251, 64, 13, 0, 1, 243, 6, 252, 68, 191, 0, 188, 187, 251, 64, 15, 0, 1, 98, 182, 75, 7, 254, 2, 221, 221, 253, 64, 18, 0, 1, 22, 2, 110, 255, 243, 39, 205, 204, 252, 64, 20, 0, 1, 21, 4, 36, 10, 212, 15, 170, 170, 250, 64, 28, 0, 1, 0, 0, 0, 0, 68, 11, 170, 170, 250, 64, 33, 0, 1, 0, 0, 0, 0, 165, 55, 170, 170, 250, 64, 36, 0, 1, 42, 228, 102, 194, 21, 252, 240, 238, 254, 64, 37, 0, 1, 0, 0, 0, 0, 100, 221, 170, 170, 250, 64, 38, 0, 1, 154, 88, 34, 255, 170, 0, 170, 170, 250, 64, 39, 0, 1, 0, 172, 132, 212, 245, 249, 170, 170, 250, 64, 40, 0, 1, 156, 252, 159, 250, 184, 28, 188, 187, 251, 64, 45, 0, 1, 0, 0, 0, 0, 19, 20, 188, 187, 251, 64, 50, 0, 1, 0, 0, 0, 0, 213, 36, 205, 204, 252, 64, 51, 0, 1, 0, 0, 0, 0, 147, 14, 188, 187, 251, 64, 53, 0, 1, 0, 0, 0, 0, 206, 42, 188, 187, 251, 64, 54, 0, 1, 0, 0, 0, 0, 246, 31, 170, 170, 250, 64, 56, 0, 1, 0, 0, 0, 0, 248, 63, 205, 204, 252, 64, 57, 0, 1, 0, 0, 0, 0, 196, 13, 170, 170, 250, 64, 63, 0, 1, 0, 0, 0, 0, 60, 237, 17, 17, 1, 65, 1, 0, 1, 217, 191, 40, 192, 217, 191, 188, 187, 251, 64, 2, 0, 1, 90, 0, 158, 255, 227, 254, 205, 204, 252, 64, 5, 0, 1, 69, 255, 193, 128, 205, 13, 188, 187, 251, 64, 6, 0, 1, 201, 255, 219, 255, 75, 1, 188, 187, 251, 64, 7, 0, 1, 188, 255, 242, 255, 142, 1, 188, 187, 251, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 240, 238, 254, 64, 9, 0, 1, 136, 3, 198, 251, 232, 251, 205, 204, 252, 64, 14, 0, 1, 0, 0, 0, 0, 243, 210, 221, 221, 253, 64, 19, 0, 1, 39, 253, 105, 0, 97, 33, 240, 238, 254, 64, 22, 0, 1, 0, 0, 0, 0, 247, 17, 240, 238, 254, 64, 27, 0, 1, 0, 0, 0, 0, 120, 33, 221, 221, 253, 64, 28, 0, 1, 0, 0, 0, 0, 24, 12, 188, 187, 251, 64, 30, 0, 1, 0, 0, 0, 0, 244, 36, 188, 187, 251, 64, 33, 0, 1, 0, 0, 0, 0, 138, 56, 240, 238, 254, 64, 34, 0, 1, 0, 0, 0, 0, 244, 12, 188, 187, 251, 64, 36, 0, 1, 109, 228, 8, 194, 85, 253, 188, 187, 251, 64, 38, 0, 1, 166, 88, 78, 255, 63, 1, 188, 187, 251, 64, 39, 0, 1, 70, 172, 142, 211, 190, 249, 240, 238, 254, 64, 40, 0, 1, 150, 252, 68, 250, 99, 28, 205, 204, 252, 64, 43, 0, 1, 185, 8, 224, 22, 105, 17, 205, 204, 252, 64, 44, 0, 1, 0, 0, 0, 0, 234, 22, 221, 221, 253, 64, 47, 0, 1, 0, 0, 0, 0, 188, 22, 188, 187, 251, 64, 56, 0, 1, 0, 0, 0, 0, 23, 65, 188, 187, 251, 64, 60, 0, 1, 202, 250, 195, 252, 3, 8, 205, 204, 252, 64, 63, 0, 1, 0, 0, 0, 0, 215, 237, 221, 221, 253, 64, 65, 0, 1, 191, 255, 67, 0, 137, 90, 205, 204, 252, 64, 0, 0, 1, 248, 192, 19, 190, 132, 191, 205, 204, 252, 64, 2, 0, 1, 79, 0, 199, 255, 193, 254, 221, 221, 253, 64, 3, 0, 1, 252, 255, 252, 255, 200, 0, 205, 204, 252, 64, 4, 0, 1, 191, 248, 95, 130, 30, 233, 205, 204, 252, 64, 6, 0, 1, 225, 255, 235, 255, 75, 1, 205, 204, 252, 64, 7, 0, 1, 217, 255, 248, 255, 142, 1, 205, 204, 252, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 205, 204, 252, 64, 10, 0, 1, 230, 79, 138, 250, 77, 99, 240, 238, 254, 64, 11, 0, 1, 71, 176, 140, 3, 92, 99, 221, 221, 253, 64, 13, 0, 1, 225, 5, 181, 69, 61, 3, 221, 221, 253, 64, 15, 0, 1, 146, 181, 243, 5, 23, 3, 0, 0, 0, 65, 16, 0, 1, 122, 82, 119, 41, 191, 251, 240, 238, 254, 64, 24, 0, 1, 0, 0, 0, 0, 150, 20, 0, 0, 0, 65, 30, 0, 1, 0, 0, 0, 0, 227, 38, 136, 136, 0, 65, 31, 0, 1, 0, 0, 0, 0, 173, 31, 205, 204, 252, 64, 33, 0, 1, 0, 0, 0, 0, 91, 57, 205, 204, 252, 64, 36, 0, 1, 75, 228, 169, 193, 248, 253, 205, 204, 252, 64, 38, 0, 1, 18, 89, 163, 255, 145, 1, 205, 204, 252, 64, 39, 0, 1, 116, 172, 239, 210, 154, 249, 17, 17, 1, 65, 41, 0, 1, 106, 0, 27, 1, 20, 43, 205, 204, 252, 64, 42, 0, 1, 205, 4, 49, 3, 152, 40, 205, 204, 252, 64, 45, 0, 1, 0, 0, 0, 0, 82, 20, 205, 204, 252, 64, 48, 0, 1, 0, 0, 0, 0, 63, 22, 221, 221, 253, 64, 50, 0, 1, 0, 0, 0, 0, 94, 37, 221, 221, 253, 64, 53, 0, 1, 0, 0, 0, 0, 128, 43, 240, 238, 254, 64, 54, 0, 1, 0, 0, 0, 0, 111, 32, 205, 204, 252, 64, 56, 0, 1, 0, 0, 0, 0, 207, 65, 205, 204, 252, 64, 60, 0, 1, 167, 250, 184, 252, 2, 8, 0, 0, 0, 65, 0, 0, 1, 245, 192, 41, 190, 2, 191, 221, 221, 253, 64, 2, 0, 1, 68, 0, 240, 255, 159, 254, 240, 238, 254, 64, 4, 0, 1, 212, 248, 97, 130, 22, 233, 240, 238, 254, 64, 5, 0, 1, 191, 255, 184, 128, 117, 13, 221, 221, 253, 64, 6, 0, 1, 249, 255, 251, 255, 75, 1, 221, 221, 253, 64, 7, 0, 1, 247, 255, 254, 255, 142, 1, 221, 221, 253, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 221, 221, 253, 64, 10, 0, 1, 226, 79, 113, 250, 81, 99, 240, 238, 254, 64, 14, 0, 1, 0, 0, 0, 0, 61, 214, 221, 221, 253, 64, 17, 0, 1, 174, 11, 175, 5, 253, 27, 221, 221, 253, 64, 20, 0, 1, 179, 3, 199, 9, 91, 16, 17, 17, 1, 65, 25, 0, 1, 0, 0, 0, 0, 57, 20, 0, 0, 0, 65, 33, 0, 1, 0, 0, 0, 0, 90, 59, 221, 221, 253, 64, 36, 0, 1, 246, 227, 72, 193, 50, 254, 240, 238, 254, 64, 38, 0, 1, 110, 90, 124, 0, 176, 1, 240, 238, 254, 64, 39, 0, 1, 155, 172, 104, 210, 124, 249, 221, 221, 253, 64, 42, 0, 1, 198, 4, 46, 3, 165, 40, 221, 221, 253, 64, 43, 0, 1, 178, 8, 6, 23, 75, 17, 221, 221, 253, 64, 44, 0, 1, 0, 0, 0, 0, 20, 23, 136, 136, 0, 65, 45, 0, 1, 0, 0, 0, 0, 133, 20, 17, 17, 1, 65, 48, 0, 1, 0, 0, 0, 0, 95, 22, 34, 34, 2, 65, 51, 0, 1, 0, 0, 0, 0, 174, 14, 221, 221, 253, 64, 56, 0, 1, 0, 0, 0, 0, 59, 66, 17, 17, 1, 65, 57, 0, 1, 0, 0, 0, 0, 225, 13, 221, 221, 253, 64, 59, 0, 1, 0, 0, 0, 0, 154, 237, 221, 221, 253, 64, 60, 0, 1, 131, 250, 173, 252, 4, 8, 0, 0, 0, 65, 61, 0, 1, 0, 0, 0, 0, 130, 90, 240, 238, 254, 64, 63, 0, 1, 0, 0, 0, 0, 131, 238, 221, 221, 253, 64, 64, 0, 1, 57, 10, 146, 255, 76, 15, 240, 238, 254, 64, 2, 0, 1, 57, 0, 25, 0, 124, 254, 240, 238, 254, 64, 3, 0, 1, 9, 0, 10, 0, 200, 0, 240, 238, 254, 64, 6, 0, 1, 16, 0, 11, 0, 75, 1, 0, 0, 0, 65, 7, 0, 1, 50, 0, 10, 0, 142, 1, 240, 238, 254, 64, 8, 0, 1, 227, 253, 37, 0, 123, 11, 240, 238, 254, 64, 10, 0, 1, 223, 79, 91, 250, 85, 99, 0, 0, 0, 65, 13, 0, 1, 23, 5, 77, 70, 255, 4, 17, 17, 1, 65, 15, 0, 1, 145, 180, 79, 4, 32, 3, 240, 238, 254, 64, 17, 0, 1, 68, 11, 188, 5, 247, 27, 240, 238, 254, 64, 18, 0, 1, 210, 1, 89, 255, 60, 40, 17, 17, 1, 65, 19, 0, 1, 152, 252, 237, 255, 226, 34, 136, 136, 0, 65, 20, 0, 1, 204, 2, 233, 8, 153, 17, 0, 0, 0, 65, 28, 0, 1, 0, 0, 0, 0, 132, 12, 0, 0, 0, 65, 36, 0, 1, 39, 227, 127, 192, 241, 253, 136, 136, 0, 65, 42, 0, 1, 195, 4, 45, 3, 170, 40, 136, 136, 0, 65, 43, 0, 1, 176, 8, 20, 23, 63, 17, 34, 34, 2, 65, 44, 0, 1, 0, 0, 0]).concat([0, 21, 23, 222, 221, 5, 65, 47, 0, 1, 0, 0, 0, 0, 130, 22, 154, 153, 1, 65, 50, 0, 1, 0, 0, 0, 0, 98, 37, 17, 17, 1, 65, 53, 0, 1, 0, 0, 0, 0, 139, 43, 0, 0, 0, 65, 56, 0, 1, 0, 0, 0, 0, 115, 66, 0, 0, 0, 65, 59, 0, 1, 0, 0, 0, 0, 95, 237, 240, 238, 254, 64, 60, 0, 1, 92, 250, 163, 252, 13, 8, 154, 153, 1, 65, 64, 0, 1, 32, 10, 68, 255, 36, 14, 240, 238, 254, 64, 65, 0, 1, 195, 255, 63, 0, 134, 90, 0, 0, 0, 65, 2, 0, 1, 46, 0, 66, 0, 90, 254, 136, 136, 0, 65, 3, 0, 1, 37, 0, 39, 0, 200, 0, 17, 17, 1, 65, 4, 0, 1, 234, 248, 100, 130, 11, 233, 0, 0, 0, 65, 5, 0, 1, 255, 255, 179, 128, 74, 13, 0, 0, 0, 65, 6, 0, 1, 40, 0, 27, 0, 75, 1, 0, 0, 0, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 0, 0, 0, 65, 9, 0, 1, 131, 3, 200, 251, 254, 251, 0, 0, 0, 65, 10, 0, 1, 220, 79, 72, 250, 88, 99, 17, 17, 1, 65, 11, 0, 1, 46, 176, 138, 3, 72, 99, 17, 17, 1, 65, 14, 0, 1, 0, 0, 0, 0, 106, 218, 154, 153, 1, 65, 17, 0, 1, 8, 10, 227, 5, 229, 27, 34, 34, 2, 65, 18, 0, 1, 221, 0, 16, 255, 61, 41, 0, 0, 0, 65, 21, 0, 1, 0, 0, 0, 0, 124, 20, 136, 136, 0, 65, 22, 0, 1, 0, 0, 0, 0, 84, 18, 187, 187, 3, 65, 24, 0, 1, 0, 0, 0, 0, 124, 21, 136, 136, 0, 65, 27, 0, 1, 0, 0, 0, 0, 16, 34, 17, 17, 1, 65, 34, 0, 1, 0, 0, 0, 0, 21, 13, 0, 0, 0, 65, 37, 0, 1, 0, 0, 0, 0, 162, 223, 136, 136, 0, 65, 38, 0, 1, 191, 91, 49, 1, 117, 1, 17, 17, 1, 65, 39, 0, 1, 147, 172, 131, 210, 130, 249, 0, 0, 0, 65, 40, 0, 1, 150, 252, 67, 250, 98, 28, 0, 0, 0, 65, 54, 0, 1, 0, 0, 0, 0, 114, 32, 17, 17, 1, 65, 60, 0, 1, 224, 249, 132, 252, 40, 8, 0, 0, 0, 65, 63, 0, 1, 0, 0, 0, 0, 223, 238, 0, 0, 0, 65, 65, 0, 1, 199, 255, 59, 0, 132, 90, 136, 136, 0, 65, 0, 0, 1, 245, 192, 49, 190, 210, 190, 136, 136, 0, 65, 2, 0, 1, 34, 0, 107, 0, 55, 254, 17, 17, 1, 65, 5, 0, 1, 132, 0, 171, 128, 244, 12, 17, 17, 1, 65, 6, 0, 1, 88, 0, 60, 0, 75, 1, 136, 136, 0, 65, 7, 0, 1, 80, 0, 16, 0, 142, 1, 136, 136, 0, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 136, 136, 0, 65, 9, 0, 1, 131, 3, 209, 251, 16, 252, 136, 136, 0, 65, 10, 0, 1, 217, 79, 55, 250, 91, 99, 17, 17, 1, 65, 13, 0, 1, 116, 4, 189, 70, 57, 6, 136, 136, 0, 65, 16, 0, 1, 167, 82, 159, 41, 177, 251, 136, 136, 0, 65, 21, 0, 1, 0, 0, 0, 0, 173, 20, 34, 34, 2, 65, 28, 0, 1, 0, 0, 0, 0, 26, 13, 136, 136, 0, 65, 30, 0, 1, 0, 0, 0, 0, 63, 39, 154, 153, 1, 65, 33, 0, 1, 0, 0, 0, 0, 185, 60, 136, 136, 0, 65, 36, 0, 1, 247, 226, 23, 192, 192, 253, 136, 136, 0, 65, 37, 0, 1, 0, 0, 0, 0, 157, 225, 205, 204, 4, 65, 40, 0, 1, 152, 252, 93, 250, 122, 28, 136, 136, 0, 65, 54, 0, 1, 0, 0, 0, 0, 109, 32, 17, 17, 1, 65, 56, 0, 1, 0, 0, 0, 0, 77, 66, 154, 153, 1, 65, 59, 0, 1, 0, 0, 0, 0, 246, 236, 154, 153, 1, 65, 61, 0, 1, 0, 0, 0, 0, 132, 90, 17, 17, 1, 65, 63, 0, 1, 0, 0, 0, 0, 164, 239, 34, 34, 2, 65, 65, 0, 1, 216, 255, 41, 0, 130, 90, 154, 153, 1, 65, 0, 0, 1, 246, 192, 66, 190, 110, 190, 17, 17, 1, 65, 2, 0, 1, 23, 0, 149, 0, 20, 254, 17, 17, 1, 65, 3, 0, 1, 51, 0, 53, 0, 200, 0, 17, 17, 1, 65, 7, 0, 1, 111, 0, 22, 0, 142, 1, 17, 17, 1, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 154, 153, 1, 65, 9, 0, 1, 143, 3, 249, 251, 45, 252, 17, 17, 1, 65, 10, 0, 1, 214, 79, 39, 250, 93, 99, 51, 51, 3, 65, 16, 0, 1, 69, 83, 35, 42, 133, 251, 171, 170, 2, 65, 20, 0, 1, 1, 2, 42, 8, 177, 18, 17, 17, 1, 65, 21, 0, 1, 0, 0, 0, 0, 216, 20, 34, 34, 2, 65, 22, 0, 1, 0, 0, 0, 0, 186, 18, 17, 17, 1, 65, 27, 0, 1, 0, 0, 0, 0, 79, 34, 17, 17, 1, 65, 30, 0, 1, 0, 0, 0, 0, 144, 39, 154, 153, 1, 65, 31, 0, 1, 0, 0, 0, 0, 172, 31, 17, 17, 1, 65, 36, 0, 1, 15, 227, 174, 191, 169, 253, 17, 17, 1, 65, 37, 0, 1, 0, 0, 0, 0, 73, 227, 17, 17, 1, 65, 38, 0, 1, 36, 92, 94, 1, 82, 1, 34, 34, 2, 65, 42, 0, 1, 197, 4, 46, 3, 165, 40, 51, 51, 3, 65, 43, 0, 1, 180, 8, 251, 22, 83, 17, 154, 153, 1, 65, 45, 0, 1, 0, 0, 0, 0, 122, 20, 34, 34, 2, 65, 54, 0, 1, 0, 0, 0, 0, 95, 32, 85, 85, 5, 65, 1, 0, 1, 236, 191, 21, 192, 236, 191, 51, 51, 3, 65, 2, 0, 1, 231, 255, 59, 1, 136, 253, 34, 34, 2, 65, 3, 0, 1, 79, 0, 82, 0, 200, 0, 171, 170, 2, 65, 4, 0, 1, 248, 248, 105, 130, 2, 233, 171, 170, 2, 65, 5, 0, 1, 90, 1, 160, 128, 118, 12, 34, 34, 2, 65, 6, 0, 1, 136, 0, 93, 0, 75, 1, 154, 153, 1, 65, 7, 0, 1, 141, 0, 28, 0, 142, 1, 154, 153, 1, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 34, 34, 2, 65, 10, 0, 1, 210, 79, 14, 250, 97, 99, 154, 153, 1, 65, 11, 0, 1, 43, 176, 137, 3, 70, 99, 171, 170, 2, 65, 13, 0, 1, 185, 3, 44, 71, 66, 7, 154, 153, 1, 65, 14, 0, 1, 0, 0, 0, 0, 167, 219, 187, 187, 3, 65, 15, 0, 1, 96, 179, 63, 3, 198, 2, 187, 187, 3, 65, 19, 0, 1, 47, 252, 146, 255, 245, 35, 154, 153, 1, 65, 21, 0, 1, 0, 0, 0, 0, 255, 20, 154, 153, 1, 65, 25, 0, 1, 0, 0, 0, 0, 100, 20, 154, 153, 1, 65, 27, 0, 1, 0, 0, 0, 0, 134, 34, 34, 34, 2, 65, 30, 0, 1, 0, 0, 0, 0, 20, 40, 51, 51, 3, 65, 34, 0, 1, 0, 0, 0, 0, 47, 13, 154, 153, 1, 65, 36, 0, 1, 163, 227, 68, 191, 225, 253, 154, 153, 1, 65, 37, 0, 1, 0, 0, 0, 0, 130, 228, 154, 153, 1, 65, 38, 0, 1, 45, 92, 84, 1, 62, 1, 171, 170, 2, 65, 39, 0, 1, 140, 172, 156, 210, 136, 249, 171, 170, 2, 65, 41, 0, 1, 107, 0, 30, 1, 19, 43, 154, 153, 1, 65, 48, 0, 1, 0, 0, 0, 0, 93, 22, 171, 170, 2, 65, 53, 0, 1, 0, 0, 0, 0, 121, 43, 171, 170, 2, 65, 56, 0, 1, 0, 0, 0, 0, 48, 66, 154, 153, 1, 65, 57, 0, 1, 0, 0, 0, 0, 223, 13, 154, 153, 1, 65, 60, 0, 1, 179, 249, 122, 252, 56, 8, 69, 68, 4, 65, 63, 0, 1, 0, 0, 0, 0, 105, 242, 171, 170, 2, 65, 0, 0, 1, 248, 192, 85, 190, 5, 190, 34, 34, 2, 65, 7, 0, 1, 171, 0, 34, 0, 142, 1, 34, 34, 2, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 34, 34, 2, 65, 9, 0, 1, 156, 3, 22, 252, 56, 252, 171, 170, 2, 65, 11, 0, 1, 42, 176, 133, 3, 69, 99, 51, 51, 3, 65, 14, 0, 1, 0, 0, 0, 0, 4, 223, 171, 170, 2, 65, 17, 0, 1, 156, 9, 239, 5, 223, 27, 34, 34, 2, 65, 21, 0, 1, 0, 0, 0, 0, 32, 21, 51, 51, 3, 65, 25, 0, 1, 0, 0, 0, 0, 197, 20, 171, 170, 2, 65, 27, 0, 1, 0, 0, 0, 0, 224, 34, 171, 170, 2, 65, 31, 0, 1, 0, 0, 0, 0, 170, 31, 187, 187, 3, 65, 33, 0, 1, 0, 0, 0, 0, 220, 61, 171, 170, 2, 65, 36, 0, 1, 114, 229, 113, 190, 157, 254, 171, 170, 2, 65, 37, 0, 1, 0, 0, 0, 0, 69, 230, 171, 170, 2, 65, 38, 0, 1, 203, 91, 245, 0, 32, 1, 34, 34, 2, 65, 45, 0, 1, 0, 0, 0, 0, 119, 20, 34, 34, 2, 65, 48, 0, 1, 0, 0, 0, 0, 91, 22, 34, 34, 2, 65, 50, 0, 1, 0, 0, 0, 0, 95, 37, 171, 170, 2, 65, 57, 0, 1, 0, 0, 0, 0, 219, 13, 171, 170, 2, 65, 59, 0, 1, 0, 0, 0, 0, 168, 236, 34, 34, 2, 65, 60, 0, 1, 134, 249, 113, 252, 73, 8, 69, 68, 4, 65, 61, 0, 1, 0, 0, 0, 0, 130, 90, 51, 51, 3, 65, 64, 0, 1, 254, 9, 26, 255, 81, 13, 171, 170, 2, 65, 3, 0, 1, 93, 0, 96, 0, 200, 0, 51, 51, 3, 65, 6, 0, 1, 185, 0, 126, 0, 75, 1, 171, 170, 2, 65, 7, 0, 1, 201, 0, 40, 0, 142, 1, 171, 170, 2, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 171, 170, 2, 65, 9, 0, 1, 171, 3, 56, 252, 64, 252, 187, 187, 3, 65, 10, 0, 1, 206, 79, 241, 249, 101, 99, 171, 170, 2, 65, 18, 0, 1, 188, 0, 6, 255, 95, 41, 171, 170, 2, 65, 21, 0, 1, 0, 0, 0, 0, 61, 21, 187, 187, 3, 65, 22, 0, 1, 0, 0, 0, 0, 254, 18, 171, 170, 2, 65, 28, 0, 1, 0, 0, 0, 0, 53, 13, 171, 170, 2, 65, 30, 0, 1, 0, 0, 0, 0, 74, 40, 171, 170, 2, 65, 42, 0, 1, 198, 4, 47, 3, 163, 40, 187, 187, 3, 65, 44, 0, 1, 0, 0, 0, 0, 254, 22, 187, 187, 3, 65, 45, 0, 1, 0, 0, 0, 0, 99, 20, 171, 170, 2, 65, 48, 0, 1, 0, 0, 0, 0, 87, 22, 171, 170, 2, 65, 50, 0, 1, 0, 0, 0, 0, 89, 37, 51, 51, 3, 65, 51, 0, 1, 0, 0, 0, 0, 166, 14, 69, 68, 4, 65, 54, 0, 1, 0, 0, 0, 0, 63, 32, 171, 170, 2, 65, 60, 0, 1, 88, 249, 103, 252, 88, 8, 187, 187, 3, 65, 65, 0, 1, 229, 255, 28, 0, 133, 90, 51, 51, 3, 65, 0, 0, 1, 250, 192, 95, 190, 207, 189, 187, 187, 3, 65, 3, 0, 1, 121, 0, 125, 0, 200, 0, 51, 51, 3, 65, 4, 0, 1, 251, 248, 106, 130, 255, 232, 51, 51, 3, 65, 5, 0, 1, 166, 1, 158, 128, 76, 12, 51, 51, 3, 65, 7, 0, 1, 231, 0, 46, 0, 142, 1, 51, 51, 3, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 69, 68, 4, 65, 9, 0, 1, 232, 3, 180, 252, 82, 252, 51, 51, 3, 65, 11, 0, 1, 41, 176, 129, 3, 68, 99, 205, 204, 4, 65, 13, 0, 1, 2, 3, 125, 71, 155, 7, 51, 51, 3, 65, 17, 0, 1, 111, 9, 244, 5, 221, 27, 51, 51, 3, 65, 18, 0, 1, 159, 0, 253, 254, 126, 41, 51, 51, 3, 65, 20, 0, 1, 220, 1, 9, 8, 228, 18, 187, 187, 3, 65, 21, 0, 1, 0, 0, 0, 0, 108, 21, 51, 51, 3, 65, 27, 0, 1, 0, 0, 0, 0, 5, 35, 51, 51, 3, 65, 28, 0, 1, 0, 0, 0, 0, 76, 13, 69, 68, 4, 65, 30, 0, 1, 0, 0, 0, 0, 197, 40, 51, 51, 3, 65, 31, 0, 1, 0, 0, 0, 0, 169, 31, 69, 68, 4, 65, 36, 0, 1, 235, 232, 69, 189, 220, 255, 69, 68, 4, 65, 37, 0, 1, 0, 0, 0, 0, 6, 232, 69, 68, 4, 65, 38, 0, 1, 184, 90, 16, 0, 227, 0, 51, 51, 3, 65, 39, 0, 1, 135, 172, 172, 210, 139, 249, 51, 51, 3, 65, 41, 0, 1, 107, 0, 33, 1, 19, 43, 187, 187, 3, 65, 42, 0, 1, 201, 4, 48, 3, 158, 40, 205, 204, 4, 65, 48, 0, 1, 0, 0, 0, 0, 58, 22, 187, 187, 3, 65, 50, 0, 1, 0, 0, 0, 0, 68, 37, 187, 187, 3, 65, 53, 0, 1, 0, 0, 0, 0, 93, 43, 85, 85, 5, 65, 56, 0, 1, 0, 0, 0, 0, 149, 65, 69, 68, 4, 65, 57, 0, 1, 0, 0, 0, 0, 201, 13, 51, 51, 3, 65, 59, 0, 1, 0, 0, 0, 0, 128, 236, 51, 51, 3, 65, 60, 0, 1, 41, 249, 93, 252, 103, 8, 69, 68, 4, 65, 0, 0, 1, 254, 192, 115, 190, 97, 189, 69, 68, 4, 65, 2, 0, 1, 199, 255, 141, 1, 66, 253, 187, 187, 3, 65, 4, 0, 1, 253, 248, 108, 130, 252, 232, 187, 187, 3, 65, 5, 0, 1, 246, 1, 155, 128, 35, 12, 187, 187, 3, 65, 6, 0, 1, 209, 0, 143, 0, 75, 1, 187, 187, 3, 65, 7, 0, 1, 5, 1, 52, 0, 142, 1, 187, 187, 3, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 187, 187, 3, 65, 11, 0, 1, 40, 176, 123, 3, 67, 99, 69, 68, 4, 65, 14, 0, 1, 0, 0, 0, 0, 7, 225, 187, 187, 3, 65, 16, 0, 1, 90, 83, 50, 42, 127, 251, 187, 187, 3, 65, 17, 0, 1, 72, 9, 248, 5, 219, 27, 187, 187, 3, 65, 18, 0, 1, 133, 0, 245, 254, 153, 41, 85, 85, 5, 65, 20, 0, 1, 110, 1, 165, 7, 128, 19, 69, 68, 4, 65, 25, 0, 1, 0, 0, 0, 0, 243, 20, 205, 204, 4, 65, 27, 0, 1, 0, 0, 0, 0, 90, 35, 205, 204, 4, 65, 28, 0, 1, 0, 0, 0, 0, 130, 13, 69, 68, 4, 65, 31, 0, 1, 0, 0, 0, 0, 166, 31, 205, 204, 4, 65, 34, 0, 1, 0, 0, 0, 0, 58, 13, 187, 187, 3, 65, 39, 0, 1, 129, 172, 195, 210, 145, 249, 205, 204, 4, 65, 41, 0, 1, 109, 0, 43, 1, 18, 43, 187, 187, 3, 65, 43, 0, 1, 182, 8, 242, 22, 90, 17, 69, 68, 4, 65, 51, 0, 1, 0, 0, 0, 0, 152, 14, 69, 68, 4, 65, 59, 0, 1, 0, 0, 0, 0, 46, 236, 69, 68, 4, 65, 60, 0, 1, 201, 248, 74, 252, 135, 8, 187, 187, 3, 65, 64, 0, 1, 241, 9, 12, 255, 6, 13, 205, 204, 4, 65, 3, 0, 1, 149, 0, 154, 0, 200, 0, 69, 68, 4, 65, 4, 0, 1, 255, 248, 110, 130, 250, 232, 85, 85, 5, 65, 5, 0, 1, 248, 2, 150, 128, 168, 11, 205, 204, 4, 65, 6, 0, 1, 0, 1, 175, 0, 75, 1, 69, 68, 4, 65, 7, 0, 1, 35, 1, 58, 0, 142, 1, 69, 68, 4, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 69, 68, 4, 65, 10, 0, 1, 205, 79, 234, 249, 101, 99, 85, 85, 5, 65, 11, 0, 1, 36, 176, 101, 3, 62, 99, 69, 68, 4, 65, 15, 0, 1, 37, 179, 31, 3, 171, 2, 222, 221, 5, 65, 16, 0, 1, 159, 83, 94, 42, 111, 251, 69, 68, 4, 65, 17, 0, 1, 37, 9, 252, 5, 218, 27, 222, 221, 5, 65, 18, 0, 1, 52, 0, 219, 254, 237, 41, 85, 85, 5, 65, 19, 0, 1, 7, 252, 112, 255, 90, 36, 69, 68, 4, 65, 21, 0, 1, 0, 0, 0, 0, 127, 21, 69, 68, 4, 65, 22, 0, 1, 0, 0, 0, 0, 15, 19, 205, 204, 4, 65, 24, 0, 1, 0, 0, 0, 0, 153, 21, 85, 85, 5, 65, 33, 0, 1, 0, 0, 0, 0, 102, 62, 69, 68, 4, 65, 39, 0, 1, 121, 172, 222, 210, 151, 249, 85, 85, 5, 65, 42, 0, 1, 208, 4, 50, 3, 145, 40, 85, 85, 5, 65, 43, 0, 1, 188, 8, 203, 22, 120, 17, 205, 204, 4, 65, 44, 0, 1, 0, 0, 0, 0, 228, 22, 85, 85, 5, 65, 45, 0, 1, 0, 0, 0, 0, 62, 20, 205, 204, 4, 65, 50, 0, 1, 0, 0, 0, 0, 35, 37, 239, 238, 6, 65, 53, 0, 1, 0, 0, 0, 0, 199, 42, 69, 68, 4, 65, 64, 0, 1, 226, 9, 255, 254, 184, 12, 69, 68, 4, 65, 65, 0, 1, 233, 255, 23, 0, 132, 90, 205, 204, 4, 65, 0, 0, 1, 0, 193, 126, 190, 41, 189, 85, 85, 5, 65, 2, 0, 1, 159, 255, 223, 1, 253, 252, 205, 204, 4, 65, 4, 0, 1, 2, 249, 111, 130, 247, 232, 205, 204, 4, 65, 7, 0, 1, 65, 1, 64, 0, 142, 1, 205, 204, 4, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 85, 85, 5, 65, 9, 0, 1, 24, 4, 20, 253, 89, 252, 205, 204, 4, 65, 10, 0, 1, 204, 79, 227, 249, 102, 99, 102, 102, 6, 65, 14, 0, 1, 0, 0, 0, 0, 196, 228, 222, 221, 5, 65, 15, 0, 1, 116, 178, 213, 2, 82, 2, 85, 85, 5, 65, 17, 0, 1, 232, 8, 2, 6, 215, 27, 222, 221, 5, 65, 21, 0, 1, 0, 0, 0, 0, 174, 21, 205, 204, 4, 65, 22, 0, 1, 0, 0, 0, 0, 30, 19, 205, 204, 4, 65, 25, 0, 1, 0, 0, 0, 0, 7, 21, 205, 204, 4, 65, 30, 0, 1, 0, 0, 0, 0, 229, 40, 239, 238, 6, 65, 31, 0, 1, 0, 0, 0, 0, 157, 31, 102, 102, 6, 65, 36, 0, 1, 95, 238, 223, 187, 141, 1, 102, 102, 6, 65, 37, 0, 1, 0, 0, 0, 0, 94, 233, 102, 102, 6, 65, 38, 0, 1, 188, 88, 130, 254, 119, 0, 102, 102, 6, 65, 39, 0, 1, 79, 172, 110, 211, 183, 249, 85, 85, 5, 65, 51, 0, 1, 0, 0, 0, 0, 133, 14, 205, 204, 4, 65, 54, 0, 1, 0, 0, 0, 0, 49, 32, 205, 204, 4, 65, 57, 0, 1, 0, 0, 0, 0, 192, 13, 205, 204, 4, 65, 59, 0, 1, 0, 0, 0, 0, 5, 236, 205, 204, 4, 65, 60, 0, 1, 153, 248, 65, 252, 151, 8, 17, 17, 9, 65, 61, 0, 1, 0, 0, 0, 0, 135, 90, 205, 204, 4, 65, 63, 0, 1, 0, 0, 0, 0, 243, 242, 222, 221, 5, 65, 64, 0, 1, 180, 9, 213, 254, 188, 11, 154, 153, 9, 65, 65, 0, 1, 0, 0, 0, 0, 130, 90, 85, 85, 5, 65, 0, 0, 1, 2, 193, 136, 190, 241, 188, 222, 221, 5, 65, 3, 0, 1, 176, 0, 182, 0, 200, 0, 85, 85, 5, 65, 4, 0, 1, 3, 249, 113, 130, 245, 232, 85, 85, 5, 65, 6, 0, 1, 24, 1, 191, 0, 75, 1, 222, 221, 5, 65, 7, 0, 1, 124, 1, 76, 0, 142, 1, 85, 85, 5, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 6, 65, 10, 0, 1, 202, 79, 209, 249, 104, 99, 85, 85, 5, 65, 13, 0, 1, 219, 2, 138, 71, 149, 7, 222, 221, 5, 65, 22, 0, 1, 0, 0, 0, 0, 56, 19, 222, 221, 5, 65, 24, 0, 1, 0, 0, 0, 0, 176, 21, 222, 221, 5, 65, 25, 0, 1, 0, 0, 0, 0, 41, 21, 222, 221, 5, 65, 27, 0, 1, 0, 0, 0, 0, 133, 35, 85, 85, 5, 65, 28, 0, 1, 0, 0, 0, 0, 145, 13, 102, 102, 6, 65, 30, 0, 1, 0, 0, 0, 0, 55, 41, 239, 238, 6, 65, 34, 0, 1, 0, 0, 0, 0, 68, 13, 85, 85, 5, 65, 40, 0, 1, 152, 252, 99, 250, 128, 28, 222, 221, 5, 65, 41, 0, 1, 110, 0, 52, 1, 16, 43, 102, 102, 6, 65, 44, 0, 1, 0, 0, 0, 0, 178, 22, 85, 85, 5, 65, 48, 0, 1, 0, 0, 0, 0, 48, 22, 239, 238, 6, 65, 50, 0, 1, 0, 0, 0, 0, 208, 36, 222, 221, 5, 65, 54, 0, 1, 0, 0, 0, 0, 19, 32, 85, 85, 5, 65, 57, 0, 1, 0, 0, 0, 0, 183, 13, 85, 85, 5, 65, 59, 0, 1, 0, 0, 0, 0, 220, 235, 85, 85, 5, 65, 60, 0, 1, 105, 248, 55, 252, 167, 8, 85, 85, 5, 65, 63, 0, 1, 0, 0, 0, 0, 132, 243, 102, 102, 6, 65, 0, 0, 1, 8, 193, 158, 190, 130, 188, 239, 238, 6, 65, 1, 0, 1, 255, 191, 2, 192, 255, 191, 102, 102, 6, 65, 2, 0, 1, 115, 255, 47, 2, 184, 252, 102, 102, 6, 65, 4, 0, 1, 5, 249, 117, 130, 241, 232, 222, 221, 5, 65, 5, 0, 1, 85, 3, 149, 128, 127, 11, 222, 221, 5, 65, 6, 0, 1, 48, 1, 207, 0, 75, 1, 222, 221, 5, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 120, 119, 7, 65, 9, 0, 1, 123, 4, 218, 253, 102, 252, 102, 102, 6, 65, 11, 0, 1, 32, 176, 83, 3, 58, 99, 222, 221, 5, 65, 13, 0, 1, 181, 2, 149, 71, 137, 7, 120, 119, 7, 65, 17, 0, 1, 124, 8, 12, 6, 211, 27, 222, 221, 5, 65, 19, 0, 1, 252, 251, 103, 255, 119, 36, 222, 221, 5, 65, 20, 0, 1, 87, 1, 145, 7, 160, 19, 102, 102, 6, 65, 28, 0, 1, 0, 0, 0, 0, 171, 13, 222, 221, 5, 65, 33, 0, 1, 0, 0, 0, 0, 140, 62, 222, 221, 5, 65, 40, 0, 1, 152, 252, 105, 250, 134, 28, 239, 238, 6, 65, 42, 0, 1, 217, 4, 53, 3, 129, 40, 102, 102, 6, 65, 43, 0, 1, 193, 8, 172, 22, 145, 17, 239, 238, 6, 65, 45, 0, 1, 0, 0, 0, 0, 16, 20, 222, 221, 5, 65, 48, 0, 1, 0, 0, 0, 0, 37, 22, 120, 119, 7, 65, 51, 0, 1, 0, 0, 0, 0, 87, 14, 102, 102, 6, 65, 56, 0, 1, 0, 0, 0, 0, 60, 65, 239, 238, 6, 65, 57, 0, 1, 0, 0, 0, 0, 151, 13, 222, 221, 5, 65, 59, 0, 1, 0, 0, 0, 0, 178, 235, 222, 221, 5, 65, 60, 0, 1, 56, 248, 46, 252, 183, 8, 0, 0, 8, 65, 63, 0, 1, 0, 0, 0, 0, 224, 246, 102, 102, 6, 65, 3, 0, 1, 190, 0, 196, 0, 200, 0, 120, 119, 7, 65, 5, 0, 1, 135, 4, 149, 128, 6, 11, 102, 102, 6, 65, 6, 0, 1, 71, 1, 223, 0, 75, 1, 102, 102, 6, 65, 7, 0, 1, 154, 1, 81, 0, 142, 1, 102, 102, 6, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 102, 102, 6, 65, 13, 0, 1, 143, 2, 159, 71, 124, 7, 239, 238, 6, 65, 15, 0, 1, 254, 177, 172, 2, 19, 2, 102, 102, 6, 65, 16, 0, 1, 174, 83, 102, 42, 108, 251, 102, 102, 6, 65, 18, 0, 1, 35, 0, 214, 254, 255, 41, 102, 102, 6, 65, 19, 0, 1, 241, 251, 93, 255, 147, 36, 102, 102, 6, 65, 20, 0, 1, 66, 1, 126, 7, 191, 19, 0, 0, 8, 65, 21, 0, 1, 0, 0, 0, 0, 231, 21, 239, 238, 6, 65, 22, 0, 1, 0, 0, 0, 0, 81, 19, 0, 0, 8, 65, 24, 0, 1, 0, 0, 0, 0, 221, 21, 120, 119, 7, 65, 25, 0, 1, 0, 0, 0, 0, 90, 21, 102, 102, 6, 65, 27, 0, 1, 0, 0, 0, 0, 154, 35, 120, 119, 7, 65, 33, 0, 1, 0, 0, 0, 0, 251, 62, 136, 136, 8, 65, 40, 0, 1, 154, 252, 140, 250, 166, 28, 0, 0, 8, 65, 41, 0, 1, 114, 0, 73, 1, 13, 43, 0, 0, 8, 65, 47, 0, 1, 0, 0, 0, 0, 77, 22, 239, 238, 6, 65, 48, 0, 1, 0, 0, 0, 0, 13, 22, 239, 238, 6, 65, 54, 0, 1, 0, 0, 0, 0, 242, 31, 102, 102, 6, 65, 59, 0, 1, 0, 0, 0, 0, 137, 235, 102, 102, 6, 65, 60, 0, 1, 8, 248, 37, 252, 198, 8, 239, 238, 6, 65, 64, 0, 1, 149, 9, 185, 254, 255, 10, 120, 119, 7, 65, 0, 0, 1, 13, 193, 179, 190, 20, 188, 0, 0, 8, 65, 2, 0, 1, 44, 255, 163, 2, 83, 252, 120, 119, 7, 65, 3, 0, 1, 216, 0, 224, 0, 200, 0, 0, 0, 8, 65, 4, 0, 1, 12, 249, 122, 130, 236, 232, 0, 0, 8, 65, 6, 0, 1, 139, 1, 14, 1, 75, 1, 120, 119, 7, 65, 7, 0, 1, 211, 1, 93, 0, 142, 1, 239, 238, 6, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 120, 119, 7, 65, 10, 0, 1, 201, 79, 197, 249, 106, 99, 239, 238, 6, 65, 11, 0, 1, 31, 176, 73, 3, 56, 99, 239, 238, 6, 65, 13, 0, 1, 104, 2, 168, 71, 111, 7, 120, 119, 7, 65, 14, 0, 1, 0, 0, 0, 0, 157, 230, 136, 136, 8, 65, 16, 0, 1, 238, 83, 141, 42, 94, 251, 0, 0, 8, 65, 18, 0, 1, 237, 255, 196, 254, 55, 42, 239, 238, 6, 65, 19, 0, 1, 230, 251, 84, 255, 174, 36, 120, 119, 7, 65, 20, 0, 1, 22, 1, 87, 7, 254, 19, 0, 0, 8, 65, 27, 0, 1, 0, 0, 0, 0, 218, 35, 120, 119, 7, 65, 28, 0, 1, 0, 0, 0, 0, 198, 13, 136, 136, 8, 65, 30, 0, 1, 0, 0, 0, 0, 169, 41, 239, 238, 6, 65, 36, 0, 1, 209, 239, 142, 187, 248, 1, 120, 119, 7, 65, 37, 0, 1, 0, 0, 0, 0, 218, 233, 120, 119, 7, 65, 38, 0, 1, 159, 87, 169, 253, 61, 0, 0, 0, 8, 65, 39, 0, 1, 43, 172, 234, 211, 211, 249, 239, 238, 6, 65, 43, 0, 1, 196, 8, 155, 22, 158, 17, 120, 119, 7, 65, 44, 0, 1, 0, 0, 0, 0, 142, 22, 136, 136, 8, 65, 56, 0, 1, 0, 0, 0, 0, 125, 64, 239, 238, 6, 65, 59, 0, 1, 0, 0, 0, 0, 97, 235, 120, 119, 7, 65, 60, 0, 1, 170, 247, 17, 252, 227, 8, 120, 119, 7, 65, 1, 0, 1, 6, 192, 251, 191, 6, 192, 120, 119, 7, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 120, 119, 7, 65, 11, 0, 1, 29, 176, 63, 3, 54, 99, 120, 119, 7, 65, 13, 0, 1, 64, 2, 177, 71, 101, 7, 120, 119, 7, 65, 15, 0, 1, 196, 177, 150, 2, 244, 1, 17, 17, 9, 65, 19, 0, 1, 179, 251, 40, 255, 49, 37, 0, 0, 8, 65, 22, 0, 1, 0, 0, 0, 0, 107, 19, 154, 153, 9, 65, 31, 0, 1, 0, 0, 0, 0, 149, 31, 0, 0, 8, 65, 34, 0, 1, 0, 0, 0, 0, 73, 13, 154, 153, 9, 65, 36, 0, 1, 251, 246, 39, 186, 231, 3, 154, 153, 9, 65, 42, 0, 1, 232, 4, 59, 3, 102, 40, 136, 136, 8, 65, 43, 0, 1, 204, 8, 105, 22, 197, 17, 0, 0, 8, 65, 45, 0, 1, 0, 0, 0, 0, 239, 19, 0, 0, 8, 65, 48, 0, 1, 0, 0, 0, 0, 245, 21, 136, 136, 8, 65, 50, 0, 1, 0, 0, 0, 0, 141, 36, 120, 119, 7, 65, 53, 0, 1, 0, 0, 0, 0, 170, 42, 0, 0, 8, 65, 54, 0, 1, 0, 0, 0, 0, 208, 31, 136, 136, 8, 65, 57, 0, 1, 0, 0, 0, 0, 118, 13, 0, 0, 8, 65, 59, 0, 1, 0, 0, 0, 0, 20, 235, 0, 0, 8, 65, 64, 0, 1, 118, 9, 154, 254, 45, 10, 136, 136, 8, 65, 0, 0, 1, 18, 193, 200, 190, 169, 187, 17, 17, 9, 65, 1, 0, 1, 26, 192, 231, 191, 26, 192, 0, 0, 8, 65, 3, 0, 1, 229, 0, 237, 0, 200, 0, 0, 0, 8, 65, 5, 0, 1, 249, 4, 150, 128, 222, 10, 0, 0, 8, 65, 7, 0, 1, 239, 1, 98, 0, 142, 1, 0, 0, 8, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 136, 136, 8, 65, 9, 0, 1, 167, 4, 53, 254, 113, 252, 136, 136, 8, 65, 10, 0, 1, 199, 79, 184, 249, 107, 99, 0, 0, 8, 65, 11, 0, 1, 27, 176, 53, 3, 51, 99, 0, 0, 8, 65, 13, 0, 1, 23, 2, 186, 71, 98, 7, 0, 0, 8, 65, 14, 0, 1, 0, 0, 0, 0, 143, 231, 0, 0, 8, 65, 15, 0, 1, 137, 177, 125, 2, 214, 1, 17, 17, 9, 65, 17, 0, 1, 27, 8, 22, 6, 207, 27, 0, 0, 8, 65, 20, 0, 1, 254, 0, 66, 7, 32, 20, 0, 0, 8, 65, 25, 0, 1, 0, 0, 0, 0, 107, 21, 0, 0, 8, 65, 28, 0, 1, 0, 0, 0, 0, 212, 13, 154, 153, 9, 65, 33, 0, 1, 0, 0, 0, 0, 189, 63, 17, 17, 9, 65, 37, 0, 1, 0, 0, 0, 0, 169, 234, 136, 136, 8, 65, 38, 0, 1, 128, 86, 210, 252, 3, 0, 17, 17, 9, 65, 44, 0, 1, 0, 0, 0, 0, 89, 22, 136, 136, 8, 65, 51, 0, 1, 0, 0, 0, 0, 64, 14, 0, 0, 8, 65, 53, 0, 1, 0, 0, 0, 0, 141, 42, 0, 0, 8, 65, 60, 0, 1, 123, 247, 7, 252, 236, 8, 136, 136, 8, 65, 2, 0, 1, 21, 255, 201, 2, 50, 252, 136, 136, 8, 65, 3, 0, 1, 242, 0, 251, 0, 200, 0, 136, 136, 8, 65, 4, 0, 1, 14, 249, 124, 130, 234, 232, 17, 17, 9, 65, 5, 0, 1, 251, 5, 155, 128, 142, 10, 136, 136, 8, 65, 6, 0, 1, 162, 1, 29, 1, 75, 1, 154, 153, 9, 65, 7, 0, 1, 66, 2, 115, 0, 142, 1, 136, 136, 8, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 154, 153, 9, 65, 11, 0, 1, 22, 176, 26, 3, 45, 99, 154, 153, 9, 65, 13, 0, 1, 137, 1, 222, 71, 159, 7, 136, 136, 8, 65, 14, 0, 1, 0, 0, 0, 0, 136, 232, 154, 153, 9, 65, 15, 0, 1, 218, 176, 27, 2, 135, 1, 17, 17, 9, 65, 18, 0, 1, 192, 255, 182, 254, 101, 42, 154, 153, 9, 65, 20, 0, 1, 167, 0, 243, 6, 154, 20, 136, 136, 8, 65, 21, 0, 1, 0, 0, 0, 0, 248, 21, 136, 136, 8, 65, 22, 0, 1, 0, 0, 0, 0, 122, 19, 136, 136, 8, 65, 24, 0, 1, 0, 0, 0, 0, 234, 21, 136, 136, 8, 65, 25, 0, 1, 0, 0, 0, 0, 127, 21, 154, 153, 9, 65, 27, 0, 1, 0, 0, 0, 0, 46, 36, 136, 136, 8, 65, 28, 0, 1, 0, 0, 0, 0, 228, 13, 136, 136, 8, 65, 34, 0, 1, 0, 0, 0, 0, 77, 13, 136, 136, 8, 65, 39, 0, 1, 32, 172, 18, 212, 220, 249, 154, 153, 9, 65, 41, 0, 1, 116, 0, 87, 1, 11, 43, 154, 153, 9, 65, 45, 0, 1, 0, 0, 0, 0, 194, 19, 136, 136, 8, 65, 47, 0, 1, 0, 0, 0, 0, 64, 22, 154, 153, 9, 65, 48, 0, 1, 0, 0, 0, 0, 211, 21, 136, 136, 8, 65, 53, 0, 1, 0, 0, 0, 0, 112, 42, 136, 136, 8, 65, 54, 0, 1, 0, 0, 0, 0, 192, 31, 17, 17, 9, 65, 59, 0, 1, 0, 0, 0, 0, 205, 234, 17, 17, 9, 65, 60, 0, 1, 33, 247, 243, 251, 0, 9, 154, 153, 9, 65, 63, 0, 1, 0, 0, 0, 0, 158, 249, 136, 136, 8, 65, 64, 0, 1, 103, 9, 138, 254, 185, 9, 17, 17, 9, 65, 0, 0, 1, 20, 193, 210, 190, 118, 187, 154, 153, 9, 65, 2, 0, 1, 233, 254, 19, 3, 241, 251, 17, 17, 9, 65, 3, 0, 1, 255, 0, 8, 1, 200, 0, 154, 153, 9, 65, 4, 0, 1, 23, 249, 127, 130, 231, 232, 17, 17, 9, 65, 6, 0, 1, 183, 1, 44, 1, 75, 1, 17, 17, 9, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 154, 153, 9, 65, 9, 0, 1, 202, 4, 131, 254, 131, 252, 154, 153, 9, 65, 10, 0, 1, 197, 79, 169, 249, 109, 99, 154, 153, 9, 65, 14, 0, 1, 0, 0, 0, 0, 147, 234, 154, 153, 9, 65, 16, 0, 1, 23, 84, 170, 42, 83, 251, 17, 17, 9, 65, 21, 0, 1, 0, 0, 0, 0, 12, 22, 154, 153, 9, 65, 22, 0, 1, 0, 0, 0, 0, 159, 19, 17, 17, 9, 65, 24, 0, 1, 0, 0, 0, 0, 250, 21, 154, 153, 9, 65, 25, 0, 1, 0, 0, 0, 0, 173, 21, 17, 17, 9, 65, 28, 0, 1, 0, 0, 0, 0, 247, 13, 154, 153, 9, 65, 30, 0, 1, 0, 0, 0, 0, 245, 41, 154, 153, 9, 65, 34, 0, 1, 0, 0, 0, 0, 84, 13, 154, 153, 9, 65, 38, 0, 1, 111, 85, 7, 252, 205, 255, 154, 153, 9, 65, 39, 0, 1, 11, 172, 92, 212, 236, 249, 154, 153, 9, 65, 40, 0, 1, 155, 252, 153, 250, 178, 28, 17, 17, 9, 65, 43, 0, 1, 207, 8, 90, 22, 209, 17, 154, 153, 9, 65, 47, 0, 1, 0, 0, 0, 0, 40, 22, 17, 17, 9, 65, 50, 0, 1, 0, 0, 0, 0, 121, 36, 154, 153, 9, 65, 51, 0, 1, 0, 0, 0, 0, 43, 14, 154, 153, 9, 65, 53, 0, 1, 0, 0, 0, 0, 59, 42, 154, 153, 9, 65, 54, 0, 1, 0, 0, 0, 0, 161, 31, 154, 153, 9, 65, 56, 0, 1, 0, 0, 0, 0, 38, 64, 154, 153, 9, 65, 57, 0, 1, 0, 0, 0, 0, 98, 13, 17, 17, 9, 65, 64, 0, 1, 89, 9, 120, 254, 53, 9, 154, 153, 9, 65, 0, 0, 1, 22, 193, 221, 190, 67, 187, 154, 153, 9, 65, 1, 0, 1, 32, 192, 225, 191, 32, 192, 154, 153, 9, 65, 3, 0, 1, 12, 1, 21, 1, 200, 0, 154, 153, 9, 65, 5, 0, 1, 137, 6, 160, 128, 102, 10, 154, 153, 9, 65, 6, 0, 1, 205, 1, 59, 1, 75, 1, 154, 153, 9, 65, 8, 0, 1, 227, 253, 37, 0, 123, 11, 154, 153, 9, 65, 17, 0, 1, 245, 7, 26, 6, 205, 27, 154, 153, 9, 65, 18, 0, 1, 167, 255, 174, 254, 127, 42, 154, 153, 9, 65, 19, 0, 1, 163, 251, 27, 255, 90, 37, 154, 153, 9, 65, 21, 0, 1, 0, 0, 0, 0, 33, 22, 154, 153, 9, 65, 24, 0, 1, 0, 0, 0, 0, 10, 22, 154, 153, 9, 65, 28, 0, 1, 0, 0, 0, 0, 11, 14, 154, 153, 9, 65, 37, 0, 1, 0, 0, 0, 0, 252, 234, 154, 153, 9, 65, 43, 0, 1, 209, 8, 75, 22, 221, 17, 154, 153, 9, 65, 44, 0, 1, 0, 0, 0, 0, 73, 22, 154, 153, 9, 65, 50, 0, 1, 0, 0, 0, 0, 101, 36, 154, 153, 9, 65, 59, 0, 1, 0, 0, 0, 0, 171, 234, 154, 153, 9, 65, 60, 0, 1, 246, 246, 233, 251, 13, 9, 154, 153, 9, 65, 61, 0, 1, 0, 0, 0, 0, 134, 90, 154, 153, 9, 65, 64, 0, 1, 75, 9, 102, 254, 173, 8, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 1, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 2, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 3, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 4, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 5, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 6, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 7, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 8, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 9, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 10, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 11, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 12, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 13, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 14, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 15, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 16, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 17, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 18, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 19, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 20, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 21, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 22, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 23, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 24, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 25, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 26, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 27, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 28, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 29, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 30, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 31, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 32, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 33, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 34, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 35, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 36, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 37, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 38, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 39, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 40, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 41, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 42, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 43, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 44, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 45, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 46, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 47, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 48, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 49, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 50, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 51, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 52, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 53, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 54, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 55, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 56, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 57, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 58, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 59, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 60, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 61, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 62, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 63, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 64, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 65, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 66, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 67, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 0, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 1, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 2, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 3, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 4, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 5, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 6, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 7, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 8, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 9, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 10, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 11, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 12, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 13, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 14, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 15, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 16, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 17, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 18, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 19, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 20, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 21, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 22, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 23, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 24, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 25, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 26, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 27, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 28, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 29, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 30, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 31, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 32, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 33, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 34, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 35, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 36, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 37, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 38, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 39, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 40, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 41, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 42, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 43, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 44, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 45, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 46, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 47, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 48, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 49, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 50, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 51, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 52, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 53, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 54, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 55, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 56, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 57, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 58, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 59, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 60, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 61, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 62, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 63, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 64, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 65, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 66, 0, 0, 60, 0, 60, 0, 60, 154, 153, 9, 65, 67, 0, 0, 60, 0, 60, 0, 60]), true, true);
Module['FS_createDataFile']('/media', 'skeleton.ozz', [1, 111, 122, 122, 45, 115, 107, 101, 108, 101, 116, 111, 110, 0, 1, 0, 0, 0, 67, 0, 0, 0, 170, 3, 0, 0, 72, 105, 112, 115, 0, 80, 101, 108, 118, 105, 115, 0, 83, 112, 105, 110, 101, 0, 83, 112, 105, 110, 101, 49, 0, 76, 101, 102, 116, 85, 112, 76, 101, 103, 0, 82, 105, 103, 104, 116, 85, 112, 76, 101, 103, 0, 83, 112, 105, 110, 101, 50, 0, 83, 112, 105, 110, 101, 51, 0, 78, 101, 99, 107, 0, 72, 101, 97, 100, 0, 76, 101, 102, 116, 83, 104, 111, 117, 108, 100, 101, 114, 0, 82, 105, 103, 104, 116, 83, 104, 111, 117, 108, 100, 101, 114, 0, 66, 105, 112, 48, 49, 32, 72, 101, 97, 100, 78, 117, 98, 0, 76, 101, 102, 116, 65, 114, 109, 0, 76, 101, 102, 116, 70, 111, 114, 101, 65, 114, 109, 0, 76, 101, 102, 116, 104, 97, 110, 100, 0, 76, 101, 102, 116, 72, 97, 110, 100, 84, 104, 117, 109, 98, 49, 0, 76, 101, 102, 116, 72, 97, 110, 100, 73, 110, 100, 101, 120, 49, 0, 76, 101, 102, 116, 72, 97, 110, 100, 77, 105, 100, 100, 108, 101, 49, 0, 76, 101, 102, 116, 72, 97, 110, 100, 82, 105, 110, 103, 49, 0, 76, 101, 102, 116, 72, 97, 110, 100, 82, 105, 110, 103, 80, 105, 110, 107, 121, 49, 0, 76, 101, 102, 116, 72, 97, 110, 100, 84, 104, 117, 109, 98, 50, 0, 76, 101, 102, 116, 72, 97, 110, 100, 84, 104, 117, 109, 98, 51, 0, 66, 105, 112, 48, 49, 32, 76, 32, 70, 105, 110, 103, 101, 114, 48, 78, 117, 98, 0, 76, 101, 102, 116, 72, 97, 110, 100, 73, 110, 100, 101, 120, 50, 0, 76, 101, 102, 116, 72, 97, 110, 100, 73, 110, 100, 101, 120, 51, 0, 66, 105, 112, 48, 49, 32, 76, 32, 70, 105, 110, 103, 101, 114, 49, 78, 117, 98, 0, 76, 101, 102, 116, 72, 97, 110, 100, 77, 105, 100, 100, 108, 101, 50, 0, 76, 101, 102, 116, 72, 97, 110, 100, 77, 105, 100, 100, 108, 101, 51, 0, 66, 105, 112, 48, 49, 32, 76, 32, 70, 105, 110, 103, 101, 114, 50, 78, 117, 98, 0, 76, 101, 102, 116, 72, 97, 110, 100, 82, 105, 110, 103, 50, 0, 76, 101, 102, 116, 72, 97, 110, 100, 82, 105, 110, 103, 51, 0, 66, 105, 112, 48, 49, 32, 76, 32, 70, 105, 110, 103, 101, 114, 51, 78, 117, 98, 0, 76, 101, 102, 116, 72, 97, 110, 100, 82, 105, 110, 103, 80, 105, 110, 107, 121, 50, 0, 76, 101, 102, 116, 72, 97, 110, 100, 82, 105, 110, 103, 80, 105, 110, 107, 121, 51, 0, 66, 105, 112, 48, 49, 32, 76, 32, 70, 105, 110, 103, 101, 114, 52, 78, 117, 98, 0, 82, 105, 103, 104, 116, 65, 114, 109, 0, 82, 105, 103, 104, 116, 70, 111, 114, 101, 65, 114, 109, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 84, 104, 117, 109, 98, 49, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 73, 110, 100, 101, 120, 49, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 77, 105, 100, 100, 108, 101, 49, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 82, 105, 110, 103, 49, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 80, 105, 110, 107, 121, 49, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 84, 104, 117, 109, 98, 50, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 84, 104, 117, 109, 98, 51, 0, 66, 105, 112, 48, 49, 32, 82, 32, 70, 105, 110, 103, 101, 114, 48, 78, 117, 98, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 73, 110, 100, 101, 120, 50, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 73, 110, 100, 101, 120, 51, 0, 66, 105, 112, 48, 49, 32, 82, 32, 70, 105, 110, 103, 101, 114, 49, 78, 117, 98, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 77, 105, 100, 100, 108, 101, 50, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 77, 105, 100, 100, 108, 101, 51, 0, 66, 105, 112, 48, 49, 32, 82, 32, 70, 105, 110, 103, 101, 114, 50, 78, 117, 98, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 82, 105, 110, 103, 50, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 82, 105, 110, 103, 51, 0, 66, 105, 112, 48, 49, 32, 82, 32, 70, 105, 110, 103, 101, 114, 51, 78, 117, 98, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 80, 105, 110, 107, 121, 50, 0, 82, 105, 103, 104, 116, 72, 97, 110, 100, 80, 105, 110, 107, 121, 51, 0, 66, 105, 112, 48, 49, 32, 82, 32, 70, 105, 110, 103, 101, 114, 52, 78, 117, 98, 0, 76, 101, 102, 116, 76, 101, 103, 0, 76, 101, 102, 116, 70, 111, 111, 116, 0, 76, 101, 102, 116, 70, 111, 111, 116, 84, 104, 117, 109, 98, 49, 0, 66, 105, 112, 48, 49, 32, 76, 32, 84, 111, 101, 48, 78, 117, 98, 0, 82, 105, 103, 104, 116, 76, 101, 103, 0, 82, 105, 103, 104, 116, 70, 111, 111, 116, 0, 82, 105, 103, 104, 116, 70, 111, 111, 116, 84, 104, 117, 109, 98, 49, 0, 66, 105, 112, 48, 49, 32, 82, 32, 84, 111, 101, 48, 78, 117, 98, 0, 1, 0, 0, 0, 255, 3, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 3, 0, 0, 6, 0, 0, 7, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 9, 0, 1, 10, 0, 0, 13, 0, 0, 14, 0, 0, 15, 0, 0, 15, 0, 0, 15, 0, 0, 15, 0, 0, 15, 0, 0, 16, 0, 0, 21, 0, 0, 22, 0, 1, 17, 0, 0, 24, 0, 0, 25, 0, 1, 18, 0, 0, 27, 0, 0, 28, 0, 1, 19, 0, 0, 30, 0, 0, 31, 0, 1, 20, 0, 0, 33, 0, 0, 34, 0, 1, 11, 0, 0, 36, 0, 0, 37, 0, 0, 38, 0, 0, 38, 0, 0, 38, 0, 0, 38, 0, 0, 38, 0, 0, 39, 0, 0, 44, 0, 0, 45, 0, 1, 40, 0, 0, 47, 0, 0, 48, 0, 1, 41, 0, 0, 50, 0, 0, 51, 0, 1, 42, 0, 0, 53, 0, 0, 54, 0, 1, 43, 0, 0, 56, 0, 0, 57, 0, 1, 4, 0, 0, 59, 0, 0, 60, 0, 0, 61, 0, 1, 5, 0, 0, 63, 0, 0, 64, 0, 0, 65, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 21, 150, 145, 61, 133, 89, 226, 61, 69, 249, 133, 63, 0, 0, 0, 0, 42, 119, 184, 184, 226, 36, 164, 184, 134, 145, 119, 188, 0, 0, 0, 0, 148, 191, 214, 51, 0, 0, 0, 0, 0, 0, 0, 63, 248, 255, 255, 190, 40, 59, 6, 182, 0, 0, 0, 0, 0, 0, 0, 63, 4, 0, 0, 191, 9, 1, 6, 181, 0, 0, 0, 0, 0, 0, 0, 63, 248, 255, 255, 190, 167, 170, 208, 57, 0, 0, 0, 0, 0, 0, 0, 191, 4, 0, 0, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 2, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 2, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 10, 150, 145, 189, 10, 150, 145, 189, 0, 81, 201, 61, 61, 188, 241, 61, 249, 89, 23, 57, 238, 234, 23, 57, 126, 28, 197, 184, 132, 54, 206, 184, 149, 159, 197, 61, 147, 159, 197, 189, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 47, 60, 1, 4, 47, 60, 0, 0, 0, 0, 0, 0, 0, 0, 68, 252, 127, 63, 68, 252, 127, 63, 0, 0, 0, 0, 0, 0, 0, 0, 171, 80, 201, 53, 171, 80, 201, 53, 0, 0, 0, 0, 0, 0, 0, 0, 78, 163, 137, 178, 78, 163, 137, 178, 0, 0, 128, 63, 0, 0, 128, 63, 2, 0, 128, 63, 2, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 2, 0, 128, 63, 2, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 163, 190, 245, 61, 71, 47, 174, 61, 121, 4, 96, 189, 121, 4, 96, 189, 254, 166, 161, 188, 0, 0, 0, 0, 151, 1, 161, 187, 170, 255, 160, 187, 119, 204, 171, 178, 0, 0, 0, 0, 39, 25, 34, 61, 77, 25, 34, 189, 0, 0, 0, 0, 0, 0, 0, 0, 70, 117, 41, 63, 77, 117, 41, 191, 0, 0, 0, 0, 0, 0, 0, 0, 100, 199, 43, 188, 123, 189, 43, 60, 237, 236, 124, 60, 79, 24, 176, 60, 171, 215, 63, 63, 164, 215, 63, 63, 50, 248, 127, 63, 220, 240, 127, 63, 65, 111, 66, 60, 84, 119, 66, 60, 249, 255, 127, 63, 1, 0, 128, 63, 4, 0, 128, 63, 3, 0, 128, 63, 249, 255, 127, 63, 1, 0, 128, 63, 248, 255, 127, 63, 248, 255, 127, 63, 0, 0, 128, 63, 0, 0, 128, 63, 1, 0, 128, 63, 0, 0, 128, 63, 30, 159, 59, 62, 73, 60, 39, 62, 208, 88, 130, 62, 138, 7, 109, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 175, 15, 33, 180, 0, 0, 0, 0, 0, 0, 0, 0, 17, 61, 4, 189, 0, 0, 0, 128, 76, 232, 52, 191, 0, 0, 0, 0, 251, 1, 105, 61, 0, 0, 0, 0, 196, 205, 114, 188, 0, 0, 0, 0, 104, 185, 233, 60, 23, 245, 128, 189, 244, 50, 137, 60, 0, 0, 128, 63, 236, 88, 127, 63, 244, 125, 127, 63, 107, 10, 53, 63, 0, 0, 128, 63, 1, 0, 128, 63, 253, 255, 127, 63, 2, 0, 128, 63, 0, 0, 128, 63, 250, 255, 127, 63, 253, 255, 127, 63, 0, 0, 128, 63, 0, 0, 128, 63, 252, 255, 127, 63, 0, 0, 128, 63, 252, 255, 127, 63, 29, 229, 193, 60, 133, 138, 221, 61, 251, 58, 230, 61, 51, 203, 229, 61, 146, 178, 71, 60, 25, 215, 199, 58, 6, 41, 186, 186, 92, 41, 124, 185, 27, 237, 223, 188, 254, 28, 42, 189, 150, 65, 149, 188, 137, 148, 205, 59, 45, 254, 38, 63, 183, 112, 75, 61, 214, 39, 208, 185, 15, 170, 186, 188, 189, 59, 222, 62, 147, 134, 7, 62, 81, 130, 233, 55, 196, 182, 186, 189, 238, 211, 252, 189, 61, 58, 153, 61, 35, 61, 143, 61, 218, 126, 201, 61, 121, 229, 27, 63, 85, 180, 124, 63, 131, 95, 127, 63, 155, 158, 125, 63, 0, 0, 128, 63, 1, 0, 128, 63, 246, 255, 127, 63, 1, 0, 128, 63, 255, 255, 127, 63, 3, 0, 128, 63, 251, 255, 127, 63, 3, 0, 128, 63, 242, 255, 127, 63, 247, 255, 127, 63, 2, 0, 128, 63, 255, 255, 127, 63, 152, 211, 216, 61, 185, 164, 77, 61, 153, 8, 251, 60, 143, 113, 5, 61, 219, 209, 205, 58, 119, 204, 43, 179, 119, 204, 43, 51, 119, 204, 43, 51, 227, 34, 237, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 198, 27, 189, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 0, 71, 131, 118, 190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 229, 96, 61, 110, 61, 165, 189, 94, 170, 37, 190, 0, 0, 0, 0, 218, 225, 119, 63, 87, 42, 127, 63, 168, 160, 124, 63, 0, 0, 128, 63, 2, 0, 128, 63, 251, 255, 127, 63, 2, 0, 128, 63, 0, 0, 128, 63, 1, 0, 128, 63, 251, 255, 127, 63, 2, 0, 128, 63, 0, 0, 128, 63, 248, 255, 127, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 52, 250, 42, 61, 144, 210, 205, 60, 9, 47, 200, 60, 41, 210, 58, 61, 0, 0, 0, 0, 0, 0, 0, 0, 175, 15, 33, 180, 175, 15, 33, 52, 0, 0, 0, 0, 119, 204, 171, 178, 0, 0, 0, 0, 119, 204, 43, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 145, 101, 62, 17, 148, 157, 61, 0, 0, 0, 0, 42, 26, 14, 62, 219, 123, 121, 63, 185, 61, 127, 63, 0, 0, 128, 63, 231, 133, 125, 63, 0, 0, 128, 63, 3, 0, 128, 63, 0, 0, 128, 63, 1, 0, 128, 63, 0, 0, 128, 63, 3, 0, 128, 63, 0, 0, 128, 63, 1, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 144, 122, 209, 60, 248, 220, 237, 60, 185, 33, 32, 61, 105, 26, 214, 60, 175, 15, 33, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 252, 198, 61, 0, 0, 0, 0, 87, 204, 24, 62, 31, 173, 45, 62, 236, 201, 126, 63, 0, 0, 128, 63, 75, 34, 125, 63, 131, 74, 124, 63, 255, 255, 127, 63, 0, 0, 128, 63, 3, 0, 128, 63, 1, 0, 128, 63, 255, 255, 127, 63, 0, 0, 128, 63, 3, 0, 128, 63, 1, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 102, 230, 211, 60, 32, 159, 206, 60, 104, 84, 163, 60, 162, 60, 186, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 204, 171, 178, 119, 204, 43, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229, 207, 92, 62, 214, 247, 48, 62, 0, 0, 0, 0, 0, 0, 128, 63, 47, 250, 121, 63, 232, 37, 124, 63, 0, 0, 128, 63, 0, 0, 128, 63, 246, 255, 127, 63, 252, 255, 127, 63, 0, 0, 128, 63, 0, 0, 128, 63, 246, 255, 127, 63, 252, 255, 127, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 73, 60, 39, 62, 208, 88, 130, 62, 143, 7, 109, 62, 100, 44, 201, 60, 0, 0, 0, 0, 119, 204, 43, 50, 0, 0, 0, 0, 172, 183, 87, 60, 0, 0, 0, 0, 175, 15, 33, 52, 0, 0, 0, 0, 206, 120, 211, 60, 17, 61, 4, 61, 0, 0, 0, 128, 216, 225, 52, 63, 34, 120, 38, 191, 251, 1, 105, 189, 0, 0, 0, 0, 164, 40, 155, 60, 147, 209, 224, 190, 104, 185, 233, 60, 89, 245, 128, 189, 20, 238, 78, 60, 191, 61, 9, 190, 236, 88, 127, 63, 242, 125, 127, 63, 6, 16, 53, 63, 99, 244, 26, 63, 1, 0, 128, 63, 255, 255, 127, 63, 248, 255, 127, 63, 251, 255, 127, 63, 250, 255, 127, 63, 253, 255, 127, 63, 2, 0, 128, 63, 3, 0, 128, 63, 252, 255, 127, 63, 0, 0, 128, 63, 1, 0, 128, 63, 245, 255, 127, 63, 153, 151, 224, 61, 5, 90, 233, 61, 220, 162, 233, 61, 231, 43, 218, 61, 201, 163, 31, 59, 254, 224, 240, 185, 11, 179, 142, 186, 29, 46, 36, 59, 234, 8, 42, 61, 141, 25, 149, 60, 230, 79, 4, 188, 82, 16, 252, 188, 77, 84, 132, 188, 65, 26, 208, 57, 217, 24, 173, 60, 216, 32, 99, 61, 135, 76, 249, 189, 119, 79, 245, 183, 100, 66, 223, 61, 40, 60, 128, 62, 107, 146, 162, 61, 94, 122, 150, 61, 108, 42, 249, 61, 187, 199, 95, 61, 163, 63, 125, 63, 218, 78, 127, 63, 209, 128, 124, 63, 194, 9, 119, 63, 0, 0, 128, 63, 2, 0, 128, 63, 248, 255, 127, 63, 0, 0, 128, 63, 248, 255, 127, 63, 250, 255, 127, 63, 250, 255, 127, 63, 3, 0, 128, 63, 2, 0, 128, 63, 2, 0, 128, 63, 252, 255, 127, 63, 0, 0, 128, 63, 194, 157, 81, 61, 165, 8, 251, 60, 137, 113, 5, 61, 114, 109, 41, 61, 0, 0, 0, 0, 0, 0, 0, 0, 119, 204, 171, 51, 175, 15, 33, 180, 0, 0, 0, 0, 175, 15, 33, 180, 0, 0, 0, 0, 89, 217, 0, 51, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 80, 143, 189, 94, 170, 37, 190, 0, 0, 0, 0, 20, 224, 114, 62, 90, 95, 127, 63, 168, 160, 124, 63, 0, 0, 0, 0, 239, 177, 120, 63, 5, 0, 128, 63, 2, 0, 128, 63, 0, 0, 128, 63, 4, 0, 128, 63, 249, 255, 127, 63, 2, 0, 128, 63, 0, 0, 128, 191, 4, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 181, 162, 202, 60, 234, 17, 213, 60, 30, 210, 58, 61, 9, 191, 217, 60, 0, 0, 0, 0, 175, 15, 33, 52, 0, 0, 0, 0, 175, 15, 33, 180, 119, 204, 171, 178, 119, 204, 171, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 43, 147, 61, 0, 0, 0, 0, 173, 221, 12, 62, 213, 231, 229, 61, 147, 86, 127, 63, 0, 0, 0, 0, 242, 144, 125, 63, 193, 97, 126, 63, 255, 255, 127, 63, 0, 0, 128, 63, 254, 255, 127, 63, 0, 0, 128, 63, 255, 255, 127, 63, 0, 0, 128, 191, 254, 255, 127, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 79, 44, 226, 60, 144, 157, 27, 61, 89, 115, 214, 60, 32, 217, 215, 60, 175, 15, 33, 180, 175, 15, 33, 180, 175, 15, 33, 52, 175, 15, 33, 52, 0, 0, 0, 0, 0, 0, 0, 0, 119, 204, 171, 50, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 230, 0, 62, 218, 234, 41, 62, 0, 0, 0, 0, 0, 0, 0, 0, 180, 246, 125, 63, 118, 115, 124, 63, 0, 0, 0, 0, 0, 0, 128, 63, 1, 0, 128, 63, 252, 255, 127, 63, 0, 0, 128, 63, 0, 0, 128, 191, 1, 0, 128, 63, 252, 255, 127, 63, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 101, 76, 202, 60, 94, 53, 167, 60, 143, 118, 183, 60, 48, 94, 241, 62, 175, 15, 33, 180, 175, 15, 33, 180, 119, 204, 171, 51, 0, 0, 0, 0, 0, 0, 0, 0, 119, 204, 171, 51, 119, 204, 171, 179, 119, 204, 43, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 212, 103, 89, 62, 154, 95, 61, 62, 0, 0, 0, 0, 110, 21, 118, 189, 239, 41, 122, 63, 143, 149, 123, 63, 0, 0, 0, 0, 158, 137, 127, 63, 1, 0, 128, 63, 254, 255, 127, 63, 0, 0, 128, 63, 255, 255, 127, 63, 1, 0, 128, 63, 254, 255, 127, 63, 0, 0, 128, 191, 255, 255, 127, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 189, 145, 234, 62, 155, 154, 241, 61, 41, 230, 173, 61, 50, 94, 241, 62, 119, 204, 43, 178, 66, 221, 23, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 204, 43, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 235, 5, 76, 61, 244, 4, 53, 63, 0, 0, 0, 0, 110, 21, 118, 189, 168, 174, 127, 63, 244, 4, 53, 63, 0, 0, 0, 0, 158, 137, 127, 63, 1, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 255, 255, 127, 63, 1, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 191, 255, 255, 127, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 189, 145, 234, 62, 155, 154, 241, 61, 41, 230, 173, 61, 0, 0, 0, 0, 0, 0, 0, 0, 66, 221, 23, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 235, 5, 76, 61, 244, 4, 53, 63, 0, 0, 0, 0, 0, 0, 0, 0, 168, 174, 127, 63, 244, 4, 53, 63, 0, 0, 128, 63, 0, 0, 128, 63, 1, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 1, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63], true, true);
Module['FS_createDataFile']('/media', 'walk.ozz', [1, 111, 122, 122, 45, 97, 110, 105, 109, 97, 116, 105, 111, 110, 0, 2, 0, 0, 0, 168, 170, 170, 63, 67, 0, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 39, 14, 60, 188, 145, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 140, 44, 195, 133, 228, 150, 0, 0, 0, 0, 3, 0, 19, 47, 31, 133, 48, 128, 0, 0, 0, 0, 4, 0, 181, 172, 121, 136, 43, 46, 0, 0, 0, 0, 5, 0, 101, 172, 235, 14, 46, 174, 0, 0, 0, 0, 6, 0, 75, 46, 28, 134, 41, 128, 0, 0, 0, 0, 7, 0, 142, 47, 106, 134, 23, 0, 0, 0, 0, 0, 8, 0, 174, 47, 13, 165, 1, 128, 0, 0, 0, 0, 9, 0, 113, 45, 1, 128, 0, 0, 0, 0, 0, 0, 10, 0, 250, 170, 194, 158, 17, 41, 0, 0, 0, 0, 11, 0, 250, 170, 194, 158, 17, 169, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 58, 49, 1, 128, 3, 128, 0, 0, 0, 0, 14, 0, 19, 52, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 104, 51, 0, 0, 1, 128, 0, 0, 0, 0, 16, 0, 15, 38, 62, 34, 255, 166, 0, 0, 0, 0, 17, 0, 236, 46, 63, 22, 81, 169, 0, 0, 0, 0, 18, 0, 50, 47, 209, 149, 170, 164, 0, 0, 0, 0, 19, 0, 46, 47, 225, 139, 109, 30, 0, 0, 0, 0, 20, 0, 199, 46, 110, 22, 105, 39, 0, 0, 0, 0, 21, 0, 109, 42, 1, 0, 1, 128, 0, 0, 0, 0, 22, 0, 216, 39, 1, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 88, 41, 3, 0, 2, 128, 0, 0, 0, 0, 25, 0, 111, 38, 1, 128, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 215, 41, 2, 128, 3, 128, 0, 0, 0, 0, 28, 0, 140, 38, 1, 0, 1, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 1, 41, 0, 0, 3, 0, 0, 0, 0, 0, 31, 0, 177, 38, 1, 0, 3, 128, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 117, 38, 1, 0, 1, 128, 0, 0, 0, 0, 34, 0, 27, 37, 1, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 58, 49, 0, 0, 3, 0, 0, 0, 0, 0, 37, 0, 19, 52, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 104, 51, 0, 0, 1, 128, 0, 0, 0, 0, 39, 0, 73, 38, 190, 34, 156, 38, 0, 0, 0, 0, 40, 0, 5, 47, 253, 24, 80, 41, 0, 0, 0, 0, 41, 0, 75, 47, 134, 143, 169, 36, 0, 0, 0, 0, 42, 0, 77, 47, 118, 148, 34, 160, 0, 0, 0, 0, 43, 0, 209, 46, 33, 25, 225, 167, 0, 0, 0, 0, 44, 0, 141, 42, 1, 0, 0, 0, 0, 0, 0, 0, 45, 0, 216, 39, 0, 0, 1, 128, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 75, 41, 0, 128, 0, 0, 0, 0, 0, 0, 48, 0, 85, 38, 1, 128, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 215, 41, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 206, 38, 1, 0, 1, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 221, 40, 0, 0, 1, 0, 0, 0, 0, 0, 54, 0, 180, 38, 2, 128, 1, 128, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 82, 38, 1, 0, 0, 0, 0, 0, 0, 0, 57, 0, 58, 37, 1, 128, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 139, 55, 1, 0, 0, 0, 0, 0, 0, 0, 60, 0, 85, 55, 1, 128, 0, 128, 0, 0, 0, 0, 61, 0, 141, 47, 191, 48, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 139, 55, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 85, 55, 1, 128, 0, 0, 0, 0, 0, 0, 65, 0, 141, 47, 191, 48, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 181, 136, 136, 61, 0, 0, 140, 39, 27, 60, 217, 44, 168, 170, 170, 63, 1, 0, 0, 0, 0, 0, 0, 0, 114, 136, 8, 62, 2, 0, 139, 44, 197, 133, 49, 156, 168, 170, 170, 63, 3, 0, 19, 47, 31, 133, 48, 128, 205, 204, 204, 61, 4, 0, 214, 172, 244, 133, 57, 46, 205, 204, 204, 61, 5, 0, 67, 172, 37, 14, 30, 174, 168, 170, 170, 63, 6, 0, 75, 46, 28, 134, 41, 128, 168, 170, 170, 63, 7, 0, 142, 47, 106, 134, 23, 0, 168, 170, 170, 63, 8, 0, 174, 47, 13, 165, 1, 128, 168, 170, 170, 63, 9, 0, 113, 45, 1, 128, 0, 0, 168, 170, 170, 63, 10, 0, 250, 170, 194, 158, 17, 41, 168, 170, 170, 63, 11, 0, 250, 170, 194, 158, 17, 169, 168, 170, 170, 63, 12, 0, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 13, 0, 58, 49, 1, 128, 3, 128, 168, 170, 170, 63, 14, 0, 19, 52, 0, 0, 0, 0, 168, 170, 170, 63, 15, 0, 104, 51, 0, 0, 1, 128, 168, 170, 170, 63, 16, 0, 15, 38, 62, 34, 255, 166, 168, 170, 170, 63, 17, 0, 236, 46, 63, 22, 81, 169, 168, 170, 170, 63, 18, 0, 50, 47, 209, 149, 170, 164, 168, 170, 170, 63, 19, 0, 46, 47, 225, 139, 109, 30, 168, 170, 170, 63, 20, 0, 199, 46, 110, 22, 105, 39, 168, 170, 170, 63, 21, 0, 109, 42, 1, 0, 1, 128, 168, 170, 170, 63, 22, 0, 216, 39, 1, 0, 0, 0, 168, 170, 170, 63, 23, 0, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 24, 0, 88, 41, 3, 0, 2, 128, 168, 170, 170, 63, 25, 0, 111, 38, 1, 128, 0, 0, 168, 170, 170, 63, 26, 0, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 27, 0, 215, 41, 2, 128, 3, 128, 168, 170, 170, 63, 28, 0, 140, 38, 1, 0, 1, 0, 168, 170, 170, 63, 29, 0, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 30, 0, 1, 41, 0, 0, 3, 0, 168, 170, 170, 63, 31, 0, 177, 38, 1, 0, 3, 128, 168, 170, 170, 63, 32, 0, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 33, 0, 117, 38, 1, 0, 1, 128, 168, 170, 170, 63, 34, 0, 27, 37, 1, 0, 0, 0, 168, 170, 170, 63, 35, 0, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 36, 0, 58, 49, 0, 0, 3, 0, 168, 170, 170, 63, 37, 0, 19, 52, 0, 0, 0, 0, 168, 170, 170, 63, 38, 0, 104, 51, 0, 0, 1, 128, 168, 170, 170, 63, 39, 0, 73, 38, 190, 34, 156, 38, 168, 170, 170, 63, 40, 0, 5, 47, 253, 24, 80, 41, 168, 170, 170, 63, 41, 0, 75, 47, 134, 143, 169, 36, 168, 170, 170, 63, 42, 0, 77, 47, 118, 148, 34, 160, 168, 170, 170, 63, 43, 0, 209, 46, 33, 25, 225, 167, 168, 170, 170, 63, 44, 0, 141, 42, 1, 0, 0, 0, 168, 170, 170, 63, 45, 0, 216, 39, 0, 0, 1, 128, 168, 170, 170, 63, 46, 0, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 47, 0, 75, 41, 0, 128, 0, 0, 168, 170, 170, 63, 48, 0, 85, 38, 1, 128, 0, 0, 168, 170, 170, 63, 49, 0, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 50, 0, 215, 41, 0, 0, 0, 0, 168, 170, 170, 63, 51, 0, 206, 38, 1, 0, 1, 0, 168, 170, 170, 63, 52, 0, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 53, 0, 221, 40, 0, 0, 1, 0, 168, 170, 170, 63, 54, 0, 180, 38, 2, 128, 1, 128, 168, 170, 170, 63, 55, 0, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 56, 0, 82, 38, 1, 0, 0, 0, 168, 170, 170, 63, 57, 0, 58, 37, 1, 128, 0, 0, 168, 170, 170, 63, 58, 0, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 59, 0, 139, 55, 1, 0, 0, 0, 168, 170, 170, 63, 60, 0, 85, 55, 1, 128, 0, 128, 168, 170, 170, 63, 61, 0, 141, 47, 191, 48, 0, 0, 168, 170, 170, 63, 62, 0, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 63, 0, 139, 55, 0, 0, 0, 0, 168, 170, 170, 63, 64, 0, 85, 55, 1, 128, 0, 0, 168, 170, 170, 63, 65, 0, 141, 47, 191, 48, 0, 0, 168, 170, 170, 63, 66, 0, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 67, 0, 0, 0, 0, 0, 0, 0, 205, 204, 204, 61, 0, 0, 82, 39, 28, 60, 72, 47, 114, 136, 8, 62, 0, 0, 248, 38, 27, 60, 219, 48, 154, 153, 153, 62, 4, 0, 138, 172, 25, 12, 93, 46, 154, 153, 153, 62, 5, 0, 142, 172, 252, 2, 253, 173, 205, 204, 76, 62, 0, 0, 209, 37, 14, 60, 78, 51, 159, 170, 170, 62, 2, 0, 139, 44, 195, 133, 176, 154, 148, 136, 136, 62, 0, 0, 37, 36, 255, 59, 213, 52, 199, 187, 187, 62, 0, 0, 66, 24, 214, 59, 118, 54, 131, 136, 8, 63, 4, 0, 168, 172, 8, 7, 130, 46, 131, 136, 8, 63, 5, 0, 107, 172, 42, 10, 215, 173, 131, 136, 8, 63, 2, 0, 136, 44, 197, 133, 190, 158, 205, 204, 204, 62, 0, 0, 7, 154, 204, 59, 253, 54, 211, 221, 221, 62, 0, 0, 15, 160, 201, 59, 133, 55, 250, 238, 238, 62, 0, 0, 123, 162, 204, 59, 7, 56, 131, 136, 8, 63, 0, 0, 65, 165, 228, 59, 142, 56, 154, 153, 25, 63, 0, 0, 39, 166, 0, 60, 26, 57, 74, 68, 68, 63, 2, 0, 139, 44, 195, 133, 143, 155, 51, 51, 51, 63, 4, 0, 114, 172, 147, 21, 121, 46, 51, 51, 51, 63, 5, 0, 162, 172, 15, 148, 225, 173, 51, 51, 51, 63, 0, 0, 91, 166, 22, 60, 0, 58, 182, 187, 59, 63, 0, 0, 54, 166, 27, 60, 78, 58, 205, 204, 76, 63, 4, 0, 166, 172, 144, 25, 97, 46, 205, 204, 76, 63, 5, 0, 113, 172, 183, 152, 247, 173, 74, 68, 68, 63, 0, 0, 243, 165, 29, 60, 156, 58, 205, 204, 76, 63, 0, 0, 140, 165, 28, 60, 234, 58, 102, 102, 102, 63, 2, 0, 136, 44, 195, 133, 203, 158, 80, 85, 85, 63, 0, 0, 245, 164, 25, 60, 56, 59, 102, 102, 102, 63, 4, 0, 249, 172, 54, 28, 68, 46, 102, 102, 102, 63, 5, 0, 31, 172, 148, 155, 12, 174, 227, 221, 93, 63, 0, 0, 67, 164, 19, 60, 134, 59, 233, 238, 110, 63, 0, 0, 118, 161, 0, 60, 15, 60, 0, 0, 128, 63, 2, 0, 139, 44, 195, 133, 57, 156, 125, 119, 119, 63, 4, 0, 235, 172, 44, 28, 59, 46, 125, 119, 119, 63, 5, 0, 46, 172, 142, 155, 23, 174, 0, 0, 128, 63, 0, 0, 115, 156, 220, 59, 85, 60, 14, 17, 145, 63, 4, 0, 90, 172, 91, 22, 43, 46, 14, 17, 145, 63, 5, 0, 192, 172, 25, 149, 45, 174, 65, 68, 132, 63, 0, 0, 204, 147, 209, 59, 119, 60, 14, 17, 145, 63, 2, 0, 140, 44, 196, 133, 220, 24, 139, 136, 136, 63, 0, 0, 161, 26, 202, 59, 153, 60, 205, 204, 140, 63, 0, 0, 201, 32, 201, 59, 187, 60, 14, 17, 145, 63, 0, 0, 19, 36, 204, 59, 221, 60, 154, 153, 153, 63, 0, 0, 247, 38, 228, 59, 33, 61, 37, 34, 162, 63, 2, 0, 141, 44, 196, 133, 72, 14, 219, 221, 157, 63, 4, 0, 118, 172, 55, 14, 38, 46, 219, 221, 157, 63, 5, 0, 163, 172, 195, 133, 52, 174, 37, 34, 162, 63, 0, 0, 192, 39, 255, 59, 103, 61, 168, 170, 170, 63, 4, 0, 181, 172, 121, 136, 43, 46, 168, 170, 170, 63, 5, 0, 101, 172, 235, 14, 46, 174, 168, 170, 170, 63, 0, 0, 174, 39, 14, 60, 179, 61, 168, 170, 170, 63, 2, 0, 140, 44, 195, 133, 228, 150, 243, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 31, 196, 124, 188, 31, 188, 0, 0, 0, 0, 1, 0, 1, 64, 191, 64, 191, 196, 192, 0, 0, 0, 0, 2, 0, 1, 208, 255, 159, 1, 13, 0, 0, 0, 0, 0, 3, 0, 1, 105, 2, 211, 254, 119, 4, 0, 0, 0, 0, 4, 0, 1, 171, 13, 158, 126, 87, 12, 0, 0, 0, 0, 5, 0, 1, 248, 26, 2, 125, 213, 251, 0, 0, 0, 0, 6, 0, 1, 195, 1, 109, 254, 255, 7, 0, 0, 0, 0, 7, 0, 1, 35, 255, 74, 255, 139, 5, 0, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 1, 125, 1, 76, 1, 181, 240, 0, 0, 0, 0, 10, 0, 1, 154, 82, 125, 3, 170, 97, 0, 0, 0, 0, 11, 0, 1, 62, 173, 210, 252, 142, 97, 0, 0, 0, 0, 12, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 1, 55, 255, 23, 63, 208, 248, 0, 0, 0, 0, 14, 0, 1, 0, 0, 0, 0, 41, 209, 0, 0, 0, 0, 15, 0, 1, 189, 166, 109, 2, 126, 251, 0, 0, 0, 0, 16, 0, 1, 76, 92, 160, 46, 72, 5, 0, 0, 0, 0, 17, 0, 1, 110, 19, 187, 0, 103, 23, 0, 0, 0, 0, 18, 0, 1, 243, 255, 3, 0, 49, 32, 0, 0, 0, 0, 19, 0, 1, 240, 252, 216, 1, 42, 34, 0, 0, 0, 0, 20, 0, 1, 130, 4, 255, 24, 176, 32, 0, 0, 0, 0, 21, 0, 1, 0, 0, 0, 0, 110, 16, 0, 0, 0, 0, 22, 0, 1, 0, 0, 0, 0, 159, 6, 0, 0, 0, 0, 23, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 1, 0, 0, 0, 0, 125, 33, 0, 0, 0, 0, 25, 0, 1, 0, 0, 0, 0, 87, 11, 0, 0, 0, 0, 26, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 1, 0, 0, 0, 0, 196, 35, 0, 0, 0, 0, 28, 0, 1, 0, 0, 0, 0, 233, 17, 0, 0, 0, 0, 29, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 1, 0, 0, 0, 0, 244, 39, 0, 0, 0, 0, 31, 0, 1, 0, 0, 0, 0, 67, 35, 0, 0, 0, 0, 32, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 1, 0, 0, 0, 0, 104, 33, 0, 0, 0, 0, 34, 0, 1, 0, 0, 0, 0, 105, 34, 0, 0, 0, 0, 35, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 1, 102, 244, 155, 183, 100, 6, 0, 0, 0, 0, 37, 0, 1, 0, 0, 0, 0, 102, 221, 0, 0, 0, 0, 38, 0, 1, 7, 88, 59, 252, 112, 1, 0, 0, 0, 0, 39, 0, 1, 188, 163, 185, 208, 219, 3, 0, 0, 0, 0, 40, 0, 1, 219, 240, 11, 0, 167, 24, 0, 0, 0, 0, 41, 0, 1, 13, 0, 253, 255, 162, 32, 0, 0, 0, 0, 42, 0, 1, 142, 3, 106, 0, 16, 37, 0, 0, 0, 0, 43, 0, 1, 62, 7, 13, 3, 209, 29, 0, 0, 0, 0, 44, 0, 1, 0, 0, 0, 0, 110, 16, 0, 0, 0, 0, 45, 0, 1, 0, 0, 0, 0, 159, 6, 0, 0, 0, 0, 46, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 1, 0, 0, 0, 0, 125, 33, 0, 0, 0, 0, 48, 0, 1, 0, 0, 0, 0, 87, 11, 0, 0, 0, 0, 49, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 1, 0, 0, 0, 0, 196, 35, 0, 0, 0, 0, 51, 0, 1, 0, 0, 0, 0, 233, 17, 0, 0, 0, 0, 52, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 1, 0, 0, 0, 0, 244, 39, 0, 0, 0, 0, 54, 0, 1, 0, 0, 0, 0, 67, 35, 0, 0, 0, 0, 55, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 1, 0, 0, 0, 0, 104, 33, 0, 0, 0, 0, 57, 0, 1, 0, 0, 0, 0, 105, 34, 0, 0, 0, 0, 58, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 1, 0, 0, 0, 0, 18, 216, 0, 0, 0, 0, 60, 0, 1, 87, 1, 252, 6, 122, 24, 0, 0, 0, 0, 61, 0, 1, 0, 0, 0, 0, 88, 91, 0, 0, 0, 0, 62, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 1, 0, 0, 0, 0, 249, 186, 0, 0, 0, 0, 64, 0, 1, 127, 254, 141, 255, 38, 3, 0, 0, 0, 0, 65, 0, 1, 0, 0, 0, 0, 248, 83, 0, 0, 0, 0, 66, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 1, 0, 0, 0, 0, 0, 0, 242, 125, 49, 61, 0, 0, 1, 30, 195, 239, 188, 10, 189, 181, 136, 136, 61, 1, 0, 1, 83, 190, 83, 190, 186, 193, 47, 136, 8, 61, 2, 0, 1, 203, 255, 109, 2, 14, 0, 47, 136, 8, 61, 3, 0, 1, 223, 1, 219, 254, 190, 4, 47, 136, 8, 61, 4, 0, 1, 116, 8, 31, 127, 218, 11, 47, 136, 8, 61, 5, 0, 1, 87, 27, 246, 124, 233, 251, 181, 136, 136, 61, 6, 0, 1, 219, 255, 186, 254, 160, 6, 193, 170, 42, 62, 7, 0, 1, 104, 252, 105, 1, 25, 5, 168, 170, 170, 63, 8, 0, 1, 0, 0, 0, 0, 0, 0, 181, 136, 136, 61, 9, 0, 1, 80, 3, 115, 1, 15, 242, 205, 204, 204, 61, 10, 0, 1, 152, 82, 173, 3, 169, 97, 181, 136, 136, 61, 11, 0, 1, 72, 173, 31, 253, 154, 97, 168, 170, 170, 63, 12, 0, 1, 0, 0, 0, 0, 0, 0, 47, 136, 8, 61, 13, 0, 1, 15, 255, 11, 62, 24, 248, 47, 136, 8, 61, 14, 0, 1, 0, 0, 0, 0, 147, 206, 47, 136, 8, 61, 15, 0, 1, 214, 166, 115, 3, 3, 252, 205, 204, 76, 62, 16, 0, 1, 76, 92, 160, 46, 72, 5, 181, 136, 136, 61, 17, 0, 1, 110, 19, 187, 0, 103, 23, 65, 68, 132, 63, 18, 0, 1, 243, 255, 3, 0, 49, 32, 168, 170, 170, 63, 19, 0, 1, 240, 252, 216, 1, 42, 34, 168, 170, 170, 63, 20, 0, 1, 130, 4, 255, 24, 176, 32, 168, 170, 170, 63, 21, 0, 1, 0, 0, 0, 0, 110, 16, 47, 136, 8, 61, 22, 0, 1, 0, 0, 0, 0, 159, 6, 168, 170, 170, 63, 23, 0, 1, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 24, 0, 1, 0, 0, 0, 0, 125, 33, 47, 136, 8, 61, 25, 0, 1, 0, 0, 0, 0, 87, 11, 168, 170, 170, 63, 26, 0, 1, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 27, 0, 1, 0, 0, 0, 0, 196, 35, 47, 136, 8, 61, 28, 0, 1, 0, 0, 0, 0, 233, 17, 168, 170, 170, 63, 29, 0, 1, 0, 0, 0, 0, 0, 0, 193, 170, 42, 62, 30, 0, 1, 0, 0, 0, 0, 244, 39, 205, 204, 204, 61, 31, 0, 1, 0, 0, 0, 0, 67, 35, 168, 170, 170, 63, 32, 0, 1, 0, 0, 0, 0, 0, 0, 47, 136, 8, 61, 33, 0, 1, 0, 0, 0, 0, 104, 33, 168, 170, 170, 63, 34, 0, 1, 0, 0, 0, 0, 105, 34, 168, 170, 170, 63, 35, 0, 1, 0, 0, 0, 0, 0, 0, 47, 136, 8, 61, 36, 0, 1, 186, 243, 217, 183, 118, 6, 205, 204, 204, 61, 37, 0, 1, 0, 0, 0, 0, 240, 220, 47, 136, 8, 61, 38, 0, 1, 226, 87, 119, 252, 85, 0, 168, 170, 170, 63, 39, 0, 1, 188, 163, 185, 208, 219, 3, 47, 136, 8, 61, 40, 0, 1, 219, 240, 11, 0, 167, 24, 193, 170, 42, 62, 41, 0, 1, 13, 0, 253, 255, 162, 32, 168, 170, 170, 63, 42, 0, 1, 142, 3, 106, 0, 16, 37, 168, 170, 170, 63, 43, 0, 1, 62, 7, 13, 3, 209, 29, 168, 170, 170, 63, 44, 0, 1, 0, 0, 0, 0, 110, 16, 47, 136, 8, 61, 45, 0, 1, 0, 0, 0, 0, 159, 6, 168, 170, 170, 63, 46, 0, 1, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 47, 0, 1, 0, 0, 0, 0, 125, 33, 47, 136, 8, 61, 48, 0, 1, 0, 0, 0, 0, 87, 11, 168, 170, 170, 63, 49, 0, 1, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 50, 0, 1, 0, 0, 0, 0, 196, 35, 181, 136, 136, 61, 51, 0, 1, 0, 0, 0, 0, 233, 17, 168, 170, 170, 63, 52, 0, 1, 0, 0, 0, 0, 0, 0, 47, 136, 8, 61, 53, 0, 1, 0, 0, 0, 0, 244, 39, 102, 102, 166, 63, 54, 0, 1, 0, 0, 0, 0, 67, 35, 168, 170, 170, 63, 55, 0, 1, 0, 0, 0, 0, 0, 0, 47, 136, 8, 61, 56, 0, 1, 0, 0, 0, 0, 104, 33, 168, 170, 170, 63, 57, 0, 1, 0, 0, 0, 0, 105, 34, 168, 170, 170, 63, 58, 0, 1, 0, 0, 0, 0, 0, 0, 47, 136, 8, 61, 59, 0, 1, 0, 0, 0, 0, 140, 220, 47, 136, 8, 61, 60, 0, 1, 25, 2, 219, 6, 177, 24, 47, 136, 8, 61, 61, 0, 1, 47, 0, 44, 0, 129, 91, 168, 170, 170, 63, 62, 0, 1, 0, 0, 0, 0, 0, 0, 47, 136, 8, 61, 63, 0, 1, 0, 0, 0, 0, 156, 194, 47, 136, 8, 61, 64, 0, 1, 193, 253, 94, 254, 45, 7, 47, 136, 8, 61, 65, 0, 1, 44, 0, 100, 0, 70, 83, 168, 170, 170, 63, 66, 0, 1, 0, 0, 0, 0, 0, 0, 168, 170, 170, 63, 67, 0, 1, 0, 0, 0, 0, 0, 0, 181, 136, 136, 61, 2, 0, 1, 207, 255, 253, 2, 14, 0, 181, 136, 136, 61, 3, 0, 1, 74, 1, 232, 254, 10, 5, 181, 136, 136, 61, 4, 0, 1, 208, 2, 113, 127, 33, 11, 181, 136, 136, 61, 5, 0, 1, 60, 27, 0, 125, 20, 252, 181, 136, 136, 61, 13, 0, 1, 234, 254, 14, 61, 9, 247, 181, 136, 136, 61, 14, 0, 1, 0, 0, 0, 0, 205, 204, 181, 136, 136, 61, 15, 0, 1, 63, 167, 211, 4, 147, 252, 181, 136, 136, 61, 22, 0, 1, 0, 0, 0, 0, 159, 6, 181, 136, 136, 61, 25, 0, 1, 0, 0, 0, 0, 87, 11, 181, 136, 136, 61, 28, 0, 1, 0, 0, 0, 0, 233, 17, 181, 136, 136, 61, 33, 0, 1, 0, 0, 0, 0, 104, 33, 181, 136, 136, 61, 36, 0, 1, 183, 243, 51, 184, 182, 6, 181, 136, 136, 61, 38, 0, 1, 2, 88, 151, 252, 14, 255, 205, 204, 76, 62, 40, 0, 1, 219, 240, 11, 0, 167, 24, 181, 136, 136, 61, 45, 0, 1, 0, 0, 0, 0, 159, 6, 181, 136, 136, 61, 48, 0, 1, 0, 0, 0, 0, 87, 11, 205, 204, 76, 62, 53, 0, 1, 0, 0, 0, 0, 244, 39, 181, 136, 136, 61, 56, 0, 1, 0, 0, 0, 0, 104, 33, 205, 204, 204, 61, 59, 0, 1, 0, 0, 0, 0, 219, 230, 181, 136, 136, 61, 60, 0, 1, 227, 2, 168, 6, 136, 24, 181, 136, 136, 61, 61, 0, 1, 0, 0, 0, 0, 221, 91, 181, 136, 136, 61, 63, 0, 1, 0, 0, 0, 0, 170, 204, 181, 136, 136, 61, 64, 0, 1, 174, 252, 58, 254, 143, 6, 181, 136, 136, 61, 65, 0, 1, 0, 0, 0, 0, 147, 84, 181, 136, 136, 61, 0, 0, 1, 124, 194, 51, 189, 160, 189, 114, 136, 8, 62, 0, 0, 1, 161, 192, 38, 190, 100, 191, 205, 204, 204, 61, 1, 0, 1, 43, 190, 43, 190, 228, 193, 205, 204, 204, 61, 2, 0, 1, 216, 255, 253, 2, 14, 0, 193, 170, 42, 62, 3, 0, 1, 152, 255, 45, 255, 229, 5, 114, 136, 8, 62, 4, 0, 1, 173, 247, 109, 127, 85, 8, 205, 204, 204, 61, 5, 0, 1, 113, 25, 92, 125, 106, 251, 193, 170, 42, 62, 6, 0, 1, 21, 253, 97, 255, 24, 4, 114, 136, 8, 62, 9, 0, 1, 4, 5, 113, 1, 212, 243, 114, 136, 8, 62, 11, 0, 1, 165, 173, 110, 253, 237, 97, 205, 204, 204, 61, 13, 0, 1, 15, 255, 147, 60, 57, 246, 205, 204, 76, 62, 14, 0, 1, 0, 0, 0, 0, 113, 200, 205, 204, 204, 61, 15, 0, 1, 27, 168, 99, 5, 240, 252, 205, 204, 204, 61, 17, 0, 1, 110, 19, 187, 0, 103, 23, 205, 204, 204, 61, 22, 0, 1, 0, 0, 0, 0, 159, 6, 205, 204, 204, 61, 25, 0, 1, 0, 0, 0, 0, 87, 11, 205, 204, 204, 61, 28, 0, 1, 0, 0, 0, 0, 233, 17, 205, 204, 204, 61, 33, 0, 1, 0, 0, 0, 0, 104, 33, 205, 204, 204, 61, 36, 0, 1, 175, 244, 180, 184, 19, 7, 205, 204, 204, 61, 38, 0, 1, 96, 88, 168, 252, 52, 254, 205, 204, 204, 61, 45, 0, 1, 0, 0, 0, 0, 159, 6, 205, 204, 204, 61, 48, 0, 1, 0, 0, 0, 0, 87, 11, 205, 204, 204, 61, 51, 0, 1, 0, 0, 0, 0, 233, 17, 205, 204, 204, 61, 56, 0, 1, 0, 0, 0, 0, 104, 33, 114, 136, 8, 62, 60, 0, 1, 83, 3, 14, 6, 250, 23, 205, 204, 204, 61, 61, 0, 1, 254, 255, 249, 255, 226, 91, 205, 204, 204, 61, 63, 0, 1, 0, 0, 0, 0, 187, 216, 205, 204, 204, 61, 64, 0, 1, 146, 251, 225, 0, 217, 6, 205, 204, 204, 61, 65, 0, 1, 155, 0, 221, 255, 141, 84, 114, 136, 8, 62, 1, 0, 1, 47, 190, 47, 190, 223, 193, 114, 136, 8, 62, 2, 0, 1, 229, 255, 159, 2, 14, 0, 114, 136, 8, 62, 5, 0, 0, 152, 24, 124, 125, 96, 250, 114, 136, 8, 62, 10, 0, 1, 138, 82, 166, 3, 182, 97, 114, 136, 8, 62, 13, 0, 1, 56, 255, 118, 60, 173, 245, 114, 136, 8, 62, 15, 0, 1, 26, 169, 132, 5, 85, 253, 114, 136, 8, 62, 17, 0, 1, 110, 19, 187, 0, 103, 23, 114, 136, 8, 62, 22, 0, 1, 0, 0, 0, 0, 159, 6, 114, 136, 8, 62, 25, 0, 1, 0, 0, 0, 0, 87, 11, 114, 136, 8, 62, 28, 0, 1, 0, 0, 0, 0, 233, 17, 193, 170, 42, 62, 31, 0, 1, 0, 0, 0, 0, 67, 35, 114, 136, 8, 62, 33, 0, 1, 0, 0, 0, 0, 104, 33, 114, 136, 8, 62, 36, 0, 1, 27, 246, 37, 185, 92, 7, 114, 136, 8, 62, 37, 0, 1, 0, 0, 0, 0, 32, 221, 114, 136, 8, 62, 38, 0, 1, 3, 89, 140, 252, 160, 253, 114, 136, 8, 62, 45, 0, 1, 0, 0, 0, 0, 159, 6, 114, 136, 8, 62, 48, 0, 1, 0, 0, 0, 0, 87, 11, 114, 136, 8, 62, 51, 0, 1, 0, 0, 0, 0, 233, 17, 114, 136, 8, 62, 56, 0, 1, 0, 0, 0, 0, 104, 33, 114, 136, 8, 62, 59, 0, 1, 0, 0, 0, 0, 87, 236, 114, 136, 8, 62, 61, 0, 1, 0, 0, 0, 0, 35, 92, 114, 136, 8, 62, 63, 0, 1, 0, 0, 0, 0, 68, 227, 114, 136, 8, 62, 64, 0, 1, 143, 251, 237, 3, 82, 5, 114, 136, 8, 62, 65, 0, 1, 0, 0, 0, 0, 180, 86, 205, 204, 76, 62, 0, 0, 1, 56, 191, 122, 191, 206, 192, 205, 204, 76, 62, 1, 0, 1, 163, 190, 163, 190, 101, 193, 193, 170, 42, 62, 2, 0, 1, 244, 255, 219, 1, 13, 0, 193, 170, 42, 62, 4, 0, 1, 226, 242, 32, 127, 200, 6, 193, 170, 42, 62, 5, 0, 0, 192, 26, 249, 124, 15, 249, 205, 204, 76, 62, 9, 0, 1, 236, 5, 107, 1, 128, 245, 193, 170, 42, 62, 10, 0, 1, 113, 82, 157, 3, 203, 97, 205, 204, 76, 62, 11, 0, 1, 151, 173, 113, 253, 225, 97, 193, 170, 42, 62, 13, 0, 1, 38, 255, 175, 60, 121, 245, 193, 170, 42, 62, 15, 0, 1, 247, 169, 24, 5, 222, 253, 193, 170, 42, 62, 17, 0, 1, 110, 19, 187, 0, 103, 23, 193, 170, 42, 62, 22, 0, 1, 0, 0, 0, 0, 159, 6, 193, 170, 42, 62, 25, 0, 1, 0, 0, 0, 0, 87, 11, 193, 170, 42, 62, 28, 0, 1, 0, 0, 0, 0, 233, 17, 193, 170, 42, 62, 33, 0, 1, 0, 0, 0, 0, 104, 33, 205, 204, 76, 62, 36, 0, 1, 179, 248, 131, 185, 198, 7, 193, 170, 42, 62, 37, 0, 1, 0, 0, 0, 0, 210, 221, 193, 170, 42, 62, 38, 0, 1, 2, 90, 58, 252, 193, 253, 193, 170, 42, 62, 45, 0, 1, 0, 0, 0, 0, 159, 6, 193, 170, 42, 62, 48, 0, 1, 0, 0, 0, 0, 87, 11, 193, 170, 42, 62, 51, 0, 1, 0, 0, 0, 0, 233, 17, 193, 170, 42, 62, 56, 0, 1, 0, 0, 0, 0, 104, 33, 193, 170, 42, 62, 59, 0, 1, 0, 0, 0, 0, 179, 240, 193, 170, 42, 62, 60, 0, 1, 116, 3, 169, 5, 118, 23, 193, 170, 42, 62, 61, 0, 1, 213, 255, 229, 255, 7, 92, 193, 170, 42, 62, 63, 0, 1, 0, 0, 0, 0, 235, 230, 193, 170, 42, 62, 64, 0, 1, 235, 252, 170, 5, 211, 10, 193, 170, 42, 62, 65, 0, 1, 15, 0, 191, 255, 242, 84, 217, 238, 110, 62, 2, 0, 1, 13, 0, 101, 0, 13, 0, 217, 238, 110, 62, 3, 0, 1, 203, 254, 119, 255, 67, 6, 205, 204, 76, 62, 4, 0, 1, 175, 238, 179, 126, 109, 5, 205, 204, 76, 62, 5, 0, 0, 198, 29, 50, 124, 156, 247, 205, 204, 76, 62, 6, 0, 1, 97, 252, 158, 255, 106, 3, 217, 238, 110, 62, 7, 0, 1, 208, 251, 254, 1, 247, 4, 217, 238, 110, 62, 10, 0, 1, 74, 82, 178, 3, 235, 97, 205, 204, 76, 62, 13, 0, 1, 231, 254, 63, 61, 198, 245, 205, 204, 76, 62, 15, 0, 1, 171, 170, 142, 4, 44, 254, 205, 204, 76, 62, 17, 0, 1, 110, 19, 187, 0, 103, 23, 205, 204, 76, 62, 22, 0, 1, 0, 0, 0, 0, 159, 6, 205, 204, 76, 62, 25, 0, 1, 0, 0, 0, 0, 87, 11, 205, 204, 76, 62, 28, 0, 1, 0, 0, 0, 0, 233, 17, 205, 204, 76, 62, 30, 0, 1, 0, 0, 0, 0, 244, 39, 199, 187, 187, 62, 31, 0, 1, 0, 0, 0, 0, 67, 35, 205, 204, 76, 62, 33, 0, 1, 0, 0, 0, 0, 104, 33, 205, 204, 76, 62, 37, 0, 1, 0, 0, 0, 0, 241, 222, 205, 204, 76, 62, 38, 0, 1, 55, 91, 196, 251, 31, 254, 205, 204, 76, 62, 41, 0, 1, 13, 0, 253, 255, 162, 32, 205, 204, 76, 62, 45, 0, 1, 0, 0, 0, 0, 159, 6, 205, 204, 76, 62, 48, 0, 1, 0, 0, 0, 0, 87, 11, 205, 204, 76, 62, 51, 0, 1, 0, 0, 0, 0, 233, 17, 205, 204, 76, 62, 56, 0, 1, 0, 0, 0, 0, 104, 33, 205, 204, 76, 62, 59, 0, 1, 0, 0, 0, 0, 11, 244, 205, 204, 76, 62, 60, 0, 1, 155, 3, 200, 4, 13, 23, 205, 204, 76, 62, 61, 0, 1, 0, 0, 0, 0, 67, 92, 205, 204, 76, 62, 63, 0, 1, 0, 0, 0, 0, 123, 231, 205, 204, 76, 62, 64, 0, 1, 102, 254, 198, 6, 204, 16, 205, 204, 76, 62, 65, 0, 1, 0, 0, 0, 0, 156, 84, 217, 238, 110, 62, 0, 0, 1, 177, 190, 34, 192, 90, 193, 148, 136, 136, 62, 1, 0, 1, 215, 190, 215, 190, 47, 193, 217, 238, 110, 62, 4, 0, 0, 225, 234, 40, 126, 169, 4, 217, 238, 110, 62, 5, 0, 0, 57, 30, 250, 123, 55, 246, 217, 238, 110, 62, 6, 0, 1, 223, 251, 218, 255, 239, 2, 217, 238, 110, 62, 9, 0, 1, 24, 6, 103, 1, 21, 246, 154, 153, 153, 62, 11, 0, 1, 10, 174, 198, 252, 57, 98, 217, 238, 110, 62, 13, 0, 1, 70, 254, 30, 62, 190, 246, 148, 136, 136, 62, 14, 0, 1, 0, 0, 0, 0, 134, 199, 217, 238, 110, 62, 15, 0, 1, 39, 171, 136, 4, 203, 253, 148, 136, 136, 62, 16, 0, 1, 76, 92, 160, 46, 72, 5, 217, 238, 110, 62, 17, 0, 1, 110, 19, 187, 0, 103, 23, 217, 238, 110, 62, 22, 0, 1, 0, 0, 0, 0, 159, 6, 217, 238, 110, 62, 25, 0, 1, 0, 0, 0, 0, 87, 11, 217, 238, 110, 62, 28, 0, 1, 0, 0, 0, 0, 233, 17, 217, 238, 110, 62, 30, 0, 1, 0, 0, 0, 0, 244, 39, 217, 238, 110, 62, 33, 0, 1, 0, 0, 0, 0, 104, 33, 217, 238, 110, 62, 36, 0, 1, 211, 249, 244, 185, 118, 7, 148, 136, 136, 62, 37, 0, 1, 0, 0, 0, 0, 0, 227, 217, 238, 110, 62, 38, 0, 1, 165, 92, 15, 251, 63, 254, 217, 238, 110, 62, 40, 0, 1, 219, 240, 11, 0, 167, 24, 199, 187, 187, 62, 41, 0, 1, 13, 0, 253, 255, 162, 32, 217, 238, 110, 62, 45, 0, 1, 0, 0, 0, 0, 159, 6, 217, 238, 110, 62, 48, 0, 1, 0, 0, 0, 0, 87, 11, 217, 238, 110, 62, 51, 0, 1, 0, 0, 0, 0, 233, 17, 217, 238, 110, 62, 53, 0, 1, 0, 0, 0, 0, 244, 39, 217, 238, 110, 62, 56, 0, 1, 0, 0, 0, 0, 104, 33, 217, 238, 110, 62, 59, 0, 1, 0, 0, 0, 0, 102, 246, 217, 238, 110, 62, 60, 0, 1, 1, 4, 210, 2, 149, 22, 217, 238, 110, 62, 61, 0, 1, 185, 255, 191, 255, 143, 92, 217, 238, 110, 62, 63, 0, 1, 0, 0, 0, 0, 139, 233, 217, 238, 110, 62, 64, 0, 1, 235, 254, 218, 8, 94, 19, 217, 238, 110, 62, 65, 0, 1, 87, 255, 44, 255, 199, 82, 148, 136, 136, 62, 0, 0, 1, 104, 190, 175, 192, 166, 193, 148, 136, 136, 62, 2, 0, 1, 18, 0, 0, 0, 13, 0, 154, 153, 153, 62, 3, 0, 1, 128, 254, 225, 255, 82, 6, 148, 136, 136, 62, 4, 0, 0, 200, 232, 205, 125, 18, 4, 148, 136, 136, 62, 5, 0, 0, 58, 31, 155, 123, 228, 244, 148, 136, 136, 62, 6, 0, 1, 155, 251, 18, 0, 186, 2, 154, 153, 153, 62, 7, 0, 1, 217, 251, 23, 2, 226, 4, 148, 136, 136, 62, 9, 0, 1, 15, 6, 103, 1, 97, 246, 148, 136, 136, 62, 10, 0, 1, 79, 82, 200, 3, 229, 97, 148, 136, 136, 62, 13, 0, 1, 179, 253, 52, 63, 93, 248, 148, 136, 136, 62, 15, 0, 1, 9, 171, 136, 4, 249, 252, 148, 136, 136, 62, 17, 0, 1, 110, 19, 187, 0, 103, 23, 148, 136, 136, 62, 22, 0, 1, 0, 0, 0, 0, 159, 6, 148, 136, 136, 62, 25, 0, 1, 0, 0, 0, 0, 87, 11, 148, 136, 136, 62, 28, 0, 1, 0, 0, 0, 0, 233, 17, 148, 136, 136, 62, 30, 0, 1, 0, 0, 0, 0, 244, 39, 148, 136, 136, 62, 33, 0, 1, 0, 0, 0, 0, 104, 33, 148, 136, 136, 62, 36, 0, 1, 199, 250, 120, 186, 3, 7, 148, 136, 136, 62, 38, 0, 1, 226, 93, 53, 250, 87, 254, 148, 136, 136, 62, 40, 0, 1, 219, 240, 11, 0, 167, 24, 148, 136, 136, 62, 45, 0, 1, 0, 0, 0, 0, 159, 6, 148, 136, 136, 62, 48, 0, 1, 0, 0, 0, 0, 87, 11, 148, 136, 136, 62, 51, 0, 1, 0, 0, 0, 0, 233, 17, 148, 136, 136, 62, 53, 0, 1, 0, 0, 0, 0, 244, 39, 148, 136, 136, 62, 56, 0, 1, 0, 0, 0, 0, 104, 33, 148, 136, 136, 62, 59, 0, 1, 0, 0, 0, 0, 155, 245, 148, 136, 136, 62, 60, 0, 1, 100, 4, 9, 0, 23, 23, 148, 136, 136, 62, 61, 0, 1, 0, 0, 0, 0, 61, 93, 148, 136, 136, 62, 63, 0, 1, 0, 0, 0, 0, 52, 232, 148, 136, 136, 62, 64, 0, 1, 15, 255, 195, 8, 61, 20, 148, 136, 136, 62, 65, 0, 1, 0, 0, 0, 0, 135, 84, 154, 153, 153, 62, 0, 0, 1, 146, 190, 2, 193, 121, 193, 159, 170, 170, 62, 1, 0, 1, 140, 190, 140, 190, 125, 193, 159, 170, 170, 62, 2, 0, 1, 12, 0, 253, 255, 13, 0, 154, 153, 153, 62, 4, 0, 0, 47, 234, 12, 126, 100, 3, 154, 153, 153, 62, 5, 0, 0, 139, 32, 33, 123, 183, 243, 154, 153, 153, 62, 6, 0, 1, 153, 251, 79, 0, 212, 2, 154, 153, 153, 62, 9, 0, 1, 1, 6, 90, 1, 84, 246, 159, 170, 170, 62, 10, 0, 1, 202, 82, 165, 3, 127, 97, 154, 153, 153, 62, 13, 0, 1, 120, 253, 158, 64, 7, 251, 154, 153, 153, 62, 14, 0, 1, 0, 0, 0, 0, 72, 198, 154, 153, 153, 62, 15, 0, 1, 169, 169, 109, 4, 122, 251, 159, 170, 170, 62, 16, 0, 1, 76, 92, 160, 46, 72, 5, 159, 170, 170, 62, 17, 0, 1, 110, 19, 187, 0, 103, 23, 154, 153, 153, 62, 22, 0, 1, 0, 0, 0, 0, 159, 6, 154, 153, 153, 62, 25, 0, 1, 0, 0, 0, 0, 87, 11, 154, 153, 153, 62, 28, 0, 1, 0, 0, 0, 0, 233, 17, 199, 187, 187, 62, 30, 0, 1, 0, 0, 0, 0, 244, 39, 154, 153, 153, 62, 33, 0, 1, 0, 0, 0, 0, 104, 33, 159, 170, 170, 62, 36, 0, 1, 79, 251, 173, 187, 168, 6, 154, 153, 153, 62, 37, 0, 1, 0, 0, 0, 0, 101, 227, 154, 153, 153, 62, 38, 0, 1, 136, 94, 207, 249, 196, 254, 154, 153, 153, 62, 40, 0, 1, 219, 240, 11, 0, 167, 24, 154, 153, 153, 62, 45, 0, 1, 0, 0, 0, 0, 159, 6, 154, 153, 153, 62, 48, 0, 1, 0, 0, 0, 0, 87, 11, 154, 153, 153, 62, 51, 0, 1, 0, 0, 0, 0, 233, 17, 154, 153, 153, 62, 53, 0, 1, 0, 0, 0, 0, 244, 39, 154, 153, 153, 62, 56, 0, 1, 0, 0, 0, 0, 104, 33, 154, 153, 153, 62, 59, 0, 1, 0, 0, 0, 0, 140, 238, 154, 153, 153, 62, 60, 0, 1, 242, 4, 65, 252, 67, 25, 154, 153, 153, 62, 61, 0, 1, 213, 255, 248, 255, 180, 93, 154, 153, 153, 62, 63, 0, 1, 0, 0, 0, 0, 17, 229, 154, 153, 153, 62, 64, 0, 1, 186, 255, 132, 1, 186, 15, 154, 153, 153, 62, 65, 0, 1, 135, 255, 236, 255, 22, 86, 199, 187, 187, 62, 0, 0, 1, 84, 191, 76, 193, 168, 192, 205, 204, 204, 62, 3, 0, 1, 201, 254, 243, 0, 232, 5, 159, 170, 170, 62, 4, 0, 0, 152, 237, 147, 126, 139, 2, 159, 170, 170, 62, 5, 0, 0, 95, 33, 194, 122, 180, 242, 159, 170, 170, 62, 6, 0, 1, 205, 251, 151, 0, 49, 3, 199, 187, 187, 62, 7, 0, 1, 134, 252, 187, 1, 211, 4, 159, 170, 170, 62, 9, 0, 1, 186, 5, 73, 1, 5, 246, 159, 170, 170, 62, 11, 0, 1, 38, 174, 134, 252, 76, 98, 159, 170, 170, 62, 13, 0, 1, 153, 253, 250, 65, 184, 253, 159, 170, 170, 62, 14, 0, 1, 0, 0, 0, 0, 123, 197, 159, 170, 170, 62, 15, 0, 1, 212, 167, 103, 4, 225, 249, 159, 170, 170, 62, 22, 0, 1, 0, 0, 0, 0, 159, 6, 159, 170, 170, 62, 25, 0, 1, 0, 0, 0, 0, 87, 11, 159, 170, 170, 62, 28, 0, 1, 0, 0, 0, 0, 233, 17, 159, 170, 170, 62, 33, 0, 1, 0, 0, 0, 0, 104, 33, 159, 170, 170, 62, 37, 0, 1, 0, 0, 0, 0, 227, 227, 159, 170, 170, 62, 38, 0, 1, 201, 94, 47, 249, 45, 255, 159, 170, 170, 62, 40, 0, 1, 219, 240, 11, 0, 167, 24, 159, 170, 170, 62, 45, 0, 1, 0, 0, 0, 0, 159, 6, 159, 170, 170, 62, 48, 0, 1, 0, 0, 0, 0, 87, 11, 159, 170, 170, 62, 51, 0, 1, 0, 0, 0, 0, 233, 17, 211, 221, 221, 62, 53, 0, 1, 0, 0, 0, 0, 244, 39, 159, 170, 170, 62, 56, 0, 1, 0, 0, 0, 0, 104, 33, 159, 170, 170, 62, 59, 0, 1, 0, 0, 0, 0, 80, 228, 159, 170, 170, 62, 60, 0, 1, 169, 5, 77, 248, 66, 26, 159, 170, 170, 62, 61, 0, 1, 0, 0, 0, 0, 219, 95, 159, 170, 170, 62, 63, 0, 1, 0, 0, 0, 0, 54, 226, 159, 170, 170, 62, 64, 0, 1, 122, 0, 101, 249, 233, 8, 159, 170, 170, 62, 65, 0, 1, 0, 0, 0, 0, 136, 89, 205, 204, 204, 62, 1, 0, 1, 248, 189, 248, 189, 26, 194, 205, 204, 204, 62, 2, 0, 1, 251, 255, 126, 0, 14, 0, 199, 187, 187, 62, 4, 0, 0, 101, 242, 43, 127, 202, 0, 199, 187, 187, 62, 5, 0, 0, 67, 35, 25, 122, 202, 241, 205, 204, 204, 62, 6, 0, 1, 177, 252, 59, 1, 110, 4, 199, 187, 187, 62, 9, 0, 1, 12, 5, 67, 1, 143, 245, 199, 187, 187, 62, 10, 0, 1, 147, 82, 64, 3, 180, 97, 205, 204, 204, 62, 11, 0, 1, 208, 173, 229, 251, 249, 97, 199, 187, 187, 62, 13, 0, 1, 40, 254, 202, 66, 144, 255, 199, 187, 187, 62, 14, 0, 1, 0, 0, 0, 0, 29, 198, 199, 187, 187, 62, 15, 0, 1, 1, 166, 134, 4, 136, 248, 199, 187, 187, 62, 16, 0, 1, 76, 92, 160, 46, 72, 5, 205, 204, 204, 62, 17, 0, 1, 110, 19, 187, 0, 103, 23, 199, 187, 187, 62, 22, 0, 1, 0, 0, 0, 0, 159, 6, 199, 187, 187, 62, 25, 0, 1, 0, 0, 0, 0, 87, 11, 199, 187, 187, 62, 28, 0, 1, 0, 0, 0, 0, 233, 17, 199, 187, 187, 62, 33, 0, 1, 0, 0, 0, 0, 104, 33, 199, 187, 187, 62, 36, 0, 1, 227, 251, 223, 187, 212, 5, 205, 204, 204, 62, 37, 0, 1, 0, 0, 0, 0, 73, 235, 199, 187, 187, 62, 38, 0, 1, 163, 94, 45, 247, 30, 255, 199, 187, 187, 62, 40, 0, 1, 219, 240, 11, 0, 167, 24, 199, 187, 187, 62, 45, 0, 1, 0, 0, 0, 0, 159, 6, 199, 187, 187, 62, 48, 0, 1, 0, 0, 0, 0, 87, 11, 199, 187, 187, 62, 51, 0, 1, 0, 0, 0, 0, 233, 17, 199, 187, 187, 62, 56, 0, 1, 0, 0, 0, 0, 104, 33, 205, 204, 204, 62, 59, 0, 1, 0, 0, 0, 0, 184, 204, 199, 187, 187, 62, 60, 0, 1, 206, 5, 46, 244, 246, 23, 199, 187, 187, 62, 61, 0, 1, 51, 0, 211, 0, 120, 96, 199, 187, 187, 62, 63, 0, 1, 0, 0, 0, 0, 211, 220, 199, 187, 187, 62, 64, 0, 1, 241, 255, 157, 246, 126, 4, 199, 187, 187, 62, 65, 0, 1, 28, 1, 6, 1, 172, 90, 205, 204, 204, 62, 0, 0, 1, 165, 191, 83, 193, 83, 192, 205, 204, 204, 62, 4, 0, 0, 114, 248, 159, 127, 191, 255, 205, 204, 204, 62, 5, 0, 0, 72, 36, 178, 121, 23, 241, 205, 204, 204, 62, 7, 0, 1, 6, 253, 113, 1, 207, 4, 211, 221, 221, 62, 9, 0, 1, 223, 2, 74, 1, 95, 244, 205, 204, 204, 62, 10, 0, 1, 76, 82, 211, 2, 246, 97, 205, 204, 204, 62, 13, 0, 1, 247, 254, 89, 67, 130, 0, 205, 204, 204, 62, 14, 0, 1, 0, 0, 0, 0, 40, 200, 205, 204, 204, 62, 15, 0, 1, 124, 164, 196, 4, 219, 247, 205, 204, 204, 62, 16, 0, 1, 76, 92, 160, 46, 72, 5, 205, 204, 204, 62, 22, 0, 1, 0, 0, 0, 0, 159, 6, 205, 204, 204, 62, 25, 0, 1, 0, 0, 0, 0, 87, 11, 205, 204, 204, 62, 28, 0, 1, 0, 0, 0, 0, 233, 17, 205, 204, 204, 62, 30, 0, 1, 0, 0, 0, 0, 244, 39, 205, 204, 140, 63, 31, 0, 1, 0, 0, 0, 0, 67, 35, 205, 204, 204, 62, 33, 0, 1, 0, 0, 0, 0, 104, 33, 205, 204, 204, 62, 36, 0, 1, 185, 252, 195, 187, 70, 5, 205, 204, 204, 62, 38, 0, 1, 254, 93, 237, 244, 117, 254, 250, 238, 238, 62, 40, 0, 1, 219, 240, 11, 0, 167, 24, 205, 204, 204, 62, 41, 0, 1, 13, 0, 253, 255, 162, 32, 205, 204, 204, 62, 45, 0, 1, 0, 0, 0, 0, 159, 6, 205, 204, 204, 62, 48, 0, 1, 0, 0, 0, 0, 87, 11, 205, 204, 204, 62, 51, 0, 1, 0, 0, 0, 0, 233, 17, 205, 204, 204, 62, 56, 0, 1, 0, 0, 0, 0, 104, 33, 205, 204, 204, 62, 60, 0, 1, 136, 6, 130, 241, 186, 16, 205, 204, 204, 62, 61, 0, 1, 0, 0, 0, 0, 101, 99, 205, 204, 204, 62, 63, 0, 1, 0, 0, 0, 0, 92, 216, 205, 204, 204, 62, 64, 0, 1, 44, 255, 145, 245, 64, 1, 205, 204, 204, 62, 65, 0, 1, 92, 1, 185, 0, 212, 90, 250, 238, 238, 62, 0, 0, 1, 103, 191, 55, 193, 149, 192, 250, 238, 238, 62, 1, 0, 1, 50, 189, 50, 189, 240, 194, 250, 238, 238, 62, 2, 0, 1, 239, 255, 120, 1, 15, 0, 131, 136, 8, 63, 3, 0, 1, 233, 255, 89, 2, 251, 4, 211, 221, 221, 62, 4, 0, 0, 170, 254, 177, 127, 113, 1, 211, 221, 221, 62, 5, 0, 0, 123, 35, 231, 121, 255, 240, 0, 0, 0, 63, 6, 0, 1, 186, 254, 28, 2, 148, 6, 211, 221, 221, 62, 7, 0, 1, 153, 253, 29, 1, 204, 4, 250, 238, 238, 62, 10, 0, 1, 84, 82, 116, 2, 243, 97, 211, 221, 221, 62, 11, 0, 1, 91, 173, 183, 251, 147, 97, 211, 221, 221, 62, 13, 0, 1, 250, 255, 242, 67, 32, 0, 211, 221, 221, 62, 14, 0, 1, 0, 0, 0, 0, 20, 204, 211, 221, 221, 62, 15, 0, 1, 4, 164, 204, 4, 105, 248, 250, 238, 238, 62, 16, 0, 1, 76, 92, 160, 46, 72, 5, 211, 221, 221, 62, 17, 0, 1, 110, 19, 187, 0, 103, 23, 211, 221, 221, 62, 22, 0, 1, 0, 0, 0, 0, 159, 6, 211, 221, 221, 62, 25, 0, 1, 0, 0, 0, 0, 87, 11, 211, 221, 221, 62, 28, 0, 1, 0, 0, 0, 0, 233, 17, 211, 221, 221, 62, 30, 0, 1, 0, 0, 0, 0, 244, 39, 211, 221, 221, 62, 33, 0, 1, 0, 0, 0, 0, 104, 33, 211, 221, 221, 62, 36, 0, 1, 65, 253, 62, 187, 96, 7, 211, 221, 221, 62, 37, 0, 1, 0, 0, 0, 0, 75, 234, 211, 221, 221, 62, 38, 0, 1, 211, 92, 28, 244, 189, 253, 250, 238, 238, 62, 41, 0, 1, 13, 0, 253, 255, 162, 32, 211, 221, 221, 62, 45, 0, 1, 0, 0, 0, 0, 159, 6, 211, 221, 221, 62, 48, 0, 1, 0, 0, 0, 0, 87, 11, 211, 221, 221, 62, 51, 0, 1, 0, 0, 0, 0, 233, 17, 211, 221, 221, 62, 56, 0, 1, 0, 0, 0, 0, 104, 33, 211, 221, 221, 62, 59, 0, 1, 0, 0, 0, 0, 218, 195, 211, 221, 221, 62, 60, 0, 1, 91, 9, 138, 242, 111, 5, 211, 221, 221, 62, 61, 0, 1, 87, 0, 91, 1, 122, 96, 211, 221, 221, 62, 63, 0, 1, 0, 0, 0, 0, 39, 213, 211, 221, 221, 62, 64, 0, 1, 115, 255, 154, 245, 87, 5, 182, 187, 59, 63, 65, 0, 1, 92, 1, 185, 0, 212, 90, 250, 238, 238, 62, 4, 0, 0, 7, 6, 91, 127, 181, 3, 250, 238, 238, 62, 5, 0, 0, 162, 33, 112, 122, 58, 241, 23, 17, 17, 63, 7, 0, 1, 249, 255, 220, 255, 227, 4, 131, 136, 8, 63, 9, 0, 1, 143, 254, 129, 1, 203, 242, 250, 238, 238, 62, 11, 0, 1, 251, 172, 182, 251, 66, 97, 250, 238, 238, 62, 13, 0, 1, 25, 1, 96, 68, 189, 254, 250, 238, 238, 62, 14, 0, 1, 0, 0, 0, 0, 38, 209, 250, 238, 238, 62, 15, 0, 1, 233, 163, 200, 4, 173, 249, 250, 238, 238, 62, 17, 0, 1, 110, 19, 187, 0, 103, 23, 250, 238, 238, 62, 22, 0, 1, 0, 0, 0, 0, 159, 6, 250, 238, 238, 62, 25, 0, 1, 0, 0, 0, 0, 87, 11, 250, 238, 238, 62, 28, 0, 1, 0, 0, 0, 0, 233, 17, 250, 238, 238, 62, 30, 0, 1, 0, 0, 0, 0, 244, 39, 250, 238, 238, 62, 33, 0, 1, 0, 0, 0, 0, 104, 33, 250, 238, 238, 62, 36, 0, 1, 122, 253, 207, 186, 241, 9, 250, 238, 238, 62, 37, 0, 1, 0, 0, 0, 0, 37, 231, 250, 238, 238, 62, 38, 0, 1, 167, 91, 58, 244, 12, 253, 250, 238, 238, 62, 45, 0, 1, 0, 0, 0, 0, 159, 6, 250, 238, 238, 62, 48, 0, 1, 0, 0, 0, 0, 87, 11, 250, 238, 238, 62, 51, 0, 1, 0, 0, 0, 0, 233, 17, 250, 238, 238, 62, 53, 0, 1, 0, 0, 0, 0, 244, 39, 250, 238, 238, 62, 56, 0, 1, 0, 0, 0, 0, 104, 33, 250, 238, 238, 62, 59, 0, 1, 0, 0, 0, 0, 156, 188, 250, 238, 238, 62, 60, 0, 1, 2, 10, 199, 247, 169, 247, 250, 238, 238, 62, 61, 0, 1, 0, 0, 0, 0, 73, 93, 250, 238, 238, 62, 63, 0, 1, 0, 0, 0, 0, 154, 211, 250, 238, 238, 62, 64, 0, 1, 252, 255, 201, 245, 153, 8, 131, 136, 8, 63, 0, 0, 1, 18, 191, 226, 192, 242, 192, 0, 0, 0, 63, 1, 0, 1, 18, 189, 18, 189, 20, 195, 0, 0, 0, 63, 2, 0, 1, 240, 255, 123, 1, 15, 0, 0, 0, 0, 63, 4, 0, 0, 200, 12, 187, 126, 98, 4, 0, 0, 0, 63, 5, 0, 0, 244, 30, 45, 123, 176, 241, 176, 170, 42, 63, 10, 0, 1, 194, 82, 46, 3, 142, 97, 131, 136, 8, 63, 11, 0, 1, 83, 173, 133, 252, 155, 97, 0, 0, 0, 63, 13, 0, 1, 179, 2, 136, 68, 251, 252, 0, 0, 0, 63, 14, 0, 1, 0, 0, 0, 0, 187, 213, 131, 136, 8, 63, 15, 0, 1, 128, 163, 105, 4, 110, 254, 131, 136, 8, 63, 16, 0, 1, 76, 92, 160, 46, 72, 5, 176, 170, 42, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 0, 0, 0, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 0, 0, 0, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 0, 0, 0, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 0, 0, 0, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 0, 0, 0, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 0, 0, 0, 63, 36, 0, 1, 94, 253, 18, 187, 235, 10, 0, 0, 0, 63, 37, 0, 1, 0, 0, 0, 0, 171, 227, 0, 0, 0, 63, 38, 0, 1, 3, 91, 53, 245, 73, 252, 29, 34, 34, 63, 40, 0, 1, 219, 240, 11, 0, 167, 24, 0, 0, 0, 63, 41, 0, 1, 13, 0, 253, 255, 162, 32, 0, 0, 0, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 0, 0, 0, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 131, 136, 8, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 0, 0, 0, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 0, 0, 0, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 0, 0, 0, 63, 59, 0, 1, 0, 0, 0, 0, 165, 182, 0, 0, 0, 63, 60, 0, 1, 139, 9, 254, 251, 110, 245, 0, 0, 0, 63, 61, 0, 1, 18, 0, 11, 0, 124, 94, 0, 0, 0, 63, 63, 0, 1, 0, 0, 0, 0, 158, 211, 0, 0, 0, 63, 64, 0, 1, 145, 0, 8, 246, 2, 11, 131, 136, 8, 63, 1, 0, 1, 26, 189, 26, 189, 10, 195, 131, 136, 8, 63, 2, 0, 1, 249, 255, 57, 1, 14, 0, 131, 136, 8, 63, 4, 0, 0, 13, 19, 223, 125, 194, 4, 23, 17, 17, 63, 5, 0, 0, 127, 24, 184, 124, 227, 242, 23, 17, 17, 63, 6, 0, 1, 36, 0, 116, 2, 113, 7, 131, 136, 8, 63, 13, 0, 1, 95, 4, 155, 68, 241, 250, 131, 136, 8, 63, 14, 0, 1, 0, 0, 0, 0, 9, 218, 131, 136, 8, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 131, 136, 8, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 131, 136, 8, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 131, 136, 8, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 131, 136, 8, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 131, 136, 8, 63, 36, 0, 1, 81, 253, 152, 187, 45, 11, 23, 17, 17, 63, 37, 0, 1, 0, 0, 0, 0, 77, 220, 131, 136, 8, 63, 38, 0, 1, 142, 90, 174, 246, 157, 251, 227, 221, 93, 63, 41, 0, 1, 13, 0, 253, 255, 162, 32, 131, 136, 8, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 131, 136, 8, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 131, 136, 8, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 131, 136, 8, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 131, 136, 8, 63, 59, 0, 1, 0, 0, 0, 0, 5, 178, 131, 136, 8, 63, 60, 0, 1, 85, 8, 222, 255, 193, 247, 131, 136, 8, 63, 61, 0, 1, 0, 0, 0, 0, 248, 91, 131, 136, 8, 63, 63, 0, 1, 0, 0, 0, 0, 138, 212, 23, 17, 17, 63, 64, 0, 1, 127, 1, 169, 246, 190, 14, 154, 153, 25, 63, 0, 0, 1, 16, 191, 92, 192, 247, 192, 176, 170, 42, 63, 1, 0, 1, 44, 190, 44, 190, 226, 193, 29, 34, 34, 63, 2, 0, 1, 83, 0, 144, 255, 12, 0, 29, 34, 34, 63, 3, 0, 1, 225, 0, 149, 2, 115, 4, 23, 17, 17, 63, 4, 0, 0, 113, 23, 21, 125, 143, 5, 23, 17, 17, 63, 9, 0, 1, 60, 253, 151, 1, 131, 242, 154, 153, 25, 63, 11, 0, 1, 142, 173, 203, 252, 209, 97, 23, 17, 17, 63, 13, 0, 1, 28, 6, 168, 68, 87, 249, 23, 17, 17, 63, 14, 0, 1, 0, 0, 0, 0, 130, 220, 23, 17, 17, 63, 15, 0, 1, 146, 163, 1, 4, 28, 0, 23, 17, 17, 63, 16, 0, 1, 76, 92, 160, 46, 72, 5, 23, 17, 17, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 23, 17, 17, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 23, 17, 17, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 23, 17, 17, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 23, 17, 17, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 23, 17, 17, 63, 36, 0, 1, 194, 253, 33, 188, 1, 11, 154, 153, 25, 63, 38, 0, 1, 198, 89, 24, 250, 22, 251, 23, 17, 17, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 23, 17, 17, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 23, 17, 17, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 23, 17, 17, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 23, 17, 17, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 23, 17, 17, 63, 59, 0, 1, 0, 0, 0, 0, 0, 176, 23, 17, 17, 63, 60, 0, 1, 155, 6, 250, 2, 231, 251, 23, 17, 17, 63, 61, 0, 1, 215, 255, 224, 255, 202, 93, 23, 17, 17, 63, 63, 0, 1, 0, 0, 0, 0, 181, 213, 154, 153, 25, 63, 4, 0, 0, 179, 26, 104, 124, 165, 6, 154, 153, 25, 63, 5, 0, 0, 247, 20, 110, 125, 149, 243, 154, 153, 25, 63, 6, 0, 1, 194, 0, 129, 2, 130, 7, 154, 153, 25, 63, 7, 0, 1, 111, 0, 176, 255, 243, 4, 154, 153, 25, 63, 9, 0, 1, 39, 252, 170, 1, 111, 242, 154, 153, 25, 63, 13, 0, 1, 235, 7, 176, 68, 137, 248, 154, 153, 25, 63, 14, 0, 1, 0, 0, 0, 0, 112, 221, 154, 153, 25, 63, 15, 0, 1, 197, 163, 93, 3, 103, 1, 154, 153, 25, 63, 16, 0, 1, 76, 92, 160, 46, 72, 5, 154, 153, 25, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 154, 153, 25, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 154, 153, 25, 63, 28].concat([0, 1, 0, 0, 0, 0, 233, 17, 154, 153, 25, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 154, 153, 25, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 29, 34, 34, 63, 36, 0, 1, 214, 254, 18, 189, 148, 9, 29, 34, 34, 63, 37, 0, 1, 0, 0, 0, 0, 14, 214, 154, 153, 25, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 154, 153, 25, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 154, 153, 25, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 154, 153, 25, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 154, 153, 25, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 154, 153, 25, 63, 59, 0, 1, 0, 0, 0, 0, 1, 176, 154, 153, 25, 63, 60, 0, 1, 202, 4, 172, 5, 244, 0, 154, 153, 25, 63, 61, 0, 1, 0, 0, 0, 0, 15, 94, 154, 153, 25, 63, 63, 0, 1, 0, 0, 0, 0, 110, 215, 154, 153, 25, 63, 64, 0, 1, 202, 1, 8, 247, 73, 16, 29, 34, 34, 63, 0, 0, 1, 53, 191, 14, 192, 212, 192, 29, 34, 34, 63, 4, 0, 0, 205, 28, 218, 123, 154, 8, 29, 34, 34, 63, 5, 0, 0, 11, 17, 26, 126, 100, 244, 176, 170, 42, 63, 6, 0, 1, 239, 1, 84, 2, 234, 6, 182, 187, 59, 63, 7, 0, 1, 227, 1, 124, 255, 102, 5, 176, 170, 42, 63, 9, 0, 1, 124, 250, 201, 1, 201, 242, 176, 170, 42, 63, 11, 0, 1, 102, 173, 131, 252, 170, 97, 29, 34, 34, 63, 13, 0, 1, 140, 9, 178, 68, 92, 248, 29, 34, 34, 63, 14, 0, 1, 0, 0, 0, 0, 185, 221, 29, 34, 34, 63, 15, 0, 1, 23, 164, 190, 2, 26, 2, 227, 221, 93, 63, 16, 0, 1, 76, 92, 160, 46, 72, 5, 29, 34, 34, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 29, 34, 34, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 29, 34, 34, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 29, 34, 34, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 29, 34, 34, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 29, 34, 34, 63, 38, 0, 1, 99, 89, 142, 251, 222, 250, 29, 34, 34, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 29, 34, 34, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 29, 34, 34, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 176, 170, 42, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 29, 34, 34, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 29, 34, 34, 63, 59, 0, 1, 0, 0, 0, 0, 84, 178, 29, 34, 34, 63, 60, 0, 1, 116, 3, 190, 8, 185, 4, 29, 34, 34, 63, 61, 0, 1, 229, 255, 114, 255, 65, 94, 29, 34, 34, 63, 63, 0, 1, 0, 0, 0, 0, 233, 217, 29, 34, 34, 63, 64, 0, 1, 12, 2, 113, 247, 129, 17, 176, 170, 42, 63, 0, 0, 1, 146, 191, 190, 191, 119, 192, 51, 51, 51, 63, 2, 0, 1, 200, 0, 10, 255, 11, 0, 182, 187, 59, 63, 3, 0, 1, 15, 2, 248, 1, 13, 4, 176, 170, 42, 63, 4, 0, 0, 32, 30, 138, 123, 250, 9, 176, 170, 42, 63, 5, 0, 0, 225, 12, 174, 126, 68, 245, 176, 170, 42, 63, 13, 0, 1, 5, 11, 169, 68, 233, 248, 176, 170, 42, 63, 14, 0, 1, 0, 0, 0, 0, 20, 221, 176, 170, 42, 63, 15, 0, 1, 143, 164, 38, 2, 64, 2, 176, 170, 42, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 176, 170, 42, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 176, 170, 42, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 176, 170, 42, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 176, 170, 42, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 176, 170, 42, 63, 36, 0, 1, 51, 255, 110, 189, 164, 8, 176, 170, 42, 63, 37, 0, 1, 0, 0, 0, 0, 81, 211, 176, 170, 42, 63, 38, 0, 1, 2, 89, 176, 252, 161, 250, 176, 170, 42, 63, 40, 0, 1, 219, 240, 11, 0, 167, 24, 176, 170, 42, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 176, 170, 42, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 176, 170, 42, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 176, 170, 42, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 176, 170, 42, 63, 59, 0, 1, 0, 0, 0, 0, 243, 182, 176, 170, 42, 63, 60, 0, 1, 115, 2, 127, 10, 219, 7, 176, 170, 42, 63, 61, 0, 1, 0, 0, 0, 0, 157, 93, 176, 170, 42, 63, 63, 0, 1, 0, 0, 0, 0, 60, 221, 176, 170, 42, 63, 64, 0, 1, 31, 2, 217, 247, 77, 18, 182, 187, 59, 63, 0, 0, 1, 78, 193, 37, 191, 185, 190, 51, 51, 51, 63, 1, 0, 1, 107, 190, 107, 190, 160, 193, 51, 51, 51, 63, 4, 0, 0, 36, 30, 212, 123, 165, 8, 51, 51, 51, 63, 5, 0, 0, 139, 8, 39, 127, 122, 246, 182, 187, 59, 63, 6, 0, 1, 44, 3, 225, 1, 174, 5, 74, 68, 68, 63, 9, 0, 1, 170, 247, 59, 2, 62, 244, 182, 187, 59, 63, 10, 0, 1, 184, 82, 225, 2, 154, 97, 51, 51, 51, 63, 11, 0, 1, 95, 173, 102, 252, 163, 97, 51, 51, 51, 63, 13, 0, 1, 52, 12, 174, 68, 114, 250, 74, 68, 68, 63, 14, 0, 1, 0, 0, 0, 0, 21, 217, 51, 51, 51, 63, 15, 0, 1, 110, 165, 236, 1, 80, 1, 51, 51, 51, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 51, 51, 51, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 51, 51, 51, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 51, 51, 51, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 51, 51, 51, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 51, 51, 51, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 182, 187, 59, 63, 36, 0, 1, 132, 254, 132, 190, 7, 6, 51, 51, 51, 63, 37, 0, 1, 0, 0, 0, 0, 68, 208, 51, 51, 51, 63, 38, 0, 1, 175, 88, 164, 253, 165, 250, 182, 187, 59, 63, 40, 0, 1, 219, 240, 11, 0, 167, 24, 51, 51, 51, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 51, 51, 51, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 51, 51, 51, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 51, 51, 51, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 51, 51, 51, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 51, 51, 51, 63, 59, 0, 1, 0, 0, 0, 0, 14, 192, 51, 51, 51, 63, 60, 0, 1, 154, 0, 71, 9, 13, 10, 51, 51, 51, 63, 61, 0, 1, 211, 255, 187, 254, 57, 92, 51, 51, 51, 63, 63, 0, 1, 0, 0, 0, 0, 213, 225, 51, 51, 51, 63, 64, 0, 1, 21, 2, 64, 248, 106, 18, 182, 187, 59, 63, 1, 0, 1, 136, 190, 136, 190, 130, 193, 182, 187, 59, 63, 2, 0, 1, 14, 1, 46, 255, 10, 0, 182, 187, 59, 63, 4, 0, 0, 23, 30, 22, 124, 150, 6, 182, 187, 59, 63, 5, 0, 0, 230, 3, 124, 127, 182, 247, 80, 85, 85, 63, 11, 0, 1, 143, 173, 99, 252, 203, 97, 182, 187, 59, 63, 13, 0, 1, 202, 12, 155, 68, 72, 252, 182, 187, 59, 63, 15, 0, 1, 17, 166, 1, 2, 52, 0, 182, 187, 59, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 182, 187, 59, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 182, 187, 59, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 182, 187, 59, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 182, 187, 59, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 182, 187, 59, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 182, 187, 59, 63, 37, 0, 1, 0, 0, 0, 0, 171, 205, 182, 187, 59, 63, 38, 0, 1, 92, 88, 53, 254, 177, 250, 182, 187, 59, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 182, 187, 59, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 182, 187, 59, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 182, 187, 59, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 182, 187, 59, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 74, 68, 68, 63, 59, 0, 1, 0, 0, 0, 0, 87, 215, 182, 187, 59, 63, 60, 0, 1, 183, 255, 24, 6, 36, 8, 182, 187, 59, 63, 61, 0, 1, 0, 0, 0, 0, 110, 92, 182, 187, 59, 63, 63, 0, 1, 0, 0, 0, 0, 118, 231, 182, 187, 59, 63, 64, 0, 1, 231, 1, 169, 248, 253, 17, 205, 204, 76, 63, 0, 0, 1, 33, 195, 157, 190, 242, 188, 74, 68, 68, 63, 1, 0, 1, 93, 190, 93, 190, 175, 193, 74, 68, 68, 63, 2, 0, 1, 91, 1, 243, 255, 8, 0, 205, 204, 76, 63, 3, 0, 1, 242, 2, 80, 1, 207, 3, 74, 68, 68, 63, 4, 0, 0, 207, 29, 61, 124, 228, 5, 205, 204, 76, 63, 5, 0, 0, 226, 253, 178, 127, 167, 249, 205, 204, 76, 63, 6, 0, 1, 114, 4, 70, 1, 22, 4, 205, 204, 76, 63, 7, 0, 1, 138, 2, 134, 255, 180, 5, 205, 204, 76, 63, 10, 0, 1, 91, 82, 146, 2, 237, 97, 74, 68, 68, 63, 13, 0, 1, 90, 12, 71, 68, 7, 254, 74, 68, 68, 63, 15, 0, 1, 158, 165, 38, 2, 21, 0, 74, 68, 68, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 74, 68, 68, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 74, 68, 68, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 74, 68, 68, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 205, 204, 76, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 74, 68, 68, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 74, 68, 68, 63, 36, 0, 1, 45, 254, 226, 190, 144, 4, 74, 68, 68, 63, 37, 0, 1, 0, 0, 0, 0, 58, 204, 74, 68, 68, 63, 38, 0, 1, 242, 87, 26, 254, 141, 250, 74, 68, 68, 63, 40, 0, 1, 219, 240, 11, 0, 167, 24, 74, 68, 68, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 74, 68, 68, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 74, 68, 68, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 74, 68, 68, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 74, 68, 68, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 74, 68, 68, 63, 60, 0, 1, 255, 0, 36, 1, 208, 7, 74, 68, 68, 63, 61, 0, 1, 229, 255, 44, 0, 126, 91, 74, 68, 68, 63, 63, 0, 1, 0, 0, 0, 0, 96, 234, 74, 68, 68, 63, 64, 0, 1, 76, 2, 255, 248, 64, 17, 205, 204, 76, 63, 65, 0, 1, 185, 0, 110, 1, 242, 92, 205, 204, 76, 63, 1, 0, 1, 8, 190, 8, 190, 9, 194, 205, 204, 76, 63, 2, 0, 1, 170, 1, 21, 1, 4, 0, 205, 204, 76, 63, 4, 0, 0, 72, 30, 44, 124, 146, 5, 233, 238, 110, 63, 9, 0, 1, 195, 242, 54, 3, 92, 247, 205, 204, 76, 63, 13, 0, 1, 106, 11, 231, 67, 106, 255, 205, 204, 76, 63, 14, 0, 1, 0, 0, 0, 0, 96, 216, 205, 204, 76, 63, 15, 0, 1, 234, 164, 122, 2, 75, 0, 205, 204, 76, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 205, 204, 76, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 205, 204, 76, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 205, 204, 76, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 205, 204, 76, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 205, 204, 76, 63, 36, 0, 1, 231, 253, 19, 191, 149, 3, 205, 204, 76, 63, 37, 0, 1, 0, 0, 0, 0, 11, 203, 205, 204, 76, 63, 38, 0, 1, 128, 87, 197, 253, 144, 250, 227, 221, 93, 63, 40, 0, 1, 219, 240, 11, 0, 167, 24, 205, 204, 76, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 205, 204, 76, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 205, 204, 76, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 205, 204, 76, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 205, 204, 76, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 205, 204, 76, 63, 59, 0, 1, 0, 0, 0, 0, 22, 226, 205, 204, 76, 63, 60, 0, 1, 165, 1, 87, 252, 85, 5, 205, 204, 76, 63, 61, 0, 1, 0, 0, 0, 0, 177, 92, 205, 204, 76, 63, 63, 0, 1, 0, 0, 0, 0, 236, 236, 205, 204, 76, 63, 64, 0, 1, 187, 2, 144, 249, 188, 16, 80, 85, 85, 63, 0, 0, 1, 144, 195, 102, 190, 139, 188, 227, 221, 93, 63, 1, 0, 1, 24, 189, 24, 189, 13, 195, 227, 221, 93, 63, 2, 0, 1, 75, 2, 246, 3, 247, 255, 80, 85, 85, 63, 3, 0, 1, 103, 3, 245, 0, 176, 3, 80, 85, 85, 63, 4, 0, 0, 206, 31, 213, 123, 88, 5, 80, 85, 85, 63, 5, 0, 0, 8, 249, 149, 127, 104, 250, 80, 85, 85, 63, 6, 0, 1, 22, 5, 243, 0, 60, 3, 80, 85, 85, 63, 7, 0, 1, 220, 2, 141, 255, 220, 5, 227, 221, 93, 63, 10, 0, 1, 105, 82, 143, 2, 225, 97, 80, 85, 85, 63, 13, 0, 1, 72, 10, 173, 67, 3, 0, 80, 85, 85, 63, 14, 0, 1, 0, 0, 0, 0, 244, 216, 227, 221, 93, 63, 15, 0, 1, 127, 164, 243, 3, 150, 0, 80, 85, 85, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 80, 85, 85, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 80, 85, 85, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 80, 85, 85, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 80, 85, 85, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 80, 85, 85, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 80, 85, 85, 63, 36, 0, 1, 186, 253, 19, 191, 178, 3, 80, 85, 85, 63, 37, 0, 1, 0, 0, 0, 0, 148, 201, 227, 221, 93, 63, 38, 0, 1, 154, 86, 23, 253, 141, 251, 80, 85, 85, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 80, 85, 85, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 80, 85, 85, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 227, 221, 93, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 80, 85, 85, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 80, 85, 85, 63, 59, 0, 1, 0, 0, 0, 0, 3, 232, 80, 85, 85, 63, 60, 0, 1, 14, 0, 46, 251, 149, 9, 80, 85, 85, 63, 61, 0, 1, 112, 0, 158, 0, 138, 90, 80, 85, 85, 63, 63, 0, 1, 0, 0, 0, 0, 109, 241, 80, 85, 85, 63, 64, 0, 1, 207, 2, 85, 250, 240, 16, 80, 85, 85, 63, 65, 0, 1, 114, 0, 233, 0, 65, 88, 233, 238, 110, 63, 0, 0, 1, 42, 196, 210, 189, 3, 188, 227, 221, 93, 63, 3, 0, 1, 218, 3, 155, 0, 145, 3, 227, 221, 93, 63, 4, 0, 0, 210, 33, 83, 123, 60, 5, 227, 221, 93, 63, 5, 0, 0, 162, 244, 80, 127, 251, 250, 233, 238, 110, 63, 6, 0, 1, 252, 6, 16, 0, 227, 0, 102, 102, 102, 63, 7, 0, 1, 129, 3, 153, 255, 43, 6, 233, 238, 110, 63, 11, 0, 1, 177, 173, 56, 252, 229, 97, 227, 221, 93, 63, 13, 0, 1, 63, 9, 104, 67, 242, 255, 227, 221, 93, 63, 14, 0, 1, 0, 0, 0, 0, 73, 218, 227, 221, 93, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 227, 221, 93, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 227, 221, 93, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 227, 221, 93, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 227, 221, 93, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 227, 221, 93, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 227, 221, 93, 63, 36, 0, 1, 242, 253, 191, 190, 124, 4, 227, 221, 93, 63, 37, 0, 1, 0, 0, 0, 0, 99, 200, 227, 221, 93, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 227, 221, 93, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 227, 221, 93, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 227, 221, 93, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 227, 221, 93, 63, 59, 0, 1, 0, 0, 0, 0, 127, 234, 227, 221, 93, 63, 60, 0, 1, 164, 254, 222, 251, 202, 13, 227, 221, 93, 63, 61, 0, 1, 0, 0, 0, 0, 105, 90, 227, 221, 93, 63, 63, 0, 1, 0, 0, 0, 0, 116, 244, 227, 221, 93, 63, 64, 0, 1, 228, 2, 150, 251, 117, 17, 227, 221, 93, 63, 65, 0, 1, 0, 0, 0, 0, 194, 83, 102, 102, 102, 63, 1, 0, 1, 22, 189, 22, 189, 15, 195, 102, 102, 102, 63, 2, 0, 1, 152, 2, 105, 4, 244, 255, 233, 238, 110, 63, 3, 0, 1, 184, 4, 254, 255, 81, 3, 102, 102, 102, 63, 4, 0, 0, 156, 34, 30, 123, 46, 5, 102, 102, 102, 63, 5, 0, 0, 169, 242, 41, 127, 55, 251, 102, 102, 102, 63, 10, 0, 1, 76, 82, 193, 2, 247, 97, 102, 102, 102, 63, 13, 0, 1, 230, 8, 239, 66, 9, 255, 102, 102, 102, 63, 14, 0, 1, 0, 0, 0, 0, 57, 220, 233, 238, 110, 63, 15, 0, 1, 247, 163, 19, 5, 79, 0, 14, 17, 145, 63, 16, 0, 1, 76, 92, 160, 46, 72, 5, 233, 238, 110, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 102, 102, 102, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 102, 102, 102, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 102, 102, 102, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 102, 102, 102, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 102, 102, 102, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 102, 102, 102, 63, 36, 0, 1, 14, 255, 222, 189, 229, 5, 102, 102, 102, 63, 37, 0, 1, 0, 0, 0, 0, 0, 200, 233, 238, 110, 63, 38, 0, 1, 7, 85, 216, 251, 38, 252, 102, 102, 102, 63, 40, 0, 1, 219, 240, 11, 0, 167, 24, 14, 17, 145, 63, 41, 0, 1, 13, 0, 253, 255, 162, 32, 102, 102, 102, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 102, 102, 102, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 102, 102, 102, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 102, 102, 102, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 102, 102, 102, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 102, 102, 102, 63, 59, 0, 1, 0, 0, 0, 0, 45, 234, 102, 102, 102, 63, 60, 0, 1, 233, 254, 97, 253, 94, 13, 102, 102, 102, 63, 61, 0, 1, 65, 0, 6, 0, 106, 89, 102, 102, 102, 63, 63, 0, 1, 0, 0, 0, 0, 58, 242, 102, 102, 102, 63, 64, 0, 1, 213, 2, 249, 253, 176, 19, 102, 102, 102, 63, 65, 0, 1, 30, 0, 28, 0, 230, 83, 233, 238, 110, 63, 1, 0, 1, 53, 189, 53, 189, 236, 194, 233, 238, 110, 63, 2, 0, 1, 225, 2, 139, 4, 243, 255, 233, 238, 110, 63, 4, 0, 1, 184, 35, 205, 122, 40, 5, 233, 238, 110, 63, 5, 0, 0, 132, 241, 17, 127, 90, 251, 233, 238, 110, 63, 7, 0, 1, 215, 3, 153, 255, 80, 6, 0, 0, 128, 63, 10, 0, 1, 218, 81, 121, 3, 76, 98, 233, 238, 110, 63, 13, 0, 1, 180, 8, 109, 66, 193, 253, 233, 238, 110, 63, 14, 0, 1, 0, 0, 0, 0, 153, 222, 233, 238, 110, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 233, 238, 110, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 233, 238, 110, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 125, 119, 119, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 233, 238, 110, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 233, 238, 110, 63, 36, 0, 1, 125, 0, 212, 188, 142, 7, 233, 238, 110, 63, 37, 0, 1, 0, 0, 0, 0, 215, 199, 0, 0, 128, 63, 40, 0, 1, 219, 240, 11, 0, 167, 24, 233, 238, 110, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 233, 238, 110, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 233, 238, 110, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 233, 238, 110, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 233, 238, 110, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 233, 238, 110, 63, 59, 0, 1, 0, 0, 0, 0, 56, 231, 233, 238, 110, 63, 60, 0, 1, 147, 255, 89, 255, 85, 12, 233, 238, 110, 63, 61, 0, 1, 0, 0, 0, 0, 127, 90, 233, 238, 110, 63, 63, 0, 1, 0, 0, 0, 0, 74, 238, 233, 238, 110, 63, 64, 0, 1, 129, 2, 204, 0, 144, 21, 233, 238, 110, 63, 65, 0, 1, 0, 0, 0, 0, 245, 84, 65, 68, 132, 63, 0, 0, 1, 168, 195, 42, 189, 135, 188, 0, 0, 128, 63, 1, 0, 1, 45, 190, 45, 190, 226, 193, 0, 0, 128, 63, 2, 0, 1, 65, 2, 235, 2, 2, 0, 139, 136, 136, 63, 3, 0, 1, 73, 4, 110, 255, 136, 3, 125, 119, 119, 63, 4, 0, 1, 40, 39, 178, 121, 70, 6, 125, 119, 119, 63, 5, 0, 0, 190, 241, 36, 127, 39, 252, 14, 17, 145, 63, 6, 0, 1, 7, 5, 194, 254, 100, 6, 0, 0, 128, 63, 7, 0, 1, 27, 3, 95, 255, 49, 6, 65, 68, 132, 63, 9, 0, 1, 4, 247, 135, 2, 239, 244, 0, 0, 128, 63, 11, 0, 1, 76, 173, 121, 252, 148, 97, 125, 119, 119, 63, 13, 0, 1, 144, 7, 46, 66, 18, 254, 125, 119, 119, 63, 14, 0, 1, 0, 0, 0, 0, 171, 222, 125, 119, 119, 63, 15, 0, 1, 176, 162, 255, 4, 245, 0, 125, 119, 119, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 125, 119, 119, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 125, 119, 119, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 125, 119, 119, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 125, 119, 119, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 0, 0, 128, 63, 36, 0, 1, 197, 0, 81, 186, 222, 8, 0, 0, 128, 63, 37, 0, 1, 0, 0, 0, 0, 47, 201, 0, 0, 128, 63, 38, 0, 1, 223, 87, 174, 252, 86, 253, 125, 119, 119, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 125, 119, 119, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 0, 0, 128, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 125, 119, 119, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 125, 119, 119, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 125, 119, 119, 63, 59, 0, 1, 0, 0, 0, 0, 184, 219, 125, 119, 119, 63, 60, 0, 1, 159, 0, 124, 2, 229, 6, 125, 119, 119, 63, 61, 0, 1, 206, 255, 217, 255, 246, 91, 125, 119, 119, 63, 63, 0, 1, 0, 0, 0, 0, 250, 229, 125, 119, 119, 63, 64, 0, 1, 142, 0, 65, 9, 182, 24, 125, 119, 119, 63, 65, 0, 1, 192, 255, 173, 254, 196, 85, 0, 0, 128, 63, 4, 0, 1, 251, 39, 94, 121, 88, 7, 0, 0, 128, 63, 5, 0, 1, 59, 242, 50, 127, 60, 252, 0, 0, 128, 63, 13, 0, 1, 86, 6, 250, 65, 243, 253, 0, 0, 128, 63, 14, 0, 1, 0, 0, 0, 0, 60, 223, 0, 0, 128, 63, 15, 0, 1, 185, 161, 20, 5, 99, 1, 0, 0, 128, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 0, 0, 128, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 0, 0, 128, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 0, 0, 128, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 0, 0, 128, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 0, 0, 128, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 0, 0, 128, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 0, 0, 128, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 0, 0, 128, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 0, 0, 128, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 0, 0, 128, 63, 59, 0, 1, 0, 0, 0, 0, 16, 214, 0, 0, 128, 63, 60, 0, 1, 71, 1, 103, 5, 88, 0, 0, 0, 128, 63, 61, 0, 1, 0, 0, 0, 0, 255, 91, 0, 0, 128, 63, 63, 0, 1, 0, 0, 0, 0, 118, 222, 0, 0, 128, 63, 64, 0, 1, 89, 254, 66, 15, 220, 23, 0, 0, 128, 63, 65, 0, 1, 0, 0, 0, 0, 168, 88, 65, 68, 132, 63, 1, 0, 1, 20, 191, 20, 191, 241, 192, 65, 68, 132, 63, 2, 0, 1, 235, 1, 75, 1, 10, 0, 65, 68, 132, 63, 4, 0, 1, 139, 39, 119, 121, 19, 8, 65, 68, 132, 63, 5, 0, 1, 34, 242, 16, 127, 235, 249, 139, 136, 136, 63, 7, 0, 1, 98, 2, 21, 255, 19, 6, 139, 136, 136, 63, 10, 0, 1, 48, 82, 27, 4, 249, 97, 139, 136, 136, 63, 11, 0, 1, 180, 173, 45, 253, 246, 97, 65, 68, 132, 63, 13, 0, 1, 211, 4, 244, 65, 61, 252, 65, 68, 132, 63, 14, 0, 1, 0, 0, 0, 0, 51, 226, 65, 68, 132, 63, 15, 0, 1, 136, 161, 221, 5, 13, 1, 65, 68, 132, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 65, 68, 132, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 65, 68, 132, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 65, 68, 132, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 65, 68, 132, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 65, 68, 132, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 65, 68, 132, 63, 36, 0, 1, 144, 0, 96, 185, 218, 9, 65, 68, 132, 63, 37, 0, 1, 0, 0, 0, 0, 144, 201, 65, 68, 132, 63, 38, 0, 1, 138, 89, 168, 253, 77, 254, 65, 68, 132, 63, 40, 0, 1, 219, 240, 11, 0, 167, 24, 65, 68, 132, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 65, 68, 132, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 65, 68, 132, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 65, 68, 132, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 65, 68, 132, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 65, 68, 132, 63, 59, 0, 1, 0, 0, 0, 0, 204, 209, 65, 68, 132, 63, 60, 0, 1, 70, 1, 175, 5, 250, 4, 65, 68, 132, 63, 61, 0, 1, 176, 255, 207, 255, 97, 92, 65, 68, 132, 63, 63, 0, 1, 0, 0, 0, 0, 171, 217, 65, 68, 132, 63, 64, 0, 1, 231, 253, 13, 15, 194, 19, 65, 68, 132, 63, 65, 0, 1, 80, 255, 14, 255, 119, 89, 139, 136, 136, 63, 0, 0, 1, 157, 195, 232, 188, 150, 188, 139, 136, 136, 63, 1, 0, 1, 1, 192, 0, 192, 1, 192, 139, 136, 136, 63, 2, 0, 1, 148, 1, 168, 255, 17, 0, 139, 136, 136, 63, 4, 0, 1, 81, 38, 205, 121, 220, 8, 139, 136, 136, 63, 5, 0, 1, 143, 243, 250, 126, 39, 247, 139, 136, 136, 63, 9, 0, 1, 103, 248, 80, 2, 9, 244, 139, 136, 136, 63, 13, 0, 1, 84, 3, 29, 66, 170, 250, 139, 136, 136, 63, 14, 0, 1, 0, 0, 0, 0, 182, 228, 139, 136, 136, 63, 15, 0, 1, 217, 161, 148, 6, 118, 0, 205, 204, 140, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 205, 204, 140, 63, 18, 0, 1, 243, 255, 3, 0, 49, 32, 139, 136, 136, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 139, 136, 136, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 139, 136, 136, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 139, 136, 136, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 139, 136, 136, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 139, 136, 136, 63, 36, 0, 1, 10, 0, 166, 184, 177, 10, 139, 136, 136, 63, 37, 0, 1, 0, 0, 0, 0, 143, 202, 139, 136, 136, 63, 38, 0, 1, 240, 90, 116, 254, 52, 255, 139, 136, 136, 63, 40, 0, 1, 219, 240, 11, 0, 167, 24, 139, 136, 136, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 139, 136, 136, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 139, 136, 136, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 205, 204, 140, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 139, 136, 136, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 139, 136, 136, 63, 59, 0, 1, 0, 0, 0, 0, 20, 207, 139, 136, 136, 63, 60, 0, 1, 52, 1, 247, 5, 222, 8, 139, 136, 136, 63, 61, 0, 1, 0, 0, 0, 0, 130, 90, 139, 136, 136, 63, 63, 0, 1, 0, 0, 0, 0, 114, 212, 139, 136, 136, 63, 64, 0, 1, 201, 253, 216, 11, 116, 14, 139, 136, 136, 63, 65, 0, 1, 0, 0, 0, 0, 130, 90, 88, 85, 149, 63, 0, 0, 1, 68, 196, 224, 187, 1, 188, 205, 204, 140, 63, 1, 0, 1, 169, 192, 169, 192, 90, 191, 205, 204, 140, 63, 2, 0, 1, 63, 1, 145, 254, 19, 0, 88, 85, 149, 63, 3, 0, 1, 236, 3, 7, 255, 181, 3, 205, 204, 140, 63, 4, 0, 1, 140, 36, 65, 122, 254, 9, 205, 204, 140, 63, 5, 0, 1, 159, 249, 35, 127, 235, 244, 205, 204, 140, 63, 7, 0, 1, 5, 2, 241, 254, 4, 6, 88, 85, 149, 63, 9, 0, 1, 157, 252, 134, 1, 139, 241, 205, 204, 140, 63, 10, 0, 1, 165, 82, 73, 4, 147, 97, 14, 17, 145, 63, 11, 0, 1, 172, 173, 140, 253, 243, 97, 205, 204, 140, 63, 13, 0, 1, 73, 2, 205, 66, 150, 251, 205, 204, 140, 63, 14, 0, 1, 0, 0, 0, 0, 226, 226, 205, 204, 140, 63, 15, 0, 1, 171, 162, 17, 6, 99, 0, 205, 204, 140, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 205, 204, 140, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 205, 204, 140, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 205, 204, 140, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 205, 204, 140, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 205, 204, 140, 63, 36, 0, 1, 59, 255, 15, 184, 186, 10, 205, 204, 140, 63, 37, 0, 1, 0, 0, 0, 0, 186, 205, 205, 204, 140, 63, 38, 0, 1, 152, 91, 99, 254, 111, 255, 205, 204, 140, 63, 40, 0, 1, 219, 240, 11, 0, 167, 24, 205, 204, 140, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 205, 204, 140, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 205, 204, 140, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 205, 204, 140, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 205, 204, 140, 63, 59, 0, 1, 0, 0, 0, 0, 96, 205, 205, 204, 140, 63, 60, 0, 1, 38, 1, 95, 6, 85, 12, 205, 204, 140, 63, 61, 0, 1, 223, 255, 18, 0, 166, 90, 14, 17, 145, 63, 63, 0, 1, 0, 0, 0, 0, 254, 193, 205, 204, 140, 63, 64, 0, 1, 171, 252, 161, 5, 14, 6, 205, 204, 140, 63, 65, 0, 1, 224, 255, 226, 255, 69, 86, 14, 17, 145, 63, 1, 0, 1, 20, 193, 20, 193, 241, 190, 14, 17, 145, 63, 2, 0, 1, 238, 0, 239, 253, 19, 0, 14, 17, 145, 63, 4, 0, 1, 65, 34, 208, 122, 32, 11, 14, 17, 145, 63, 5, 0, 1, 223, 2, 30, 127, 18, 244, 219, 221, 157, 63, 7, 0, 1, 132, 0, 182, 254, 197, 5, 14, 17, 145, 63, 10, 0, 1, 5, 83, 74, 4, 66, 97, 14, 17, 145, 63, 13, 0, 1, 151, 1, 99, 67, 187, 252, 14, 17, 145, 63, 14, 0, 1, 0, 0, 0, 0, 167, 223, 14, 17, 145, 63, 15, 0, 1, 190, 163, 26, 5, 66, 0, 88, 85, 149, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 168, 170, 170, 63, 18, 0, 1, 243, 255, 3, 0, 49, 32, 14, 17, 145, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 14, 17, 145, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 14, 17, 145, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 14, 17, 145, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 168, 170, 170, 63, 31, 0, 1, 0, 0, 0, 0, 67, 35, 14, 17, 145, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 14, 17, 145, 63, 36, 0, 1, 71, 254, 181, 183, 26, 10, 14, 17, 145, 63, 37, 0, 1, 0, 0, 0, 0, 35, 210, 14, 17, 145, 63, 38, 0, 1, 180, 91, 160, 253, 79, 255, 88, 85, 149, 63, 40, 0, 1, 219, 240, 11, 0, 167, 24, 14, 17, 145, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 14, 17, 145, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 14, 17, 145, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 14, 17, 145, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 14, 17, 145, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 14, 17, 145, 63, 59, 0, 1, 0, 0, 0, 0, 187, 204, 14, 17, 145, 63, 60, 0, 1, 15, 1, 196, 6, 68, 15, 14, 17, 145, 63, 61, 0, 1, 0, 0, 0, 0, 6, 91, 14, 17, 145, 63, 64, 0, 1, 173, 253, 248, 253, 98, 245, 14, 17, 145, 63, 65, 0, 1, 0, 0, 0, 0, 55, 86, 88, 85, 149, 63, 1, 0, 1, 45, 193, 45, 193, 217, 190, 88, 85, 149, 63, 2, 0, 1, 162, 0, 231, 253, 18, 0, 88, 85, 149, 63, 4, 0, 1, 100, 31, 122, 123, 26, 12, 88, 85, 149, 63, 5, 0, 1, 5, 9, 28, 127, 244, 246, 154, 153, 153, 63, 6, 0, 1, 63, 4, 112, 254, 204, 7, 154, 153, 153, 63, 10, 0, 1, 173, 82, 123, 3, 155, 97, 88, 85, 149, 63, 11, 0, 1, 147, 173, 121, 253, 222, 97, 88, 85, 149, 63, 13, 0, 1, 85, 1, 28, 67, 32, 252, 88, 85, 149, 63, 14, 0, 1, 0, 0, 0, 0, 232, 220, 88, 85, 149, 63, 15, 0, 1, 196, 164, 251, 3, 163, 255, 168, 170, 170, 63, 16, 0, 1, 76, 92, 160, 46, 72, 5, 88, 85, 149, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 88, 85, 149, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 88, 85, 149, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 88, 85, 149, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 88, 85, 149, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 88, 85, 149, 63, 36, 0, 1, 197, 252, 160, 183, 74, 9, 88, 85, 149, 63, 37, 0, 1, 0, 0, 0, 0, 69, 214, 88, 85, 149, 63, 38, 0, 1, 30, 91, 84, 252, 40, 255, 219, 221, 157, 63, 41, 0, 1, 13, 0, 253, 255, 162, 32, 88, 85, 149, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 88, 85, 149, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 88, 85, 149, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 154, 153, 153, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 88, 85, 149, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 88, 85, 149, 63, 59, 0, 1, 0, 0, 0, 0, 71, 205, 88, 85, 149, 63, 60, 0, 1, 246, 0, 25, 7, 134, 17, 88, 85, 149, 63, 61, 0, 1, 247, 255, 28, 0, 244, 90, 88, 85, 149, 63, 63, 0, 1, 0, 0, 0, 0, 54, 188, 88, 85, 149, 63, 64, 0, 1, 197, 254, 223, 253, 109, 242, 88, 85, 149, 63, 65, 0, 1, 250, 255, 210, 0, 50, 87, 154, 153, 153, 63, 0, 0, 1, 120, 196, 175, 187, 211, 187, 154, 153, 153, 63, 1, 0, 1, 8, 193, 8, 193, 254, 190, 154, 153, 153, 63, 2, 0, 1, 96, 0, 78, 254, 15, 0, 37, 34, 162, 63, 3, 0, 1, 63, 3, 211, 254, 11, 4, 154, 153, 153, 63, 4, 0, 1, 61, 28, 38, 124, 222, 12, 154, 153, 153, 63, 5, 0, 1, 171, 14, 222, 126, 158, 250, 219, 221, 157, 63, 9, 0, 1, 50, 255, 6, 1, 116, 240, 168, 170, 170, 63, 11, 0, 1, 62, 173, 210, 252, 142, 97, 154, 153, 153, 63, 13, 0, 1, 30, 1, 106, 66, 250, 250, 219, 221, 157, 63, 14, 0, 1, 0, 0, 0, 0, 30, 216, 154, 153, 153, 63, 15, 0, 1, 215, 165, 22, 3, 188, 254, 219, 221, 157, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 154, 153, 153, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 154, 153, 153, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 154, 153, 153, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 154, 153, 153, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 154, 153, 153, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 154, 153, 153, 63, 36, 0, 1, 34, 251, 152, 183, 54, 8, 154, 153, 153, 63, 37, 0, 1, 0, 0, 0, 0, 48, 218, 154, 153, 153, 63, 38, 0, 1, 65, 90, 30, 251, 16, 255, 219, 221, 157, 63, 40, 0, 1, 219, 240, 11, 0, 167, 24, 154, 153, 153, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 154, 153, 153, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 154, 153, 153, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 154, 153, 153, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 219, 221, 157, 63, 59, 0, 1, 0, 0, 0, 0, 2, 208, 219, 221, 157, 63, 60, 0, 1, 248, 0, 96, 7, 26, 21, 154, 153, 153, 63, 61, 0, 1, 0, 0, 0, 0, 41, 91, 154, 153, 153, 63, 63, 0, 1, 0, 0, 0, 0, 159, 183, 154, 153, 153, 63, 64, 0, 1, 127, 255, 22, 0, 5, 244, 154, 153, 153, 63, 65, 0, 1, 0, 0, 0, 0, 66, 84, 219, 221, 157, 63, 0, 0, 1, 147, 196, 186, 187, 185, 187, 37, 34, 162, 63, 1, 0, 1, 45, 192, 45, 192, 212, 191, 102, 102, 166, 63, 2, 0, 1, 224, 255, 219, 0, 13, 0, 219, 221, 157, 63, 4, 0, 1, 34, 25, 198, 124, 52, 13, 219, 221, 157, 63, 5, 0, 1, 244, 18, 107, 126, 155, 252, 37, 34, 162, 63, 6, 0, 1, 63, 3, 80, 254, 118, 8, 37, 34, 162, 63, 10, 0, 1, 114, 82, 53, 3, 209, 97, 37, 34, 162, 63, 13, 0, 1, 47, 0, 139, 64, 97, 249, 219, 221, 157, 63, 15, 0, 1, 20, 167, 211, 2, 149, 253, 219, 221, 157, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 219, 221, 157, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 219, 221, 157, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 219, 221, 157, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 219, 221, 157, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 219, 221, 157, 63, 36, 0, 1, 93, 249, 124, 183, 82, 7, 219, 221, 157, 63, 37, 0, 1, 0, 0, 0, 0, 87, 220, 219, 221, 157, 63, 38, 0, 1, 181, 89, 1, 251, 12, 0, 219, 221, 157, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 219, 221, 157, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 219, 221, 157, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 219, 221, 157, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 219, 221, 157, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 219, 221, 157, 63, 61, 0, 1, 28, 0, 65, 0, 241, 90, 219, 221, 157, 63, 63, 0, 1, 0, 0, 0, 0, 224, 181, 219, 221, 157, 63, 64, 0, 1, 171, 255, 32, 1, 0, 247, 219, 221, 157, 63, 65, 0, 1, 12, 0, 245, 255, 27, 85, 102, 102, 166, 63, 0, 0, 1, 116, 196, 43, 188, 211, 187, 37, 34, 162, 63, 4, 0, 1, 201, 21, 98, 125, 82, 13, 37, 34, 162, 63, 5, 0, 1, 100, 22, 234, 125, 149, 253, 168, 170, 170, 63, 7, 0, 1, 35, 255, 74, 255, 139, 5, 37, 34, 162, 63, 9, 0, 1, 47, 0, 238, 0, 57, 240, 102, 102, 166, 63, 14, 0, 1, 0, 0, 0, 0, 156, 211, 37, 34, 162, 63, 15, 0, 1, 232, 167, 204, 2, 133, 252, 37, 34, 162, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 37, 34, 162, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 37, 34, 162, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 37, 34, 162, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 37, 34, 162, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 37, 34, 162, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 37, 34, 162, 63, 36, 0, 1, 149, 247, 102, 183, 182, 6, 37, 34, 162, 63, 37, 0, 1, 0, 0, 0, 0, 106, 221, 37, 34, 162, 63, 38, 0, 1, 51, 89, 82, 251, 27, 1, 168, 170, 170, 63, 40, 0, 1, 219, 240, 11, 0, 167, 24, 102, 102, 166, 63, 41, 0, 1, 13, 0, 253, 255, 162, 32, 37, 34, 162, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 37, 34, 162, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 37, 34, 162, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 37, 34, 162, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 37, 34, 162, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 37, 34, 162, 63, 59, 0, 1, 0, 0, 0, 0, 248, 209, 37, 34, 162, 63, 60, 0, 1, 42, 1, 83, 7, 147, 22, 37, 34, 162, 63, 61, 0, 1, 0, 0, 0, 0, 246, 90, 37, 34, 162, 63, 63, 0, 1, 0, 0, 0, 0, 227, 181, 37, 34, 162, 63, 64, 0, 1, 150, 255, 147, 1, 61, 251, 37, 34, 162, 63, 65, 0, 1, 0, 0, 0, 0, 18, 84, 102, 102, 166, 63, 1, 0, 1, 183, 191, 183, 191, 74, 192, 168, 170, 170, 63, 3, 0, 1, 105, 2, 211, 254, 119, 4, 102, 102, 166, 63, 4, 0, 1, 255, 17, 6, 126, 229, 12, 102, 102, 166, 63, 5, 0, 1, 3, 25, 109, 125, 232, 252, 102, 102, 166, 63, 6, 0, 1, 149, 2, 88, 254, 97, 8, 102, 102, 166, 63, 9, 0, 1, 208, 0, 23, 1, 82, 240, 168, 170, 170, 63, 10, 0, 1, 154, 82, 125, 3, 170, 97, 102, 102, 166, 63, 13, 0, 1, 163, 255, 205, 63, 1, 249, 102, 102, 166, 63, 15, 0, 1, 103, 167, 129, 2, 205, 251, 102, 102, 166, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 102, 102, 166, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 102, 102, 166, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 102, 102, 166, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 102, 102, 166, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 102, 102, 166, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 102, 102, 166, 63, 36, 0, 1, 222, 245, 110, 183, 112, 6, 102, 102, 166, 63, 37, 0, 1, 0, 0, 0, 0, 181, 221, 102, 102, 166, 63, 38, 0, 1, 139, 88, 186, 251, 127, 1, 102, 102, 166, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 102, 102, 166, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 102, 102, 166, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 102, 102, 166, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 102, 102, 166, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 102, 102, 166, 63, 59, 0, 1, 0, 0, 0, 0, 166, 212, 102, 102, 166, 63, 60, 0, 1, 33, 1, 40, 7, 183, 23, 102, 102, 166, 63, 61, 0, 1, 25, 0, 71, 0, 14, 91, 102, 102, 166, 63, 63, 0, 1, 0, 0, 0, 0, 128, 183, 102, 102, 166, 63, 64, 0, 1, 40, 255, 195, 0, 75, 255, 102, 102, 166, 63, 65, 0, 1, 210, 255, 247, 255, 149, 84, 168, 170, 170, 63, 0, 0, 1, 31, 196, 124, 188, 31, 188, 168, 170, 170, 63, 1, 0, 1, 64, 191, 64, 191, 196, 192, 168, 170, 170, 63, 2, 0, 1, 208, 255, 159, 1, 13, 0, 168, 170, 170, 63, 4, 0, 1, 171, 13, 158, 126, 87, 12, 168, 170, 170, 63, 5, 0, 1, 248, 26, 2, 125, 213, 251, 168, 170, 170, 63, 6, 0, 1, 195, 1, 109, 254, 255, 7, 168, 170, 170, 63, 9, 0, 1, 125, 1, 76, 1, 181, 240, 168, 170, 170, 63, 13, 0, 1, 55, 255, 23, 63, 208, 248, 168, 170, 170, 63, 14, 0, 1, 0, 0, 0, 0, 41, 209, 168, 170, 170, 63, 15, 0, 1, 189, 166, 109, 2, 126, 251, 168, 170, 170, 63, 17, 0, 1, 110, 19, 187, 0, 103, 23, 168, 170, 170, 63, 22, 0, 1, 0, 0, 0, 0, 159, 6, 168, 170, 170, 63, 25, 0, 1, 0, 0, 0, 0, 87, 11, 168, 170, 170, 63, 28, 0, 1, 0, 0, 0, 0, 233, 17, 168, 170, 170, 63, 30, 0, 1, 0, 0, 0, 0, 244, 39, 168, 170, 170, 63, 33, 0, 1, 0, 0, 0, 0, 104, 33, 168, 170, 170, 63, 36, 0, 1, 102, 244, 155, 183, 100, 6, 168, 170, 170, 63, 37, 0, 1, 0, 0, 0, 0, 102, 221, 168, 170, 170, 63, 38, 0, 1, 7, 88, 59, 252, 112, 1, 168, 170, 170, 63, 41, 0, 1, 13, 0, 253, 255, 162, 32, 168, 170, 170, 63, 45, 0, 1, 0, 0, 0, 0, 159, 6, 168, 170, 170, 63, 48, 0, 1, 0, 0, 0, 0, 87, 11, 168, 170, 170, 63, 51, 0, 1, 0, 0, 0, 0, 233, 17, 168, 170, 170, 63, 53, 0, 1, 0, 0, 0, 0, 244, 39, 168, 170, 170, 63, 54, 0, 1, 0, 0, 0, 0, 67, 35, 168, 170, 170, 63, 56, 0, 1, 0, 0, 0, 0, 104, 33, 168, 170, 170, 63, 59, 0, 1, 0, 0, 0, 0, 18, 216, 168, 170, 170, 63, 60, 0, 1, 87, 1, 252, 6, 122, 24, 168, 170, 170, 63, 61, 0, 1, 0, 0, 0, 0, 88, 91, 168, 170, 170, 63, 63, 0, 1, 0, 0, 0, 0, 249, 186, 168, 170, 170, 63, 64, 0, 1, 127, 254, 141, 255, 38, 3, 168, 170, 170, 63, 65, 0, 1, 0, 0, 0, 0, 248, 83, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 1, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 2, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 3, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 4, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 5, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 6, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 7, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 8, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 9, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 10, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 11, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 12, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 13, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 14, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 15, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 16, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 17, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 18, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 19, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 20, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 21, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 22, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 23, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 24, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 25, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 26, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 27, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 28, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 29, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 30, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 31, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 32, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 33, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 34, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 35, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 36, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 37, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 38, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 39, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 40, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 41, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 42, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 43, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 44, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 45, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 46, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 47, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 48, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 49, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 50, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 51, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 52, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 53, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 54, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 55, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 56, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 57, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 58, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 59, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 60, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 61, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 62, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 63, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 64, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 65, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 66, 0, 0, 60, 0, 60, 0, 60, 0, 0, 0, 0, 67, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 0, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 1, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 2, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 3, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 4, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 5, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 6, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 7, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 8, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 9, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 10, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 11, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 12, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 13, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 14, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 15, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 16, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 17, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 18, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 19, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 20, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 21, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 22, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 23, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 24, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 25, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 26, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 27, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 28, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 29, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 30, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 31, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 32, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 33, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 34, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 35, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 36, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 37, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 38, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 39, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 40, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 41, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 42, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 43, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 44, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 45, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 46, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 47, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 48, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 49, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 50, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 51, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 52, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 53, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 54, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 55, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 56, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 57, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 58, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 59, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 60, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 61, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 62, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 63, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 64, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 65, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 66, 0, 0, 60, 0, 60, 0, 60, 168, 170, 170, 63, 67, 0, 0, 60, 0, 60, 0, 60]), true, true);
Module['FS_createDataFile']('/', 'README', [79, 122, 122, 45, 97, 110, 105, 109, 97, 116, 105, 111, 110, 32, 115, 97, 109, 112, 108, 101, 58, 32, 80, 97, 114, 116, 105, 97, 108, 32, 97, 110, 105, 109, 97, 116, 105, 111, 110, 115, 32, 98, 108, 101, 110, 100, 105, 110, 103, 13, 10, 13, 10, 49, 46, 32, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 13, 10, 85, 115, 101, 115, 32, 112, 97, 114, 116, 105, 97, 108, 32, 97, 110, 105, 109, 97, 116, 105, 111, 110, 32, 98, 108, 101, 110, 100, 105, 110, 103, 32, 116, 101, 99, 104, 110, 105, 113, 117, 101, 32, 116, 111, 32, 97, 110, 105, 109, 97, 116, 101, 32, 116, 104, 101, 32, 108, 111, 119, 101, 114, 32, 97, 110, 100, 32, 117, 112, 112, 101, 114, 32, 112, 97, 114, 116, 32, 111, 102, 32, 116, 104, 101, 32, 115, 107, 101, 108, 101, 116, 111, 110, 32, 119, 105, 116, 104, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 97, 110, 105, 109, 97, 116, 105, 111, 110, 115, 46, 13, 10, 13, 10, 50, 46, 32, 67, 111, 110, 99, 101, 112, 116, 13, 10, 80, 97, 114, 116, 105, 97, 108, 32, 97, 110, 105, 109, 97, 116, 105, 111, 110, 32, 98, 108, 101, 110, 100, 105, 110, 103, 32, 117, 115, 101, 115, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 106, 111, 98, 32, 40, 97, 107, 97, 32, 111, 122, 122, 58, 58, 97, 110, 105, 109, 97, 116, 105, 111, 110, 58, 58, 66, 108, 101, 110, 100, 105, 110, 103, 74, 111, 98, 41, 32, 97, 115, 32, 116, 104, 101, 32, 102, 117, 108, 108, 32, 98, 108, 101, 110, 100, 105, 110, 103, 32, 116, 101, 99, 104, 110, 105, 113, 117, 101, 32, 40, 115, 101, 101, 32, 34, 98, 108, 101, 110, 100, 34, 32, 115, 97, 109, 112, 108, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 41, 46, 32, 80, 97, 114, 116, 105, 97, 108, 32, 98, 108, 101, 110, 100, 105, 110, 103, 32, 117, 115, 101, 115, 32, 97, 32, 99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 32, 112, 101, 114, 32, 106, 111, 105, 110, 116, 32, 116, 111, 32, 119, 101, 105, 103, 104, 116, 32, 116, 104, 101, 32, 97, 110, 105, 109, 97, 116, 105, 111, 110, 32, 105, 110, 102, 108, 117, 101, 110, 99, 101, 44, 32, 102, 111, 114, 32, 101, 118, 101, 114, 121, 32, 106, 111, 105, 110, 116, 46, 32, 84, 104, 105, 115, 32, 112, 101, 114, 45, 106, 111, 105, 110, 116, 32, 119, 101, 105, 103, 104, 116, 32, 105, 115, 32, 109, 111, 100, 117, 108, 97, 116, 101, 100, 32, 119, 105, 116, 104, 32, 108, 97, 121, 101, 114, 39, 115, 32, 119, 101, 105, 103, 104, 116, 32, 116, 111, 32, 99, 111, 109, 112, 117, 116, 101, 32, 116, 104, 101, 32, 102, 105, 110, 97, 108, 32, 105, 110, 102, 108, 117, 101, 110, 99, 101, 32, 111, 102, 32, 101, 118, 101, 114, 121, 32, 106, 111, 105, 110, 116, 46, 32, 84, 104, 105, 115, 32, 115, 101, 116, 32, 111, 102, 32, 119, 101, 105, 103, 104, 116, 32, 99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 115, 32, 97, 114, 101, 32, 112, 114, 111, 118, 105, 100, 101, 100, 32, 116, 111, 32, 116, 104, 101, 32, 66, 108, 101, 110, 100, 105, 110, 103, 74, 111, 98, 58, 58, 76, 97, 121, 101, 114, 32, 97, 115, 32, 97, 110, 32, 97, 114, 114, 97, 121, 32, 111, 102, 32, 83, 111, 65, 32, 102, 108, 111, 97, 116, 105, 110, 103, 32, 112, 111, 105, 110, 116, 32, 118, 97, 108, 117, 101, 115, 44, 32, 97, 114, 114, 97, 110, 103, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 111, 114, 100, 101, 114, 32, 97, 115, 32, 115, 107, 101, 108, 101, 116, 111, 110, 32, 106, 111, 105, 110, 116, 115, 46, 13, 10, 84, 104, 101, 32, 115, 97, 109, 112, 108, 101, 32, 117, 115, 101, 115, 32, 111, 122, 122, 58, 58, 97, 110, 105, 109, 97, 116, 105, 111, 110, 58, 58, 73, 116, 101, 114, 97, 116, 101, 74, 111, 105, 110, 116, 115, 68, 70, 32, 104, 101, 108, 112, 101, 114, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 111, 32, 105, 116, 101, 114, 97, 116, 101, 32, 97, 108, 108, 32, 99, 104, 105, 108, 100, 114, 101, 110, 32, 111, 102, 32, 116, 104, 101, 32, 117, 112, 112, 101, 114, 32, 98, 111, 100, 121, 32, 34, 114, 111, 111, 116, 34, 32, 106, 111, 105, 110, 116, 44, 32, 97, 110, 100, 32, 115, 101, 116, 32, 117, 112, 32, 112, 101, 114, 45, 106, 111, 105, 110, 116, 32, 119, 101, 105, 103, 104, 116, 32, 109, 97, 115, 107, 115, 46, 13, 10, 13, 10, 51, 46, 32, 83, 97, 109, 112, 108, 101, 32, 117, 115, 97, 103, 101, 13, 10, 84, 104, 101, 32, 115, 97, 109, 112, 108, 101, 32, 112, 114, 111, 112, 111, 115, 101, 115, 32, 116, 119, 111, 32, 109, 111, 100, 101, 115, 32, 111, 102, 32, 105, 110, 116, 101, 114, 97, 99, 116, 105, 111, 110, 58, 13, 10, 32, 32, 45, 32, 65, 117, 116, 111, 109, 97, 116, 105, 99, 58, 32, 87, 105, 116, 104, 32, 116, 104, 105, 115, 32, 109, 111, 100, 101, 32, 116, 104, 101, 32, 71, 85, 73, 32, 112, 114, 111, 112, 111, 115, 101, 115, 32, 116, 111, 32, 97, 117, 116, 111, 109, 97, 116, 105, 99, 97, 108, 108, 121, 32, 99, 111, 110, 116, 114, 111, 108, 32, 97, 108, 108, 32, 98, 108, 101, 110, 100, 105, 110, 103, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 32, 102, 114, 111, 109, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 34, 117, 112, 112, 101, 114, 32, 98, 111, 100, 121, 32, 119, 101, 105, 103, 104, 116, 34, 32, 115, 108, 105, 100, 101, 114, 46, 32, 84, 104, 101, 32, 115, 101, 108, 101, 99, 116, 101, 100, 32, 99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 32, 105, 115, 32, 117, 115, 101, 100, 32, 116, 111, 32, 115, 101, 116, 32, 117, 112, 32, 116, 104, 101, 32, 112, 101, 114, 45, 106, 111, 105, 110, 116, 32, 119, 101, 105, 103, 104, 116, 115, 32, 111, 102, 32, 116, 104, 101, 32, 117, 112, 112, 101, 114, 32, 98, 111, 100, 121, 32, 108, 97, 121, 101, 114, 44, 32, 119, 104, 105, 108, 101, 32, 108, 111, 119, 101, 114, 32, 98, 111, 100, 121, 32, 119, 101, 105, 103, 104, 116, 115, 32, 97, 114, 101, 32, 115, 101, 116, 32, 116, 111, 32, 111, 110, 101, 32, 109, 105, 110, 117, 115, 32, 117, 112, 112, 101, 114, 32, 98, 111, 100, 121, 32, 119, 101, 105, 103, 104, 116, 115, 46, 13, 10, 32, 32, 45, 32, 77, 97, 110, 117, 101, 108, 58, 32, 65, 108, 108, 111, 119, 115, 32, 116, 111, 32, 115, 101, 116, 117, 112, 32, 97, 108, 108, 32, 98, 108, 101, 110, 100, 105, 110, 103, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 32, 105, 110, 100, 101, 112, 101, 110, 100, 101, 110, 116, 108, 121, 46, 13, 10, 84, 104, 101, 32, 71, 85, 73, 32, 97, 108, 115, 111, 32, 112, 114, 111, 112, 111, 115, 101, 115, 32, 116, 111, 32, 115, 101, 108, 101, 99, 116, 32, 116, 104, 101, 32, 34, 114, 111, 111, 116, 34, 32, 106, 111, 105, 110, 116, 32, 111, 102, 32, 116, 104, 101, 32, 117, 112, 112, 101, 114, 32, 98, 111, 100, 121, 32, 104, 105, 101, 114, 97, 114, 99, 104, 121, 44, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 102, 102, 101, 99, 116, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 112, 97, 114, 116, 105, 97, 108, 108, 121, 32, 97, 110, 105, 109, 97, 116, 101, 100, 32, 108, 97, 121, 101, 114, 46, 32, 13, 10, 13, 10, 52, 46, 32, 73, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 13, 10, 32, 32, 97, 46, 32, 84, 104, 105, 115, 32, 115, 97, 109, 112, 108, 101, 32, 101, 120, 116, 101, 110, 100, 115, 32, 34, 98, 108, 101, 110, 100, 34, 32, 115, 97, 109, 112, 108, 101, 44, 32, 97, 110, 100, 32, 117, 115, 101, 115, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 112, 114, 111, 99, 101, 100, 117, 114, 101, 32, 116, 111, 32, 108, 111, 97, 100, 32, 115, 107, 101, 108, 101, 116, 111, 110, 32, 97, 110, 100, 32, 97, 110, 105, 109, 97, 116, 105, 111, 110, 115, 32, 111, 98, 106, 101, 99, 116, 115, 46, 13, 10, 32, 32, 98, 46, 32, 83, 97, 109, 112, 108, 101, 115, 32, 101, 97, 99, 104, 32, 97, 110, 105, 109, 97, 116, 105, 111, 110, 32, 97, 116, 32, 116, 104, 101, 105, 114, 32, 111, 119, 110, 32, 115, 112, 101, 101, 100, 44, 32, 116, 104, 101, 121, 32, 100, 111, 32, 110, 111, 116, 32, 110, 101, 101, 100, 32, 116, 111, 32, 98, 101, 32, 115, 121, 110, 99, 104, 114, 111, 110, 105, 122, 101, 100, 46, 13, 10, 32, 32, 99, 46, 32, 80, 114, 101, 112, 97, 114, 101, 115, 32, 112, 101, 114, 45, 106, 111, 105, 110, 116, 32, 119, 101, 105, 103, 104, 116, 32, 109, 97, 115, 107, 115, 32, 102, 111, 114, 32, 116, 104, 101, 32, 116, 119, 111, 32, 108, 111, 119, 101, 114, 32, 97, 110, 100, 32, 117, 112, 112, 101, 114, 32, 98, 111, 100, 121, 32, 108, 97, 121, 101, 114, 115, 46, 32, 73, 102, 32, 105, 110, 116, 101, 114, 97, 99, 116, 105, 111, 110, 32, 109, 111, 100, 101, 32, 105, 115, 32, 115, 101, 116, 32, 116, 111, 32, 97, 117, 116, 111, 109, 97, 116, 105, 99, 44, 32, 116, 104, 101, 110, 32, 108, 111, 119, 101, 114, 32, 97, 110, 100, 32, 117, 112, 112, 101, 114, 32, 98, 111, 100, 121, 32, 119, 101, 105, 103, 104, 116, 32, 99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 115, 32, 97, 114, 101, 32, 99, 111, 109, 112, 117, 116, 101, 100, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 115, 105, 110, 103, 108, 101, 32, 34, 85, 112, 112, 101, 114, 32, 98, 111, 100, 121, 32, 119, 101, 105, 103, 104, 116, 34, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 46, 32, 73, 110, 32, 116, 104, 105, 115, 32, 99, 97, 115, 101, 32, 117, 112, 112, 101, 114, 32, 98, 111, 100, 121, 32, 99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 32, 101, 113, 117, 97, 108, 115, 32, 111, 110, 101, 32, 109, 105, 110, 117, 115, 32, 108, 111, 119, 101, 114, 32, 98, 111, 100, 121, 32, 99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 46, 32, 73, 102, 32, 105, 110, 116, 101, 114, 97, 99, 116, 105, 111, 110, 32, 109, 111, 100, 101, 32, 105, 115, 32, 115, 101, 116, 32, 116, 111, 32, 109, 97, 110, 117, 97, 108, 44, 32, 116, 104, 101, 110, 32, 97, 108, 108, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 32, 97, 114, 101, 32, 115, 101, 116, 32, 109, 97, 110, 117, 97, 108, 108, 121, 46, 13, 10, 32, 32, 100, 46, 32, 85, 115, 101, 115, 32, 111, 122, 122, 58, 58, 97, 110, 105, 109, 97, 116, 105, 111, 110, 58, 58, 73, 116, 101, 114, 97, 116, 101, 74, 111, 105, 110, 116, 115, 68, 70, 32, 104, 101, 108, 112, 101, 114, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 111, 32, 105, 116, 101, 114, 97, 116, 101, 32, 97, 108, 108, 32, 99, 104, 105, 108, 100, 114, 101, 110, 32, 111, 102, 32, 116, 104, 101, 32, 117, 112, 112, 101, 114, 32, 98, 111, 100, 121, 32, 114, 111, 111, 116, 32, 106, 111, 105, 110, 116, 44, 32, 97, 110, 100, 32, 115, 101, 116, 32, 117, 112, 32, 112, 101, 114, 45, 106, 111, 105, 110, 116, 32, 119, 101, 105, 103, 104, 116, 32, 109, 97, 115, 107, 115, 32, 97, 115, 32, 102, 111, 108, 108, 111, 119, 115, 32, 40, 110, 111, 116, 101, 32, 116, 104, 97, 116, 32, 119, 101, 105, 103, 104, 116, 32, 99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 115, 32, 97, 114, 101, 32, 115, 116, 111, 114, 101, 100, 32, 97, 115, 32, 83, 111, 65, 32, 102, 108, 111, 97, 116, 115, 41, 58, 13, 10, 32, 32, 32, 32, 45, 32, 85, 112, 112, 101, 114, 32, 98, 111, 100, 121, 32, 119, 101, 105, 103, 104, 116, 32, 109, 97, 115, 107, 58, 32, 65, 102, 102, 101, 99, 116, 115, 32, 117, 112, 112, 101, 114, 32, 98, 111, 100, 121, 32, 119, 101, 105, 103, 104, 116, 32, 99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 32, 116, 111, 32, 97, 108, 108, 32, 116, 104, 101, 32, 106, 111, 105, 110, 116, 115, 32, 116, 104, 97, 116, 32, 97, 114, 101, 32, 112, 97, 114, 116, 32, 111, 102, 32, 116, 104, 101, 32, 117, 112, 112, 101, 114, 32, 98, 111, 100, 121, 44, 32, 97, 108, 108, 32, 111, 116, 104, 101, 114, 115, 32, 97, 114, 101, 32, 115, 101, 116, 32, 116, 111, 32, 122, 101, 114, 111, 46, 13, 10, 32, 32, 32, 32, 45, 32, 76, 111, 119, 101, 114, 32, 98, 111, 100, 121, 32, 119, 101, 105, 103, 104, 116, 32, 109, 97, 115, 107, 58, 32, 65, 102, 102, 101, 99, 116, 115, 32, 108, 111, 119, 101, 114, 32, 98, 111, 100, 121, 32, 119, 101, 105, 103, 104, 116, 32, 99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 32, 116, 111, 32, 97, 108, 108, 32, 116, 104, 101, 32, 106, 111, 105, 110, 116, 115, 32, 116, 104, 97, 116, 32, 97, 114, 101, 32, 112, 97, 114, 116, 32, 111, 102, 32, 116, 104, 101, 32, 108, 111, 119, 101, 114, 32, 98, 111, 100, 121, 32, 40, 105, 101, 58, 32, 97, 108, 108, 32, 116, 104, 101, 32, 111, 110, 101, 115, 32, 116, 104, 97, 116, 32, 97, 114, 101, 32, 110, 111, 116, 32, 112, 97, 114, 116, 32, 111, 102, 32, 116, 104, 101, 32, 117, 112, 112, 101, 114, 32, 98, 111, 100, 121, 41, 44, 32, 97, 108, 108, 32, 111, 116, 104, 101, 114, 115, 32, 97, 114, 101, 32, 115, 101, 116, 32, 116, 111, 32, 111, 110, 101, 46, 13, 10, 32, 32, 101, 46, 32, 83, 101, 116, 115, 32, 111, 122, 122, 58, 58, 97, 110, 105, 109, 97, 116, 105, 111, 110, 58, 58, 66, 108, 101, 110, 100, 105, 110, 103, 74, 111, 98, 32, 111, 98, 106, 101, 99, 116, 32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 116, 119, 111, 32, 108, 97, 121, 101, 114, 115, 32, 102, 111, 114, 32, 116, 104, 101, 32, 108, 111, 119, 101, 114, 32, 97, 110, 100, 32, 117, 112, 112, 101, 114, 32, 98, 111, 100, 121, 46, 32, 80, 101, 114, 45, 106, 111, 105, 110, 116, 32, 119, 101, 105, 103, 104, 116, 32, 109, 97, 115, 107, 115, 32, 97, 114, 101, 32, 112, 114, 111, 118, 105, 100, 101, 100, 32, 97, 115, 32, 97, 110, 32, 105, 110, 112, 117, 116, 32, 116, 111, 32, 101, 97, 99, 104, 32, 108, 97, 121, 101, 114, 46, 32, 65, 108, 108, 32, 111, 116, 104, 101, 114, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 32, 40, 98, 105, 110, 100, 45, 112, 111, 115, 101, 44, 32, 105, 110, 112, 117, 116, 32, 108, 111, 99, 97, 108, 45, 115, 112, 97, 99, 101, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 115, 44, 32, 119, 101, 105, 103, 104, 116, 115, 44, 32, 111, 117, 116, 112, 117, 116, 41, 32, 97, 114, 101, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 97, 115, 32, 116, 104, 111, 115, 101, 32, 117, 115, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 102, 117, 108, 108, 32, 115, 107, 101, 108, 101, 116, 111, 110, 32, 104, 105, 101, 114, 97, 114, 99, 104, 121, 32, 98, 108, 101, 110, 100, 105, 110, 103, 46, 32, 83, 101, 101, 32, 34, 98, 108, 101, 110, 100, 34, 32, 115, 97, 109, 112, 108, 101, 32, 102, 111, 114, 32, 109, 111, 114, 101, 32, 100, 101, 116, 97, 105, 108, 115, 46, 13, 10, 32, 32, 102, 46, 32, 67, 111, 110, 118, 101, 114, 116, 115, 32, 108, 111, 99, 97, 108, 45, 115, 112, 97, 99, 101, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 97, 116, 105, 111, 110, 115, 44, 32, 111, 117, 116, 112, 117, 116, 116, 101, 100, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 98, 108, 101, 110, 100, 105, 110, 103, 32, 115, 116, 97, 103, 101, 44, 32, 116, 111, 32, 109, 111, 100, 101, 108, 45, 115, 112, 97, 99, 101, 32, 109, 97, 116, 114, 105, 99, 101, 115, 32, 117, 115, 105, 110, 103, 32, 111, 122, 122, 58, 58, 97, 110, 105, 109, 97, 116, 105, 111, 110, 58, 58, 76, 111, 99, 97, 108, 84, 111, 77, 111, 100, 101, 108, 74, 111, 98, 46, 32, 73, 116, 32, 97, 108, 115, 111, 32, 116, 97, 107, 101, 115, 32, 97, 115, 32, 105, 110, 112, 117, 116, 32, 116, 104, 101, 32, 115, 107, 101, 108, 101, 116, 111, 110, 32, 40, 116, 111, 32, 107, 110, 111, 119, 32, 97, 98, 111, 117, 116, 32, 106, 111, 105, 110, 116, 39, 115, 32, 104, 105, 101, 114, 97, 114, 99, 104, 121, 41, 46, 32, 79, 117, 116, 112, 117, 116, 32, 105, 115, 32, 109, 111, 100, 101, 108, 45, 115, 112, 97, 99, 101, 32, 109, 97, 116, 114, 105, 99, 101, 115, 32, 97, 114, 114, 97, 121, 46, 13, 10, 32, 32, 103, 46, 32, 77, 111, 100, 101, 108, 45, 115, 112, 97, 99, 101, 32, 109, 97, 116, 114, 105, 99, 101, 115, 32, 97, 114, 114, 97, 121, 32, 99, 97, 110, 32, 116, 104, 101, 110, 32, 98, 101, 32, 117, 115, 101, 100, 32, 102, 111, 114, 32, 114, 101, 110, 100, 101, 114, 105, 110, 103, 32, 40, 116, 111, 32, 115, 107, 105, 110, 32, 97, 32, 109, 101, 115, 104, 41, 32, 111, 114, 32, 117, 112, 100, 97, 116, 105, 110, 103, 32, 116, 104, 101, 32, 115, 99, 101, 110, 101, 32, 103, 114, 97, 112, 104, 46], true, true);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTVN10__cxxabiv117__class_type_infoE = 30232;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 30272;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(34563);
/* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } }, { func: function() { __GLOBAL__I_a42() } }, { func: function() { __GLOBAL__I_a338() } }, { func: function() { __GLOBAL__I_a378() } }, { func: function() { __GLOBAL__I_a557() } });


/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,107,101,108,101,116,111,110,0,0,0,0,0,0,0,0,80,97,116,104,32,116,111,32,116,104,101,32,115,107,101,108,101,116,111,110,32,40,111,122,122,32,97,114,99,104,105,118,101,32,102,111,114,109,97,116,41,46,0,0,0,0,0,0,109,101,100,105,97,47,115,107,101,108,101,116,111,110,46,111,122,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,111,119,101,114,95,98,111,100,121,95,97,110,105,109,97,116,105,111,110,0,0,0,0,80,97,116,104,32,116,111,32,116,104,101,32,108,111,119,101,114,32,98,111,100,121,32,97,110,105,109,97,116,105,111,110,40,111,122,122,32,97,114,99,104,105,118,101,32,102,111,114,109,97,116,41,46,0,0,0,109,101,100,105,97,47,119,97,108,107,46,111,122,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,112,112,101,114,95,98,111,100,121,95,97,110,105,109,97,116,105,111,110,0,0,0,0,80,97,116,104,32,116,111,32,116,104,101,32,117,112,112,101,114,32,98,111,100,121,32,97,110,105,109,97,116,105,111,110,32,40,111,122,122,32,97,114,99,104,105,118,101,32,102,111,114,109,97,116,41,46,0,0,109,101,100,105,97,47,99,114,111,115,115,97,114,109,115,46,111,122,122,0,0,0,0,0,79,122,122,45,97,110,105,109,97,116,105,111,110,32,115,97,109,112,108,101,58,32,80,97,114,116,105,97,108,32,97,110,105,109,97,116,105,111,110,115,32,98,108,101,110,100,105,110,103,0,0,0,0,0,0,0,49,46,48,0,0,0,0,0,0,0,0,0,16,2,0,0,1,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,50,57,80,97,114,116,105,97,108,66,108,101,110,100,83,97,109,112,108,101,65,112,112,108,105,99,97,116,105,111,110,0,72,118,0,0,240,1,0,0,72,9,0,0,0,0,0,0,1,0,0,0,0,0,0,0,66,108,101,110,100,105,110,103,32,112,97,114,97,109,101,116,101,114,115,0,0,0,0,0,1,0,0,0,0,0,0,0,85,115,101,32,97,117,116,111,109,97,116,105,99,32,98,108,101,110,100,105,110,103,32,115,101,116,116,105,110,103,115,0,0,0,128,63,0,0,0,0,85,112,112,101,114,32,98,111,100,121,32,119,101,105,103,104,116,58,32,37,46,50,102,0,77,97,110,117,97,108,32,115,101,116,116,105,110,103,115,58,0,0,0,0,0,0,0,0,76,111,119,101,114,32,98,111,100,121,32,108,97,121,101,114,58,0,0,0,0,0,0,0,76,97,121,101,114,32,119,101,105,103,104,116,58,32,37,46,50,102,0,0,0,0,0,0,74,111,105,110,116,115,32,119,101,105,103,104,116,58,32,37,46,50,102,0,0,0,0,0,85,112,112,101,114,32,98,111,100,121,32,108,97,121,101,114,58,0,0,0,0,0,0,0,84,104,114,101,115,104,111,108,100,58,32,37,46,50,102,0,1,0,0,0,0,0,0,0,82,111,111,116,0,0,0,0,82,111,111,116,32,111,102,32,116,104,101,32,117,112,112,101,114,32,98,111,100,121,32,104,105,101,114,97,114,99,104,121,58,0,0,0,0,0,0,0,37,115,32,40,37,100,41,0,1,0,0,0,0,0,0,0,65,110,105,109,97,116,105,111,110,32,99,111,110,116,114,111,108,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,76,111,119,101,114,32,98,111,100,121,32,97,110,105,109,97,116,105,111,110,0,0,0,0,85,112,112,101,114,32,98,111,100,121,32,97,110,105,109,97,116,105,111,110,0,0,0,0,120,3,0,0,144,3,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,83,112,105,110,101,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,97,120,95,105,100,108,101,95,108,111,111,112,115,0,0,84,104,101,32,109,97,120,105,109,117,109,32,110,117,109,98,101,114,32,111,102,32,105,100,108,101,32,108,111,111,112,115,32,116,104,101,32,115,97,109,112,108,101,32,97,112,112,108,105,99,97,116,105,111,110,32,99,97,110,32,112,101,114,102,111,114,109,46,32,65,112,112,108,105,99,97,116,105,111,110,32,97,117,116,111,109,97,116,105,99,97,108,108,121,32,101,120,105,116,32,119,104,101,110,32,116,104,105,115,32,110,117,109,98,101,114,32,111,102,32,108,111,111,112,115,32,105,115,32,114,101,97,99,104,101,100,46,32,65,32,110,101,103,97,116,105,118,101,32,118,97,108,117,101,32,100,105,115,97,98,108,101,115,32,116,104,105,115,32,102,101,97,116,117,114,101,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,110,100,101,114,0,0,69,110,97,98,108,101,115,32,115,97,109,112,108,101,32,114,101,100,101,114,105,110,103,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,108,117,116,105,111,110,0,0,0,0,0,0,82,101,115,111,108,117,116,105,111,110,32,105,110,100,101,120,32,40,48,32,116,111,32,49,55,41,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,9,0,0,4,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,128,2,0,0,104,1,0,0,128,2,0,0,224,1,0,0,32,3,0,0,194,1,0,0,32,3,0,0,88,2,0,0,0,4,0,0,64,2,0,0,0,4,0,0,0,3,0,0,0,5,0,0,208,2,0,0,0,5,0,0,32,3,0,0,0,5,0,0,192,3,0,0,0,5,0,0,0,4,0,0,120,5,0,0,26,4,0,0,160,5,0,0,132,3,0,0,64,6,0,0,132,3,0,0,64,6,0,0,176,4,0,0,144,6,0,0,26,4,0,0,128,7,0,0,56,4,0,0,128,7,0,0,176,4,0,0,79,122,122,32,97,110,105,109,97,116,105,111,110,32,115,97,109,112,108,101,46,32,83,101,101,32,82,69,65,68,77,69,32,102,105,108,101,32,102,111,114,32,109,111,114,101,32,100,101,116,97,105,108,115,46,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,79,112,101,110,71,76,32,119,105,110,100,111,119,46,32,82,101,113,117,105,114,101,100,32,79,112,101,110,71,76,32,118,101,114,115,105,111,110,32,105,115,32,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,83,117,99,99,101,115,115,102,117,108,108,121,32,111,112,101,110,101,100,32,79,112,101,110,71,76,32,119,105,110,100,111,119,32,118,101,114,115,105,111,110,32,34,0,0,0,0,0,34,46,0,0,0,0,0,0,65,110,32,101,114,114,111,114,32,111,99,99,117,114,114,101,100,32,100,117,114,105,110,103,32,115,97,109,112,108,101,32,101,120,101,99,117,116,105,111,110,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,104,111,119,32,104,101,108,112,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,70,114,97,109,101,119,111,114,107,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,83,97,109,112,108,101,0,0,1,0,0,0,0,0,0,0,83,116,97,116,105,115,116,105,99,115,0,0,0,0,0,0,70,80,83,58,32,37,46,48,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,114,97,109,101,58,32,37,46,50,102,32,109,115,0,0,85,112,100,97,116,101,58,32,37,46,50,102,32,109,115,0,1,0,0,0,0,0,0,0,82,101,110,100,101,114,58,32,37,46,50,102,32,109,115,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,84,105,109,101,32,99,111,110,116,114,111,108,0,0,0,0,70,114,101,101,122,101,0,0,70,105,120,32,117,112,100,97,116,101,32,114,97,116,101,0,84,105,109,101,32,102,97,99,116,111,114,58,32,37,46,50,102,0,0,0,0,0,0,0,82,101,115,101,116,32,116,105,109,101,32,102,97,99,116,111,114,0,0,0,0,0,0,0,85,112,100,97,116,101,32,114,97,116,101,58,32,37,46,48,102,32,102,112,115,0,0,0,82,101,115,101,116,32,117,112,100,97,116,101,32,114,97,116,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,112,116,105,111,110,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,110,116,105,45,97,108,105,97,115,105,110,103,0,0,0,1,0,0,0,0,0,0,0,86,101,114,116,105,99,97,108,32,115,121,110,99,0,0,0,82,101,115,111,108,117,116,105,111,110,58,32,37,100,120,37,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,97,112,116,117,114,101,0,67,97,112,116,117,114,101,32,118,105,100,101,111,0,0,0,67,97,112,116,117,114,101,32,115,99,114,101,101,110,115,104,111,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,97,109,101,114,97,32,99,111,110,116,114,111,108,115,0,82,69,65,68,77,69,0,0,114,98,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,102,105,110,100,32,82,69,65,68,77,69,32,104,101,108,112,32,102,105,108,101,46,0,0,0,0,0,0,0,0,78,51,111,122,122,54,115,97,109,112,108,101,49,49,65,112,112,108,105,99,97,116,105,111,110,69,0,0,0,0,0,0,32,118,0,0,40,9,0,0,0,0,0,0,0,0,0,63,0,0,0,0,0,0,0,0,45,70,58,32,70,114,97,109,101,32,97,108,108,10,45,77,77,66,58,32,67,101,110,116,101,114,10,45,82,77,66,58,32,82,111,116,97,116,101,10,45,67,116,114,108,32,43,32,82,77,66,58,32,90,111,111,109,10,45,83,104,105,102,116,32,43,32,82,77,66,58,32,80,97,110,10,0,0,0,0,65,117,116,111,109,97,116,105,99,32,102,114,97,109,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,100,118,97,110,99,101,100,32,111,112,116,105,111,110,115,0,0,0,0,0,0,0,0,83,109,111,111,116,104,32,114,111,116,97,116,105,111,110,115,0,0,0,0,0,0,0,0,83,109,111,111,116,104,32,116,97,114,103,101,116,105,110,103,0,0,0,0,0,0,0,0,70,105,120,101,115,32,116,97,114,103,101,116,32,100,105,115,116,97,110,99,101,0,0,0,83,109,111,111,116,104,32,116,97,114,103,101,116,32,100,105,115,116,97,110,99,101,0,0,37,46,50,103,10,0,0,0,0,0,0,0,216,14,0,0,6,0,0,0,7,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,48,48,48,208,0,0,0,0,128,128,128,255,0,0,0,0,160,160,160,192,0,0,0,0,48,48,48,255,0,0,0,0,176,176,176,255,0,0,0,0,48,48,48,255,0,0,0,0,32,32,32,255,0,0,0,0,176,176,176,255,0,0,0,0,144,144,144,255,0,0,0,0,80,80,80,255,0,0,0,0,199,154,64,255,0,0,0,0,48,48,48,255,0,0,0,0,176,176,176,255,0,0,0,0,199,154,64,255,0,0,0,0,48,64,154,255,0,0,0,0,176,176,176,255,0,0,0,0,144,144,144,255,0,0,0,0,128,128,128,255,0,0,0,0,128,128,128,255,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,33,176,161,4,0,8,8,64,64,0,0,0,2,56,96,225,192,199,135,62,56,112,0,0,0,0,0,56,99,225,239,31,159,158,238,248,247,119,29,251,156,120,115,225,175,253,251,247,199,221,241,196,7,4,0,16,3,0,0,192,7,0,192,32,70,3,0,0,0,0,0,0,0,0,0,0,0,0,0,65,4,0,0,0,33,32,163,138,0,8,8,65,240,128,0,0,2,68,33,18,33,68,8,34,68,136,0,0,192,48,12,68,33,18,36,136,136,162,68,32,34,34,13,153,34,36,137,18,105,40,145,34,68,137,17,2,1,4,0,8,1,0,0,64,8,0,64,0,2,1,0,0,0,0,0,0,2,0,0,0,0,0,0,129,2,0,0,0,33,33,68,4,6,8,16,32,64,128,0,0,4,68,32,16,33,68,16,2,68,136,192,193,0,8,18,76,81,18,4,74,10,32,68,32,34,66,13,153,34,36,137,18,1,8,145,34,40,80,33,2,1,10,0,0,113,97,227,71,31,27,88,225,226,225,29,54,28,216,109,177,231,217,187,247,205,221,240,129,2,0,0,0,32,3,228,1,136,8,16,32,160,128,0,0,4,68,32,32,194,71,30,4,56,136,192,198,15,134,2,84,81,226,4,78,14,32,124,32,34,130,10,149,34,36,137,17,193,8,138,42,16,80,65,2,1,17,0,0,137,146,36,200,136,38,100,32,34,65,10,153,34,100,152,194,34,8,145,34,72,137,32,129,2,0,0,0,32,1,67,142,8,0,16,32,167,240,15,128,8,68,32,64,36,64,145,4,68,120,0,8,0,1,4,84,81,18,4,74,10,39,68,33,35,130,10,149,34,56,137,224,33,8,138,42,16,32,65,1,1,0,0,0,121,18,4,79,136,34,68,32,35,129,10,145,34,68,136,129,194,8,145,42,48,72,64,129,2,9,0,0,0,3,228,129,21,0,16,32,0,128,0,0,8,68,32,128,39,224,145,4,68,8,0,6,15,134,8,76,249,18,4,72,8,34,68,33,34,66,72,149,34,32,137,32,33,8,138,42,40,32,129,1,1,0,0,0,137,18,4,72,8,34,68,32,34,129,10,145,34,68,136,128,34,8,138,42,48,80,129,1,1,22,0,0,0,1,71,2,146,0,16,32,0,129,128,12,16,68,33,18,32,72,145,8,68,16,192,193,0,8,0,64,137,18,36,136,136,34,68,33,34,34,72,147,34,32,137,19,33,8,132,42,68,33,17,0,129,0,0,0,137,18,36,72,8,34,68,32,34,65,10,145,34,68,136,130,34,41,138,42,72,49,16,129,2,0,0,0,32,2,129,1,13,0,16,32,0,129,0,12,16,56,249,241,192,231,14,8,56,224,193,128,192,48,24,69,223,225,207,31,156,28,238,248,199,55,221,251,28,112,115,138,195,135,4,20,198,113,241,0,129,0,0,0,127,225,195,231,159,30,238,248,38,231,223,251,156,120,121,243,193,198,196,20,204,33,240,129,2,0,0,0,0,2,129,0,0,0,8,64,0,3,0,0,32,0,0,0,0,0,0,0,0,0,1,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,1,0,129,0,0,0,0,0,0,0,0,2,0,0,32,0,0,0,0,64,8,0,0,0,0,0,0,32,0,129,2,0,0,0,0,0,0,0,0,0,8,64,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,192,7,0,127,0,0,0,0,0,0,28,0,1,192,0,0,0,0,224,28,0,0,0,0,0,0,240,0,64,4,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,78,51,111,122,122,54,115,97,109,112,108,101,56,105,110,116,101,114,110,97,108,57,73,109,71,117,105,73,109,112,108,69,0,0,0,0,0,0,0,0,78,51,111,122,122,54,115,97,109,112,108,101,53,73,109,71,117,105,69,0,0,0,0,0,32,118,0,0,184,14,0,0,72,118,0,0,144,14,0,0,208,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,36,0,0,9,0,0,0,10,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,108,66,105,110,100,66,117,102,102,101,114,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,66,105,110,100,66,117,102,102,101,114,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,0,103,108,68,101,108,101,116,101,66,117,102,102,101,114,115,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,68,101,108,101,116,101,66,117,102,102,101,114,115,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,103,108,71,101,110,66,117,102,102,101,114,115,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,110,66,117,102,102,101,114,115,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,0,103,108,73,115,66,117,102,102,101,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,73,115,66,117,102,102,101,114,32,102,117,110,99,116,105,111,110,46,0,0,103,108,66,117,102,102,101,114,68,97,116,97,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,66,117,102,102,101,114,68,97,116,97,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,0,103,108,66,117,102,102,101,114,83,117,98,68,97,116,97,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,66,117,102,102,101,114,83,117,98,68,97,116,97,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,103,108,77,97,112,66,117,102,102,101,114,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,77,97,112,66,117,102,102,101,114,32,102,117,110,99,116,105,111,110,46,0,103,108,85,110,109,97,112,66,117,102,102,101,114,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,109,97,112,66,117,102,102,101,114,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,103,108,71,101,116,66,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,66,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,103,108,65,116,116,97,99,104,83,104,97,100,101,114,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,65,116,116,97,99,104,83,104,97,100,101,114,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,103,108,66,105,110,100,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,66,105,110,100,65,116,116,114,105,98,76,111,99,97,116,105,111,110,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,0,103,108,67,111,109,112,105,108,101,83,104,97,100,101,114,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,67,111,109,112,105,108,101,83,104,97,100,101,114,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,67,114,101,97,116,101,83,104,97,100,101,114,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,103,108,68,101,108,101,116,101,80,114,111,103,114,97,109,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,68,101,108,101,116,101,80,114,111,103,114,97,109,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,103,108,68,101,108,101,116,101,83,104,97,100,101,114,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,68,101,108,101,116,101,83,104,97,100,101,114,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,103,108,68,101,116,97,99,104,83,104,97,100,101,114,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,68,101,116,97,99,104,83,104,97,100,101,114,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,103,108,68,105,115,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,68,105,115,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,32,102,117,110,99,116,105,111,110,46,0,0,103,108,69,110,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,69,110,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,32,102,117,110,99,116,105,111,110,46,0,0,0,103,108,71,101,116,65,99,116,105,118,101,65,116,116,114,105,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,65,99,116,105,118,101,65,116,116,114,105,98,32,102,117,110,99,116,105,111,110,46,0,0,0,103,108,71,101,116,65,99,116,105,118,101,85,110,105,102,111,114,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,65,99,116,105,118,101,85,110,105,102,111,114,109,32,102,117,110,99,116,105,111,110,46,0,0,103,108,71,101,116,65,116,116,97,99,104,101,100,83,104,97,100,101,114,115,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,65,116,116,97,99,104,101,100,83,104,97,100,101,114,115,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,0,103,108,71,101,116,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,65,116,116,114,105,98,76,111,99,97,116,105,111,110,32,102,117,110,99,116,105,111,110,46,0,103,108,71,101,116,80,114,111,103,114,97,109,105,118,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,80,114,111,103,114,97,109,105,118,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,103,108,71,101,116,80,114,111,103,114,97,109,73,110,102,111,76,111,103,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,80,114,111,103,114,97,109,73,110,102,111,76,111,103,32,102,117,110,99,116,105,111,110,46,0,103,108,71,101,116,83,104,97,100,101,114,105,118,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,83,104,97,100,101,114,105,118,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,103,108,71,101,116,83,104,97,100,101,114,73,110,102,111,76,111,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,83,104,97,100,101,114,73,110,102,111,76,111,103,32,102,117,110,99,116,105,111,110,46,0,0,103,108,71,101,116,83,104,97,100,101,114,83,111,117,114,99,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,83,104,97,100,101,114,83,111,117,114,99,101,32,102,117,110,99,116,105,111,110,46,0,0,0,103,108,71,101,116,85,110,105,102,111,114,109,76,111,99,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,85,110,105,102,111,114,109,76,111,99,97,116,105,111,110,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,0,103,108,71,101,116,85,110,105,102,111,114,109,102,118,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,85,110,105,102,111,114,109,102,118,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,103,108,71,101,116,85,110,105,102,111,114,109,105,118,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,85,110,105,102,111,114,109,105,118,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,102,118,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,102,118,32,102,117,110,99,116,105,111,110,46,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,105,118,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,105,118,32,102,117,110,99,116,105,111,110,46,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,118,32,102,117,110,99,116,105,111,110,46,0,0,0,103,108,73,115,80,114,111,103,114,97,109,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,73,115,80,114,111,103,114,97,109,32,102,117,110,99,116,105,111,110,46,0,103,108,73,115,83,104,97,100,101,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,73,115,83,104,97,100,101,114,32,102,117,110,99,116,105,111,110,46,0,0,103,108,76,105,110,107,80,114,111,103,114,97,109,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,76,105,110,107,80,114,111,103,114,97,109,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,103,108,83,104,97,100,101,114,83,111,117,114,99,101,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,83,104,97,100,101,114,83,111,117,114,99,101,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,103,108,85,115,101,80,114,111,103,114,97,109,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,115,101,80,114,111,103,114,97,109,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,0,103,108,85,110,105,102,111,114,109,49,102,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,49,102,32,102,117,110,99,116,105,111,110,46,0,103,108,85,110,105,102,111,114,109,50,102,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,50,102,32,102,117,110,99,116,105,111,110,46,0,103,108,85,110,105,102,111,114,109,51,102,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,51,102,32,102,117,110,99,116,105,111,110,46,0,103,108,85,110,105,102,111,114,109,52,102,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,52,102,32,102,117,110,99,116,105,111,110,46,0,103,108,85,110,105,102,111,114,109,49,105,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,49,105,32,102,117,110,99,116,105,111,110,46,0,103,108,85,110,105,102,111,114,109,50,105,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,50,105,32,102,117,110,99,116,105,111,110,46,0,103,108,85,110,105,102,111,114,109,51,105,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,51,105,32,102,117,110,99,116,105,111,110,46,0,103,108,85,110,105,102,111,114,109,52,105,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,52,105,32,102,117,110,99,116,105,111,110,46,0,103,108,85,110,105,102,111,114,109,49,102,118,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,49,102,118,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,0,103,108,85,110,105,102,111,114,109,50,102,118,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,50,102,118,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,0,103,108,85,110,105,102,111,114,109,51,102,118,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,51,102,118,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,0,103,108,85,110,105,102,111,114,109,52,102,118,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,52,102,118,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,50,102,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,50,102,118,32,102,117,110,99,116,105,111,110,46,0,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,51,102,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,51,102,118,32,102,117,110,99,116,105,111,110,46,0,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,52,102,118,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,52,102,118,32,102,117,110,99,116,105,111,110,46,0,0,103,108,86,97,108,105,100,97,116,101,80,114,111,103,114,97,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,86,97,108,105,100,97,116,101,80,114,111,103,114,97,109,32,102,117,110,99,116,105,111,110,46,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,32,102,117,110,99,116,105,111,110,46,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,118,32,102,117,110,99,116,105,111,110,46,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,32,102,117,110,99,116,105,111,110,46,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,118,32,102,117,110,99,116,105,111,110,46,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,32,102,117,110,99,116,105,111,110,46,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,118,32,102,117,110,99,116,105,111,110,46,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,32,102,117,110,99,116,105,111,110,46,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,118,32,102,117,110,99,116,105,111,110,46,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,32,102,117,110,99,116,105,111,110,46,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,97,108,108,32,109,97,110,100,97,116,111,114,121,32,71,76,32,101,120,116,101,110,115,105,111,110,115,46,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,115,111,109,101,32,111,112,116,105,111,110,97,108,32,71,76,32,101,120,116,101,110,115,105,111,110,115,46,0,0,0,0,0,0,0,71,76,95,65,82,66,95,105,110,115,116,97,110,99,101,100,95,97,114,114,97,121,115,0,79,112,116,105,111,110,97,108,32,71,76,95,65,82,66,95,105,110,115,116,97,110,99,101,100,95,97,114,114,97,121,115,32,101,120,116,101,110,115,105,111,110,115,32,102,111,117,110,100,46,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,68,105,118,105,115,111,114,65,82,66,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,86,101,114,116,101,120,65,116,116,114,105,98,68,105,118,105,115,111,114,65,82,66,32,102,117,110,99,116,105,111,110,46,0,0,0,0,103,108,68,114,97,119,65,114,114,97,121,115,73,110,115,116,97,110,99,101,100,65,82,66,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,68,114,97,119,65,114,114,97,121,115,73,110,115,116,97,110,99,101,100,65,82,66,32,102,117,110,99,116,105,111,110,46,0,0,0,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,73,110,115,116,97,110,99,101,100,65,82,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,115,116,97,108,108,32,103,108,68,114,97,119,69,108,101,109,101,110,116,115,73,110,115,116,97,110,99,101,100,65,82,66,32,102,117,110,99,116,105,111,110,46,0,0,70,97,105,108,101,100,32,116,111,32,115,101,116,117,112,32,71,76,95,65,82,66,95,105,110,115,116,97,110,99,101,100,95,97,114,114,97,121,115,44,32,102,101,97,116,117,114,101,32,105,115,32,100,105,115,97,98,108,101,100,46,0,0,0,79,112,116,105,111,110,97,108,32,71,76,95,65,82,66,95,105,110,115,116,97,110,99,101,100,95,97,114,114,97,121,115,32,101,120,116,101,110,115,105,111,110,115,32,110,111,116,32,102,111,117,110,100,46,0,0,78,51,111,122,122,54,115,97,109,112,108,101,56,105,110,116,101,114,110,97,108,49,50,82,101,110,100,101,114,101,114,73,109,112,108,69,0,0,0,0,78,51,111,122,122,54,115,97,109,112,108,101,56,82,101,110,100,101,114,101,114,69,0,0,32,118,0,0,120,36,0,0,72,118,0,0,80,36,0,0,144,36,0,0,0,0,0,0,0,0,0,0,88,47,0,0,11,0,0,0,12,0,0,0,117,110,105,102,111,114,109,32,109,97,116,52,32,117,95,109,118,112,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,97,95,112,111,115,105,116,105,111,110,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,52,32,97,95,99,111,108,111,114,59,10,118,97,114,121,105,110,103,32,118,101,99,52,32,118,95,118,101,114,116,101,120,95,99,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,118,101,99,52,32,118,101,114,116,101,120,32,61,32,118,101,99,52,40,97,95,112,111,115,105,116,105,111,110,46,120,121,122,44,32,49,46,41,59,10,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,117,95,109,118,112,32,42,32,118,101,114,116,101,120,59,10,32,32,118,95,118,101,114,116,101,120,95,99,111,108,111,114,32,61,32,97,95,99,111,108,111,114,59,10,125,10,0,0,0,0,0,0,118,97,114,121,105,110,103,32,118,101,99,52,32,118,95,118,101,114,116,101,120,95,99,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,118,95,118,101,114,116,101,120,95,99,111,108,111,114,59,10,125,10,0,0,97,95,112,111,115,105,116,105,111,110,0,0,0,0,0,0,97,95,99,111,108,111,114,0,117,95,109,118,112,0,0,0,117,110,105,102,111,114,109,32,109,97,116,52,32,117,95,109,118,112,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,97,95,112,111,115,105,116,105,111,110,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,97,95,116,101,120,95,99,111,111,114,100,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,52,32,97,95,99,111,108,111,114,59,10,118,97,114,121,105,110,103,32,118,101,99,52,32,118,95,118,101,114,116,101,120,95,99,111,108,111,114,59,10,118,97,114,121,105,110,103,32,118,101,99,50,32,118,95,116,101,120,116,117,114,101,95,99,111,111,114,100,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,118,101,99,52,32,118,101,114,116,101,120,32,61,32,118,101,99,52,40,97,95,112,111,115,105,116,105,111,110,46,120,121,122,44,32,49,46,41,59,10,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,117,95,109,118,112,32,42,32,118,101,114,116,101,120,59,10,32,32,118,95,118,101,114,116,101,120,95,99,111,108,111,114,32,61,32,97,95,99,111,108,111,114,59,10,32,32,118,95,116,101,120,116,117,114,101,95,99,111,111,114,100,32,61,32,97,95,116,101,120,95,99,111,111,114,100,59,10,125,10,0,0,0,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,117,95,116,101,120,116,117,114,101,59,10,118,97,114,121,105,110,103,32,118,101,99,52,32,118,95,118,101,114,116,101,120,95,99,111,108,111,114,59,10,118,97,114,121,105,110,103,32,118,101,99,50,32,118,95,116,101,120,116,117,114,101,95,99,111,111,114,100,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,118,101,99,52,32,116,101,120,95,99,111,108,111,114,32,61,32,116,101,120,116,117,114,101,50,68,40,117,95,116,101,120,116,117,114,101,44,32,118,95,116,101,120,116,117,114,101,95,99,111,111,114,100,41,59,10,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,118,95,118,101,114,116,101,120,95,99,111,108,111,114,32,42,32,116,101,120,95,99,111], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([108,111,114,59,10,32,32,105,102,40,103,108,95,70,114,97,103,67,111,108,111,114,46,97,32,60,32,46,48,49,41,32,100,105,115,99,97,114,100,59,10,125,10,0,0,0,0,0,97,95,116,101,120,95,99,111,111,114,100,0,0,0,0,0,117,95,116,101,120,116,117,114,101,0,0,0,0,0,0,0,109,97,116,52,32,71,101,116,87,111,114,108,100,77,97,116,114,105,120,40,41,32,123,10,32,32,47,47,32,82,101,98,117,105,108,100,115,32,106,111,105,110,116,32,109,97,116,114,105,120,46,10,32,32,109,97,116,52,32,106,111,105,110,116,95,109,97,116,114,105,120,59,10,32,32,106,111,105,110,116,95,109,97,116,114,105,120,91,48,93,32,61,32,118,101,99,52,40,110,111,114,109,97,108,105,122,101,40,106,111,105,110,116,91,48,93,46,120,121,122,41,44,32,48,46,41,59,10,32,32,106,111,105,110,116,95,109,97,116,114,105,120,91,49,93,32,61,32,118,101,99,52,40,110,111,114,109,97,108,105,122,101,40,106,111,105,110,116,91,49,93,46,120,121,122,41,44,32,48,46,41,59,10,32,32,106,111,105,110,116,95,109,97,116,114,105,120,91,50,93,32,61,32,118,101,99,52,40,110,111,114,109,97,108,105,122,101,40,106,111,105,110,116,91,50,93,46,120,121,122,41,44,32,48,46,41,59,10,32,32,106,111,105,110,116,95,109,97,116,114,105,120,91,51,93,32,61,32,118,101,99,52,40,106,111,105,110,116,91,51,93,46,120,121,122,44,32,49,46,41,59,10,32,32,47,47,32,82,101,98,117,105,108,100,115,32,98,111,110,101,32,112,114,111,112,101,114,116,105,101,115,46,10,32,32,118,101,99,51,32,98,111,110,101,95,100,105,114,32,61,32,118,101,99,51,40,106,111,105,110,116,91,48,93,46,119,44,32,106,111,105,110,116,91,49,93,46,119,44,32,106,111,105,110,116,91,50,93,46,119,41,59,10,32,32,102,108,111,97,116,32,98,111,110,101,95,108,101,110,32,61,32,108,101,110,103,116,104,40,98,111,110,101,95,100,105,114,41,59,10,32,32,47,47,32,83,101,116,117,112,32,114,101,110,100,101,114,105,110,103,32,119,111,114,108,100,32,109,97,116,114,105,120,46,10,32,32,109,97,116,52,32,119,111,114,108,100,95,109,97,116,114,105,120,59,10,32,32,119,111,114,108,100,95,109,97,116,114,105,120,91,48,93,32,61,32,106,111,105,110,116,95,109,97,116,114,105,120,91,48,93,32,42,32,98,111,110,101,95,108,101,110,59,10,32,32,119,111,114,108,100,95,109,97,116,114,105,120,91,49,93,32,61,32,106,111,105,110,116,95,109,97,116,114,105,120,91,49,93,32,42,32,98,111,110,101,95,108,101,110,59,10,32,32,119,111,114,108,100,95,109,97,116,114,105,120,91,50,93,32,61,32,106,111,105,110,116,95,109,97,116,114,105,120,91,50,93,32,42,32,98,111,110,101,95,108,101,110,59,10,32,32,119,111,114,108,100,95,109,97,116,114,105,120,91,51,93,32,61,32,106,111,105,110,116,95,109,97,116,114,105,120,91,51,93,59,10,32,32,114,101,116,117,114,110,32,119,111,114,108,100,95,109,97,116,114,105,120,59,10,125,10,0,0,0,0,0,0,0,0,97,116,116,114,105,98,117,116,101,32,109,97,116,52,32,106,111,105,110,116,59,10,0,0,117,110,105,102,111,114,109,32,109,97,116,52,32,106,111,105,110,116,59,10,0,0,0,0,97,95,110,111,114,109,97,108,0,0,0,0,0,0,0,0,106,111,105,110,116,0,0,0,109,97,116,52,32,71,101,116,87,111,114,108,100,77,97,116,114,105,120,40,41,32,123,10,32,32,47,47,32,82,101,98,117,105,108,100,115,32,98,111,110,101,32,112,114,111,112,101,114,116,105,101,115,46,10,32,32,47,47,32,66,111,110,101,32,108,101,110,103,116,104,32,105,115,32,115,101,116,32,116,111,32,122,101,114,111,32,116,111,32,100,105,115,97,98,108,101,32,108,101,97,102,32,114,101,110,100,101,114,105,110,103,46,10,32,32,102,108,111,97,116,32,105,115,95,98,111,110,101,32,61,32,106,111,105,110,116,91,51,93,46,119,59,10,32,32,118,101,99,51,32,98,111,110,101,95,100,105,114,32,61,32,118,101,99,51,40,106,111,105,110,116,91,48,93,46,119,44,32,106,111,105,110,116,91,49,93,46,119,44,32,106,111,105,110,116,91,50,93,46,119,41,32,42,32,105,115,95,98,111,110,101,59,10,32,32,102,108,111,97,116,32,98,111,110,101,95,108,101,110,32,61,32,108,101,110,103,116,104,40,98,111,110,101,95,100,105,114,41,59,10,32,32,47,47,32,83,101,116,117,112,32,114,101,110,100,101,114,105,110,103,32,119,111,114,108,100,32,109,97,116,114,105,120,46,10,32,32,102,108,111,97,116,32,100,111,116,32,61,32,100,111,116,40,106,111,105,110,116,91,50,93,46,120,121,122,44,32,98,111,110,101,95,100,105,114,41,59,10,32,32,118,101,99,51,32,98,105,110,111,114,109,97,108,32,61,32,97,98,115,40,100,111,116,41,32,60,32,46,48,49,32,63,32,106,111,105,110,116,91,50,93,46,120,121,122,32,58,32,106,111,105,110,116,91,49,93,46,120,121,122,59,10,32,32,109,97,116,52,32,119,111,114,108,100,95,109,97,116,114,105,120,59,10,32,32,119,111,114,108,100,95,109,97,116,114,105,120,91,48,93,32,61,32,118,101,99,52,40,98,111,110,101,95,100,105,114,44,32,48,46,41,59,10,32,32,119,111,114,108,100,95,109,97,116,114,105,120,91,49,93,32,61,32,10,32,32,32,32,118,101,99,52,40,98,111,110,101,95,108,101,110,32,42,32,110,111,114,109,97,108,105,122,101,40,99,114,111,115,115,40,98,105,110,111,114,109,97,108,44,32,98,111,110,101,95,100,105,114,41,41,44,32,48,46,41,59,10,32,32,119,111,114,108,100,95,109,97,116,114,105,120,91,50,93,32,61,10,32,32,32,32,118,101,99,52,40,98,111,110,101,95,108,101,110,32,42,32,110,111,114,109,97,108,105,122,101,40,99,114,111,115,115,40,98,111,110,101,95,100,105,114,44,32,119,111,114,108,100,95,109,97,116,114,105,120,91,49,93,46,120,121,122,41,41,44,32,48,46,41,59,10,32,32,119,111,114,108,100,95,109,97,116,114,105,120,91,51,93,32,61,32,118,101,99,52,40,106,111,105,110,116,91,51,93,46,120,121,122,44,32,49,46,41,59,10,32,32,114,101,116,117,114,110,32,119,111,114,108,100,95,109,97,116,114,105,120,59,10,125,10,0,0,0,117,110,105,102,111,114,109,32,109,97,116,52,32,117,95,109,118,112,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,97,95,112,111,115,105,116,105,111,110,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,97,95,110,111,114,109,97,108,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,52,32,97,95,99,111,108,111,114,59,10,118,97,114,121,105,110,103,32,118,101,99,51,32,118,95,119,111,114,108,100,95,110,111,114,109,97,108,59,10,118,97,114,121,105,110,103,32,118,101,99,52,32,118,95,118,101,114,116,101,120,95,99,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,118,101,99,52,32,118,101,114,116,101,120,32,61,32,118,101,99,52,40,97,95,112,111,115,105,116,105,111,110,46,120,121,122,44,32,49,46,41,59,10,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,117,95,109,118,112,32,42,32,118,101,114,116,101,120,59,10,32,32,118,95,119,111,114,108,100,95,110,111,114,109,97,108,32,61,32,97,95,110,111,114,109,97,108,59,10,32,32,118,95,118,101,114,116,101,120,95,99,111,108,111,114,32,61,32,97,95,99,111,108,111,114,59,10,125,10,0,0,0,78,51,111,122,122,54,115,97,109,112,108,101,56,105,110,116,101,114,110,97,108,54,83,104,97,100,101,114,69,0,0,0,32,118,0,0,56,47,0,0,0,0,0,0,152,47,0,0,13,0,0,0,14,0,0,0,78,51,111,122,122,54,115,97,109,112,108,101,56,105,110,116,101,114,110,97,108,49,51,65,109,98,105,101,110,116,83,104,97,100,101,114,69,0,0,0,72,118,0,0,112,47,0,0,88,47,0,0,0,0,0,0,0,0,0,0,24,48,0,0,15,0,0,0,16,0,0,0,78,51,111,122,122,54,115,97,109,112,108,101,56,105,110,116,101,114,110,97,108,49,48,66,111,110,101,83,104,97,100,101,114,69,0,0,0,0,0,0,78,51,111,122,122,54,115,97,109,112,108,101,56,105,110,116,101,114,110,97,108,49,52,83,107,101,108,101,116,111,110,83,104,97,100,101,114,69,0,0,72,118,0,0,224,47,0,0,88,47,0,0,0,0,0,0,72,118,0,0,184,47,0,0,8,48,0,0,0,0,0,0,0,0,0,0,96,48,0,0,17,0,0,0,18,0,0,0,78,51,111,122,122,54,115,97,109,112,108,101,56,105,110,116,101,114,110,97,108,49,49,74,111,105,110,116,83,104,97,100,101,114,69,0,0,0,0,0,72,118,0,0,56,48,0,0,8,48,0,0,0,0,0,0,0,0,0,0,176,48,0,0,19,0,0,0,20,0,0,0,78,51,111,122,122,54,115,97,109,112,108,101,56,105,110,116,101,114,110,97,108,49,56,73,109,109,101,100,105,97,116,101,80,84,67,83,104,97,100,101,114,69,0,0,0,0,0,0,72,118,0,0,128,48,0,0,88,47,0,0,0,0,0,0,0,0,0,0,0,49,0,0,21,0,0,0,22,0,0,0,78,51,111,122,122,54,115,97,109,112,108,101,56,105,110,116,101,114,110,97,108,49,55,73,109,109,101,100,105,97,116,101,80,67,83,104,97,100,101,114,69,0,0,0,0,0,0,0,72,118,0,0,208,48,0,0,88,47,0,0,0,0,0,0,118,101,99,51,32,108,101,114,112,40,105,110,32,118,101,99,51,32,97,108,112,104,97,44,32,105,110,32,118,101,99,51,32,97,44,32,105,110,32,118,101,99,51,32,98,41,32,123,10,32,32,114,101,116,117,114,110,32,97,32,43,32,97,108,112,104,97,32,42,32,40,98,32,45,32,97,41,59,10,125,10,118,101,99,52,32,108,101,114,112,40,105,110,32,118,101,99,52,32,97,108,112,104,97,44,32,105,110,32,118,101,99,52,32,97,44,32,105,110,32,118,101,99,52,32,98,41,32,123,10,32,32,114,101,116,117,114,110,32,97,32,43,32,97,108,112,104,97,32,42,32,40,98,32,45,32,97,41,59,10,125,10,118,97,114,121,105,110,103,32,118,101,99,51,32,118,95,119,111,114,108,100,95,110,111,114,109,97,108,59,10,118,97,114,121,105,110,103,32,118,101,99,52,32,118,95,118,101,114,116,101,120,95,99,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,118,101,99,51,32,110,111,114,109,97,108,32,61,32,110,111,114,109,97,108,105,122,101,40,118,95,119,111,114,108,100,95,110,111,114,109,97,108,41,59,10,32,32,118,101,99,51,32,97,108,112,104,97,32,61,32,40,110,111,114,109,97,108,32,43,32,49,46,41,32,42,32,46,53,59,10,32,32,118,101,99,52,32,98,116,32,61,32,108,101,114,112,40,10,32,32,32,32,97,108,112,104,97,46,120,122,120,122,44,32,118,101,99,52,40,46,51,44,32,46,51,44,32,46,55,44,32,46,55,41,44,32,118,101,99,52,40,46,52,44,32,46,52,44,32,46,56,44,32,46,56,41,41,59,10,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,118,101,99,52,40,10,32,32,32,32,32,108,101,114,112,40,97,108,112,104,97,46,121,121,121,44,32,118,101,99,51,40,98,116,46,120,44,32,46,51,44,32,98,116,46,121,41,44,32,118,101,99,51,40,98,116,46,122,44,32,46,56,44,32,98,116,46,119,41,41,44,32,49,46,41,59,10,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,42,61,32,118,95,118,101,114,116,101,120,95,99,111,108,111,114,59,10,125,10,0,0,0,0,0,0,0,117,110,105,102,111,114,109,32,109,97,116,52,32,117,95,109,118,112,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,97,95,112,111,115,105,116,105,111,110,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,97,95,110,111,114,109,97,108,59,10,97,116,116,114,105,98,117,116,101,32,118,101,99,52,32,97,95,99,111,108,111,114,59,10,118,97,114,121,105,110,103,32,118,101,99,51,32,118,95,119,111,114,108,100,95,110,111,114,109,97,108,59,10,118,97,114,121,105,110,103,32,118,101,99,52,32,118,95,118,101,114,116,101,120,95,99,111,108,111,114,59,10,118,111,105,100,32,109,97,105,110,40,41,32,123,10,32,32,109,97,116,52,32,119,111,114,108,100,95,109,97,116,114,105,120,32,61,32,71,101,116,87,111,114,108,100,77,97,116,114,105,120,40,41,59,10,32,32,118,101,99,52,32,118,101,114,116,101,120,32,61,32,118,101,99,52,40,97,95,112,111,115,105,116,105,111,110,46,120,121,122,44,32,49,46,41,59,10,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,117,95,109,118,112,32,42,32,119,111,114,108,100,95,109,97,116,114,105,120,32,42,32,118,101,114,116,101,120,59,10,32,32,109,97,116,51,32,99,114,111,115,115,95,109,97,116,114,105,120,32,61,32,109,97,116,51,40,10,32,32,32,32,99,114,111,115,115,40,119,111,114,108,100,95,109,97,116,114,105,120,91,49,93,46,120,121,122,44,32,119,111,114,108,100,95,109,97,116,114,105,120,91,50,93,46,120,121,122,41,44,10,32,32,32,32,99,114,111,115,115,40,119,111,114,108,100,95,109,97,116,114,105,120,91,50,93,46,120,121,122,44,32,119,111,114,108,100,95,109,97,116,114,105,120,91,48,93,46,120,121,122,41,44,10,32,32,32,32,99,114,111,115,115,40,119,111,114,108,100,95,109,97,116,114,105,120,91,48,93,46,120,121,122,44,32,119,111,114,108,100,95,109,97,116,114,105,120,91,49,93,46,120,121,122,41,41,59,10,32,32,102,108,111,97,116,32,105,110,118,100,101,116,32,61,32,49,46,48,32,47,32,100,111,116,40,99,114,111,115,115,95,109,97,116,114,105,120,91,50,93,44,32,119,111,114,108,100,95,109,97,116,114,105,120,91,50,93,46,120,121,122,41,59,10,32,32,109,97,116,51,32,110,111,114,109,97,108,95,109,97,116,114,105,120,32,61,32,99,114,111,115,115,95,109,97,116,114,105,120,32,42,32,105,110,118,100,101,116,59,10,32,32,118,95,119,111,114,108,100,95,110,111,114,109,97,108,32,61,32,110,111,114,109,97,108,95,109,97,116,114,105,120,32,42,32,97,95,110,111,114,109,97,108,59,10,32,32,118,95,118,101,114,116,101,120,95,99,111,108,111,114,32,61,32,97,95,99,111,108,111,114,59,10,125,10,0,0,0,0,0,0,0,0,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,10,0,0,0,0,0,0,0,0,0,0,0,72,54,0,0,23,0,0,0,24,0,0,0,71,76,95,65,82,66,95,69,83,50,95,99,111,109,112,97,116,105,98,105,108,105,116,121,0,0,0,0,0,0,0,0,37,48,54,100,46,116,103,97,0,0,0,0,0,0,0,0,78,51,111,122,122,54,115,97,109,112,108,101,56,105,110,116,101,114,110,97,108,55,83,104,111,111,116,101,114,69,0,0,32,118,0,0,40,54,0,0,255,255,127,127,255,255,127,255,0,0,0,0,0,0,0,0,80,97,117,115,101,0,0,0,80,108,97,121,0,0,0,0,65,110,105,109,97,116,105,111,110,32,116,105,109,101,58,32,37,46,50,102,0,0,0,0,80,108,97,121,98,97,99,107,32,115,112,101,101,100,58,32,37,46,50,102,0,0,0,0,82,101,115,101,116,32,112,108,97,121,98,97,99,107,32,115,112,101,101,100,0,0,0,0,76,111,97,100,105,110,103,32,115,107,101,108,101,116,111,110,32,97,114,99,104,105,118,101,32,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,115,107,101,108,101,116,111,110,32,102,105,108,101,32,0,0,0,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,115,107,101,108,101,116,111,110,32,105,110,115,116,97,110,99,101,32,102,114,111,109,32,102,105,108,101,32,0,0,0,0,0,76,111,97,100,105,110,103,32,97,110,105,109,97,116,105,111,110,32,97,114,99,104,105,118,101,58,32,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,97,110,105,109,97,116,105,111,110,32,102,105,108,101,32,0,0,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,97,110,105,109,97,116,105,111,110,32,105,110,115,116,97,110,99,101,32,102,114,111,109,32,102,105,108,101,32,0,0,0,0,111,122,122,45,97,110,105,109,97,116,105,111,110,0,0,0,111,122,122,45,115,107,101,108,101,116,111,110,0,0,0,0,87,114,105,116,101,32,105,109,97,103,101,32,116,111,32,84,71,65,32,102,105,108,101,32,34,0,0,0,0,0,0,0,34,46,0,0,0,0,0,0,119,98,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,102,105,108,101,32,34,0,0,0,34,32,102,111,114,32,119,114,105,116,105,110,103,46,0,0,2,1,0,0,0,1,2,0,2,1,0,3,0,1,2,3,0,0,0,0,200,61,0,0,3,0,0,0,3,0,0,0,25,0,0,0,26,0,0,0,3,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,103,105,115,116,101,114,32,111,112,116,105,111,110,32,0,0,0,0,0,0,0,0,0,0,72,62,0,0,4,0,0,0,4,0,0,0,28,0,0,0,29,0,0,0,4,0,0,0,30,0,0,0,0,0,0,0,208,62,0,0,5,0,0,0,5,0,0,0,31,0,0,0,32,0,0,0,5,0,0,0,33,0,0,0,0,0,0,0,184,61,0,0,3,0,0,0,3,0,0,0,34,0,0,0,35,0,0,0,3,0,0,0,27,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,46,46,0,0,0,0,0,118,101,114,115,105,111,110,0,68,105,115,112,108,97,121,115,32,97,112,112,108,105,99,97,116,105,111,110,32,118,101,114,115,105,111,110,0,0,0,0,104,101,108,112,0,0,0,0,68,105,115,112,108,97,121,115,32,104,101,108,112,0,0,0,45,45,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,109,109,97,110,100,32,108,105,110,101,32,97,114,103,117,109,101,110,116,58,34,0,34,46,0,0,0,0,0,0,82,101,113,117,105,114,101,100,32,111,112,116,105,111,110,32,34,0,0,0,0,0,0,0,34,32,105,115,32,110,111,116,32,115,112,101,99,105,102,105,101,100,46,0,0,0,0,0,118,101,114,115,105,111,110,32,0,0,0,0,0,0,0,0,32,118,101,114,115,105,111,110,32,0,0,0,0,0,0,0,85,115,97,103,101,58,0,0,10,87,104,101,114,101,58,0,32,45,45,0,0,0,0,0,61,60,0,0,0,0,0,0,62,0,0,0,0,0,0,0,40,100,101,102,97,117,108,116,32,105,115,32,0,0,0,0,41,0,0,0,0,0,0,0,10,83,121,110,116,97,120,58,10,84,111,32,115,101,116,32,97,110,32,111,112,116,105,111,110,32,102,114,111,109,32,116,104,101,32,99,111,109,109,97,110,100,32,108,105,110,101,32,117,115,101,32,116,104,101,32,102,111,114,109,32,45,45,111,112,116,105,111,110,61,118,97,108,117,101,32,102,111,114,10,110,111,110,45,98,111,111,108,101,97,110,32,111,112,116,105,111,110,115,44,32,97,110,100,32,45,45,111,112,116,105,111,110,47,45,45,110,111,111,112,116,105,111,110,32,102,111,114,32,98,111,111,108,101,97,110,115,46,10,70,111,114,32,101,120,97,109,112,108,101,44,32,34,102,111,111,32,45,45,118,97,114,61,52,54,34,32,119,105,108,108,32,115,101,116,32,34,118,97,114,34,32,118,97,114,105,97,98,108,101,32,116,111,32,52,54,46,10,73,102,32,34,118,97,114,34,32,116,121,112,101,32,105,115,32,110,111,116,32,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,97,114,103,117,109,101,110,116,32,40,105,110,32,116,104,105,115,10,99,97,115,101,32,110,111,116,32,97,110,32,105,110,116,101,103,101,114,44,32,97,32,102,108,111,97,116,32,111,114,32,97,32,115,116,114,105,110,103,41,44,32,116,104,101,110,32,116,104,105,115,32,104,101,108,112,32,109,101,115,115,97,103,101,10,105,115,32,100,105,115,112,108,97,121,101,100,32,97,110,100,32,97,112,112,108,105,99,97,116,105,111,110,32,101,120,105,116,115,46,10,10,66,111,111,108,101,97,110,32,111,112,116,105,111,110,115,32,99,97,110,32,98,101,32,115,101,116,32,117,115,105,110,103,32,100,105,102,102,101,114,101,110,116,32,115,121,110,116,97,120,58,10,45,32,116,111,32,115,101,116,32,97,32,98,111,111,108,101,97,110,32,111,112,116,105,111,110,32,116,111,32,116,114,117,101,58,32,34,45,45,118,97,114,34,44,32,34,45,45,118,97,114,61,116,114,117,101,34,44,32,34,45,45,118,97,114,61,116,34,44,32,32,34,45,45,118,97,114,61,121,101,115,34,44,32,34,45,45,118,97,114,61,121,34,44,32,34,45,45,118,97,114,61,49,34,46,10,45,32,116,111,32,115,101,116,32,97,32,98,111,111,108,101,97,110,32,111,112,116,105,111,110,32,116,111,32,102,97,108,115,101,58,32,34,45,45,110,111,118,97,114,34,44,32,34,45,45,118,97,114,61,102,97,108,115,101,34,44,32,32,32,34,45,45,118,97,114,61,102,34,44,32,34,45,45,118,97,114,61,110,111,34,44,32,34,45,45,118,97,114,61,110,34,44,32,34,45,45,118,97,114,61,48,34,46,10,67,111,110,115,105,115,116,101,110,116,108,121,32,117,115,105,110,103,32,115,105,110,103,108,101,45,102,111,114,109,32,45,45,111,112,116,105,111,110,47,45,45,110,111,111,112,116,105,111,110,32,105,115,32,114,101,99,111,109,109,101,110,100,101,100,32,116,104,111,117,103,104,46,0,0,0,0,69,109,112,116,121,32,40,111,114,32,78,85,76,76,41,32,110,97,109,101,115,32,97,114,101,110,39,116,32,97,108,108,111,119,101,100,46,0,0,0,79,112,116,105,111,110,32,110,97,109,101,58,34,0,0,0,34,32,97,108,114,101,97,100,121,32,114,101,103,105,115,116,101,114,101,100,46,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,117,115,97,103,101,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,118,101,114,115,105,111,110,0,0,0,0,0,78,51,111,122,122,55,111,112,116,105,111,110,115,56,105,110,116,101,114,110,97,108,57,82,101,103,105,115,116,114,101,114,73,78,83,48,95,49,49,84,121,112,101,100,79,112,116,105,111,110,73,98,69,69,69,69,0,0,0,0,0,0,0,0,78,51,111,122,122,55,111,112,116,105,111,110,115,49,49,84,121,112,101,100,79,112,116,105,111,110,73,98,69,69,0,0,78,51,111,122,122,55,111,112,116,105,111,110,115,54,79,112,116,105,111,110,69,0,0,0,32,118,0,0,152,61,0,0,72,118,0,0,120,61,0,0,176,61,0,0,0,0,0,0,72,118,0,0,56,61,0,0,184,61,0,0,0,0,0,0,78,51,111,122,122,55,111,112,116,105,111,110,115,56,105,110,116,101,114,110,97,108,57,82,101,103,105,115,116,114,101,114,73,78,83,48,95,49,49,84,121,112,101,100,79,112,116,105,111,110,73,105,69,69,69,69,0,0,0,0,0,0,0,0,78,51,111,122,122,55,111,112,116,105,111,110,115,49,49,84,121,112,101,100,79,112,116,105,111,110,73,105,69,69,0,0,72,118,0,0,24,62,0,0,176,61,0,0,0,0,0,0,72,118,0,0,216,61,0,0,56,62,0,0,0,0,0,0,78,51,111,122,122,55,111,112,116,105,111,110,115,56,105,110,116,101,114,110,97,108,57,82,101,103,105,115,116,114,101,114,73,78,83,48,95,49,49,84,121,112,101,100,79,112,116,105,111,110,73,80,75,99,69,69,69,69,0,0,0,0,0,0,78,51,111,122,122,55,111,112,116,105,111,110,115,49,49,84,121,112,101,100,79,112,116,105,111,110,73,80,75,99,69,69,0,0,0,0,0,0,0,0,72,118,0,0,152,62,0,0,176,61,0,0,0,0,0,0,72,118,0,0,88,62,0,0,192,62,0,0,0,0,0,0,64,0,0,0,0,0,0,0,104,63,0,0,36,0,0,0,37,0,0,0,56,0,0,0,248,255,255,255,104,63,0,0,38,0,0,0,39,0,0,0,192,255,255,255,192,255,255,255,104,63,0,0,40,0,0,0,41,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,56,98,97,115,105,99,95,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,72,118,0,0,32,63,0,0,192,79,0,0,0,0,0,0,64,0,0,0,0,0,0,0,160,78,0,0,42,0,0,0,43,0,0,0,192,255,255,255,192,255,255,255,160,78,0,0,44,0,0,0,45,0,0,0,0,0,0,0,40,64,0,0,46,0,0,0,47,0,0,0,6,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,3,0,0,0,8,0,0,0,9,0,0,0,6,0,0,0,4,0,0,0,7,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,0,0,0,72,118,0,0,224,63,0,0,40,78,0,0,0,0,0,0,79,112,116,105,111,110,32,34,0,0,0,0,0,0,0,0,34,32,105,115,32,97,110,32,101,120,99,108,117,115,105,118,101,32,111,112,116,105,111,110,46,32,73,116,32,109,117,115,116,32,110,111,116,32,98,101,32,117,115,101,100,32,119,105,116,104,32,97,110,121,32,111,116,104,101,114,32,111,112,116,105,111,110,46,0,0,0,0,115,116,114,105,110,103,0,0,105,110,116,0,0,0,0,0,98,111,111,108,0,0,0,0,45,45,110,111,0,0,0,0,121,101,115,0,0,0,0,0,116,114,117,101,0,0,0,0,49,0,0,0,0,0,0,0,116,0,0,0,0,0,0,0,121,0,0,0,0,0,0,0,176,64,0,0,184,64,0,0,192,64,0,0,200,64,0,0,208,64,0,0,0,0,0,0,110,111,0,0,0,0,0,0,102,97,108,115,101,0,0,0,48,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,240,64,0,0,248,64,0,0,0,65,0,0,8,65,0,0,16,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,10,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,11,0,0,0,48,0,0,0,49,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,78,51,111,122,122,50,105,111,52,70,105,108,101,69,0,0,78,51,111,122,122,50,105,111,54,83,116,114,101,97,109,69,0,0,0,0,0,0,0,0,32,118,0,0,80,66,0,0,72,118,0,0,64,66,0,0,104,66,0,0,0,0,0,0,1,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,248,66,0,0,50,0,0,0,51,0,0,0,200,255,255,255,200,255,255,255,248,66,0,0,52,0,0,0,53,0,0,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,111,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,72,118,0,0,176,66,0,0,48,79,0,0,0,0,0,0,56,0,0,0,0,0,0,0,48,79,0,0,54,0,0,0,55,0,0,0,200,255,255,255,200,255,255,255,48,79,0,0,56,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,48,67,0,0,0,0,0,0,0,0,0,0,160,67,0,0,58,0,0,0,59,0,0,0,8,0,0,0,7,0,0,0,5,0,0,0,0,0,0,0,78,51,111,122,122,54,109,101,109,111,114,121,49,51,72,101,97,112,65,108,108,111,99,97,116,111,114,69,0,0,0,0,78,51,111,122,122,54,109,101,109,111,114,121,57,65,108,108,111,99,97,116,111,114,69,0,32,118,0,0,128,67,0,0,72,118,0,0,96,67,0,0,152,67], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([56,72,0,0,60,0,0,0,61,0,0,0,8,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,12,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,15,0,0,0,8,0,0,0,11,0,0,0,9,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,72,118,0,0,24,72,0,0,104,78,0,0,0,0,0,0,0,0,0,0,160,72,0,0,62,0,0,0,63,0,0,0,9,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,16,0,0,0,13,0,0,0,10,0,0,0,17,0,0,0,18,0,0,0,10,0,0,0,12,0,0,0,11,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,72,118,0,0,136,72,0,0,104,78,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,56,73,0,0,64,0,0,0,65,0,0,0,10,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,19,0,0,0,7,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,72,118,0,0,24,73,0,0,40,78,0,0,0,0,0,0,0,0,0,0,160,73,0,0,66,0,0,0,67,0,0,0,11,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,3,0,0,0,21,0,0,0,22,0,0,0,14,0,0,0,4,0,0,0,15,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,72,118,0,0,136,73,0,0,40,78,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,32,118,0,0,176,73,0,0,0,0,0,0,24,74,0,0,68,0,0,0,69,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,128,74,0,0,70,0,0,0,71,0,0,0,24,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,72,118,0,0,8,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,74,0,0,68,0,0,0,72,0,0,0,23,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,72,118,0,0,64,74,0,0,24,74,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,72,118,0,0,104,74,0,0,0,0,0,0,0,0,0,0,58,32,0,0,0,0,0,0,0,0,0,0,200,74,0,0,73,0,0,0,74,0,0,0,24,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,72,118,0,0,176,74,0,0,128,74,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,32,118,0,0,216,74,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,72,118,0,0,0,75,0,0,248,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,40,78,0,0,75,0,0,0,76,0,0,0,6,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,3,0,0,0,20,0,0,0,9,0,0,0,12,0,0,0,4,0,0,0,15,0,0,0,0,0,0,0,104,78,0,0,77,0,0,0,78,0,0,0,12,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,16,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,15,0,0,0,8,0,0,0,12,0,0,0,11,0,0,0,8,0,0,0,0,0,0,0,160,78,0,0,42,0,0,0,43,0,0,0,248,255,255,255,248,255,255,255,160,78,0,0,44,0,0,0,45,0,0,0,8,0,0,0,0,0,0,0,232,78,0,0,79,0,0,0,80,0,0,0,248,255,255,255,248,255,255,255,232,78,0,0,81,0,0,0,82,0,0,0,4,0,0,0,0,0,0,0,48,79,0,0,54,0,0,0,55,0,0,0,252,255,255,255,252,255,255,255,48,79,0,0,56,0,0,0,57,0,0,0,4,0,0,0,0,0,0,0,120,79,0,0,83,0,0,0,84,0,0,0,252,255,255,255,252,255,255,255,120,79,0,0,85,0,0,0,86,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,77,0,0,87,0,0,0,88,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,104,77,0,0,89,0,0,0,90,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,72,118,0,0,32,77,0,0,200,74,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,32,118,0,0,80,77,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,72,118,0,0,112,77,0,0,104,77,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,72,118,0,0,176,77,0,0,104,77,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,32,118,0,0,240,77,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,32,118,0,0,48,78,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,168,118,0,0,112,78,0,0,0,0,0,0,1,0,0,0,160,77,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,168,118,0,0,184,78,0,0,0,0,0,0,1,0,0,0,224,77,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,168,118,0,0,0,79,0,0,0,0,0,0,1,0,0,0,160,77,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,168,118,0,0,72,79,0,0,0,0,0,0,1,0,0,0,224,77,0,0,3,244,255,255,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,168,118,0,0,144,79,0,0,3,0,0,0,2,0,0,0,160,78,0,0,2,0,0,0,48,79,0,0,2,8,0,0,0,0,0,0,40,80,0,0,91,0,0,0,92,0,0,0,25,0,0,0,1,0,0,0,14,0,0,0,15,0,0,0,2,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,72,118,0,0,8,80,0,0,24,75,0,0,0,0,0,0,0,0,0,0,80,94,0,0,93,0,0,0,94,0,0,0,95,0,0,0,3,0,0,0,5,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,94,0,0,96,0,0,0,97,0,0,0,95,0,0,0,4,0,0,0,6,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,99,0,0,98,0,0,0,99,0,0,0,95,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,192,99,0,0,100,0,0,0,101,0,0,0,95,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,100,0,0,102,0,0,0,103,0,0,0,95,0,0,0,4,0,0,0,5,0,0,0,23,0,0,0,6,0,0,0,24,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,101,0,0,104,0,0,0,105,0,0,0,95,0,0,0,8,0,0,0,9,0,0,0,25,0,0,0,10,0,0,0,26,0,0,0,3,0,0,0,4,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,64,96,0,0,106,0,0,0,107,0,0,0,95,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,1,0,0,0,248,255,255,255,64,96,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,224,96,0,0,108,0,0,0,109,0,0,0,95,0,0,0,34,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,2,0,0,0,248,255,255,255,224,96,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,112,97,0,0,110,0,0,0,111,0,0,0,95,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,97,0,0,112,0,0,0,113,0,0,0,95,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,94,0,0,114,0,0,0,115,0,0,0,95,0,0,0,42,0,0,0,43,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,44,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,95,0,0,116,0,0,0,117,0,0,0,95,0,0,0,45,0,0,0,46,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,47,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,95,0,0,118,0,0,0,119,0,0,0,95,0,0,0,48,0,0,0,49,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,50,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,95,0,0,120,0,0,0,121,0,0,0,95,0,0,0,51,0,0,0,52,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,53,0,0,0,35,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,101,0,0,122,0,0,0,123,0,0,0,95,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,56,102,0,0,124,0,0,0,125,0,0,0,95,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,200,102,0,0,126,0,0,0,127,0,0,0,95,0,0,0,1,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,88,103,0,0,128,0,0,0,129,0,0,0,95,0,0,0,2,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,98,0,0,130,0,0,0,131,0,0,0,95,0,0,0,18,0,0,0,12,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,98,0,0,132,0,0,0,133,0,0,0,95,0,0,0,19,0,0,0,13,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,40,94,0,0,134,0,0,0,135,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,0,0,136,0,0,0,137,0,0,0,95,0,0,0,16,0,0,0,20,0,0,0,17,0,0,0,21,0,0,0,18,0,0,0,6,0,0,0,22,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,91,0,0,138,0,0,0,139,0,0,0,95,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,54,0,0,0,55,0,0,0,7,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,93,0,0,140,0,0,0,141,0,0,0,95,0,0,0,57,0,0,0,58,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,0,0,0,0,0,94,0,0,142,0,0,0,143,0,0,0,95,0,0,0,59,0,0,0,60,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,56,90,0,0,144,0,0,0,145,0,0,0,95,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,72,118,0,0,32,90,0,0,208,73,0,0,0,0,0,0,0,0,0,0,200,90,0,0,144,0,0,0,146,0,0,0,95,0,0,0,23,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,19,0,0,0,24,0,0,0,20,0,0,0,25,0,0,0,21,0,0,0,10,0,0,0,26,0,0,0,8,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,32,118,0,0,168,90,0,0,168,118,0,0,144,90,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,192,90,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,168,118,0,0,232,90,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,192,90,0,0,2,0,0,0,0,0,0,0,152,91,0,0,144,0,0,0,147,0,0,0,95,0,0,0,3,0,0,0,4,0,0,0,9,0,0,0,61,0,0,0,62,0,0,0,10,0,0,0,63,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,32,118,0,0,120,91,0,0,168,118,0,0,80,91,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,144,91,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,168,118,0,0,184,91,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,144,91,0,0,2,0,0,0,0,0,0,0,88,92,0,0,144,0,0,0,148,0,0,0,95,0,0,0,5,0,0,0,6,0,0,0,11,0,0,0,64,0,0,0,65,0,0,0,12,0,0,0,66,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,168,118,0,0,48,92,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,144,91,0,0,2,0,0,0,0,0,0,0,208,92,0,0,144,0,0,0,149,0,0,0,95,0,0,0,7,0,0,0,8,0,0,0,13,0,0,0,67,0,0,0,68,0,0,0,14,0,0,0,69,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,168,118,0,0,168,92,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,144,91,0,0,2,0,0,0,0,0,0,0,72,93,0,0,144,0,0,0,150,0,0,0,95,0,0,0,7,0,0,0,8,0,0,0,13,0,0,0,67,0,0,0,68,0,0,0,14,0,0,0,69,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,72,118,0,0,32,93,0,0,208,92,0,0,0,0,0,0,0,0,0,0,176,93,0,0,144,0,0,0,151,0,0,0,95,0,0,0,7,0,0,0,8,0,0,0,13,0,0,0,67,0,0,0,68,0,0,0,14,0,0,0,69,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,72,118,0,0,136,93,0,0,208,92,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,72,118,0,0,192,93,0,0,56,90,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,72,118,0,0,232,93,0,0,56,90,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,72,118,0,0,16,94,0,0,56,90,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,72,118,0,0,56,94,0,0,56,90,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,72,118,0,0,96,94,0,0,56,90,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,32,118,0,0,168,94,0,0,168,118,0,0,136,94,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,192,94,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,168,118,0,0,232,94,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,192,94,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,168,118,0,0,40,95,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,192,94,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,168,118,0,0,104,95,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,192,94,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,32,118,0,0,240,95,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,32,118,0,0,16,96,0,0,168,118,0,0,168,95,0,0,0,0,0,0,3,0,0,0,56,90,0,0,2,0,0,0,8,96,0,0,2,0,0,0,56,96,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,32,118,0,0,176,96,0,0,168,118,0,0,104,96,0,0,0,0,0,0,3,0,0,0,56,90,0,0,2,0,0,0,8,96,0,0,2,0,0,0,216,96,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,32,118,0,0,80,97,0,0,168,118,0,0,8,97,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,104,97,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,168,118,0,0,144,97,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,104,97,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,32,118,0,0,16,98,0,0,168,118,0,0,248,97,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,40,98,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,168,118,0,0,80,98,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,40,98,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,32,118,0,0,232,98,0,0,168,118,0,0,208,98,0,0,0,0,0,0,1,0,0,0,8,99,0,0,0,0,0,0,168,118,0,0,136,98,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,16,99,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,168,118,0,0,144,99,0,0,0,0,0,0,1,0,0,0,8,99,0,0,0,0,0,0,168,118,0,0,72,99,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,168,99,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,32,118,0,0,64,100,0,0,168,118,0,0,40,100,0,0,0,0,0,0,1,0,0,0,96,100,0,0,0,0,0,0,168,118,0,0,224,99,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,104,100,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,168,118,0,0,232,100,0,0,0,0,0,0,1,0,0,0,96,100,0,0,0,0,0,0,168,118,0,0,160,100,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,0,101,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,32,118,0,0,128,101,0,0,168,118,0,0,56,101,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,160,101,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,32,118,0,0,16,102,0,0,168,118,0,0,200,101,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,48,102,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,32,118,0,0,160,102,0,0,168,118,0,0,88,102,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,192,102,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,32,118,0,0,48,103,0,0,168,118,0,0,232,102,0,0,0,0,0,0,2,0,0,0,56,90,0,0,2,0,0,0,80,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+18388);
/* memory initializer */ allocate([74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,117,0,0,152,0,0,0,153,0,0,0,70,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,32,118,0,0,112,117,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,72,118,0,0,136,117,0,0,0,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,72,118,0,0,168,117,0,0,128,117,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,72,118,0,0,224,117,0,0,208,117,0,0,0,0,0,0,0,0,0,0,8,118,0,0,154,0,0,0,155,0,0,0,156,0,0,0,157,0,0,0,27,0,0,0,14,0,0,0,2,0,0,0,7,0,0,0,0,0,0,0,144,118,0,0,154,0,0,0,158,0,0,0,156,0,0,0,157,0,0,0,27,0,0,0,15,0,0,0,3,0,0,0,8,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,72,118,0,0,104,118,0,0,8,118,0,0,0,0,0,0,0,0,0,0,240,118,0,0,154,0,0,0,159,0,0,0,156,0,0,0,157,0,0,0,27,0,0,0,16,0,0,0,4,0,0,0,9,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,72,118,0,0,200,118,0,0,8,118,0,0,0,0,0,0,69,88,84,0,0,0,0,0,65,82,66,0,0,0,0,0,79,69,83,0,0,0,0,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,0,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,0,103,108,85,115,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,0,0,0,0,0,103,108,85,115,101,80,114,111,103,114,97,109,0,0,0,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,79,98,106,101,99,116,0,0,0,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,0,0,103,108,65,116,116,97,99,104,79,98,106,101,99,116,0,0,103,108,65,116,116,97,99,104,83,104,97,100,101,114,0,0,103,108,68,101,116,97,99,104,79,98,106,101,99,116,0,0,103,108,68,101,116,97,99,104,83,104,97,100,101,114,0,0,103,108,80,105,120,101,108,83,116,111,114,101,105,0,0,0,103,108,71,101,116,83,116,114,105,110,103,0,0,0,0,0,103,108,71,101,116,73,110,116,101,103,101,114,118,0,0,0,103,108,71,101,116,70,108,111,97,116,118,0,0,0,0,0,103,108,71,101,116,66,111,111,108,101,97,110,118,0,0,0,103,108,71,101,110,84,101,120,116,117,114,101,115,0,0,0,103,108,68,101,108,101,116,101,84,101,120,116,117,114,101,115,0,0,0,0,0,0,0,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,73,109,97,103,101,50,68,0,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,83,117,98,73,109,97,103,101,50,68,0,0,0,0,0,0,0,103,108,84,101,120,73,109,97,103,101,50,68,0,0,0,0,103,108,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,82,101,97,100,80,105,120,101,108,115,0,0,0,0,103,108,66,105,110,100,84,101,120,116,117,114,101,0,0,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,0,0,0,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,0,0,0,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,0,0,0,0,0,0,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,0,0,0,0,0,0,0,103,108,73,115,84,101,120,116,117,114,101,0,0,0,0,0,103,108,71,101,110,66,117,102,102,101,114,115,0,0,0,0,103,108,68,101,108,101,116,101,66,117,102,102,101,114,115,0,103,108,71,101,116,66,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,0,103,108,66,117,102,102,101,114,68,97,116,97,0,0,0,0,103,108,66,117,102,102,101,114,83,117,98,68,97,116,97,0,103,108,73,115,66,117,102,102,101,114,0,0,0,0,0,0,103,108,71,101,110,82,101,110,100,101,114,98,117,102,102,101,114,115,0,0,0,0,0,0,103,108,68,101,108,101,116,101,82,101,110,100,101,114,98,117,102,102,101,114,115,0,0,0,103,108,66,105,110,100,82,101,110,100,101,114,98,117,102,102,101,114,0,0,0,0,0,0,103,108,71,101,116,82,101,110,100,101,114,98,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,0,0,0,103,108,73,115,82,101,110,100,101,114,98,117,102,102,101,114,0,0,0,0,0,0,0,0,103,108,71,101,116,85,110,105,102,111,114,109,102,118,0,0,103,108,71,101,116,85,110,105,102,111,114,109,105,118,0,0,103,108,71,101,116,85,110,105,102,111,114,109,76,111,99,97,116,105,111,110,0,0,0,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,102,118,0,0,0,0,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,105,118,0,0,0,0,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,118,0,0,0,0,0,0,0,103,108,71,101,116,65,99,116,105,118,101,85,110,105,102,111,114,109,0,0,0,0,0,0,103,108,85,110,105,102,111,114,109,49,102,0,0,0,0,0,103,108,85,110,105,102,111,114,109,50,102,0,0,0,0,0,103,108,85,110,105,102,111,114,109,51,102,0,0,0,0,0,103,108,85,110,105,102,111,114,109,52,102,0,0,0,0,0,103,108,85,110,105,102,111,114,109,49,105,0,0,0,0,0,103,108,85,110,105,102,111,114,109,50,105,0,0,0,0,0,103,108,85,110,105,102,111,114,109,51,105,0,0,0,0,0,103,108,85,110,105,102,111,114,109,52,105,0,0,0,0,0,103,108,85,110,105,102,111,114,109,49,105,118,0,0,0,0,103,108,85,110,105,102,111,114,109,50,105,118,0,0,0,0,103,108,85,110,105,102,111,114,109,51,105,118,0,0,0,0,103,108,85,110,105,102,111,114,109,52,105,118,0,0,0,0,103,108,85,110,105,102,111,114,109,49,102,118,0,0,0,0,103,108,85,110,105,102,111,114,109,50,102,118,0,0,0,0,103,108,85,110,105,102,111,114,109,51,102,118,0,0,0,0,103,108,85,110,105,102,111,114,109,52,102,118,0,0,0,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,50,102,118,0,0,0,0,0,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,51,102,118,0,0,0,0,0,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,52,102,118,0,0,0,0,0,0,103,108,66,105,110,100,66,117,102,102,101,114,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,118,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,118,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,118,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,118,0,0,0,0,0,0,0,103,108,71,101,116,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,0,0,0,0,103,108,71,101,116,65,99,116,105,118,101,65,116,116,114,105,98,0,0,0,0,0,0,0,103,108,68,101,108,101,116,101,83,104,97,100,101,114,0,0,103,108,71,101,116,65,116,116,97,99,104,101,100,83,104,97,100,101,114,115,0,0,0,0,103,108,83,104,97,100,101,114,83,111,117,114,99,101,0,0,103,108,71,101,116,83,104,97,100,101,114,83,111,117,114,99,101,0,0,0,0,0,0,0,103,108,67,111,109,112,105,108,101,83,104,97,100,101,114,0,103,108,71,101,116,83,104,97,100,101,114,73,110,102,111,76,111,103,0,0,0,0,0,0,103,108,71,101,116,83,104,97,100,101,114,105,118,0,0,0,103,108,71,101,116,80,114,111,103,114,97,109,105,118,0,0,103,108,73,115,83,104,97,100,101,114,0,0,0,0,0,0,103,108,68,101,108,101,116,101,80,114,111,103,114,97,109,0,103,108,71,101,116,83,104,97,100,101,114,80,114,101,99,105,115,105,111,110,70,111,114,109,97,116,0,0,0,0,0,0,103,108,76,105,110,107,80,114,111,103,114,97,109,0,0,0,103,108,71,101,116,80,114,111,103,114,97,109,73,110,102,111,76,111,103,0,0,0,0,0,103,108,86,97,108,105,100,97,116,101,80,114,111,103,114,97,109,0,0,0,0,0,0,0,103,108,73,115,80,114,111,103,114,97,109,0,0,0,0,0,103,108,66,105,110,100,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,0,0,0,103,108,66,105,110,100,70,114,97,109,101,98,117,102,102,101,114,0,0,0,0,0,0,0,103,108,71,101,110,70,114,97,109,101,98,117,102,102,101,114,115,0,0,0,0,0,0,0,103,108,68,101,108,101,116,101,70,114,97,109,101,98,117,102,102,101,114,115,0,0,0,0,103,108,70,114,97,109,101,98,117,102,102,101,114,82,101,110,100,101,114,98,117,102,102,101,114,0,0,0,0,0,0,0,103,108,70,114,97,109,101,98,117,102,102,101,114,84,101,120,116,117,114,101,50,68,0,0,103,108,71,101,116,70,114,97,109,101,98,117,102,102,101,114,65,116,116,97,99,104,109,101,110,116,80,97,114,97,109,101,116,101,114,105,118,0,0,0,103,108,73,115,70,114,97,109,101,98,117,102,102,101,114,0,103,108,68,101,108,101,116,101,79,98,106,101,99,116,0,0,103,108,71,101,116,79,98,106,101,99,116,80,97,114,97,109,101,116,101,114,105,118,0,0,103,108,71,101,116,73,110,102,111,76,111,103,0,0,0,0,103,108,66,105,110,100,80,114,111,103,114,97,109,0,0,0,103,108,71,101,116,80,111,105,110,116,101,114,118,0,0,0,103,108,68,114,97,119,82,97,110,103,101,69,108,101,109,101,110,116,115,0,0,0,0,0,103,108,69,110,97,98,108,101,67,108,105,101,110,116,83,116,97,116,101,0,0,0,0,0,103,108,86,101,114,116,101,120,80,111,105,110,116,101,114,0,103,108,84,101,120,67,111,111,114,100,80,111,105,110,116,101,114,0,0,0,0,0,0,0,103,108,78,111,114,109,97,108,80,111,105,110,116,101,114,0,103,108,67,111,108,111,114,80,111,105,110,116,101,114,0,0,103,108,67,108,105,101,110,116,65,99,116,105,118,101,84,101,120,116,117,114,101,0,0,0,103,108,71,101,110,86,101,114,116,101,120,65,114,114,97,121,115,0,0,0,0,0,0,0,103,108,68,101,108,101,116,101,86,101,114,116,101,120,65,114,114,97,121,115,0,0,0,0,103,108,66,105,110,100,86,101,114,116,101,120,65,114,114,97,121,0,0,0,0,0,0,0,103,108,77,97,116,114,105,120,77,111,100,101,0,0,0,0,103,108,76,111,97,100,73,100,101,110,116,105,116,121,0,0,103,108,76,111,97,100,77,97,116,114,105,120,102,0,0,0,103,108,70,114,117,115,116,117,109,0,0,0,0,0,0,0,103,108,82,111,116,97,116,101,102,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,0,0,0,103,108,69,110,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,0,0,0,0,0,0,103,108,68,105,115,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,0,0,0,0,0,103,108,68,114,97,119,65,114,114,97,121,115,0,0,0,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,0,0,103,108,83,104,97,100,101,114,66,105,110,97,114,121,0,0,103,108,82,101,108,101,97,115,101,83,104,97,100,101,114,67,111,109,112,105,108,101,114,0,103,108,71,101,116,69,114,114,111,114,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,68,105,118,105,115,111,114,0,0,0,103,108,68,114,97,119,65,114,114,97,121,115,73,110,115,116,97,110,99,101,100,0,0,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,73,110,115,116,97,110,99,101,100,0,103,108,70,105,110,105,115,104,0,0,0,0,0,0,0,0,103,108,70,108,117,115,104,0,103,108,67,108,101,97,114,68,101,112,116,104,0,0,0,0,103,108,67,108,101,97,114,68,101,112,116,104,102,0,0,0,103,108,68,101,112,116,104,70,117,110,99,0,0,0,0,0,103,108,69,110,97,98,108,101,0,0,0,0,0,0,0,0,103,108,68,105,115,97,98,108,101,0,0,0,0,0,0,0,103,108,70,114,111,110,116,70,97,99,101,0,0,0,0,0,103,108,67,117,108,108,70,97,99,101,0,0,0,0,0,0,103,108,67,108,101,97,114,0,103,108,76,105,110,101,87,105,100,116,104,0,0,0,0,0,103,108,67,108,101,97,114,83,116,101,110,99,105,108,0,0,103,108,68,101,112,116,104,77,97,115,107,0,0,0,0,0,103,108,83,116,101,110,99,105,108,77,97,115,107,0,0,0,103,108,67,104,101,99,107,70,114,97,109,101,98,117,102,102,101,114,83,116,97,116,117,115,0,0,0,0,0,0,0,0,103,108,71,101,110,101,114,97,116,101,77,105,112,109,97,112,0,0,0,0,0,0,0,0,103,108,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,0,103,108,73,115,69,110,97,98,108,101,100,0,0,0,0,0,103,108,66,108,101,110,100,70,117,110,99,0,0,0,0,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,83,101,112,97,114,97,116,101,0,103,108,68,101,112,116,104,82,97,110,103,101,0,0,0,0,103,108,68,101,112,116,104,82,97,110,103,101,102,0,0,0,103,108,83,116,101,110,99,105,108,77,97,115,107,83,101,112,97,114,97,116,101,0,0,0,103,108,72,105,110,116,0,0,103,108,80,111,108,121,103,111,110,79,102,102,115,101,116,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,0,0,0,0,0,0,0,0,103,108,83,97,109,112,108,101,67,111,118,101,114,97,103,101,0,0,0,0,0,0,0,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,0,0,0,0,0,0,0,0,103,108,83,116,101,110,99,105,108,70,117,110,99,0,0,0,103,108,83,116,101,110,99,105,108,79,112,0,0,0,0,0,103,108,86,105,101,119,112,111,114,116,0,0,0,0,0,0,103,108,67,108,101,97,114,67,111,108,111,114,0,0,0,0,103,108,83,99,105,115,115,111,114,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,0,0,0,0,0,0,0,0,103,108,67,111,108,111,114,77,97,115,107,0,0,0,0,0,103,108,82,101,110,100,101,114,98,117,102,102,101,114,83,116,111,114,97,103,101,0,0,0,103,108,66,108,101,110,100,70,117,110,99,83,101,112,97,114,97,116,101,0,0,0,0,0,103,108,66,108,101,110,100,67,111,108,111,114,0,0,0,0,103,108,83,116,101,110,99,105,108,70,117,110,99,83,101,112,97,114,97,116,101,0,0,0,103,108,83,116,101,110,99,105,108,79,112,83,101,112,97,114,97,116,101,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,0,0,0,0,0,0,0,0,103,108,67,111,112,121,84,101,120,73,109,97,103,101,50,68,0,0,0,0,0,0,0,0,103,108,67,111,112,121,84,101,120,83,117,98,73,109,97,103,101,50,68,0,0,0,0,0,98,97,100,32,110,97,109,101,32,105,110,32,103,101,116,80,114,111,99,65,100,100,114,101,115,115,58,32,37,115,32,124,32,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,134,0,0,160,0,0,0,161,0,0,0,71,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,72,118,0,0,168,134,0,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+28728);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  var GL={counter:1,lastError:0,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        Browser.moduleContextCreatedCallbacks.push(GL.initExtensions);
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,tempVertexBuffers1:[],tempVertexBufferCounters1:[],tempVertexBuffers2:[],tempVertexBufferCounters2:[],numTempVertexBuffersPerSize:64,tempIndexBuffers:[],tempQuadIndexBuffer:null,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for(var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        GL.tempVertexBufferCounters1.length = GL.tempVertexBufferCounters2.length = largestIndex+1;
        GL.tempVertexBuffers1.length = GL.tempVertexBuffers2.length = largestIndex+1;
        GL.tempIndexBuffers.length = largestIndex+1;
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempIndexBuffers[i] = null; // Created on-demand
          GL.tempVertexBufferCounters1[i] = GL.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          GL.tempVertexBuffers1[i] = [];
          GL.tempVertexBuffers2[i] = [];
          var ringbuffer1 = GL.tempVertexBuffers1[i];
          var ringbuffer2 = GL.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for(var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          GL.tempQuadIndexBuffer = GLctx.createBuffer();
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, GLctx.STATIC_DRAW);
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.tempVertexBufferCounters1[idx];
        GL.tempVertexBufferCounters1[idx] = (GL.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        var vb = GL.tempVertexBuffers1;
        GL.tempVertexBuffers1 = GL.tempVertexBuffers2;
        GL.tempVertexBuffers2 = vb;
        vb = GL.tempVertexBufferCounters1;
        GL.tempVertexBufferCounters1 = GL.tempVertexBufferCounters2;
        GL.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempVertexBufferCounters1[i] = 0;
        }
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))|0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[(p)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            switch (format) {
              case 0x1906 /* GL_ALPHA */:
              case 0x1909 /* GL_LUMINANCE */:
                sizePerPixel = 1;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4;
                break;
              case 0x190A /* GL_LUMINANCE_ALPHA */:
                sizePerPixel = 2;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 2;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 4;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          case 0x1406 /* GL_FLOAT */:
            switch (format) {
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*4;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*4;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            internalFormat = GLctx.RGBA;
            break;
          default:
            throw 'Invalid type (' + type + ')';
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        }
      },initExtensions:function () {
        if (GL.initExtensions.done) return;
        GL.initExtensions.done = true;
  
        if (!Module.useWebGL) return; // an app might link both gl and 2d backends
  
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        GL.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        GL.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
  
        GL.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
  
        GL.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        GL.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        GL.vaoExt = Module.ctx.getExtension('OES_vertex_array_object');
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          for(var i in automaticallyEnabledExtensions) {
            var include = automaticallyEnabledExtensions[i];
            if (ext.indexOf(include) != -1) {
              return true;
            }
          }
          return false;
        }
  
        var extensions = GLctx.getSupportedExtensions();
        for(var e in extensions) {
          var ext = extensions[e].replace('MOZ_', '').replace('WEBKIT_', '');
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  
  var GLFW={keyFunc:null,charFunc:null,mouseButtonFunc:null,mousePosFunc:null,mouseWheelFunc:null,resizeFunc:null,closeFunc:null,refreshFunc:null,params:null,initTime:null,wheelPos:0,buttons:0,keys:0,initWindowWidth:640,initWindowHeight:480,windowX:0,windowY:0,windowWidth:0,windowHeight:0,DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          case 0x08: return 295 ; // DOM_VK_BACKSPACE -> GLFW_KEY_BACKSPACE
          case 0x09: return 293 ; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x0D: return 294 ; // DOM_VK_ENTER -> GLFW_KEY_ENTER
          case 0x1B: return 257 ; // DOM_VK_ESCAPE -> GLFW_KEY_ESC
          case 0x6A: return 313 ; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6B: return 315 ; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          case 0x6D: return 314 ; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6E: return 316 ; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F: return 312 ; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x70: return 258 ; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71: return 259 ; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72: return 260 ; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73: return 261 ; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74: return 262 ; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75: return 263 ; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76: return 264 ; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77: return 265 ; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78: return 266 ; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79: return 267 ; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7a: return 268 ; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7b: return 269 ; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x25: return 285 ; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x26: return 283 ; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x27: return 286 ; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x28: return 284 ; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x21: return 298 ; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGEUP
          case 0x22: return 299 ; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGEDOWN
          case 0x24: return 300 ; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23: return 301 ; // DOM_VK_END -> GLFW_KEY_END
          case 0x2d: return 296 ; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 16  : return 287 ; // DOM_VK_SHIFT -> GLFW_KEY_LSHIFT
          case 0x05: return 287 ; // DOM_VK_LEFT_SHIFT -> GLFW_KEY_LSHIFT
          case 0x06: return 288 ; // DOM_VK_RIGHT_SHIFT -> GLFW_KEY_RSHIFT
          case 17  : return 289 ; // DOM_VK_CONTROL -> GLFW_KEY_LCTRL
          case 0x03: return 289 ; // DOM_VK_LEFT_CONTROL -> GLFW_KEY_LCTRL
          case 0x04: return 290 ; // DOM_VK_RIGHT_CONTROL -> GLFW_KEY_RCTRL
          case 18  : return 291 ; // DOM_VK_ALT -> GLFW_KEY_LALT
          case 0x02: return 291 ; // DOM_VK_LEFT_ALT -> GLFW_KEY_LALT
          case 0x01: return 292 ; // DOM_VK_RIGHT_ALT -> GLFW_KEY_RALT
          case 96  : return 302 ; // GLFW_KEY_KP_0
          case 97  : return 303 ; // GLFW_KEY_KP_1
          case 98  : return 304 ; // GLFW_KEY_KP_2
          case 99  : return 305 ; // GLFW_KEY_KP_3
          case 100 : return 306 ; // GLFW_KEY_KP_4
          case 101 : return 307 ; // GLFW_KEY_KP_5
          case 102 : return 308 ; // GLFW_KEY_KP_6
          case 103 : return 309 ; // GLFW_KEY_KP_7
          case 104 : return 310 ; // GLFW_KEY_KP_8
          case 105 : return 311 ; // GLFW_KEY_KP_9
          default  : return keycode;
        };
      },getUnicodeChar:function (value) {
        var output = '';
        if (value > 0xFFFF) {
          value -= 0x10000;
          output += String.fromCharCode(value >>> 10 & 0x3FF | 0xD800);
          value = 0xDC00 | value & 0x3FF;
        }
        output += String.fromCharCode(value);
        return output;
      },onKeyPress:function (event) {
        // charCode is only available whith onKeyPress event
        var char = GLFW.getUnicodeChar(event.charCode);
  
        if (event.charCode) {
          var char = GLFW.getUnicodeChar(event.charCode);
          if (char !== null && GLFW.charFunc) {
            Runtime.dynCall('vii', GLFW.charFunc, [event.charCode, 1]);
          }
        }
      },onKeyChanged:function (event, status) {
        var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
        if (key) {
          GLFW.keys[key] = status;
          if (GLFW.keyFunc) {
            Runtime.dynCall('vii', GLFW.keyFunc, [key, status]);
          }
        }
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event, 1);// GLFW_PRESS
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event, 0);// GLFW_RELEASE
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
  
        if (event.target == Module["canvas"] && GLFW.mousePosFunc) {
          event.preventDefault();
          Runtime.dynCall('vii', GLFW.mousePosFunc, [lastX, lastY]);
        }
      },onMouseButtonChanged:function (event, status) {
        if (GLFW.mouseButtonFunc == null) {
          return;
        }
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) {
          return;
        }
  
        if (status == 1) {// GLFW_PRESS
          try {
            event.target.setCapture();
          } catch (e) {}
        }
  
        event.preventDefault();
  
        // DOM and glfw have different button codes
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        Runtime.dynCall('vii', GLFW.mouseButtonFunc, [eventButton, status]);
      },onMouseButtonDown:function (event) {
        GLFW.buttons |= (1 << event['button']);
        GLFW.onMouseButtonChanged(event, 1);// GLFW_PRESS
      },onMouseButtonUp:function (event) {
        GLFW.buttons &= ~(1 << event['button']);
        GLFW.onMouseButtonChanged(event, 0);// GLFW_RELEASE
      },onMouseWheel:function (event) {
        GLFW.wheelPos -= Browser.getMouseWheelDelta(event);
  
        if (GLFW.mouseWheelFunc && event.target == Module["canvas"]) {
          Runtime.dynCall('vi', GLFW.mouseWheelFunc, [GLFW.wheelPos]);
          event.preventDefault();
        }
      },onFullScreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        } else {
          width = GLFW.windowWidth;
          height = GLFW.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLFW.onFullScreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLFW.onFullScreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLFW.onFullScreenEventChange, true);
        }
        Browser.setCanvasSize(width, height);
  
        if (GLFW.resizeFunc) {
          Runtime.dynCall('vii', GLFW.resizeFunc, [width, height]);
        }
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      }};function _glfwSetWindowSize(width, height) {
      GLFW.cancelFullScreen();
        Browser.setCanvasSize(width, height);
        if (GLFW.resizeFunc) {
          Runtime.dynCall('vii', GLFW.resizeFunc, [width, height]);
        }
    }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx.stencilMaskSeparate(x0, x1) }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  function _pthread_mutex_lock() {}

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx.stencilFunc(x0, x1, x2) }

  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return ((asm["setTempRet0"]((tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)),ret>>>0)|0);
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glUniform3iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 3;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform3iv(location, value);
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  var _llvm_pow_f32=Math_pow;

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _emscripten_glIsTexture(texture) {
      var texture = GL.textures[texture];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx.texParameterf(x0, x1, x2) }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }


  function _emscripten_glSampleCoverage(x0, x1) { GLctx.sampleCoverage(x0, x1) }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      location = GL.uniforms[location];
      GLctx.uniform4f(location, v0, v1, v2, v3);
    }

  function _emscripten_glFrustum() {
  Module['printErr']('missing function: emscripten_glFrustum'); abort(-1);
  }

  function _glfwSetWindowSizeCallback(cbfun) {
      GLFW.resizeFunc = cbfun;
      if (GLFW.resizeFunc) {
        Runtime.dynCall('vii', GLFW.resizeFunc, [Module['canvas'].width, Module['canvas'].height]);
      }
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      location = GL.uniforms[location];
      GLctx.uniform4i(location, v0, v1, v2, v3);
    }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  function _pthread_cond_wait() {
      return 0;
    }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      location = GL.uniforms[location];
      GLctx.uniform3f(location, v0, v1, v2);
    }

  function _emscripten_glGetObjectParameterivARB() {
  Module['printErr']('missing function: emscripten_glGetObjectParameterivARB'); abort(-1);
  }

  function _emscripten_glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      location = GL.uniforms[location];
      GLctx.uniform3i(location, v0, v1, v2);
    }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx.stencilOp(x0, x1, x2) }

  function _emscripten_glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  var _cosf=Math_cos;

  function _glDisable(x0) { GLctx.disable(x0) }

  function _glfwGetMouseButton(button) {
      return (GLFW.buttons & (1 << button)) > 0;
    }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

   
  Module["_memset"] = _memset;

  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx.blendFuncSeparate(x0, x1, x2, x3) }

  function _glCullFace(x0) { GLctx.cullFace(x0) }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx.vertexAttrib3f(x0, x1, x2, x3) }

  function _emscripten_glNormalPointer() {
  Module['printErr']('missing function: emscripten_glNormalPointer'); abort(-1);
  }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  
  function _free() {
  }
  Module["_free"] = _free;function _freelocale(locale) {
      _free(locale);
    }

  function _emscripten_glGetVertexAttribfv(index, pname, params) {
      var data = GLctx.getVertexAttrib(index, pname);
      if (typeof data == 'number') {
        HEAPF32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAPF32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }

  function _glfwExtensionSupported(extension) {
      return Module.ctx.getSupportedExtensions().indexOf(Pointer_stringify(extension)) > -1;
    }

  function _emscripten_glDeleteShader(shader) {
      GLctx.deleteShader(GL.shaders[shader]);
      GL.shaders[shader] = null;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function _emscripten_glVertexPointer(){ throw 'Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  var _sinf=Math_sin;

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[3];
        for (var i = 0; i < 4; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(location, transpose, view);
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      var data = GLctx.getVertexAttrib(index, pname);
      if (typeof data == 'number' || typeof data == 'boolean') {
        HEAP32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAP32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  function _glReadBuffer() {
  Module['printErr']('missing function: glReadBuffer'); abort(-1);
  }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
      GL.instancedArraysExt.drawArraysInstancedANGLE(mode, first, count, primcount);
    }

  function _emscripten_glEnableClientState() {
  Module['printErr']('missing function: emscripten_glEnableClientState'); abort(-1);
  }

  function _emscripten_glGetPointerv() {
  Module['printErr']('missing function: emscripten_glGetPointerv'); abort(-1);
  }

  function _emscripten_glStencilMask(x0) { GLctx.stencilMask(x0) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx.stencilFuncSeparate(x0, x1, x2, x3) }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  function _emscripten_glClearDepthf(x0) { GLctx.clearDepth(x0) }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function _glfwTerminate() {}

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx.vertexAttrib1f(x0, x1) }

  function _emscripten_glFinish() { GLctx.finish() }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDepthFunc(x0) { GLctx.depthFunc(x0) }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _emscripten_glUniform4iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 4;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform4iv(location, value);
    }

  function _glClear(x0) { GLctx.clear(x0) }

  function _emscripten_glLoadIdentity(){ throw 'Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glUniform3fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[2];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(location, view);
    }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx.polygonOffset(x0, x1) }

  function _glReadPixels(x, y, width, height, format, type, pixels) {
      var sizePerPixel;
      switch (format) {
        case 0x1907 /* GL_RGB */:
          sizePerPixel = 3;
          break;
        case 0x1908 /* GL_RGBA */:
          sizePerPixel = 4;
          break;
        default: 
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return;
      }
      var totalSize = width*height*sizePerPixel;
      GLctx.readPixels(x, y, width, height, format, type, HEAPU8.subarray(pixels, pixels + totalSize));
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx.vertexAttrib2f(x0, x1, x2) }

  function _emscripten_glColorPointer() {
  Module['printErr']('missing function: emscripten_glColorPointer'); abort(-1);
  }

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _emscripten_glClearStencil(x0) { GLctx.clearStencil(x0) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDeleteVertexArrays(n, vaos) {
      for(var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GL.vaoExt.deleteVertexArrayOES(GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  var _tanf=Math_tan;

  function ___errno_location() {
      return ___errno_state;
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _glfwInit() {
      GLFW.initTime = Date.now() / 1000;
  
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("mousemove", GLFW.onMousemove, true);
      window.addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      window.addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      window.addEventListener('DOMMouseScroll', GLFW.onMouseWheel, true);
      window.addEventListener('mousewheel', GLFW.onMouseWheel, true);
  
      __ATEXIT__.push({ func: function() {
        window.removeEventListener("keydown", GLFW.onKeydown, true);
        window.removeEventListener("keypress", GLFW.onKeyPress, true);
        window.removeEventListener("keyup", GLFW.onKeyup, true);
        window.removeEventListener("mousemove", GLFW.onMousemove, true);
        window.removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
        window.removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
        window.removeEventListener('DOMMouseScroll', GLFW.onMouseWheel, true);
        window.removeEventListener('mousewheel', GLFW.onMouseWheel, true);
        Module["canvas"].width = Module["canvas"].height = 1;
      }});
  
      //TODO: Init with correct values
      GLFW.params = new Array();
      GLFW.params[0x00030001] = true; // GLFW_MOUSE_CURSOR
      GLFW.params[0x00030002] = false; // GLFW_STICKY_KEYS
      GLFW.params[0x00030003] = true; // GLFW_STICKY_MOUSE_BUTTONS
      GLFW.params[0x00030004] = false; // GLFW_SYSTEM_KEYS
      GLFW.params[0x00030005] = false; // GLFW_KEY_REPEAT
      GLFW.params[0x00030006] = true; // GLFW_AUTO_POLL_EVENTS
      GLFW.params[0x00020001] = true; // GLFW_OPENED
      GLFW.params[0x00020002] = true; // GLFW_ACTIVE
      GLFW.params[0x00020003] = false; // GLFW_ICONIFIED
      GLFW.params[0x00020004] = true; // GLFW_ACCELERATED
      GLFW.params[0x00020005] = 0; // GLFW_RED_BITS
      GLFW.params[0x00020006] = 0; // GLFW_GREEN_BITS
      GLFW.params[0x00020007] = 0; // GLFW_BLUE_BITS
      GLFW.params[0x00020008] = 0; // GLFW_ALPHA_BITS
      GLFW.params[0x00020009] = 0; // GLFW_DEPTH_BITS
      GLFW.params[0x0002000A] = 0; // GLFW_STENCIL_BITS
      GLFW.params[0x0002000B] = 0; // GLFW_REFRESH_RATE
      GLFW.params[0x0002000C] = 0; // GLFW_ACCUM_RED_BITS
      GLFW.params[0x0002000D] = 0; // GLFW_ACCUM_GREEN_BITS
      GLFW.params[0x0002000E] = 0; // GLFW_ACCUM_BLUE_BITS
      GLFW.params[0x0002000F] = 0; // GLFW_ACCUM_ALPHA_BITS
      GLFW.params[0x00020010] = 0; // GLFW_AUX_BUFFERS
      GLFW.params[0x00020011] = 0; // GLFW_STEREO
      GLFW.params[0x00020012] = 0; // GLFW_WINDOW_NO_RESIZE
      GLFW.params[0x00020013] = 0; // GLFW_FSAA_SAMPLES
      GLFW.params[0x00020014] = 0; // GLFW_OPENGL_VERSION_MAJOR
      GLFW.params[0x00020015] = 0; // GLFW_OPENGL_VERSION_MINOR
      GLFW.params[0x00020016] = 0; // GLFW_OPENGL_FORWARD_COMPAT
      GLFW.params[0x00020017] = 0; // GLFW_OPENGL_DEBUG_CONTEXT
      GLFW.params[0x00020018] = 0; // GLFW_OPENGL_PROFILE
  
      GLFW.keys = new Array();
  
      return 1; // GL_TRUE
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function _glfwSwapBuffers() {}

  function _emscripten_glGenerateMipmap(x0) { GLctx.generateMipmap(x0) }

  function _emscripten_glCullFace(x0) { GLctx.cullFace(x0) }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glfwSetWindowCloseCallback(cbfun) {
      GLFW.closeFunc = cbfun;
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _emscripten_glHint(x0, x1) { GLctx.hint(x0, x1) }

  function _glfwGetWindowSize(width, height) {
      setValue(width, Module['canvas'].width, 'i32');
      setValue(height, Module['canvas'].height, 'i32');
    }

  function _emscripten_glUniform2fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[1];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(location, view);
    }

  function _glfwSwapInterval(interval) {}

  function _emscripten_glMatrixMode(){ throw 'Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _abort() {
      Module['abort']();
    }

  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
   
  Module["_strlen"] = _strlen;function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }


  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      if (data) {
        data = HEAPU8.subarray((data),(data+imageSize));
      } else {
        data = null;
      }
      // N.b. using array notation explicitly to not confuse Closure minification.
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data);
    }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glUniform2iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 2;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform2iv(location, value);
    }

  function _emscripten_glVertexAttrib1fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+4)>>2);
      GLctx.vertexAttrib1fv(index, v);
    }

  function _glEnable(x0) { GLctx.enable(x0) }

  var _fabs=Math_abs;

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }var _getc=_fgetc;

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, -1);
        pixels = data.pixels;
      } else {
        pixels = null;
      }
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    }

  function _glfwOpenWindowHint(target, hint) {
      GLFW.params[target] = hint;
    }

  function _emscripten_glUniform2f(location, v0, v1) {
      location = GL.uniforms[location];
      GLctx.uniform2f(location, v0, v1);
    }

  function _emscripten_glUniform2i(location, v0, v1) {
      location = GL.uniforms[location];
      GLctx.uniform2i(location, v0, v1);
    }

  function _glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  function _emscripten_glGetUniformiv(program, location, params) {
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        HEAP32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAP32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  
  
  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _emscripten_glDepthMask(x0) { GLctx.depthMask(x0) }

  function _emscripten_glDepthRangef(x0, x1) { GLctx.depthRange(x0, x1) }

  function _emscripten_glDepthRange(x0, x1) { GLctx.depthRange(x0, x1) }

  function _glfwGetMouseWheel() {
      return GLFW.wheelPos;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glUniform1fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[0];
        view[0] = HEAPF32[((value)>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(location, view);
    }

  function _emscripten_glBindProgramARB() {
  Module['printErr']('missing function: emscripten_glBindProgramARB'); abort(-1);
  }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx.checkFramebufferStatus(x0) }

  function _emscripten_glDeleteProgram(program) {
      var program = GL.programs[program];
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[program] = null;
      GL.programInfos[program] = null;
    }

  function _emscripten_glDisable(x0) { GLctx.disable(x0) }

  function _emscripten_glVertexAttrib3fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+12)>>2);
      GLctx.vertexAttrib3fv(index, v);
    }

  function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
  
      var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
      writeStringToMemory(infoname, name);
  
      if (length) {
        HEAP32[((length)>>2)]=infoname.length;
      }
      if (size) {
        HEAP32[((size)>>2)]=info.size;
      }
      if (type) {
        HEAP32[((type)>>2)]=info.type;
      }
    }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glLineWidth(x0) { GLctx.lineWidth(x0) }

  function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _emscripten_glRotatef() {
  Module['printErr']('missing function: emscripten_glRotatef'); abort(-1);
  }


  function _emscripten_glGetIntegerv(name_, p) {
      return GL.get(name_, p, 'Integer');
    }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      HEAP32[((params)>>2)]=result;
    }


  function _emscripten_glClientActiveTexture() {
  Module['printErr']('missing function: emscripten_glClientActiveTexture'); abort(-1);
  }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      // Work around a bug in Chromium which causes getShaderInfoLog to return null
      if (!log) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      writeStringToMemory(log, infoLog);
      if (length) {
        HEAP32[((length)>>2)]=log.length
      }
    }

  function _glfwGetTime() {
      return (Date.now()/1000) - GLFW.initTime;
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _glfwWaitEvents() {}

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx.stencilOpSeparate(x0, x1, x2, x3) }

  function _glfwGetWindowParam(param) {
      return GLFW.params[param];
    }

  function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var sizePerPixel;
      switch (format) {
        case 0x1907 /* GL_RGB */:
          sizePerPixel = 3;
          break;
        case 0x1908 /* GL_RGBA */:
          sizePerPixel = 4;
          break;
        default: 
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return;
      }
      var totalSize = width*height*sizePerPixel;
      GLctx.readPixels(x, y, width, height, format, type, HEAPU8.subarray(pixels, pixels + totalSize));
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      if (data) {
        data = HEAPU8.subarray((data),(data+imageSize));
      } else {
        data = null;
      }
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data);
    }

  function _emscripten_glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _glfwSetWindowTitle(title) {
      document.title = Pointer_stringify(title);
    }

  function _emscripten_glIsEnabled(x0) { return GLctx.isEnabled(x0) }

  
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }function _isxdigit_l(chr) {
      return _isxdigit(chr); // no locale support yet
    }

   
  Module["_memmove"] = _memmove;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.textures);
        var texture = GLctx.createTexture();
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx.vertexAttrib4f(x0, x1, x2, x3, x4) }

  function _glDepthFunc(x0) { GLctx.depthFunc(x0) }

  
  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
      }
    }
  
  var ___cxa_caught_exceptions=[];function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = ___cxa_caught_exceptions.pop();
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  
  var _emscripten_GetProcAddress=undefined;
  Module["_emscripten_GetProcAddress"] = _emscripten_GetProcAddress;function _glfwGetProcAddress(procname) {
      return _emscripten_GetProcAddress(procname);
    }

  function _emscripten_glClear(x0) { GLctx.clear(x0) }

  function _glfwGetMousePos(xpos, ypos) {
      setValue(xpos, Browser.mouseX, 'i32');
      setValue(ypos, Browser.mouseY, 'i32');
    }

  
  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _emscripten_glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }


  function _emscripten_glGetUniformfv(program, location, params) {
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number') {
        HEAPF32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAPF32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        HEAP32[((p)>>2)]=GLctx.getProgramInfoLog(GL.programs[program]).length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _emscripten_glDrawRangeElements() {
  Module['printErr']('missing function: emscripten_glDrawRangeElements'); abort(-1);
  }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.renderbuffers);
        var renderbuffer = GLctx.createRenderbuffer();
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

   
  Module["_tolower"] = _tolower;

  function _emscripten_glFrontFace(x0) { GLctx.frontFace(x0) }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }function _isdigit_l(chr) {
      return _isdigit(chr); // no locale support yet
    }

  function _emscripten_glTexCoordPointer() {
  Module['printErr']('missing function: emscripten_glTexCoordPointer'); abort(-1);
  }

  function _emscripten_glGetInfoLogARB() {
  Module['printErr']('missing function: emscripten_glGetInfoLogARB'); abort(-1);
  }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }


  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx.renderbufferStorage(x0, x1, x2, x3) }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _fmod(x, y) {
      return x % y;
    }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glIsProgram(program) {
      var program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx.blendColor(x0, x1, x2, x3) }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        // Work around a bug in Chromium which causes getShaderInfoLog to return null
        if (!log) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[8];
        for (var i = 0; i < 9; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(location, transpose, view);
    }


  function _emscripten_glUniform4fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[3];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
        view[3] = HEAPF32[(((value)+(12))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(location, view);
    }

  function __ZNSt9exceptionD2Ev() {}

  function _emscripten_glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var id = GL.getNewId(GL.framebuffers);
        var framebuffer = GLctx.createFramebuffer();
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

   
  Module["_strcpy"] = _strcpy;

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx.blendEquationSeparate(x0, x1) }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  function _emscripten_glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.textures);
        var texture = GLctx.createTexture();
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib2fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+8)>>2);
      GLctx.vertexAttrib2fv(index, v);
    }

  var _floorf=Math_floor;

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
  
      var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
      writeStringToMemory(infoname, name);
  
      if (length) {
        HEAP32[((length)>>2)]=infoname.length;
      }
      if (size) {
        HEAP32[((size)>>2)]=info.size;
      }
      if (type) {
        HEAP32[((type)>>2)]=info.type;
      }
    }

  function _emscripten_glDeleteObjectARB() {
  Module['printErr']('missing function: emscripten_glDeleteObjectARB'); abort(-1);
  }

  function _emscripten_glUniform1f(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1f(location, v0);
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  var _sqrtf=Math_sqrt;

  
  
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
  
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return ((asm["setTempRet0"](0),0)|0);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return ((asm["setTempRet0"](((HEAP32[(((tempDoublePtr)+(4))>>2)])|0)),((HEAP32[((tempDoublePtr)>>2)])|0))|0);
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }function _strtoull_l(str, endptr, base) {
      return _strtoull(str, endptr, base); // no locale support yet
    }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.buffers);
        var buffer = GLctx.createBuffer();
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }


  var _copysignl=_copysign;

  
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }function _strtoll_l(str, endptr, base) {
      return _strtoll(str, endptr, base); // no locale support yet
    }

  function _emscripten_glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glEnable(x0) { GLctx.enable(x0) }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx.scissor(x0, x1, x2, x3) }

  function _glfwOpenWindow(width, height, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, mode) {
      if (width == 0 && height > 0) {
        width = 4 * height / 3;
      }
      if (width > 0 && height == 0) {
        height = 3 * width / 4;
      }
      GLFW.params[0x00020005] = redbits; // GLFW_RED_BITS
      GLFW.params[0x00020006] = greenbits; // GLFW_GREEN_BITS
      GLFW.params[0x00020007] = bluebits; // GLFW_BLUE_BITS
      GLFW.params[0x00020008] = alphabits; // GLFW_ALPHA_BITS
      GLFW.params[0x00020009] = depthbits; // GLFW_DEPTH_BITS
      GLFW.params[0x0002000A] = stencilbits; // GLFW_STENCIL_BITS
  
      if (mode == 0x00010001) {// GLFW_WINDOW
        Browser.setCanvasSize(GLFW.initWindowWidth = width,
                              GLFW.initWindowHeight = height);
        GLFW.params[0x00030003] = true; // GLFW_STICKY_MOUSE_BUTTONS
      } else if (mode == 0x00010002) {// GLFW_FULLSCREEN
        GLFW.requestFullScreen();
        GLFW.params[0x00030003] = false; // GLFW_STICKY_MOUSE_BUTTONS
      } else {
        throw "Invalid glfwOpenWindow mode.";
      }
  
      var contextAttributes = {
        antialias: (GLFW.params[0x00020013] > 1), // GLFW_FSAA_SAMPLES
        depth: (GLFW.params[0x00020009] > 0), // GLFW_DEPTH_BITS
        stencil: (GLFW.params[0x0002000A] > 0) // GLFW_STENCIL_BITS
      }
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return 1; // GL_TRUE
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _pthread_mutex_unlock() {}

  function _emscripten_glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function _emscripten_glBlendEquation(x0) { GLctx.blendEquation(x0) }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _emscripten_glVertexAttrib4fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+16)>>2);
      GLctx.vertexAttrib4fv(index, v);
    }

  var _BItoD=true;

  function _glGetIntegerv(name_, p) {
      return GL.get(name_, p, 'Integer');
    }

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      result = result.slice(0, Math.max(0, bufSize - 1));
      writeStringToMemory(result, source);
      if (length) {
        HEAP32[((length)>>2)]=result.length;
      }
    }

  function _llvm_bswap_i32(x) {
      return ((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24);
    }

  function _emscripten_glClearDepth(x0) { GLctx.clearDepth(x0) }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      return 0;
    }

  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }

  function _emscripten_glGetFloatv(name_, p) {
      return GL.get(name_, p, 'Float');
    }


  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _emscripten_glVertexAttribDivisor(index, divisor) {
      GL.instancedArraysExt.vertexAttribDivisorANGLE(index, divisor);    
    }

  function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GL.instancedArraysExt.drawElementsInstancedANGLE(mode, count, type, indices, primcount);
    }


  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  var ___cxa_atexit=_atexit;

  
  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from non-main loop sources
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        if (Module['preMainLoop']) {
          Module['preMainLoop']();
        }
  
        try {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          } else {
            if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
            throw e;
          }
        }
  
        if (Module['postMainLoop']) {
          Module['postMainLoop']();
        }
  
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from the main loop itself
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
        Browser.mainLoop.scheduler();
      }
      if (fps && fps > 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, 1000/fps); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }function _emscripten_set_main_loop_arg(func, arg, fps, simulateInfiniteLoop) {
      _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg);
    }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  function _emscripten_glBindVertexArray(vao) {
  
      GL.vaoExt.bindVertexArrayOES(GL.vaos[vao]);
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  var _fmodf=_fmod;

  function _emscripten_glLoadMatrixf() {
  Module['printErr']('missing function: emscripten_glLoadMatrixf'); abort(-1);
  }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  var _fmodl=_fmod;

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      // Work around a bug in Chromium which causes getProgramInfoLog to return null
      if (!log) {
        log = "";
      }
      log = log.substr(0, maxLength - 1);
      writeStringToMemory(log, infoLog);
      if (length) {
        HEAP32[((length)>>2)]=log.length
      }
    }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _llvm_bswap_i16(x) {
      return ((x&0xff)<<8) | ((x>>8)&0xff);
    }

  function _emscripten_glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _emscripten_glUniform1iv(location, count, value) {
      location = GL.uniforms[location];
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform1iv(location, value);
    }

  function _emscripten_glFlush() { GLctx.flush() }

  function _glDepthMask(x0) { GLctx.depthMask(x0) }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _emscripten_glColorMask(x0, x1, x2, x3) { GLctx.colorMask(x0, x1, x2, x3) }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glfwGetKey(key) {
      return GLFW.keys[key];
    }

  function _emscripten_glGenVertexArrays(n, arrays) {
  
      for(var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.vaos);
        var vao = GL.vaoExt.createVertexArrayOES();
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _emscripten_glGetBooleanv(name_, p) {
      return GL.get(name_, p, 'Boolean');
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vd(index,a1) {
  try {
    Module["dynCall_vd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viidddiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viidddiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vdddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iid(index,a1,a2) {
  try {
    return Module["dynCall_iid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiddidi(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiddidi"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_vdddddd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiidi(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiidi"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdd(index,a1,a2) {
  try {
    Module["dynCall_vdd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdi(index,a1,a2) {
  try {
    Module["dynCall_vdi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer){"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=env.cttz_i8|0;var n=env.ctlz_i8|0;var o=env.__ZTISt9exception|0;var p=env.___dso_handle|0;var q=env._stderr|0;var r=env._stdin|0;var s=env._stdout|0;var t=0;var u=0;var v=0;var w=0;var x=+env.NaN,y=+env.Infinity;var z=0,A=0,B=0,C=0,D=0.0,E=0,F=0,G=0,H=0.0;var I=0;var J=0;var K=0;var L=0;var M=0;var N=0;var O=0;var P=0;var Q=0;var R=0;var S=global.Math.floor;var T=global.Math.abs;var U=global.Math.sqrt;var V=global.Math.pow;var W=global.Math.cos;var X=global.Math.sin;var Y=global.Math.tan;var Z=global.Math.acos;var _=global.Math.asin;var $=global.Math.atan;var aa=global.Math.atan2;var ba=global.Math.exp;var ca=global.Math.log;var da=global.Math.ceil;var ea=global.Math.imul;var fa=env.abort;var ga=env.assert;var ha=env.asmPrintInt;var ia=env.asmPrintFloat;var ja=env.min;var ka=env.invoke_viiiii;var la=env.invoke_vd;var ma=env.invoke_vid;var na=env.invoke_vi;var oa=env.invoke_vii;var pa=env.invoke_ii;var qa=env.invoke_viiiiiiiii;var ra=env.invoke_viddd;var sa=env.invoke_iiiiii;var ta=env.invoke_viidddiii;var ua=env.invoke_vidd;var va=env.invoke_iiii;var wa=env.invoke_vdddd;var xa=env.invoke_viiiiid;var ya=env.invoke_viiiiiiii;var za=env.invoke_viiiiii;var Aa=env.invoke_viii;var Ba=env.invoke_viid;var Ca=env.invoke_vidddd;var Da=env.invoke_iid;var Ea=env.invoke_viiiiiii;var Fa=env.invoke_viiiiiid;var Ga=env.invoke_iiiddidi;var Ha=env.invoke_iii;var Ia=env.invoke_iiiiiiiii;var Ja=env.invoke_i;var Ka=env.invoke_iiiii;var La=env.invoke_vdddddd;var Ma=env.invoke_iiiiiidi;var Na=env.invoke_vdd;var Oa=env.invoke_v;var Pa=env.invoke_vdi;var Qa=env.invoke_viiii;var Ra=env._emscripten_glGetTexParameterfv;var Sa=env._emscripten_glDeleteVertexArrays;var Ta=env._strftime_l;var Ua=env._emscripten_glReleaseShaderCompiler;var Va=env._emscripten_glBlendFuncSeparate;var Wa=env._emscripten_glGetShaderPrecisionFormat;var Xa=env._vsscanf;var Ya=env._emscripten_glGetIntegerv;var Za=env.__ZSt9terminatev;var _a=env._emscripten_glCullFace;var $a=env._glfwInit;var ab=env.___cxa_guard_acquire;var bb=env._emscripten_glStencilMaskSeparate;var cb=env._glReadPixels;var db=env._emscripten_glFrontFace;var eb=env._emscripten_glDrawArrays;var fb=env._emscripten_glUniform3fv;var gb=env.__ZSt18uncaught_exceptionv;var hb=env._emscripten_glUseProgram;var ib=env.___ctype_toupper_loc;var jb=env._emscripten_glDepthFunc;var kb=env._glfwOpenWindowHint;var lb=env._emscripten_memcpy_big;var mb=env._ftell;var nb=env._glDeleteTextures;var ob=env._sbrk;var pb=env._glBlendFunc;var qb=env._emscripten_glDisableVertexAttribArray;var rb=env._emscripten_glUniform3iv;var sb=env.___cxa_begin_catch;var tb=env._sinf;var ub=env._emscripten_set_main_loop_arg;var vb=env.__parseInt64;var wb=env.__reallyNegative;var xb=env._close;var yb=env._emscripten_glUniform1f;var zb=env._tanf;var Ab=env._emscripten_glGetBooleanv;var Bb=env._emscripten_glGetShaderSource;var Cb=env._glfwGetMousePos;var Db=env._asprintf;var Eb=env._glfwTerminate;var Fb=env._emscripten_glUniform1i;var Gb=env._fread;var Hb=env._pthread_cond_broadcast;var Ib=env._emscripten_glGenBuffers;var Jb=env._emscripten_glDeleteObjectARB;var Kb=env._glfwGetProcAddress;var Lb=env._glfwSetWindowSizeCallback;var Mb=env._emscripten_glVertexAttribPointer;var Nb=env._emscripten_glIsProgram;var Ob=env._write;var Pb=env.__isLeapYear;var Qb=env._fsync;var Rb=env._emscripten_glBlendEquationSeparate;var Sb=env._emscripten_glGetString;var Tb=env.__ZNSt9exceptionD2Ev;var Ub=env._emscripten_glIsFramebuffer;var Vb=env._emscripten_glRotatef;var Wb=env._emscripten_glIsEnabled;var Xb=env._emscripten_glScissor;var Yb=env._strtoll_l;var Zb=env._emscripten_glUniform2f;var _b=env.___cxa_rethrow;var $b=env._emscripten_glTexParameteriv;var ac=env._catclose;var bc=env._glTexParameteri;var cc=env.___cxa_does_inherit;var dc=env._emscripten_glStencilOpSeparate;var ec=env._emscripten_glFramebufferRenderbuffer;var fc=env._glPixelStorei;var gc=env._emscripten_glIsBuffer;var hc=env._emscripten_glVertexAttrib1f;var ic=env._emscripten_glGetActiveAttrib;var jc=env._emscripten_glAttachShader;var kc=env.__formatString;var lc=env._emscripten_glCopyTexImage2D;var mc=env._emscripten_glCompressedTexSubImage2D;var nc=env._uselocale;var oc=env._emscripten_glTexParameterfv;var pc=env._emscripten_glUniformMatrix2fv;var qc=env._emscripten_glLineWidth;var rc=env._emscripten_glTexParameterf;var sc=env._emscripten_glGetAttachedShaders;var tc=env._emscripten_glGenTextures;var uc=env._emscripten_glTexParameteri;var vc=env._glfwOpenWindow;var wc=env.___cxa_free_exception;var xc=env.___cxa_find_matching_catch;var yc=env._isxdigit_l;var zc=env._emscripten_glShaderBinary;var Ac=env._glDrawElements;var Bc=env.___cxa_guard_release;var Cc=env._emscripten_glBindProgramARB;var Dc=env._emscripten_glGenVertexArrays;var Ec=env._strtol;var Fc=env._glViewport;var Gc=env._emscripten_glUniform4iv;var Hc=env._emscripten_glGetTexParameteriv;var Ic=env.___setErrNo;var Jc=env._emscripten_glDrawElementsInstanced;var Kc=env._emscripten_glBindAttribLocation;var Lc=env._llvm_pow_f32;var Mc=env._glDepthFunc;var Nc=env._isdigit_l;var Oc=env._emscripten_glClientActiveTexture;var Pc=env._emscripten_glVertexAttrib2f;var Qc=env.___resumeException;var Rc=env._emscripten_glFlush;var Sc=env._emscripten_glPolygonOffset;var Tc=env._freelocale;var Uc=env._emscripten_glCheckFramebufferStatus;var Vc=env._emscripten_glGetError;var Wc=env._emscripten_glClearDepthf;var Xc=env._emscripten_glCreateShader;var Yc=env._emscripten_glBindTexture;var Zc=env._newlocale;var _c=env._emscripten_glUniform3f;var $c=env._emscripten_glUniform3i;var ad=env._isspace;var bd=env._emscripten_glDeleteShader;var cd=env._glEnable;var dd=env._emscripten_glVertexAttrib1fv;var ed=env._fabs;var fd=env._glGenTextures;var gd=env._sprintf;var hd=env._glGetIntegerv;var id=env._glGetString;var jd=env._emscripten_glClearStencil;var kd=env._emscripten_glGetUniformLocation;var ld=env._pread;var md=env._emscripten_glEnableVertexAttribArray;var nd=env._emscripten_glGetAttribLocation;var od=env._llvm_bswap_i32;var pd=env._emscripten_glNormalPointer;var qd=env._emscripten_glBindVertexArray;var rd=env._emscripten_glTexCoordPointer;var sd=env._emscripten_glEnable;var td=env._strtoull_l;var ud=env._emscripten_glClearDepth;var vd=env._read;var wd=env.__addDays;var xd=env._emscripten_glBindFramebuffer;var yd=env._emscripten_glReadPixels;var zd=env._emscripten_glStencilFuncSeparate;var Ad=env._emscripten_glBindRenderbuffer;var Bd=env._time;var Cd=env._pthread_mutex_lock;var Dd=env._emscripten_glMatrixMode;var Ed=env._strerror_r;var Fd=env._emscripten_glGetFramebufferAttachmentParameteriv;var Gd=env._catopen;var Hd=env._exit;var Id=env._emscripten_glEnableClientState;var Jd=env._emscripten_glUniform4i;var Kd=env._glfwGetMouseWheel;var Ld=env._emscripten_glDrawRangeElements;var Md=env._glCullFace;var Nd=env._emscripten_glLoadIdentity;var Od=env._emscripten_glUniform4f;var Pd=env._emscripten_glUniform2fv;var Qd=env._fmod;var Rd=env._vasprintf;var Sd=env._lseek;var Td=env._emscripten_glFinish;var Ud=env.___ctype_b_loc;var Vd=env._emscripten_glClear;var Wd=env.___cxa_allocate_exception;var Xd=env._emscripten_glBlendFunc;var Yd=env._emscripten_glGetShaderInfoLog;var Zd=env._emscripten_glStencilMask;var _d=env._strtoll;var $d=env._emscripten_glUniform1iv;var ae=env._emscripten_glGetVertexAttribPointerv;var be=env.___errno_location;var ce=env._pwrite;var de=env._emscripten_glUniform2i;var ee=env._emscripten_glGenRenderbuffers;var fe=env._open;var ge=env._glClearColor;var he=env._emscripten_glGetActiveUniform;var ie=env._glBindTexture;var je=env._snprintf;var ke=env.__scanString;var le=env._emscripten_glDisable;var me=env.___cxa_end_catch;var ne=env._emscripten_glGetBufferParameteriv;var oe=env._emscripten_glLoadMatrixf;var pe=env._emscripten_glDeleteProgram;var qe=env._emscripten_glDeleteRenderbuffers;var re=env._strtoull;var se=env._strftime;var te=env._emscripten_glVertexAttrib4f;var ue=env._emscripten_glGetVertexAttribiv;var ve=env._emscripten_glTexSubImage2D;var we=env._emscripten_glGetProgramiv;var xe=env._emscripten_glPixelStorei;var ye=env._fseek;var ze=env._emscripten_glVertexAttrib4fv;var Ae=env._glfwGetMouseButton;var Be=env._send;var Ce=env._emscripten_glDepthRange;var De=env._llvm_bswap_i16;var Ee=env._isxdigit;var Fe=env._fclose;var Ge=env._vsnprintf;var He=env.__parseInt;var Ie=env._floorf;var Je=env._sqrtf;var Ke=env._emscripten_glViewport;var Le=env._emscripten_glRenderbufferStorage;var Me=env._emscripten_glDrawElements;var Ne=env._emscripten_glDepthMask;var Oe=env._recv;var Pe=env._copysign;var Qe=env._emscripten_glGetObjectParameterivARB;var Re=env._emscripten_glFramebufferTexture2D;var Se=env._glfwSwapInterval;var Te=env._sysconf;var Ue=env.__getFloat;var Ve=env._emscripten_glStencilFunc;var We=env._abort;var Xe=env._emscripten_glGetUniformiv;var Ye=env._glfwGetWindowParam;var Ze=env._glReadBuffer;var _e=env._glTexImage2D;var $e=env._emscripten_glGetShaderiv;var af=env._fopen;var bf=env._emscripten_glGenFramebuffers;var cf=env.___cxa_pure_virtual;var df=env._emscripten_glUniformMatrix4fv;var ef=env._emscripten_glGetPointerv;var ff=env._pthread_cond_wait;var gf=env.___cxa_is_number_type;var hf=env._cosf;var jf=env._emscripten_glUniform2iv;var kf=env._emscripten_glUniform1fv;var lf=env._emscripten_glIsRenderbuffer;var mf=env._glfwSetWindowSize;var nf=env._glfwGetTime;var of=env._emscripten_glShaderSource;var pf=env._emscripten_glBlendColor;var qf=env._glDrawArrays;var rf=env.__arraySum;var sf=env._emscripten_glDrawArraysInstanced;var tf=env._glfwGetWindowSize;var uf=env._emscripten_glVertexPointer;var vf=env._ungetc;var wf=env._fwrite;var xf=env._emscripten_glDeleteTextures;var yf=env._glfwGetKey;var zf=env._glfwWaitEvents;var Af=env._emscripten_glVertexAttribDivisor;var Bf=env._emscripten_glGetUniformfv;var Cf=env._emscripten_glGetVertexAttribfv;var Df=env._emscripten_glGetRenderbufferParameteriv;var Ef=env._fprintf;var Ff=env._sscanf;var Gf=env._emscripten_glVertexAttrib3fv;var Hf=env._catgets;var If=env._emscripten_glGetInfoLogARB;var Jf=env._emscripten_glCompileShader;var Kf=env._glClear;var Lf=env._fileno;var Mf=env._emscripten_glFrustum;var Nf=env._emscripten_glSampleCoverage;var Of=env._emscripten_glDepthRangef;var Pf=env.__exit;var Qf=env._glfwSetWindowCloseCallback;var Rf=env._emscripten_glVertexAttrib3f;var Sf=env._emscripten_glStencilOp;var Tf=env._emscripten_glGenerateMipmap;var Uf=env._emscripten_glColorMask;var Vf=env._emscripten_glLinkProgram;var Wf=env._emscripten_glBlendEquation;var Xf=env.___ctype_tolower_loc;var Yf=env._emscripten_glIsTexture;var Zf=env._emscripten_glBufferSubData;var _f=env._pthread_mutex_unlock;var $f=env._emscripten_glUniformMatrix3fv;var ag=env._emscripten_glHint;var bg=env._mkport;var cg=env._emscripten_glActiveTexture;var dg=env._emscripten_glCreateProgram;var eg=env._emscripten_glDeleteBuffers;var fg=env._glfwExtensionSupported;var gg=env._fflush;var hg=env._glfwSwapBuffers;var ig=env._emscripten_glColorPointer;var jg=env._emscripten_set_main_loop;var kg=env._emscripten_glIsShader;var lg=env._emscripten_glGetProgramInfoLog;var mg=env._glDepthMask;var ng=env._emscripten_glDeleteFramebuffers;var og=env._emscripten_glUniform4fv;var pg=env._fgetc;var qg=env.___cxa_throw;var rg=env._emscripten_glCompressedTexImage2D;var sg=env._emscripten_glClearColor;var tg=env._emscripten_glBufferData;var ug=env._glDisable;var vg=env._emscripten_glCopyTexSubImage2D;var wg=env._isdigit;var xg=env._strerror;var yg=env._emscripten_glValidateProgram;var zg=env._emscripten_glBindBuffer;var Ag=env._atexit;var Bg=env._emscripten_glGetFloatv;var Cg=env._emscripten_glDetachShader;var Dg=env._glfwSetWindowTitle;var Eg=env._emscripten_glVertexAttrib2fv;var Fg=env._emscripten_glTexImage2D;var Gg=0.0;
// EMSCRIPTEN_START_FUNCS
function Fr(e,f,g,h,j,k,l,m,n,o,p){e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;var q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0;q=i;i=i+480|0;r=q+72|0;s=q+68|0;t=q+472|0;u=q+473|0;v=q+56|0;w=q+44|0;x=q+28|0;y=q+16|0;z=q+4|0;A=q;B=q+40|0;c[s>>2]=0;c[v+0>>2]=0;c[v+4>>2]=0;c[v+8>>2]=0;c[w+0>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;c[x+0>>2]=0;c[x+4>>2]=0;c[x+8>>2]=0;c[y+0>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;c[z+0>>2]=0;c[z+4>>2]=0;c[z+8>>2]=0;Jr(g,h,s,t,u,v,w,x,y,A);c[o>>2]=c[n>>2];h=m+8|0;m=y+1|0;g=y+4|0;C=y+8|0;D=x+1|0;E=x+4|0;F=x+8|0;G=(j&512|0)!=0;j=w+1|0;H=w+8|0;I=w+4|0;J=z+1|0;K=z+8|0;L=z+4|0;M=s+3|0;N=n+4|0;O=v+4|0;P=r+400|0;Q=r;R=r;r=p;p=0;S=0;T=167;a:while(1){U=c[e>>2]|0;do{if((U|0)!=0){if((c[U+12>>2]|0)==(c[U+16>>2]|0)){if((Mg[c[(c[U>>2]|0)+36>>2]&127](U)|0)==-1){c[e>>2]=0;V=0;break}else{V=c[e>>2]|0;break}}else{V=U}}else{V=0}}while(0);U=(V|0)==0;W=c[f>>2]|0;do{if((W|0)!=0){if((c[W+12>>2]|0)!=(c[W+16>>2]|0)){if(U){X=W;break}else{Y=R;Z=Q;_=S;$=T;aa=269;break a}}if(!((Mg[c[(c[W>>2]|0)+36>>2]&127](W)|0)==-1)){if(U){X=W;break}else{Y=R;Z=Q;_=S;$=T;aa=269;break a}}else{c[f>>2]=0;aa=12;break}}else{aa=12}}while(0);if((aa|0)==12){aa=0;if(U){Y=R;Z=Q;_=S;$=T;aa=269;break}else{X=0}}b:do{switch(a[s+p|0]|0){case 2:{if(!((S|0)!=0|p>>>0<2)){if((p|0)==2){ba=(a[M]|0)!=0}else{ba=0}if(!(G|ba)){ca=r;da=R;ea=Q;fa=P;ga=0;ha=T;break b}}W=a[w]|0;ia=(W&1)==0;ja=ia?j:c[H>>2]|0;c:do{if((p|0)!=0?(d[s+(p+ -1)|0]|0)<2:0){ka=ja+(ia?(W&255)>>>1:c[I>>2]|0)|0;la=ja;while(1){if((la|0)==(ka|0)){ma=ka;break}na=a[la]|0;if(!(na<<24>>24>-1)){ma=la;break}if((b[(c[h>>2]|0)+(na<<24>>24<<1)>>1]&8192)==0){ma=la;break}else{la=la+1|0}}la=ma-ja|0;ka=a[z]|0;na=(ka&1)==0;if(na){oa=(ka&255)>>>1}else{oa=c[L>>2]|0}if(!(la>>>0>oa>>>0)){if(na){na=(ka&255)>>>1;pa=J;qa=na;ra=z+(na-la)+1|0}else{na=c[K>>2]|0;ka=c[L>>2]|0;pa=na;qa=ka;ra=na+(ka-la)|0}la=pa+qa|0;if((ra|0)==(la|0)){sa=X;ta=W;ua=ma;va=X}else{ka=ra;na=ja;while(1){if((a[ka]|0)!=(a[na]|0)){sa=X;ta=W;ua=ja;va=X;break c}wa=ka+1|0;if((wa|0)==(la|0)){sa=X;ta=W;ua=ma;va=X;break}else{ka=wa;na=na+1|0}}}}else{sa=X;ta=W;ua=ja;va=X}}else{sa=X;ta=W;ua=ja;va=X}}while(0);d:while(1){if((ta&1)==0){xa=j;ya=(ta&255)>>>1}else{xa=c[H>>2]|0;ya=c[I>>2]|0}if((ua|0)==(xa+ya|0)){break}ja=c[e>>2]|0;do{if((ja|0)!=0){if((c[ja+12>>2]|0)==(c[ja+16>>2]|0)){if((Mg[c[(c[ja>>2]|0)+36>>2]&127](ja)|0)==-1){c[e>>2]=0;za=0;break}else{za=c[e>>2]|0;break}}else{za=ja}}else{za=0}}while(0);ja=(za|0)==0;do{if((va|0)!=0){if((c[va+12>>2]|0)!=(c[va+16>>2]|0)){if(ja){Aa=sa;Ba=va;break}else{break d}}if(!((Mg[c[(c[va>>2]|0)+36>>2]&127](va)|0)==-1)){if(ja^(sa|0)==0){Aa=sa;Ba=sa;break}else{break d}}else{c[f>>2]=0;Ca=0;aa=147;break}}else{Ca=sa;aa=147}}while(0);if((aa|0)==147){aa=0;if(ja){break}else{Aa=Ca;Ba=0}}W=c[e>>2]|0;ia=c[W+12>>2]|0;if((ia|0)==(c[W+16>>2]|0)){Da=Mg[c[(c[W>>2]|0)+36>>2]&127](W)|0}else{Da=d[ia]|0}if(!((Da&255)<<24>>24==(a[ua]|0))){break}ia=c[e>>2]|0;W=ia+12|0;na=c[W>>2]|0;if((na|0)==(c[ia+16>>2]|0)){Mg[c[(c[ia>>2]|0)+40>>2]&127](ia)|0}else{c[W>>2]=na+1}sa=Aa;ta=a[w]|0;ua=ua+1|0;va=Ba}if(G){na=a[w]|0;if((na&1)==0){Ea=j;Fa=(na&255)>>>1}else{Ea=c[H>>2]|0;Fa=c[I>>2]|0}if((ua|0)!=(Ea+Fa|0)){aa=162;break a}else{ca=r;da=R;ea=Q;fa=P;ga=S;ha=T}}else{ca=r;da=R;ea=Q;fa=P;ga=S;ha=T}break};case 1:{if((p|0)==3){Y=R;Z=Q;_=S;$=T;aa=269;break a}na=c[e>>2]|0;W=c[na+12>>2]|0;if((W|0)==(c[na+16>>2]|0)){Ga=Mg[c[(c[na>>2]|0)+36>>2]&127](na)|0}else{Ga=d[W]|0}if(!((Ga&255)<<24>>24>-1)){aa=25;break a}if((b[(c[h>>2]|0)+(Ga<<24>>24<<1)>>1]&8192)==0){aa=25;break a}W=c[e>>2]|0;na=W+12|0;ia=c[na>>2]|0;if((ia|0)==(c[W+16>>2]|0)){Ha=Mg[c[(c[W>>2]|0)+40>>2]&127](W)|0}else{c[na>>2]=ia+1;Ha=d[ia]|0}Xm(z,Ha&255);aa=26;break};case 0:{aa=26;break};case 3:{ia=a[x]|0;na=(ia&1)==0;if(na){Ia=(ia&255)>>>1}else{Ia=c[E>>2]|0}W=a[y]|0;ka=(W&1)==0;if(ka){Ja=(W&255)>>>1}else{Ja=c[g>>2]|0}if((Ia|0)==(0-Ja|0)){ca=r;da=R;ea=Q;fa=P;ga=S;ha=T}else{if(na){Ka=(ia&255)>>>1}else{Ka=c[E>>2]|0}if((Ka|0)!=0){if(ka){La=(W&255)>>>1}else{La=c[g>>2]|0}if((La|0)!=0){ka=c[e>>2]|0;la=c[ka+12>>2]|0;wa=c[ka+16>>2]|0;if((la|0)==(wa|0)){Ma=Mg[c[(c[ka>>2]|0)+36>>2]&127](ka)|0;Na=c[e>>2]|0;Oa=Ma;Pa=a[x]|0;Qa=Na;Ra=c[Na+12>>2]|0;Sa=c[Na+16>>2]|0}else{Oa=d[la]|0;Pa=ia;Qa=ka;Ra=la;Sa=wa}wa=Qa+12|0;la=(Ra|0)==(Sa|0);if((Oa&255)<<24>>24==(a[(Pa&1)==0?D:c[F>>2]|0]|0)){if(la){Mg[c[(c[Qa>>2]|0)+40>>2]&127](Qa)|0}else{c[wa>>2]=Ra+1}wa=a[x]|0;if((wa&1)==0){Ta=(wa&255)>>>1}else{Ta=c[E>>2]|0}ca=r;da=R;ea=Q;fa=P;ga=Ta>>>0>1?x:S;ha=T;break b}if(la){Ua=Mg[c[(c[Qa>>2]|0)+36>>2]&127](Qa)|0}else{Ua=d[Ra]|0}if(!((Ua&255)<<24>>24==(a[(a[y]&1)==0?m:c[C>>2]|0]|0))){aa=112;break a}la=c[e>>2]|0;wa=la+12|0;ka=c[wa>>2]|0;if((ka|0)==(c[la+16>>2]|0)){Mg[c[(c[la>>2]|0)+40>>2]&127](la)|0}else{c[wa>>2]=ka+1}a[l]=1;ka=a[y]|0;if((ka&1)==0){Va=(ka&255)>>>1}else{Va=c[g>>2]|0}ca=r;da=R;ea=Q;fa=P;ga=Va>>>0>1?y:S;ha=T;break b}}if(na){Wa=(ia&255)>>>1}else{Wa=c[E>>2]|0}na=c[e>>2]|0;ka=c[na+12>>2]|0;wa=(ka|0)==(c[na+16>>2]|0);if((Wa|0)==0){if(wa){la=Mg[c[(c[na>>2]|0)+36>>2]&127](na)|0;Xa=la;Ya=a[y]|0}else{Xa=d[ka]|0;Ya=W}if(!((Xa&255)<<24>>24==(a[(Ya&1)==0?m:c[C>>2]|0]|0))){ca=r;da=R;ea=Q;fa=P;ga=S;ha=T;break b}W=c[e>>2]|0;la=W+12|0;Na=c[la>>2]|0;if((Na|0)==(c[W+16>>2]|0)){Mg[c[(c[W>>2]|0)+40>>2]&127](W)|0}else{c[la>>2]=Na+1}a[l]=1;Na=a[y]|0;if((Na&1)==0){Za=(Na&255)>>>1}else{Za=c[g>>2]|0}ca=r;da=R;ea=Q;fa=P;ga=Za>>>0>1?y:S;ha=T;break b}if(wa){wa=Mg[c[(c[na>>2]|0)+36>>2]&127](na)|0;_a=wa;$a=a[x]|0}else{_a=d[ka]|0;$a=ia}if(!((_a&255)<<24>>24==(a[($a&1)==0?D:c[F>>2]|0]|0))){a[l]=1;ca=r;da=R;ea=Q;fa=P;ga=S;ha=T;break b}ia=c[e>>2]|0;ka=ia+12|0;wa=c[ka>>2]|0;if((wa|0)==(c[ia+16>>2]|0)){Mg[c[(c[ia>>2]|0)+40>>2]&127](ia)|0}else{c[ka>>2]=wa+1}wa=a[x]|0;if((wa&1)==0){ab=(wa&255)>>>1}else{ab=c[E>>2]|0}ca=r;da=R;ea=Q;fa=P;ga=ab>>>0>1?x:S;ha=T}break};case 4:{wa=r;ka=Q;ia=P;na=R;Na=0;la=T;e:while(1){W=c[e>>2]|0;do{if((W|0)!=0){if((c[W+12>>2]|0)==(c[W+16>>2]|0)){if((Mg[c[(c[W>>2]|0)+36>>2]&127](W)|0)==-1){c[e>>2]=0;bb=0;break}else{bb=c[e>>2]|0;break}}else{bb=W}}else{bb=0}}while(0);W=(bb|0)==0;ja=c[f>>2]|0;do{if((ja|0)!=0){if((c[ja+12>>2]|0)!=(c[ja+16>>2]|0)){if(W){break}else{break e}}if(!((Mg[c[(c[ja>>2]|0)+36>>2]&127](ja)|0)==-1)){if(W){break}else{break e}}else{c[f>>2]=0;aa=173;break}}else{aa=173}}while(0);if((aa|0)==173?(aa=0,W):0){break}ja=c[e>>2]|0;Ma=c[ja+12>>2]|0;if((Ma|0)==(c[ja+16>>2]|0)){cb=Mg[c[(c[ja>>2]|0)+36>>2]&127](ja)|0}else{cb=d[Ma]|0}Ma=cb&255;if(Ma<<24>>24>-1?!((b[(c[h>>2]|0)+(cb<<24>>24<<1)>>1]&2048)==0):0){ja=c[o>>2]|0;if((ja|0)==(wa|0)){db=(c[N>>2]|0)!=167;eb=c[n>>2]|0;fb=wa-eb|0;gb=fb>>>0<2147483647?fb<<1:-1;hb=pv(db?eb:0,gb)|0;if((hb|0)==0){aa=182;break a}if(!db){db=c[n>>2]|0;c[n>>2]=hb;if((db|0)==0){ib=hb}else{Kg[c[N>>2]&255](db);ib=c[n>>2]|0}}else{c[n>>2]=hb;ib=hb}c[N>>2]=168;hb=ib+fb|0;c[o>>2]=hb;jb=hb;kb=(c[n>>2]|0)+gb|0}else{jb=ja;kb=wa}c[o>>2]=jb+1;a[jb]=Ma;lb=kb;mb=na;nb=ka;ob=ia;pb=Na+1|0;qb=la}else{ja=a[v]|0;if((ja&1)==0){rb=(ja&255)>>>1}else{rb=c[O>>2]|0}if((rb|0)==0|(Na|0)==0){break}if(!(Ma<<24>>24==(a[u]|0))){break}if((ka|0)==(ia|0)){Ma=ka-na|0;ja=Ma>>>0<2147483647?Ma<<1:-1;if((la|0)==167){sb=0}else{sb=na}gb=pv(sb,ja)|0;if((gb|0)==0){aa=198;break a}tb=gb+(Ma>>2<<2)|0;ub=gb;vb=gb+(ja>>>2<<2)|0;wb=168}else{tb=ka;ub=na;vb=ia;wb=la}c[tb>>2]=Na;lb=wa;mb=ub;nb=tb+4|0;ob=vb;pb=0;qb=wb}ja=c[e>>2]|0;gb=ja+12|0;Ma=c[gb>>2]|0;if((Ma|0)==(c[ja+16>>2]|0)){Mg[c[(c[ja>>2]|0)+40>>2]&127](ja)|0;wa=lb;ka=nb;ia=ob;na=mb;Na=pb;la=qb;continue}else{c[gb>>2]=Ma+1;wa=lb;ka=nb;ia=ob;na=mb;Na=pb;la=qb;continue}}if((na|0)==(ka|0)|(Na|0)==0){xb=na;yb=ka;zb=ia;Ab=la}else{if((ka|0)==(ia|0)){Ma=ka-na|0;gb=Ma>>>0<2147483647?Ma<<1:-1;if((la|0)==167){Bb=0}else{Bb=na}ja=pv(Bb,gb)|0;if((ja|0)==0){aa=209;break a}Cb=ja+(Ma>>2<<2)|0;Db=ja;Eb=ja+(gb>>>2<<2)|0;Fb=168}else{Cb=ka;Db=na;Eb=ia;Fb=la}c[Cb>>2]=Na;xb=Db;yb=Cb+4|0;zb=Eb;Ab=Fb}gb=c[A>>2]|0;if((gb|0)>0){ja=c[e>>2]|0;do{if((ja|0)!=0){if((c[ja+12>>2]|0)==(c[ja+16>>2]|0)){if((Mg[c[(c[ja>>2]|0)+36>>2]&127](ja)|0)==-1){c[e>>2]=0;Gb=0;break}else{Gb=c[e>>2]|0;break}}else{Gb=ja}}else{Gb=0}}while(0);ja=(Gb|0)==0;Na=c[f>>2]|0;do{if((Na|0)!=0){if((c[Na+12>>2]|0)!=(c[Na+16>>2]|0)){if(ja){Hb=Na;break}else{aa=229;break a}}if(!((Mg[c[(c[Na>>2]|0)+36>>2]&127](Na)|0)==-1)){if(ja){Hb=Na;break}else{aa=229;break a}}else{c[f>>2]=0;aa=223;break}}else{aa=223}}while(0);if((aa|0)==223){aa=0;if(ja){aa=229;break a}else{Hb=0}}Na=c[e>>2]|0;la=c[Na+12>>2]|0;if((la|0)==(c[Na+16>>2]|0)){Ib=Mg[c[(c[Na>>2]|0)+36>>2]&127](Na)|0}else{Ib=d[la]|0}if(!((Ib&255)<<24>>24==(a[t]|0))){aa=229;break a}la=c[e>>2]|0;Na=la+12|0;ia=c[Na>>2]|0;if((ia|0)==(c[la+16>>2]|0)){Mg[c[(c[la>>2]|0)+40>>2]&127](la)|0;Jb=Hb;Kb=Hb;Lb=wa;Mb=gb}else{c[Na>>2]=ia+1;Jb=Hb;Kb=Hb;Lb=wa;Mb=gb}while(1){ia=c[e>>2]|0;do{if((ia|0)!=0){if((c[ia+12>>2]|0)==(c[ia+16>>2]|0)){if((Mg[c[(c[ia>>2]|0)+36>>2]&127](ia)|0)==-1){c[e>>2]=0;Nb=0;break}else{Nb=c[e>>2]|0;break}}else{Nb=ia}}else{Nb=0}}while(0);ia=(Nb|0)==0;do{if((Kb|0)!=0){if((c[Kb+12>>2]|0)!=(c[Kb+16>>2]|0)){if(ia){Ob=Jb;Pb=Kb;break}else{aa=250;break a}}if(!((Mg[c[(c[Kb>>2]|0)+36>>2]&127](Kb)|0)==-1)){if(ia^(Jb|0)==0){Ob=Jb;Pb=Jb;break}else{aa=250;break a}}else{c[f>>2]=0;Qb=0;aa=243;break}}else{Qb=Jb;aa=243}}while(0);if((aa|0)==243){aa=0;if(ia){aa=250;break a}else{Ob=Qb;Pb=0}}W=c[e>>2]|0;Na=c[W+12>>2]|0;if((Na|0)==(c[W+16>>2]|0)){Rb=Mg[c[(c[W>>2]|0)+36>>2]&127](W)|0}else{Rb=d[Na]|0}if(!((Rb&255)<<24>>24>-1)){aa=250;break a}if((b[(c[h>>2]|0)+(Rb<<24>>24<<1)>>1]&2048)==0){aa=250;break a}Na=c[o>>2]|0;if((Na|0)==(Lb|0)){W=(c[N>>2]|0)!=167;la=c[n>>2]|0;na=Lb-la|0;ka=na>>>0<2147483647?na<<1:-1;Ma=pv(W?la:0,ka)|0;if((Ma|0)==0){aa=253;break a}if(!W){W=c[n>>2]|0;c[n>>2]=Ma;if((W|0)==0){Sb=Ma}else{Kg[c[N>>2]&255](W);Sb=c[n>>2]|0}}else{c[n>>2]=Ma;Sb=Ma}c[N>>2]=168;Ma=Sb+na|0;c[o>>2]=Ma;Tb=Ma;Ub=(c[n>>2]|0)+ka|0}else{Tb=Na;Ub=Lb}Na=c[e>>2]|0;ka=c[Na+12>>2]|0;if((ka|0)==(c[Na+16>>2]|0)){Ma=Mg[c[(c[Na>>2]|0)+36>>2]&127](Na)|0;Vb=Ma;Wb=c[o>>2]|0}else{Vb=d[ka]|0;Wb=Tb}c[o>>2]=Wb+1;a[Wb]=Vb;ka=Mb+ -1|0;c[A>>2]=ka;Ma=c[e>>2]|0;Na=Ma+12|0;na=c[Na>>2]|0;if((na|0)==(c[Ma+16>>2]|0)){Mg[c[(c[Ma>>2]|0)+40>>2]&127](Ma)|0}else{c[Na>>2]=na+1}if((ka|0)>0){Jb=Ob;Kb=Pb;Lb=Ub;Mb=ka}else{Xb=Ub;break}}}else{Xb=wa}if((c[o>>2]|0)==(c[n>>2]|0)){aa=267;break a}else{ca=Xb;da=xb;ea=yb;fa=zb;ga=S;ha=Ab}break};default:{ca=r;da=R;ea=Q;fa=P;ga=S;ha=T}}}while(0);f:do{if((aa|0)==26){aa=0;if((p|0)==3){Y=R;Z=Q;_=S;$=T;aa=269;break a}else{Yb=X;Zb=X}while(1){U=c[e>>2]|0;do{if((U|0)!=0){if((c[U+12>>2]|0)==(c[U+16>>2]|0)){if((Mg[c[(c[U>>2]|0)+36>>2]&127](U)|0)==-1){c[e>>2]=0;_b=0;break}else{_b=c[e>>2]|0;break}}else{_b=U}}else{_b=0}}while(0);U=(_b|0)==0;do{if((Zb|0)!=0){if((c[Zb+12>>2]|0)!=(c[Zb+16>>2]|0)){if(U){$b=Yb;ac=Zb;break}else{ca=r;da=R;ea=Q;fa=P;ga=S;ha=T;break f}}if(!((Mg[c[(c[Zb>>2]|0)+36>>2]&127](Zb)|0)==-1)){if(U^(Yb|0)==0){$b=Yb;ac=Yb;break}else{ca=r;da=R;ea=Q;fa=P;ga=S;ha=T;break f}}else{c[f>>2]=0;bc=0;aa=37;break}}else{bc=Yb;aa=37}}while(0);if((aa|0)==37){aa=0;if(U){ca=r;da=R;ea=Q;fa=P;ga=S;ha=T;break f}else{$b=bc;ac=0}}ia=c[e>>2]|0;gb=c[ia+12>>2]|0;if((gb|0)==(c[ia+16>>2]|0)){cc=Mg[c[(c[ia>>2]|0)+36>>2]&127](ia)|0}else{cc=d[gb]|0}if(!((cc&255)<<24>>24>-1)){ca=r;da=R;ea=Q;fa=P;ga=S;ha=T;break f}if((b[(c[h>>2]|0)+(cc<<24>>24<<1)>>1]&8192)==0){ca=r;da=R;ea=Q;fa=P;ga=S;ha=T;break f}gb=c[e>>2]|0;ia=gb+12|0;ja=c[ia>>2]|0;if((ja|0)==(c[gb+16>>2]|0)){dc=Mg[c[(c[gb>>2]|0)+40>>2]&127](gb)|0}else{c[ia>>2]=ja+1;dc=d[ja]|0}Xm(z,dc&255);Yb=$b;Zb=ac}}}while(0);wa=p+1|0;if(wa>>>0<4){P=fa;Q=ea;R=da;r=ca;p=wa;S=ga;T=ha}else{Y=da;Z=ea;_=ga;$=ha;aa=269;break}}g:do{if((aa|0)==25){c[k>>2]=c[k>>2]|4;ec=0;fc=R;gc=T}else if((aa|0)==112){c[k>>2]=c[k>>2]|4;ec=0;fc=R;gc=T}else if((aa|0)==162){c[k>>2]=c[k>>2]|4;ec=0;fc=R;gc=T}else if((aa|0)==182){Av()}else if((aa|0)==198){Av()}else if((aa|0)==209){Av()}else if((aa|0)==229){c[k>>2]=c[k>>2]|4;ec=0;fc=xb;gc=Ab}else if((aa|0)==250){c[k>>2]=c[k>>2]|4;ec=0;fc=xb;gc=Ab}else if((aa|0)==253){Av()}else if((aa|0)==267){c[k>>2]=c[k>>2]|4;ec=0;fc=xb;gc=Ab}else if((aa|0)==269){h:do{if((_|0)!=0){ha=_+1|0;ga=_+8|0;ea=_+4|0;da=1;i:while(1){S=a[_]|0;if((S&1)==0){hc=(S&255)>>>1}else{hc=c[ea>>2]|0}if(!(da>>>0<hc>>>0)){break h}S=c[e>>2]|0;do{if((S|0)!=0){if((c[S+12>>2]|0)==(c[S+16>>2]|0)){if((Mg[c[(c[S>>2]|0)+36>>2]&127](S)|0)==-1){c[e>>2]=0;ic=0;break}else{ic=c[e>>2]|0;break}}else{ic=S}}else{ic=0}}while(0);S=(ic|0)==0;U=c[f>>2]|0;do{if((U|0)!=0){if((c[U+12>>2]|0)!=(c[U+16>>2]|0)){if(S){break}else{break i}}if(!((Mg[c[(c[U>>2]|0)+36>>2]&127](U)|0)==-1)){if(S){break}else{break i}}else{c[f>>2]=0;aa=285;break}}else{aa=285}}while(0);if((aa|0)==285?(aa=0,S):0){break}U=c[e>>2]|0;p=c[U+12>>2]|0;if((p|0)==(c[U+16>>2]|0)){jc=Mg[c[(c[U>>2]|0)+36>>2]&127](U)|0}else{jc=d[p]|0}if((a[_]&1)==0){kc=ha}else{kc=c[ga>>2]|0}if(!((jc&255)<<24>>24==(a[kc+da|0]|0))){break}p=da+1|0;U=c[e>>2]|0;ca=U+12|0;r=c[ca>>2]|0;if((r|0)==(c[U+16>>2]|0)){Mg[c[(c[U>>2]|0)+40>>2]&127](U)|0;da=p;continue}else{c[ca>>2]=r+1;da=p;continue}}c[k>>2]=c[k>>2]|4;ec=0;fc=Y;gc=$;break g}}while(0);if((Y|0)!=(Z|0)){c[B>>2]=0;Kr(v,Y,Z,B);if((c[B>>2]|0)==0){ec=1;fc=Y;gc=$}else{c[k>>2]=c[k>>2]|4;ec=0;fc=Y;gc=$}}else{ec=1;fc=Z;gc=$}}}while(0);Rm(z);Rm(y);Rm(x);Rm(w);Rm(v);if((fc|0)==0){i=q;return ec|0}Kg[gc&255](fc);i=q;return ec|0}function Gr(a){a=a|0;var b=0;b=Wd(8)|0;ym(b,a);qg(b|0,19072,70)}function Hr(b,d,e,f,g,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;d=i;i=i+144|0;l=d;m=d+40|0;n=d+16|0;o=d+24|0;p=d+28|0;q=d+36|0;r=d+32|0;c[n>>2]=m;s=n+4|0;c[s>>2]=167;t=m+100|0;ln(p,h);m=c[p>>2]|0;if(!((c[5536]|0)==-1)){c[l>>2]=22144;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22144,l,166)}u=(c[22148>>2]|0)+ -1|0;v=c[m+8>>2]|0;if(!((c[m+12>>2]|0)-v>>2>>>0>u>>>0)){w=Wd(4)|0;Tu(w);qg(w|0,30104,152)}m=c[v+(u<<2)>>2]|0;if((m|0)==0){w=Wd(4)|0;Tu(w);qg(w|0,30104,152)}a[q]=0;w=c[f>>2]|0;c[r>>2]=w;u=c[h+4>>2]|0;c[l+0>>2]=c[r+0>>2];if(Fr(e,l,g,p,u,j,q,m,n,o,t)|0){if((a[k]&1)==0){a[k+1|0]=0;a[k]=0}else{a[c[k+8>>2]|0]=0;c[k+4>>2]=0}if((a[q]|0)!=0){Xm(k,ch[c[(c[m>>2]|0)+28>>2]&31](m,45)|0)}q=ch[c[(c[m>>2]|0)+28>>2]&31](m,48)|0;m=c[n>>2]|0;t=c[o>>2]|0;o=t+ -1|0;a:do{if(m>>>0<o>>>0){u=m;while(1){g=u+1|0;if(!((a[u]|0)==q<<24>>24)){x=u;break a}if(g>>>0<o>>>0){u=g}else{x=g;break}}}else{x=m}}while(0);Ir(k,x,t)|0}t=c[e>>2]|0;if((t|0)!=0){if((c[t+12>>2]|0)==(c[t+16>>2]|0)?(Mg[c[(c[t>>2]|0)+36>>2]&127](t)|0)==-1:0){c[e>>2]=0;y=0}else{y=t}}else{y=0}t=(y|0)==0;do{if((w|0)!=0){if((c[w+12>>2]|0)!=(c[w+16>>2]|0)){if(t){break}else{z=27;break}}if(!((Mg[c[(c[w>>2]|0)+36>>2]&127](w)|0)==-1)){if(t^(w|0)==0){break}else{z=27;break}}else{c[f>>2]=0;z=25;break}}else{z=25}}while(0);if((z|0)==25?t:0){z=27}if((z|0)==27){c[j>>2]=c[j>>2]|2}c[b>>2]=y;sm(c[p>>2]|0)|0;p=c[n>>2]|0;c[n>>2]=0;if((p|0)==0){i=d;return}Kg[c[s>>2]&255](p);i=d;return}function Ir(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;f=i;g=d;h=a[b]|0;if((h&1)==0){j=10;k=(h&255)>>>1;l=h}else{h=c[b>>2]|0;j=(h&-2)+ -1|0;k=c[b+4>>2]|0;l=h&255}h=e-g|0;if((e|0)==(d|0)){i=f;return b|0}if((j-k|0)>>>0<h>>>0){_m(b,j,k+h-j|0,k,k,0,0);m=a[b]|0}else{m=l}if((m&1)==0){n=b+1|0}else{n=c[b+8>>2]|0}m=e+(k-g)|0;g=d;d=n+k|0;while(1){a[d]=a[g]|0;g=g+1|0;if((g|0)==(e|0)){break}else{d=d+1|0}}a[n+m|0]=0;m=k+h|0;if((a[b]&1)==0){a[b]=m<<1;i=f;return b|0}else{c[b+4>>2]=m;i=f;return b|0}return 0}function Jr(b,d,e,f,g,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;n=i;i=i+128|0;o=n;p=n+100|0;q=n+88|0;r=n+76|0;s=n+64|0;t=n+104|0;u=n+36|0;v=n+24|0;w=n+12|0;x=n+40|0;y=n+52|0;if(b){b=c[d>>2]|0;if(!((c[5396]|0)==-1)){c[o>>2]=21584;c[o+4>>2]=165;c[o+8>>2]=0;Mm(21584,o,166)}z=(c[21588>>2]|0)+ -1|0;A=c[b+8>>2]|0;if(!((c[b+12>>2]|0)-A>>2>>>0>z>>>0)){B=Wd(4)|0;Tu(B);qg(B|0,30104,152)}b=c[A+(z<<2)>>2]|0;if((b|0)==0){B=Wd(4)|0;Tu(B);qg(B|0,30104,152)}Lg[c[(c[b>>2]|0)+44>>2]&127](p,b);B=c[p>>2]|0;a[e]=B;a[e+1|0]=B>>8;a[e+2|0]=B>>16;a[e+3|0]=B>>24;Lg[c[(c[b>>2]|0)+32>>2]&127](q,b);if((a[l]&1)==0){a[l+1|0]=0;a[l]=0}else{a[c[l+8>>2]|0]=0;c[l+4>>2]=0}Wm(l,0);c[l+0>>2]=c[q+0>>2];c[l+4>>2]=c[q+4>>2];c[l+8>>2]=c[q+8>>2];c[q+0>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;Rm(q);Lg[c[(c[b>>2]|0)+28>>2]&127](r,b);if((a[k]&1)==0){a[k+1|0]=0;a[k]=0}else{a[c[k+8>>2]|0]=0;c[k+4>>2]=0}Wm(k,0);c[k+0>>2]=c[r+0>>2];c[k+4>>2]=c[r+4>>2];c[k+8>>2]=c[r+8>>2];c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;Rm(r);a[f]=Mg[c[(c[b>>2]|0)+12>>2]&127](b)|0;a[g]=Mg[c[(c[b>>2]|0)+16>>2]&127](b)|0;Lg[c[(c[b>>2]|0)+20>>2]&127](s,b);if((a[h]&1)==0){a[h+1|0]=0;a[h]=0}else{a[c[h+8>>2]|0]=0;c[h+4>>2]=0}Wm(h,0);c[h+0>>2]=c[s+0>>2];c[h+4>>2]=c[s+4>>2];c[h+8>>2]=c[s+8>>2];c[s+0>>2]=0;c[s+4>>2]=0;c[s+8>>2]=0;Rm(s);Lg[c[(c[b>>2]|0)+24>>2]&127](t,b);if((a[j]&1)==0){a[j+1|0]=0;a[j]=0}else{a[c[j+8>>2]|0]=0;c[j+4>>2]=0}Wm(j,0);c[j+0>>2]=c[t+0>>2];c[j+4>>2]=c[t+4>>2];c[j+8>>2]=c[t+8>>2];c[t+0>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;Rm(t);C=Mg[c[(c[b>>2]|0)+36>>2]&127](b)|0;c[m>>2]=C;i=n;return}else{b=c[d>>2]|0;if(!((c[5380]|0)==-1)){c[o>>2]=21520;c[o+4>>2]=165;c[o+8>>2]=0;Mm(21520,o,166)}o=(c[21524>>2]|0)+ -1|0;d=c[b+8>>2]|0;if(!((c[b+12>>2]|0)-d>>2>>>0>o>>>0)){D=Wd(4)|0;Tu(D);qg(D|0,30104,152)}b=c[d+(o<<2)>>2]|0;if((b|0)==0){D=Wd(4)|0;Tu(D);qg(D|0,30104,152)}Lg[c[(c[b>>2]|0)+44>>2]&127](u,b);D=c[u>>2]|0;a[e]=D;a[e+1|0]=D>>8;a[e+2|0]=D>>16;a[e+3|0]=D>>24;Lg[c[(c[b>>2]|0)+32>>2]&127](v,b);if((a[l]&1)==0){a[l+1|0]=0;a[l]=0}else{a[c[l+8>>2]|0]=0;c[l+4>>2]=0}Wm(l,0);c[l+0>>2]=c[v+0>>2];c[l+4>>2]=c[v+4>>2];c[l+8>>2]=c[v+8>>2];c[v+0>>2]=0;c[v+4>>2]=0;c[v+8>>2]=0;Rm(v);Lg[c[(c[b>>2]|0)+28>>2]&127](w,b);if((a[k]&1)==0){a[k+1|0]=0;a[k]=0}else{a[c[k+8>>2]|0]=0;c[k+4>>2]=0}Wm(k,0);c[k+0>>2]=c[w+0>>2];c[k+4>>2]=c[w+4>>2];c[k+8>>2]=c[w+8>>2];c[w+0>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;Rm(w);a[f]=Mg[c[(c[b>>2]|0)+12>>2]&127](b)|0;a[g]=Mg[c[(c[b>>2]|0)+16>>2]&127](b)|0;Lg[c[(c[b>>2]|0)+20>>2]&127](x,b);if((a[h]&1)==0){a[h+1|0]=0;a[h]=0}else{a[c[h+8>>2]|0]=0;c[h+4>>2]=0}Wm(h,0);c[h+0>>2]=c[x+0>>2];c[h+4>>2]=c[x+4>>2];c[h+8>>2]=c[x+8>>2];c[x+0>>2]=0;c[x+4>>2]=0;c[x+8>>2]=0;Rm(x);Lg[c[(c[b>>2]|0)+24>>2]&127](y,b);if((a[j]&1)==0){a[j+1|0]=0;a[j]=0}else{a[c[j+8>>2]|0]=0;c[j+4>>2]=0}Wm(j,0);c[j+0>>2]=c[y+0>>2];c[j+4>>2]=c[y+4>>2];c[j+8>>2]=c[y+8>>2];c[y+0>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;Rm(y);C=Mg[c[(c[b>>2]|0)+36>>2]&127](b)|0;c[m>>2]=C;i=n;return}}function Kr(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;g=i;h=a[b]|0;if((h&1)==0){j=(h&255)>>>1}else{j=c[b+4>>2]|0}if((j|0)==0){i=g;return}if((d|0)!=(e|0)?(j=e+ -4|0,j>>>0>d>>>0):0){k=d;l=j;do{j=c[k>>2]|0;c[k>>2]=c[l>>2];c[l>>2]=j;k=k+4|0;l=l+ -4|0}while(k>>>0<l>>>0);m=a[b]|0}else{m=h}if((m&1)==0){n=b+1|0;o=(m&255)>>>1}else{n=c[b+8>>2]|0;o=c[b+4>>2]|0}b=e+ -4|0;e=a[n]|0;m=e<<24>>24<1|e<<24>>24==127;a:do{if(b>>>0>d>>>0){h=n+o|0;l=e;k=n;j=d;p=m;while(1){if(!p?(l<<24>>24|0)!=(c[j>>2]|0):0){break}q=(h-k|0)>1?k+1|0:k;r=j+4|0;s=a[q]|0;t=s<<24>>24<1|s<<24>>24==127;if(r>>>0<b>>>0){l=s;k=q;j=r;p=t}else{u=s;v=t;break a}}c[f>>2]=4;i=g;return}else{u=e;v=m}}while(0);if(v){i=g;return}v=c[b>>2]|0;if(!(u<<24>>24>>>0<v>>>0|(v|0)==0)){i=g;return}c[f>>2]=4;i=g;return}function Lr(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function Mr(a){a=a|0;return}function Nr(b,d,e,f,g,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;d=i;i=i+576|0;l=d;m=d+72|0;n=d+64|0;o=d+60|0;p=d+56|0;q=d+572|0;r=d+12|0;s=d+16|0;t=d+472|0;c[n>>2]=m;u=n+4|0;c[u>>2]=167;v=m+400|0;ln(p,h);m=c[p>>2]|0;if(!((c[5534]|0)==-1)){c[l>>2]=22136;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22136,l,166)}w=(c[22140>>2]|0)+ -1|0;x=c[m+8>>2]|0;if(!((c[m+12>>2]|0)-x>>2>>>0>w>>>0)){y=Wd(4)|0;Tu(y);qg(y|0,30104,152)}m=c[x+(w<<2)>>2]|0;if((m|0)==0){y=Wd(4)|0;Tu(y);qg(y|0,30104,152)}a[q]=0;c[r>>2]=c[f>>2];y=c[h+4>>2]|0;c[l+0>>2]=c[r+0>>2];if(Or(e,l,g,p,y,j,q,m,n,o,v)|0){fh[c[(c[m>>2]|0)+48>>2]&15](m,21840,21850|0,s)|0;m=c[o>>2]|0;v=c[n>>2]|0;y=m-v|0;if((y|0)>392){g=nv((y>>2)+2|0)|0;if((g|0)==0){Av()}else{z=g;A=g}}else{z=0;A=t}if((a[q]|0)==0){B=A}else{a[A]=45;B=A+1|0}if(v>>>0<m>>>0){m=s+40|0;A=s;q=B;g=v;while(1){v=c[g>>2]|0;y=s;while(1){r=y+4|0;if((c[y>>2]|0)==(v|0)){C=y;break}if((r|0)==(m|0)){C=m;break}else{y=r}}a[q]=a[21840+(C-A>>2)|0]|0;y=g+4|0;v=q+1|0;if(y>>>0<(c[o>>2]|0)>>>0){q=v;g=y}else{D=v;break}}}else{D=B}a[D]=0;c[l>>2]=k;if((Ff(t|0,21776,l|0)|0)!=1){l=Wd(8)|0;ym(l,21784);qg(l|0,19072,70)}if((z|0)!=0){ov(z)}}z=c[e>>2]|0;do{if((z|0)!=0){l=c[z+12>>2]|0;if((l|0)==(c[z+16>>2]|0)){E=Mg[c[(c[z>>2]|0)+36>>2]&127](z)|0}else{E=c[l>>2]|0}if((E|0)==-1){c[e>>2]=0;F=1;break}else{F=(c[e>>2]|0)==0;break}}else{F=1}}while(0);E=c[f>>2]|0;do{if((E|0)!=0){z=c[E+12>>2]|0;if((z|0)==(c[E+16>>2]|0)){G=Mg[c[(c[E>>2]|0)+36>>2]&127](E)|0}else{G=c[z>>2]|0}if(!((G|0)==-1)){if(F){break}else{H=37;break}}else{c[f>>2]=0;H=35;break}}else{H=35}}while(0);if((H|0)==35?F:0){H=37}if((H|0)==37){c[j>>2]=c[j>>2]|2}c[b>>2]=c[e>>2];sm(c[p>>2]|0)|0;p=c[n>>2]|0;c[n>>2]=0;if((p|0)==0){i=d;return}Kg[c[u>>2]&255](p);i=d;return}function Or(b,e,f,g,h,j,k,l,m,n,o){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,sc=0,tc=0;p=i;i=i+480|0;q=p+80|0;r=p+76|0;s=p+72|0;t=p+68|0;u=p+56|0;v=p+44|0;w=p+28|0;x=p+16|0;y=p+4|0;z=p;A=p+40|0;c[r>>2]=0;c[u+0>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;c[v+0>>2]=0;c[v+4>>2]=0;c[v+8>>2]=0;c[w+0>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;c[x+0>>2]=0;c[x+4>>2]=0;c[x+8>>2]=0;c[y+0>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;Rr(f,g,r,s,t,u,v,w,x,z);c[n>>2]=c[m>>2];g=x+4|0;f=x+8|0;B=w+4|0;C=w+8|0;D=(h&512|0)!=0;h=v+4|0;E=v+8|0;F=y+4|0;G=y+8|0;H=r+3|0;I=m+4|0;J=u+4|0;K=q+400|0;L=q;M=q;q=o;o=0;N=0;O=167;a:while(1){P=c[b>>2]|0;do{if((P|0)!=0){Q=c[P+12>>2]|0;if((Q|0)==(c[P+16>>2]|0)){R=Mg[c[(c[P>>2]|0)+36>>2]&127](P)|0}else{R=c[Q>>2]|0}if((R|0)==-1){c[b>>2]=0;S=1;break}else{S=(c[b>>2]|0)==0;break}}else{S=1}}while(0);P=c[e>>2]|0;do{if((P|0)!=0){Q=c[P+12>>2]|0;if((Q|0)==(c[P+16>>2]|0)){T=Mg[c[(c[P>>2]|0)+36>>2]&127](P)|0}else{T=c[Q>>2]|0}if(!((T|0)==-1)){if(S){U=P;break}else{V=M;W=L;X=N;Y=O;Z=292;break a}}else{c[e>>2]=0;Z=15;break}}else{Z=15}}while(0);if((Z|0)==15){Z=0;if(S){V=M;W=L;X=N;Y=O;Z=292;break}else{U=0}}b:do{switch(a[r+o|0]|0){case 4:{P=q;Q=L;_=K;$=M;aa=0;ba=O;c:while(1){ca=c[b>>2]|0;do{if((ca|0)!=0){da=c[ca+12>>2]|0;if((da|0)==(c[ca+16>>2]|0)){ea=Mg[c[(c[ca>>2]|0)+36>>2]&127](ca)|0}else{ea=c[da>>2]|0}if((ea|0)==-1){c[b>>2]=0;fa=1;break}else{fa=(c[b>>2]|0)==0;break}}else{fa=1}}while(0);ca=c[e>>2]|0;do{if((ca|0)!=0){da=c[ca+12>>2]|0;if((da|0)==(c[ca+16>>2]|0)){ga=Mg[c[(c[ca>>2]|0)+36>>2]&127](ca)|0}else{ga=c[da>>2]|0}if(!((ga|0)==-1)){if(fa){break}else{break c}}else{c[e>>2]=0;Z=188;break}}else{Z=188}}while(0);if((Z|0)==188?(Z=0,fa):0){break}ca=c[b>>2]|0;da=c[ca+12>>2]|0;if((da|0)==(c[ca+16>>2]|0)){ha=Mg[c[(c[ca>>2]|0)+36>>2]&127](ca)|0}else{ha=c[da>>2]|0}if(Sg[c[(c[l>>2]|0)+12>>2]&31](l,2048,ha)|0){da=c[n>>2]|0;if((da|0)==(P|0)){ca=(c[I>>2]|0)!=167;ia=c[m>>2]|0;ja=P-ia|0;ka=ja>>>0<2147483647?ja<<1:-1;la=ja>>2;if(ca){ma=ia}else{ma=0}ia=pv(ma,ka)|0;if((ia|0)==0){Z=198;break a}if(!ca){ca=c[m>>2]|0;c[m>>2]=ia;if((ca|0)==0){na=ia}else{Kg[c[I>>2]&255](ca);na=c[m>>2]|0}}else{c[m>>2]=ia;na=ia}c[I>>2]=168;ia=na+(la<<2)|0;c[n>>2]=ia;oa=ia;pa=(c[m>>2]|0)+(ka>>>2<<2)|0}else{oa=da;pa=P}c[n>>2]=oa+4;c[oa>>2]=ha;qa=pa;ra=$;sa=Q;ta=_;ua=aa+1|0;va=ba}else{da=a[u]|0;if((da&1)==0){wa=(da&255)>>>1}else{wa=c[J>>2]|0}if((wa|0)==0|(aa|0)==0){break}if((ha|0)!=(c[t>>2]|0)){break}if((Q|0)==(_|0)){da=Q-$|0;ka=da>>>0<2147483647?da<<1:-1;if((ba|0)!=167){xa=$}else{xa=0}ia=pv(xa,ka)|0;if((ia|0)==0){Z=214;break a}ya=ia+(da>>2<<2)|0;za=ia;Aa=ia+(ka>>>2<<2)|0;Ba=168}else{ya=Q;za=$;Aa=_;Ba=ba}c[ya>>2]=aa;qa=P;ra=za;sa=ya+4|0;ta=Aa;ua=0;va=Ba}ka=c[b>>2]|0;ia=ka+12|0;da=c[ia>>2]|0;if((da|0)==(c[ka+16>>2]|0)){Mg[c[(c[ka>>2]|0)+40>>2]&127](ka)|0;P=qa;Q=sa;_=ta;$=ra;aa=ua;ba=va;continue}else{c[ia>>2]=da+4;P=qa;Q=sa;_=ta;$=ra;aa=ua;ba=va;continue}}if(($|0)==(Q|0)|(aa|0)==0){Ca=$;Da=Q;Ea=_;Fa=ba}else{if((Q|0)==(_|0)){da=Q-$|0;ia=da>>>0<2147483647?da<<1:-1;if((ba|0)!=167){Ga=$}else{Ga=0}ka=pv(Ga,ia)|0;if((ka|0)==0){Z=225;break a}Ha=ka+(da>>2<<2)|0;Ia=ka;Ja=ka+(ia>>>2<<2)|0;Ka=168}else{Ha=Q;Ia=$;Ja=_;Ka=ba}c[Ha>>2]=aa;Ca=Ia;Da=Ha+4|0;Ea=Ja;Fa=Ka}ia=c[z>>2]|0;if((ia|0)>0){ka=c[b>>2]|0;do{if((ka|0)!=0){da=c[ka+12>>2]|0;if((da|0)==(c[ka+16>>2]|0)){La=Mg[c[(c[ka>>2]|0)+36>>2]&127](ka)|0}else{La=c[da>>2]|0}if((La|0)==-1){c[b>>2]=0;Ma=1;break}else{Ma=(c[b>>2]|0)==0;break}}else{Ma=1}}while(0);ka=c[e>>2]|0;do{if((ka|0)!=0){aa=c[ka+12>>2]|0;if((aa|0)==(c[ka+16>>2]|0)){Na=Mg[c[(c[ka>>2]|0)+36>>2]&127](ka)|0}else{Na=c[aa>>2]|0}if(!((Na|0)==-1)){if(Ma){Oa=ka;break}else{Z=248;break a}}else{c[e>>2]=0;Z=242;break}}else{Z=242}}while(0);if((Z|0)==242){Z=0;if(Ma){Z=248;break a}else{Oa=0}}ka=c[b>>2]|0;aa=c[ka+12>>2]|0;if((aa|0)==(c[ka+16>>2]|0)){Pa=Mg[c[(c[ka>>2]|0)+36>>2]&127](ka)|0}else{Pa=c[aa>>2]|0}if((Pa|0)!=(c[s>>2]|0)){Z=248;break a}aa=c[b>>2]|0;ka=aa+12|0;ba=c[ka>>2]|0;if((ba|0)==(c[aa+16>>2]|0)){Mg[c[(c[aa>>2]|0)+40>>2]&127](aa)|0;Qa=Oa;Ra=Oa;Sa=P;Ta=ia}else{c[ka>>2]=ba+4;Qa=Oa;Ra=Oa;Sa=P;Ta=ia}while(1){ba=c[b>>2]|0;do{if((ba|0)!=0){ka=c[ba+12>>2]|0;if((ka|0)==(c[ba+16>>2]|0)){Ua=Mg[c[(c[ba>>2]|0)+36>>2]&127](ba)|0}else{Ua=c[ka>>2]|0}if((Ua|0)==-1){c[b>>2]=0;Va=1;break}else{Va=(c[b>>2]|0)==0;break}}else{Va=1}}while(0);do{if((Ra|0)!=0){ba=c[Ra+12>>2]|0;if((ba|0)==(c[Ra+16>>2]|0)){Wa=Mg[c[(c[Ra>>2]|0)+36>>2]&127](Ra)|0}else{Wa=c[ba>>2]|0}if(!((Wa|0)==-1)){if(Va^(Qa|0)==0){Xa=Qa;Ya=Qa;break}else{Z=271;break a}}else{c[e>>2]=0;Za=0;Z=265;break}}else{Za=Qa;Z=265}}while(0);if((Z|0)==265){Z=0;if(Va){Z=271;break a}else{Xa=Za;Ya=0}}ba=c[b>>2]|0;ka=c[ba+12>>2]|0;if((ka|0)==(c[ba+16>>2]|0)){_a=Mg[c[(c[ba>>2]|0)+36>>2]&127](ba)|0}else{_a=c[ka>>2]|0}if(!(Sg[c[(c[l>>2]|0)+12>>2]&31](l,2048,_a)|0)){Z=271;break a}ka=c[n>>2]|0;if((ka|0)==(Sa|0)){ba=(c[I>>2]|0)!=167;aa=c[m>>2]|0;_=Sa-aa|0;$=_>>>0<2147483647?_<<1:-1;Q=_>>2;if(ba){$a=aa}else{$a=0}aa=pv($a,$)|0;if((aa|0)==0){Z=276;break a}if(!ba){ba=c[m>>2]|0;c[m>>2]=aa;if((ba|0)==0){ab=aa}else{Kg[c[I>>2]&255](ba);ab=c[m>>2]|0}}else{c[m>>2]=aa;ab=aa}c[I>>2]=168;aa=ab+(Q<<2)|0;c[n>>2]=aa;bb=aa;cb=(c[m>>2]|0)+($>>>2<<2)|0}else{bb=ka;cb=Sa}ka=c[b>>2]|0;$=c[ka+12>>2]|0;if(($|0)==(c[ka+16>>2]|0)){aa=Mg[c[(c[ka>>2]|0)+36>>2]&127](ka)|0;db=aa;eb=c[n>>2]|0}else{db=c[$>>2]|0;eb=bb}c[n>>2]=eb+4;c[eb>>2]=db;$=Ta+ -1|0;c[z>>2]=$;aa=c[b>>2]|0;ka=aa+12|0;Q=c[ka>>2]|0;if((Q|0)==(c[aa+16>>2]|0)){Mg[c[(c[aa>>2]|0)+40>>2]&127](aa)|0}else{c[ka>>2]=Q+4}if(($|0)>0){Qa=Xa;Ra=Ya;Sa=cb;Ta=$}else{fb=cb;break}}}else{fb=P}if((c[n>>2]|0)==(c[m>>2]|0)){Z=290;break a}else{gb=fb;hb=Ca;ib=Da;jb=Ea;kb=N;lb=Fa}break};case 0:{Z=28;break};case 2:{if(!((N|0)!=0|o>>>0<2)){if((o|0)==2){mb=(a[H]|0)!=0}else{mb=0}if(!(D|mb)){gb=q;hb=M;ib=L;jb=K;kb=0;lb=O;break b}}ia=a[v]|0;$=(ia&1)==0?h:c[E>>2]|0;d:do{if((o|0)!=0?(d[r+(o+ -1)|0]|0)<2:0){Q=ia;ka=$;while(1){if((Q&1)==0){nb=h;ob=(Q&255)>>>1}else{nb=c[E>>2]|0;ob=c[h>>2]|0}if((ka|0)==(nb+(ob<<2)|0)){pb=Q;break}if(!(Sg[c[(c[l>>2]|0)+12>>2]&31](l,8192,c[ka>>2]|0)|0)){Z=129;break}Q=a[v]|0;ka=ka+4|0}if((Z|0)==129){Z=0;pb=a[v]|0}Q=(pb&1)==0;aa=ka-(Q?h:c[E>>2]|0)>>2;ba=a[y]|0;_=(ba&1)==0;if(_){qb=(ba&255)>>>1}else{qb=c[F>>2]|0}e:do{if(!(aa>>>0>qb>>>0)){if(_){rb=F;sb=(ba&255)>>>1;tb=F+(((ba&255)>>>1)-aa<<2)|0}else{da=c[G>>2]|0;la=c[F>>2]|0;rb=da;sb=la;tb=da+(la-aa<<2)|0}la=rb+(sb<<2)|0;if((tb|0)==(la|0)){ub=U;vb=pb;wb=ka;xb=U;break d}else{yb=tb;zb=Q?h:c[E>>2]|0}while(1){if((c[yb>>2]|0)!=(c[zb>>2]|0)){break e}da=yb+4|0;if((da|0)==(la|0)){ub=U;vb=pb;wb=ka;xb=U;break d}yb=da;zb=zb+4|0}}}while(0);ub=U;vb=pb;wb=Q?h:c[E>>2]|0;xb=U}else{ub=U;vb=ia;wb=$;xb=U}}while(0);f:while(1){if((vb&1)==0){Ab=h;Bb=(vb&255)>>>1}else{Ab=c[E>>2]|0;Bb=c[h>>2]|0}if((wb|0)==(Ab+(Bb<<2)|0)){break}$=c[b>>2]|0;do{if(($|0)!=0){ia=c[$+12>>2]|0;if((ia|0)==(c[$+16>>2]|0)){Cb=Mg[c[(c[$>>2]|0)+36>>2]&127]($)|0}else{Cb=c[ia>>2]|0}if((Cb|0)==-1){c[b>>2]=0;Db=1;break}else{Db=(c[b>>2]|0)==0;break}}else{Db=1}}while(0);do{if((xb|0)!=0){$=c[xb+12>>2]|0;if(($|0)==(c[xb+16>>2]|0)){Eb=Mg[c[(c[xb>>2]|0)+36>>2]&127](xb)|0}else{Eb=c[$>>2]|0}if(!((Eb|0)==-1)){if(Db^(ub|0)==0){Fb=ub;Gb=ub;break}else{break f}}else{c[e>>2]=0;Hb=0;Z=159;break}}else{Hb=ub;Z=159}}while(0);if((Z|0)==159){Z=0;if(Db){break}else{Fb=Hb;Gb=0}}$=c[b>>2]|0;Q=c[$+12>>2]|0;if((Q|0)==(c[$+16>>2]|0)){Ib=Mg[c[(c[$>>2]|0)+36>>2]&127]($)|0}else{Ib=c[Q>>2]|0}if((Ib|0)!=(c[wb>>2]|0)){break}Q=c[b>>2]|0;$=Q+12|0;ia=c[$>>2]|0;if((ia|0)==(c[Q+16>>2]|0)){Mg[c[(c[Q>>2]|0)+40>>2]&127](Q)|0}else{c[$>>2]=ia+4}ub=Fb;vb=a[v]|0;wb=wb+4|0;xb=Gb}if(D){ia=a[v]|0;if((ia&1)==0){Jb=h;Kb=(ia&255)>>>1}else{Jb=c[E>>2]|0;Kb=c[h>>2]|0}if((wb|0)!=(Jb+(Kb<<2)|0)){Z=174;break a}else{gb=q;hb=M;ib=L;jb=K;kb=N;lb=O}}else{gb=q;hb=M;ib=L;jb=K;kb=N;lb=O}break};case 3:{ia=a[w]|0;$=(ia&1)==0;if($){Lb=(ia&255)>>>1}else{Lb=c[B>>2]|0}Q=a[x]|0;P=(Q&1)==0;if(P){Mb=(Q&255)>>>1}else{Mb=c[g>>2]|0}if((Lb|0)==(0-Mb|0)){gb=q;hb=M;ib=L;jb=K;kb=N;lb=O}else{if($){Nb=(ia&255)>>>1}else{Nb=c[B>>2]|0}if((Nb|0)!=0){if(P){Ob=(Q&255)>>>1}else{Ob=c[g>>2]|0}if((Ob|0)!=0){P=c[b>>2]|0;ka=c[P+12>>2]|0;if((ka|0)==(c[P+16>>2]|0)){aa=Mg[c[(c[P>>2]|0)+36>>2]&127](P)|0;Pb=aa;Qb=a[w]|0}else{Pb=c[ka>>2]|0;Qb=ia}ka=c[b>>2]|0;aa=ka+12|0;P=c[aa>>2]|0;ba=(P|0)==(c[ka+16>>2]|0);if((Pb|0)==(c[((Qb&1)==0?B:c[C>>2]|0)>>2]|0)){if(ba){Mg[c[(c[ka>>2]|0)+40>>2]&127](ka)|0}else{c[aa>>2]=P+4}aa=a[w]|0;if((aa&1)==0){Rb=(aa&255)>>>1}else{Rb=c[B>>2]|0}gb=q;hb=M;ib=L;jb=K;kb=Rb>>>0>1?w:N;lb=O;break b}if(ba){Sb=Mg[c[(c[ka>>2]|0)+36>>2]&127](ka)|0}else{Sb=c[P>>2]|0}if((Sb|0)!=(c[((a[x]&1)==0?g:c[f>>2]|0)>>2]|0)){Z=116;break a}P=c[b>>2]|0;ka=P+12|0;ba=c[ka>>2]|0;if((ba|0)==(c[P+16>>2]|0)){Mg[c[(c[P>>2]|0)+40>>2]&127](P)|0}else{c[ka>>2]=ba+4}a[k]=1;ba=a[x]|0;if((ba&1)==0){Tb=(ba&255)>>>1}else{Tb=c[g>>2]|0}gb=q;hb=M;ib=L;jb=K;kb=Tb>>>0>1?x:N;lb=O;break b}}if($){Ub=(ia&255)>>>1}else{Ub=c[B>>2]|0}$=c[b>>2]|0;ba=c[$+12>>2]|0;ka=(ba|0)==(c[$+16>>2]|0);if((Ub|0)==0){if(ka){P=Mg[c[(c[$>>2]|0)+36>>2]&127]($)|0;Vb=P;Wb=a[x]|0}else{Vb=c[ba>>2]|0;Wb=Q}if((Vb|0)!=(c[((Wb&1)==0?g:c[f>>2]|0)>>2]|0)){gb=q;hb=M;ib=L;jb=K;kb=N;lb=O;break b}Q=c[b>>2]|0;P=Q+12|0;aa=c[P>>2]|0;if((aa|0)==(c[Q+16>>2]|0)){Mg[c[(c[Q>>2]|0)+40>>2]&127](Q)|0}else{c[P>>2]=aa+4}a[k]=1;aa=a[x]|0;if((aa&1)==0){Xb=(aa&255)>>>1}else{Xb=c[g>>2]|0}gb=q;hb=M;ib=L;jb=K;kb=Xb>>>0>1?x:N;lb=O;break b}if(ka){ka=Mg[c[(c[$>>2]|0)+36>>2]&127]($)|0;Yb=ka;Zb=a[w]|0}else{Yb=c[ba>>2]|0;Zb=ia}if((Yb|0)!=(c[((Zb&1)==0?B:c[C>>2]|0)>>2]|0)){a[k]=1;gb=q;hb=M;ib=L;jb=K;kb=N;lb=O;break b}ia=c[b>>2]|0;ba=ia+12|0;ka=c[ba>>2]|0;if((ka|0)==(c[ia+16>>2]|0)){Mg[c[(c[ia>>2]|0)+40>>2]&127](ia)|0}else{c[ba>>2]=ka+4}ka=a[w]|0;if((ka&1)==0){_b=(ka&255)>>>1}else{_b=c[B>>2]|0}gb=q;hb=M;ib=L;jb=K;kb=_b>>>0>1?w:N;lb=O}break};case 1:{if((o|0)==3){V=M;W=L;X=N;Y=O;Z=292;break a}ka=c[b>>2]|0;ba=c[ka+12>>2]|0;if((ba|0)==(c[ka+16>>2]|0)){$b=Mg[c[(c[ka>>2]|0)+36>>2]&127](ka)|0}else{$b=c[ba>>2]|0}if(!(Sg[c[(c[l>>2]|0)+12>>2]&31](l,8192,$b)|0)){Z=27;break a}ba=c[b>>2]|0;ka=ba+12|0;ia=c[ka>>2]|0;if((ia|0)==(c[ba+16>>2]|0)){ac=Mg[c[(c[ba>>2]|0)+40>>2]&127](ba)|0}else{c[ka>>2]=ia+4;ac=c[ia>>2]|0}fn(y,ac);Z=28;break};default:{gb=q;hb=M;ib=L;jb=K;kb=N;lb=O}}}while(0);g:do{if((Z|0)==28){Z=0;if((o|0)==3){V=M;W=L;X=N;Y=O;Z=292;break a}else{bc=U;cc=U}while(1){ia=c[b>>2]|0;do{if((ia|0)!=0){ka=c[ia+12>>2]|0;if((ka|0)==(c[ia+16>>2]|0)){dc=Mg[c[(c[ia>>2]|0)+36>>2]&127](ia)|0}else{dc=c[ka>>2]|0}if((dc|0)==-1){c[b>>2]=0;ec=1;break}else{ec=(c[b>>2]|0)==0;break}}else{ec=1}}while(0);do{if((cc|0)!=0){ia=c[cc+12>>2]|0;if((ia|0)==(c[cc+16>>2]|0)){fc=Mg[c[(c[cc>>2]|0)+36>>2]&127](cc)|0}else{fc=c[ia>>2]|0}if(!((fc|0)==-1)){if(ec^(bc|0)==0){gc=bc;hc=bc;break}else{gb=q;hb=M;ib=L;jb=K;kb=N;lb=O;break g}}else{c[e>>2]=0;ic=0;Z=42;break}}else{ic=bc;Z=42}}while(0);if((Z|0)==42){Z=0;if(ec){gb=q;hb=M;ib=L;jb=K;kb=N;lb=O;break g}else{gc=ic;hc=0}}ia=c[b>>2]|0;ka=c[ia+12>>2]|0;if((ka|0)==(c[ia+16>>2]|0)){jc=Mg[c[(c[ia>>2]|0)+36>>2]&127](ia)|0}else{jc=c[ka>>2]|0}if(!(Sg[c[(c[l>>2]|0)+12>>2]&31](l,8192,jc)|0)){gb=q;hb=M;ib=L;jb=K;kb=N;lb=O;break g}ka=c[b>>2]|0;ia=ka+12|0;ba=c[ia>>2]|0;if((ba|0)==(c[ka+16>>2]|0)){kc=Mg[c[(c[ka>>2]|0)+40>>2]&127](ka)|0}else{c[ia>>2]=ba+4;kc=c[ba>>2]|0}fn(y,kc);bc=gc;cc=hc}}}while(0);ba=o+1|0;if(ba>>>0<4){K=jb;L=ib;M=hb;q=gb;o=ba;N=kb;O=lb}else{V=hb;W=ib;X=kb;Y=lb;Z=292;break}}h:do{if((Z|0)==27){c[j>>2]=c[j>>2]|4;lc=0;mc=M;nc=O}else if((Z|0)==116){c[j>>2]=c[j>>2]|4;lc=0;mc=M;nc=O}else if((Z|0)==174){c[j>>2]=c[j>>2]|4;lc=0;mc=M;nc=O}else if((Z|0)==198){Av()}else if((Z|0)==214){Av()}else if((Z|0)==225){Av()}else if((Z|0)==248){c[j>>2]=c[j>>2]|4;lc=0;mc=Ca;nc=Fa}else if((Z|0)==271){c[j>>2]=c[j>>2]|4;lc=0;mc=Ca;nc=Fa}else if((Z|0)==276){Av()}else if((Z|0)==290){c[j>>2]=c[j>>2]|4;lc=0;mc=Ca;nc=Fa}else if((Z|0)==292){i:do{if((X|0)!=0){lb=X+4|0;kb=X+8|0;ib=1;j:while(1){hb=a[X]|0;if((hb&1)==0){oc=(hb&255)>>>1}else{oc=c[lb>>2]|0}if(!(ib>>>0<oc>>>0)){break i}hb=c[b>>2]|0;do{if((hb|0)!=0){N=c[hb+12>>2]|0;if((N|0)==(c[hb+16>>2]|0)){pc=Mg[c[(c[hb>>2]|0)+36>>2]&127](hb)|0}else{pc=c[N>>2]|0}if((pc|0)==-1){c[b>>2]=0;qc=1;break}else{qc=(c[b>>2]|0)==0;break}}else{qc=1}}while(0);hb=c[e>>2]|0;do{if((hb|0)!=0){N=c[hb+12>>2]|0;if((N|0)==(c[hb+16>>2]|0)){rc=Mg[c[(c[hb>>2]|0)+36>>2]&127](hb)|0}else{rc=c[N>>2]|0}if(!((rc|0)==-1)){if(qc){break}else{break j}}else{c[e>>2]=0;Z=311;break}}else{Z=311}}while(0);if((Z|0)==311?(Z=0,qc):0){break}hb=c[b>>2]|0;N=c[hb+12>>2]|0;if((N|0)==(c[hb+16>>2]|0)){sc=Mg[c[(c[hb>>2]|0)+36>>2]&127](hb)|0}else{sc=c[N>>2]|0}if((a[X]&1)==0){tc=lb}else{tc=c[kb>>2]|0}if((sc|0)!=(c[tc+(ib<<2)>>2]|0)){break}N=ib+1|0;hb=c[b>>2]|0;o=hb+12|0;gb=c[o>>2]|0;if((gb|0)==(c[hb+16>>2]|0)){Mg[c[(c[hb>>2]|0)+40>>2]&127](hb)|0;ib=N;continue}else{c[o>>2]=gb+4;ib=N;continue}}c[j>>2]=c[j>>2]|4;lc=0;mc=V;nc=Y;break h}}while(0);if((V|0)!=(W|0)){c[A>>2]=0;Kr(u,V,W,A);if((c[A>>2]|0)==0){lc=1;mc=V;nc=Y}else{c[j>>2]=c[j>>2]|4;lc=0;mc=V;nc=Y}}else{lc=1;mc=W;nc=Y}}}while(0);bn(y);bn(x);bn(w);bn(v);Rm(u);if((mc|0)==0){i=p;return lc|0}Kg[nc&255](mc);i=p;return lc|0}function Pr(b,d,e,f,g,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;d=i;i=i+448|0;l=d;m=d+40|0;n=d+16|0;o=d+24|0;p=d+28|0;q=d+440|0;r=d+32|0;c[n>>2]=m;s=n+4|0;c[s>>2]=167;t=m+400|0;ln(p,h);m=c[p>>2]|0;if(!((c[5534]|0)==-1)){c[l>>2]=22136;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22136,l,166)}u=(c[22140>>2]|0)+ -1|0;v=c[m+8>>2]|0;if(!((c[m+12>>2]|0)-v>>2>>>0>u>>>0)){w=Wd(4)|0;Tu(w);qg(w|0,30104,152)}m=c[v+(u<<2)>>2]|0;if((m|0)==0){w=Wd(4)|0;Tu(w);qg(w|0,30104,152)}a[q]=0;w=c[f>>2]|0;c[r>>2]=w;u=c[h+4>>2]|0;c[l+0>>2]=c[r+0>>2];if(Or(e,l,g,p,u,j,q,m,n,o,t)|0){if((a[k]&1)==0){c[k+4>>2]=0;a[k]=0}else{c[c[k+8>>2]>>2]=0;c[k+4>>2]=0}if((a[q]|0)!=0){fn(k,ch[c[(c[m>>2]|0)+44>>2]&31](m,45)|0)}q=ch[c[(c[m>>2]|0)+44>>2]&31](m,48)|0;m=c[n>>2]|0;t=c[o>>2]|0;o=t+ -4|0;a:do{if(m>>>0<o>>>0){u=m;while(1){g=u+4|0;if((c[u>>2]|0)!=(q|0)){x=u;break a}if(g>>>0<o>>>0){u=g}else{x=g;break}}}else{x=m}}while(0);Qr(k,x,t)|0}t=c[e>>2]|0;do{if((t|0)!=0){x=c[t+12>>2]|0;if((x|0)==(c[t+16>>2]|0)){y=Mg[c[(c[t>>2]|0)+36>>2]&127](t)|0}else{y=c[x>>2]|0}if((y|0)==-1){c[e>>2]=0;z=1;break}else{z=(c[e>>2]|0)==0;break}}else{z=1}}while(0);do{if((w|0)!=0){y=c[w+12>>2]|0;if((y|0)==(c[w+16>>2]|0)){A=Mg[c[(c[w>>2]|0)+36>>2]&127](w)|0}else{A=c[y>>2]|0}if(!((A|0)==-1)){if(z){break}else{B=31;break}}else{c[f>>2]=0;B=29;break}}else{B=29}}while(0);if((B|0)==29?z:0){B=31}if((B|0)==31){c[j>>2]=c[j>>2]|2}c[b>>2]=c[e>>2];sm(c[p>>2]|0)|0;p=c[n>>2]|0;c[n>>2]=0;if((p|0)==0){i=d;return}Kg[c[s>>2]&255](p);i=d;return}function Qr(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;g=d;h=a[b]|0;if((h&1)==0){j=1;k=(h&255)>>>1;l=h}else{h=c[b>>2]|0;j=(h&-2)+ -1|0;k=c[b+4>>2]|0;l=h&255}h=e-g>>2;if((h|0)==0){i=f;return b|0}if((j-k|0)>>>0<h>>>0){hn(b,j,k+h-j|0,k,k,0,0);m=a[b]|0}else{m=l}if((m&1)==0){n=b+4|0}else{n=c[b+8>>2]|0}m=n+(k<<2)|0;if((d|0)==(e|0)){o=m}else{l=k+((e+ -4+(0-g)|0)>>>2)+1|0;g=d;d=m;while(1){c[d>>2]=c[g>>2];g=g+4|0;if((g|0)==(e|0)){break}else{d=d+4|0}}o=n+(l<<2)|0}c[o>>2]=0;o=k+h|0;if((a[b]&1)==0){a[b]=o<<1;i=f;return b|0}else{c[b+4>>2]=o;i=f;return b|0}return 0}function Rr(b,d,e,f,g,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;n=i;i=i+128|0;o=n;p=n+100|0;q=n+88|0;r=n+76|0;s=n+64|0;t=n+104|0;u=n+36|0;v=n+24|0;w=n+12|0;x=n+40|0;y=n+52|0;if(b){b=c[d>>2]|0;if(!((c[5428]|0)==-1)){c[o>>2]=21712;c[o+4>>2]=165;c[o+8>>2]=0;Mm(21712,o,166)}z=(c[21716>>2]|0)+ -1|0;A=c[b+8>>2]|0;if(!((c[b+12>>2]|0)-A>>2>>>0>z>>>0)){B=Wd(4)|0;Tu(B);qg(B|0,30104,152)}b=c[A+(z<<2)>>2]|0;if((b|0)==0){B=Wd(4)|0;Tu(B);qg(B|0,30104,152)}Lg[c[(c[b>>2]|0)+44>>2]&127](p,b);B=c[p>>2]|0;a[e]=B;a[e+1|0]=B>>8;a[e+2|0]=B>>16;a[e+3|0]=B>>24;Lg[c[(c[b>>2]|0)+32>>2]&127](q,b);if((a[l]&1)==0){c[l+4>>2]=0;a[l]=0}else{c[c[l+8>>2]>>2]=0;c[l+4>>2]=0}en(l,0);c[l+0>>2]=c[q+0>>2];c[l+4>>2]=c[q+4>>2];c[l+8>>2]=c[q+8>>2];c[q+0>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;bn(q);Lg[c[(c[b>>2]|0)+28>>2]&127](r,b);if((a[k]&1)==0){c[k+4>>2]=0;a[k]=0}else{c[c[k+8>>2]>>2]=0;c[k+4>>2]=0}en(k,0);c[k+0>>2]=c[r+0>>2];c[k+4>>2]=c[r+4>>2];c[k+8>>2]=c[r+8>>2];c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;bn(r);c[f>>2]=Mg[c[(c[b>>2]|0)+12>>2]&127](b)|0;c[g>>2]=Mg[c[(c[b>>2]|0)+16>>2]&127](b)|0;Lg[c[(c[b>>2]|0)+20>>2]&127](s,b);if((a[h]&1)==0){a[h+1|0]=0;a[h]=0}else{a[c[h+8>>2]|0]=0;c[h+4>>2]=0}Wm(h,0);c[h+0>>2]=c[s+0>>2];c[h+4>>2]=c[s+4>>2];c[h+8>>2]=c[s+8>>2];c[s+0>>2]=0;c[s+4>>2]=0;c[s+8>>2]=0;Rm(s);Lg[c[(c[b>>2]|0)+24>>2]&127](t,b);if((a[j]&1)==0){c[j+4>>2]=0;a[j]=0}else{c[c[j+8>>2]>>2]=0;c[j+4>>2]=0}en(j,0);c[j+0>>2]=c[t+0>>2];c[j+4>>2]=c[t+4>>2];c[j+8>>2]=c[t+8>>2];c[t+0>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;bn(t);C=Mg[c[(c[b>>2]|0)+36>>2]&127](b)|0;c[m>>2]=C;i=n;return}else{b=c[d>>2]|0;if(!((c[5412]|0)==-1)){c[o>>2]=21648;c[o+4>>2]=165;c[o+8>>2]=0;Mm(21648,o,166)}o=(c[21652>>2]|0)+ -1|0;d=c[b+8>>2]|0;if(!((c[b+12>>2]|0)-d>>2>>>0>o>>>0)){D=Wd(4)|0;Tu(D);qg(D|0,30104,152)}b=c[d+(o<<2)>>2]|0;if((b|0)==0){D=Wd(4)|0;Tu(D);qg(D|0,30104,152)}Lg[c[(c[b>>2]|0)+44>>2]&127](u,b);D=c[u>>2]|0;a[e]=D;a[e+1|0]=D>>8;a[e+2|0]=D>>16;a[e+3|0]=D>>24;Lg[c[(c[b>>2]|0)+32>>2]&127](v,b);if((a[l]&1)==0){c[l+4>>2]=0;a[l]=0}else{c[c[l+8>>2]>>2]=0;c[l+4>>2]=0}en(l,0);c[l+0>>2]=c[v+0>>2];c[l+4>>2]=c[v+4>>2];c[l+8>>2]=c[v+8>>2];c[v+0>>2]=0;c[v+4>>2]=0;c[v+8>>2]=0;bn(v);Lg[c[(c[b>>2]|0)+28>>2]&127](w,b);if((a[k]&1)==0){c[k+4>>2]=0;a[k]=0}else{c[c[k+8>>2]>>2]=0;c[k+4>>2]=0}en(k,0);c[k+0>>2]=c[w+0>>2];c[k+4>>2]=c[w+4>>2];c[k+8>>2]=c[w+8>>2];c[w+0>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;bn(w);c[f>>2]=Mg[c[(c[b>>2]|0)+12>>2]&127](b)|0;c[g>>2]=Mg[c[(c[b>>2]|0)+16>>2]&127](b)|0;Lg[c[(c[b>>2]|0)+20>>2]&127](x,b);if((a[h]&1)==0){a[h+1|0]=0;a[h]=0}else{a[c[h+8>>2]|0]=0;c[h+4>>2]=0}Wm(h,0);c[h+0>>2]=c[x+0>>2];c[h+4>>2]=c[x+4>>2];c[h+8>>2]=c[x+8>>2];c[x+0>>2]=0;c[x+4>>2]=0;c[x+8>>2]=0;Rm(x);Lg[c[(c[b>>2]|0)+24>>2]&127](y,b);if((a[j]&1)==0){c[j+4>>2]=0;a[j]=0}else{c[c[j+8>>2]>>2]=0;c[j+4>>2]=0}en(j,0);c[j+0>>2]=c[y+0>>2];c[j+4>>2]=c[y+4>>2];c[j+8>>2]=c[y+8>>2];c[y+0>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;bn(y);C=Mg[c[(c[b>>2]|0)+36>>2]&127](b)|0;c[m>>2]=C;i=n;return}}function Sr(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function Tr(a){a=a|0;return}function Ur(b,d,e,f,g,j,l){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;l=+l;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0;d=i;i=i+384|0;m=d;n=d+276|0;o=d+52|0;p=d+176|0;q=d+60|0;r=d+56|0;s=d+376|0;t=d+377|0;u=d+64|0;v=d+32|0;w=d+20|0;x=d+16|0;y=d+76|0;z=d+12|0;A=d+44|0;B=d+48|0;c[o>>2]=n;h[k>>3]=l;c[m>>2]=c[k>>2];c[m+4>>2]=c[k+4>>2];C=je(n|0,100,21896,m|0)|0;if(C>>>0>99){if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}n=c[5508]|0;h[k>>3]=l;c[m>>2]=c[k>>2];c[m+4>>2]=c[k+4>>2];D=Pp(o,n,21896,m)|0;n=c[o>>2]|0;if((n|0)==0){Av()}E=nv(D)|0;if((E|0)==0){Av()}else{F=E;G=n;H=E;I=D}}else{F=0;G=0;H=p;I=C}ln(q,g);C=c[q>>2]|0;if(!((c[5536]|0)==-1)){c[m>>2]=22144;c[m+4>>2]=165;c[m+8>>2]=0;Mm(22144,m,166)}p=(c[22148>>2]|0)+ -1|0;D=c[C+8>>2]|0;if(!((c[C+12>>2]|0)-D>>2>>>0>p>>>0)){J=Wd(4)|0;Tu(J);qg(J|0,30104,152)}C=c[D+(p<<2)>>2]|0;if((C|0)==0){J=Wd(4)|0;Tu(J);qg(J|0,30104,152)}J=c[o>>2]|0;fh[c[(c[C>>2]|0)+32>>2]&15](C,J,J+I|0,H)|0;if((I|0)==0){K=0}else{K=(a[c[o>>2]|0]|0)==45}c[r>>2]=0;c[u+0>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;c[v+0>>2]=0;c[v+4>>2]=0;c[v+8>>2]=0;c[w+0>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;Vr(f,K,q,r,s,t,u,v,w,x);f=c[x>>2]|0;if((I|0)>(f|0)){x=a[w]|0;if((x&1)==0){L=(x&255)>>>1}else{L=c[w+4>>2]|0}x=a[v]|0;if((x&1)==0){M=(x&255)>>>1}else{M=c[v+4>>2]|0}N=L+(I-f<<1|1)+M|0}else{M=a[w]|0;if((M&1)==0){O=(M&255)>>>1}else{O=c[w+4>>2]|0}M=a[v]|0;if((M&1)==0){P=(M&255)>>>1}else{P=c[v+4>>2]|0}N=O+2+P|0}P=N+f|0;if(P>>>0>100){N=nv(P)|0;if((N|0)==0){Av()}else{Q=N;R=N}}else{Q=0;R=y}Wr(R,z,A,c[g+4>>2]|0,H,H+I|0,C,K,r,a[s]|0,a[t]|0,u,v,w,f);c[B>>2]=c[e>>2];e=c[z>>2]|0;z=c[A>>2]|0;c[m+0>>2]=c[B+0>>2];gi(b,m,R,e,z,g,j);if((Q|0)!=0){ov(Q)}Rm(w);Rm(v);Rm(u);sm(c[q>>2]|0)|0;if((F|0)!=0){ov(F)}if((G|0)==0){i=d;return}ov(G);i=d;return}function Vr(b,d,e,f,g,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;n=i;i=i+128|0;o=n;p=n+108|0;q=n+96|0;r=n+92|0;s=n+80|0;t=n+68|0;u=n+112|0;v=n+40|0;w=n+28|0;x=n+24|0;y=n+12|0;z=n+44|0;A=n+56|0;B=c[e>>2]|0;if(b){if(!((c[5396]|0)==-1)){c[o>>2]=21584;c[o+4>>2]=165;c[o+8>>2]=0;Mm(21584,o,166)}b=(c[21588>>2]|0)+ -1|0;e=c[B+8>>2]|0;if(!((c[B+12>>2]|0)-e>>2>>>0>b>>>0)){C=Wd(4)|0;Tu(C);qg(C|0,30104,152)}D=c[e+(b<<2)>>2]|0;if((D|0)==0){C=Wd(4)|0;Tu(C);qg(C|0,30104,152)}C=c[D>>2]|0;if(d){Lg[c[C+44>>2]&127](p,D);b=c[p>>2]|0;a[f]=b;a[f+1|0]=b>>8;a[f+2|0]=b>>16;a[f+3|0]=b>>24;Lg[c[(c[D>>2]|0)+32>>2]&127](q,D);if((a[l]&1)==0){a[l+1|0]=0;a[l]=0}else{a[c[l+8>>2]|0]=0;c[l+4>>2]=0}Wm(l,0);c[l+0>>2]=c[q+0>>2];c[l+4>>2]=c[q+4>>2];c[l+8>>2]=c[q+8>>2];c[q+0>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;Rm(q)}else{Lg[c[C+40>>2]&127](r,D);C=c[r>>2]|0;a[f]=C;a[f+1|0]=C>>8;a[f+2|0]=C>>16;a[f+3|0]=C>>24;Lg[c[(c[D>>2]|0)+28>>2]&127](s,D);if((a[l]&1)==0){a[l+1|0]=0;a[l]=0}else{a[c[l+8>>2]|0]=0;c[l+4>>2]=0}Wm(l,0);c[l+0>>2]=c[s+0>>2];c[l+4>>2]=c[s+4>>2];c[l+8>>2]=c[s+8>>2];c[s+0>>2]=0;c[s+4>>2]=0;c[s+8>>2]=0;Rm(s)}a[g]=Mg[c[(c[D>>2]|0)+12>>2]&127](D)|0;a[h]=Mg[c[(c[D>>2]|0)+16>>2]&127](D)|0;Lg[c[(c[D>>2]|0)+20>>2]&127](t,D);if((a[j]&1)==0){a[j+1|0]=0;a[j]=0}else{a[c[j+8>>2]|0]=0;c[j+4>>2]=0}Wm(j,0);c[j+0>>2]=c[t+0>>2];c[j+4>>2]=c[t+4>>2];c[j+8>>2]=c[t+8>>2];c[t+0>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;Rm(t);Lg[c[(c[D>>2]|0)+24>>2]&127](u,D);if((a[k]&1)==0){a[k+1|0]=0;a[k]=0}else{a[c[k+8>>2]|0]=0;c[k+4>>2]=0}Wm(k,0);c[k+0>>2]=c[u+0>>2];c[k+4>>2]=c[u+4>>2];c[k+8>>2]=c[u+8>>2];c[u+0>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;Rm(u);E=Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0;c[m>>2]=E;i=n;return}else{if(!((c[5380]|0)==-1)){c[o>>2]=21520;c[o+4>>2]=165;c[o+8>>2]=0;Mm(21520,o,166)}o=(c[21524>>2]|0)+ -1|0;D=c[B+8>>2]|0;if(!((c[B+12>>2]|0)-D>>2>>>0>o>>>0)){F=Wd(4)|0;Tu(F);qg(F|0,30104,152)}B=c[D+(o<<2)>>2]|0;if((B|0)==0){F=Wd(4)|0;Tu(F);qg(F|0,30104,152)}F=c[B>>2]|0;if(d){Lg[c[F+44>>2]&127](v,B);d=c[v>>2]|0;a[f]=d;a[f+1|0]=d>>8;a[f+2|0]=d>>16;a[f+3|0]=d>>24;Lg[c[(c[B>>2]|0)+32>>2]&127](w,B);if((a[l]&1)==0){a[l+1|0]=0;a[l]=0}else{a[c[l+8>>2]|0]=0;c[l+4>>2]=0}Wm(l,0);c[l+0>>2]=c[w+0>>2];c[l+4>>2]=c[w+4>>2];c[l+8>>2]=c[w+8>>2];c[w+0>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;Rm(w)}else{Lg[c[F+40>>2]&127](x,B);F=c[x>>2]|0;a[f]=F;a[f+1|0]=F>>8;a[f+2|0]=F>>16;a[f+3|0]=F>>24;Lg[c[(c[B>>2]|0)+28>>2]&127](y,B);if((a[l]&1)==0){a[l+1|0]=0;a[l]=0}else{a[c[l+8>>2]|0]=0;c[l+4>>2]=0}Wm(l,0);c[l+0>>2]=c[y+0>>2];c[l+4>>2]=c[y+4>>2];c[l+8>>2]=c[y+8>>2];c[y+0>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;Rm(y)}a[g]=Mg[c[(c[B>>2]|0)+12>>2]&127](B)|0;a[h]=Mg[c[(c[B>>2]|0)+16>>2]&127](B)|0;Lg[c[(c[B>>2]|0)+20>>2]&127](z,B);if((a[j]&1)==0){a[j+1|0]=0;a[j]=0}else{a[c[j+8>>2]|0]=0;c[j+4>>2]=0}Wm(j,0);c[j+0>>2]=c[z+0>>2];c[j+4>>2]=c[z+4>>2];c[j+8>>2]=c[z+8>>2];c[z+0>>2]=0;c[z+4>>2]=0;c[z+8>>2]=0;Rm(z);Lg[c[(c[B>>2]|0)+24>>2]&127](A,B);if((a[k]&1)==0){a[k+1|0]=0;a[k]=0}else{a[c[k+8>>2]|0]=0;c[k+4>>2]=0}Wm(k,0);c[k+0>>2]=c[A+0>>2];c[k+4>>2]=c[A+4>>2];c[k+8>>2]=c[A+8>>2];c[A+0>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;Rm(A);E=Mg[c[(c[B>>2]|0)+36>>2]&127](B)|0;c[m>>2]=E;i=n;return}}function Wr(d,e,f,g,h,j,k,l,m,n,o,p,q,r,s){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;q=q|0;r=r|0;s=s|0;var t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0;t=i;c[f>>2]=d;u=r+1|0;v=r+8|0;w=r+4|0;x=(g&512|0)==0;y=q+1|0;z=q+8|0;A=q+4|0;B=(s|0)>0;C=p+1|0;D=p+8|0;E=p+4|0;F=k+8|0;G=0-s|0;H=h;h=0;while(1){switch(a[m+h|0]|0){case 1:{c[e>>2]=c[f>>2];I=ch[c[(c[k>>2]|0)+28>>2]&31](k,32)|0;J=c[f>>2]|0;c[f>>2]=J+1;a[J]=I;K=H;break};case 3:{I=a[r]|0;J=(I&1)==0;if(J){L=(I&255)>>>1}else{L=c[w>>2]|0}if((L|0)==0){K=H}else{if(J){M=u}else{M=c[v>>2]|0}J=a[M]|0;I=c[f>>2]|0;c[f>>2]=I+1;a[I]=J;K=H}break};case 0:{c[e>>2]=c[f>>2];K=H;break};case 4:{J=c[f>>2]|0;I=l?H+1|0:H;a:do{if(I>>>0<j>>>0){N=I;while(1){O=a[N]|0;if(!(O<<24>>24>-1)){P=N;break a}Q=N+1|0;if((b[(c[F>>2]|0)+(O<<24>>24<<1)>>1]&2048)==0){P=N;break a}if(Q>>>0<j>>>0){N=Q}else{P=Q;break}}}else{P=I}}while(0);N=P;if(B){if(P>>>0>I>>>0){Q=I+(0-N)|0;N=Q>>>0<G>>>0?G:Q;Q=N+s|0;O=J;R=P;S=s;while(1){T=R+ -1|0;U=a[T]|0;c[f>>2]=O+1;a[O]=U;U=S+ -1|0;V=(U|0)>0;if(!(T>>>0>I>>>0&V)){break}O=c[f>>2]|0;R=T;S=U}S=P+N|0;if(V){W=S;X=Q;Y=32}else{Z=0;_=S;$=Q}}else{W=P;X=s;Y=32}if((Y|0)==32){Y=0;Z=ch[c[(c[k>>2]|0)+28>>2]&31](k,48)|0;_=W;$=X}S=c[f>>2]|0;c[f>>2]=S+1;if(($|0)>0){R=S;O=$;while(1){a[R]=Z;U=O+ -1|0;T=c[f>>2]|0;c[f>>2]=T+1;if((U|0)>0){R=T;O=U}else{aa=T;break}}}else{aa=S}a[aa]=n;ba=_}else{ba=P}if((ba|0)==(I|0)){O=ch[c[(c[k>>2]|0)+28>>2]&31](k,48)|0;R=c[f>>2]|0;c[f>>2]=R+1;a[R]=O}else{O=a[p]|0;R=(O&1)==0;if(R){ca=(O&255)>>>1}else{ca=c[E>>2]|0}if((ca|0)==0){da=ba;ea=-1;fa=0;ga=0}else{if(R){ha=C}else{ha=c[D>>2]|0}da=ba;ea=a[ha]|0;fa=0;ga=0}while(1){if((ga|0)==(ea|0)){R=c[f>>2]|0;c[f>>2]=R+1;a[R]=o;R=fa+1|0;O=a[p]|0;Q=(O&1)==0;if(Q){ia=(O&255)>>>1}else{ia=c[E>>2]|0}if(R>>>0<ia>>>0){if(Q){ja=C}else{ja=c[D>>2]|0}if((a[ja+R|0]|0)==127){ka=-1;la=R;ma=0}else{if(Q){na=C}else{na=c[D>>2]|0}ka=a[na+R|0]|0;la=R;ma=0}}else{ka=ea;la=R;ma=0}}else{ka=ea;la=fa;ma=ga}da=da+ -1|0;R=a[da]|0;Q=c[f>>2]|0;c[f>>2]=Q+1;a[Q]=R;if((da|0)==(I|0)){break}else{ea=ka;fa=la;ga=ma+1|0}}}S=c[f>>2]|0;if((J|0)!=(S|0)?(R=S+ -1|0,R>>>0>J>>>0):0){S=J;Q=R;while(1){R=a[S]|0;a[S]=a[Q]|0;a[Q]=R;R=S+1|0;O=Q+ -1|0;if(R>>>0<O>>>0){S=R;Q=O}else{K=I;break}}}else{K=I}break};case 2:{Q=a[q]|0;S=(Q&1)==0;if(S){oa=(Q&255)>>>1}else{oa=c[A>>2]|0}if((oa|0)==0|x){K=H}else{if(S){pa=y;qa=(Q&255)>>>1}else{pa=c[z>>2]|0;qa=c[A>>2]|0}Q=pa+qa|0;S=c[f>>2]|0;if((pa|0)==(Q|0)){ra=S}else{J=S;S=pa;while(1){a[J]=a[S]|0;O=S+1|0;R=J+1|0;if((O|0)==(Q|0)){ra=R;break}else{J=R;S=O}}}c[f>>2]=ra;K=H}break};default:{K=H}}h=h+1|0;if((h|0)==4){break}else{H=K}}K=a[r]|0;r=(K&1)==0;if(r){sa=(K&255)>>>1}else{sa=c[w>>2]|0}if(sa>>>0>1){if(r){ta=u;ua=(K&255)>>>1}else{ta=c[v>>2]|0;ua=c[w>>2]|0}w=ta+1|0;v=ta+ua|0;ua=c[f>>2]|0;if((w|0)==(v|0)){va=ua}else{ta=ua;ua=w;while(1){a[ta]=a[ua]|0;w=ua+1|0;K=ta+1|0;if((w|0)==(v|0)){va=K;break}else{ta=K;ua=w}}}c[f>>2]=va}va=g&176;if((va|0)==16){i=t;return}else if((va|0)==32){c[e>>2]=c[f>>2];i=t;return}else{c[e>>2]=d;i=t;return}}function Xr(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0;d=i;i=i+176|0;k=d;l=d+52|0;m=d+56|0;n=d+172|0;o=d+173|0;p=d+40|0;q=d+60|0;r=d+20|0;s=d+16|0;t=d+72|0;u=d+12|0;v=d+32|0;w=d+36|0;ln(l,g);x=c[l>>2]|0;if(!((c[5536]|0)==-1)){c[k>>2]=22144;c[k+4>>2]=165;c[k+8>>2]=0;Mm(22144,k,166)}y=(c[22148>>2]|0)+ -1|0;z=c[x+8>>2]|0;if(!((c[x+12>>2]|0)-z>>2>>>0>y>>>0)){A=Wd(4)|0;Tu(A);qg(A|0,30104,152)}x=c[z+(y<<2)>>2]|0;if((x|0)==0){A=Wd(4)|0;Tu(A);qg(A|0,30104,152)}A=a[j]|0;y=(A&1)==0;if(y){B=(A&255)>>>1}else{B=c[j+4>>2]|0}if((B|0)==0){C=0}else{if(y){D=j+1|0}else{D=c[j+8>>2]|0}y=a[D]|0;C=y<<24>>24==(ch[c[(c[x>>2]|0)+28>>2]&31](x,45)|0)<<24>>24}c[m>>2]=0;c[p+0>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;c[q+0>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;Vr(f,C,l,m,n,o,p,q,r,s);f=a[j]|0;y=(f&1)==0;if(y){E=(f&255)>>>1}else{E=c[j+4>>2]|0}D=c[s>>2]|0;if((E|0)>(D|0)){if(y){F=(f&255)>>>1}else{F=c[j+4>>2]|0}y=a[r]|0;if((y&1)==0){G=(y&255)>>>1}else{G=c[r+4>>2]|0}y=a[q]|0;if((y&1)==0){H=(y&255)>>>1}else{H=c[q+4>>2]|0}I=G+(F-D<<1|1)+H|0}else{H=a[r]|0;if((H&1)==0){J=(H&255)>>>1}else{J=c[r+4>>2]|0}H=a[q]|0;if((H&1)==0){K=(H&255)>>>1}else{K=c[q+4>>2]|0}I=J+2+K|0}K=I+D|0;if(K>>>0>100){I=nv(K)|0;if((I|0)==0){Av()}else{L=I;M=I}}else{L=0;M=t}if((f&1)==0){N=j+1|0;O=(f&255)>>>1}else{N=c[j+8>>2]|0;O=c[j+4>>2]|0}Wr(M,u,v,c[g+4>>2]|0,N,N+O|0,x,C,m,a[n]|0,a[o]|0,p,q,r,D);c[w>>2]=c[e>>2];e=c[u>>2]|0;u=c[v>>2]|0;c[k+0>>2]=c[w+0>>2];gi(b,k,M,e,u,g,h);if((L|0)==0){Rm(r);Rm(q);Rm(p);P=c[l>>2]|0;sm(P)|0;i=d;return}ov(L);Rm(r);Rm(q);Rm(p);P=c[l>>2]|0;sm(P)|0;i=d;return}function Yr(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function Zr(a){a=a|0;return}function _r(b,d,e,f,g,j,l){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;l=+l;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0;d=i;i=i+992|0;m=d;n=d+888|0;o=d+872|0;p=d+472|0;q=d+464|0;r=d+460|0;s=d+456|0;t=d+452|0;u=d+876|0;v=d+432|0;w=d+420|0;x=d+416|0;y=d+16|0;z=d+12|0;A=d+444|0;B=d+448|0;c[o>>2]=n;h[k>>3]=l;c[m>>2]=c[k>>2];c[m+4>>2]=c[k+4>>2];C=je(n|0,100,21896,m|0)|0;if(C>>>0>99){if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}n=c[5508]|0;h[k>>3]=l;c[m>>2]=c[k>>2];c[m+4>>2]=c[k+4>>2];D=Pp(o,n,21896,m)|0;n=c[o>>2]|0;if((n|0)==0){Av()}E=nv(D<<2)|0;if((E|0)==0){Av()}else{F=E;G=n;H=E;I=D}}else{F=0;G=0;H=p;I=C}ln(q,g);C=c[q>>2]|0;if(!((c[5534]|0)==-1)){c[m>>2]=22136;c[m+4>>2]=165;c[m+8>>2]=0;Mm(22136,m,166)}p=(c[22140>>2]|0)+ -1|0;D=c[C+8>>2]|0;if(!((c[C+12>>2]|0)-D>>2>>>0>p>>>0)){J=Wd(4)|0;Tu(J);qg(J|0,30104,152)}C=c[D+(p<<2)>>2]|0;if((C|0)==0){J=Wd(4)|0;Tu(J);qg(J|0,30104,152)}J=c[o>>2]|0;fh[c[(c[C>>2]|0)+48>>2]&15](C,J,J+I|0,H)|0;if((I|0)==0){K=0}else{K=(a[c[o>>2]|0]|0)==45}c[r>>2]=0;c[u+0>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;c[v+0>>2]=0;c[v+4>>2]=0;c[v+8>>2]=0;c[w+0>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;$r(f,K,q,r,s,t,u,v,w,x);f=c[x>>2]|0;if((I|0)>(f|0)){x=a[w]|0;if((x&1)==0){L=(x&255)>>>1}else{L=c[w+4>>2]|0}x=a[v]|0;if((x&1)==0){M=(x&255)>>>1}else{M=c[v+4>>2]|0}N=L+(I-f<<1|1)+M|0}else{M=a[w]|0;if((M&1)==0){O=(M&255)>>>1}else{O=c[w+4>>2]|0}M=a[v]|0;if((M&1)==0){P=(M&255)>>>1}else{P=c[v+4>>2]|0}N=O+2+P|0}P=N+f|0;if(P>>>0>100){N=nv(P<<2)|0;if((N|0)==0){Av()}else{Q=N;R=N}}else{Q=0;R=y}as(R,z,A,c[g+4>>2]|0,H,H+(I<<2)|0,C,K,r,c[s>>2]|0,c[t>>2]|0,u,v,w,f);c[B>>2]=c[e>>2];e=c[z>>2]|0;z=c[A>>2]|0;c[m+0>>2]=c[B+0>>2];Yp(b,m,R,e,z,g,j);if((Q|0)!=0){ov(Q)}bn(w);bn(v);Rm(u);sm(c[q>>2]|0)|0;if((F|0)!=0){ov(F)}if((G|0)==0){i=d;return}ov(G);i=d;return}function $r(b,d,e,f,g,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;n=i;i=i+128|0;o=n;p=n+108|0;q=n+96|0;r=n+92|0;s=n+80|0;t=n+68|0;u=n+112|0;v=n+40|0;w=n+28|0;x=n+24|0;y=n+12|0;z=n+44|0;A=n+56|0;B=c[e>>2]|0;if(b){if(!((c[5428]|0)==-1)){c[o>>2]=21712;c[o+4>>2]=165;c[o+8>>2]=0;Mm(21712,o,166)}b=(c[21716>>2]|0)+ -1|0;e=c[B+8>>2]|0;if(!((c[B+12>>2]|0)-e>>2>>>0>b>>>0)){C=Wd(4)|0;Tu(C);qg(C|0,30104,152)}D=c[e+(b<<2)>>2]|0;if((D|0)==0){C=Wd(4)|0;Tu(C);qg(C|0,30104,152)}C=c[D>>2]|0;if(d){Lg[c[C+44>>2]&127](p,D);b=c[p>>2]|0;a[f]=b;a[f+1|0]=b>>8;a[f+2|0]=b>>16;a[f+3|0]=b>>24;Lg[c[(c[D>>2]|0)+32>>2]&127](q,D);if((a[l]&1)==0){c[l+4>>2]=0;a[l]=0}else{c[c[l+8>>2]>>2]=0;c[l+4>>2]=0}en(l,0);c[l+0>>2]=c[q+0>>2];c[l+4>>2]=c[q+4>>2];c[l+8>>2]=c[q+8>>2];c[q+0>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;bn(q)}else{Lg[c[C+40>>2]&127](r,D);C=c[r>>2]|0;a[f]=C;a[f+1|0]=C>>8;a[f+2|0]=C>>16;a[f+3|0]=C>>24;Lg[c[(c[D>>2]|0)+28>>2]&127](s,D);if((a[l]&1)==0){c[l+4>>2]=0;a[l]=0}else{c[c[l+8>>2]>>2]=0;c[l+4>>2]=0}en(l,0);c[l+0>>2]=c[s+0>>2];c[l+4>>2]=c[s+4>>2];c[l+8>>2]=c[s+8>>2];c[s+0>>2]=0;c[s+4>>2]=0;c[s+8>>2]=0;bn(s)}c[g>>2]=Mg[c[(c[D>>2]|0)+12>>2]&127](D)|0;c[h>>2]=Mg[c[(c[D>>2]|0)+16>>2]&127](D)|0;Lg[c[(c[D>>2]|0)+20>>2]&127](t,D);if((a[j]&1)==0){a[j+1|0]=0;a[j]=0}else{a[c[j+8>>2]|0]=0;c[j+4>>2]=0}Wm(j,0);c[j+0>>2]=c[t+0>>2];c[j+4>>2]=c[t+4>>2];c[j+8>>2]=c[t+8>>2];c[t+0>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;Rm(t);Lg[c[(c[D>>2]|0)+24>>2]&127](u,D);if((a[k]&1)==0){c[k+4>>2]=0;a[k]=0}else{c[c[k+8>>2]>>2]=0;c[k+4>>2]=0}en(k,0);c[k+0>>2]=c[u+0>>2];c[k+4>>2]=c[u+4>>2];c[k+8>>2]=c[u+8>>2];c[u+0>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;bn(u);E=Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0;c[m>>2]=E;i=n;return}else{if(!((c[5412]|0)==-1)){c[o>>2]=21648;c[o+4>>2]=165;c[o+8>>2]=0;Mm(21648,o,166)}o=(c[21652>>2]|0)+ -1|0;D=c[B+8>>2]|0;if(!((c[B+12>>2]|0)-D>>2>>>0>o>>>0)){F=Wd(4)|0;Tu(F);qg(F|0,30104,152)}B=c[D+(o<<2)>>2]|0;if((B|0)==0){F=Wd(4)|0;Tu(F);qg(F|0,30104,152)}F=c[B>>2]|0;if(d){Lg[c[F+44>>2]&127](v,B);d=c[v>>2]|0;a[f]=d;a[f+1|0]=d>>8;a[f+2|0]=d>>16;a[f+3|0]=d>>24;Lg[c[(c[B>>2]|0)+32>>2]&127](w,B);if((a[l]&1)==0){c[l+4>>2]=0;a[l]=0}else{c[c[l+8>>2]>>2]=0;c[l+4>>2]=0}en(l,0);c[l+0>>2]=c[w+0>>2];c[l+4>>2]=c[w+4>>2];c[l+8>>2]=c[w+8>>2];c[w+0>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;bn(w)}else{Lg[c[F+40>>2]&127](x,B);F=c[x>>2]|0;a[f]=F;a[f+1|0]=F>>8;a[f+2|0]=F>>16;a[f+3|0]=F>>24;Lg[c[(c[B>>2]|0)+28>>2]&127](y,B);if((a[l]&1)==0){c[l+4>>2]=0;a[l]=0}else{c[c[l+8>>2]>>2]=0;c[l+4>>2]=0}en(l,0);c[l+0>>2]=c[y+0>>2];c[l+4>>2]=c[y+4>>2];c[l+8>>2]=c[y+8>>2];c[y+0>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;bn(y)}c[g>>2]=Mg[c[(c[B>>2]|0)+12>>2]&127](B)|0;c[h>>2]=Mg[c[(c[B>>2]|0)+16>>2]&127](B)|0;Lg[c[(c[B>>2]|0)+20>>2]&127](z,B);if((a[j]&1)==0){a[j+1|0]=0;a[j]=0}else{a[c[j+8>>2]|0]=0;c[j+4>>2]=0}Wm(j,0);c[j+0>>2]=c[z+0>>2];c[j+4>>2]=c[z+4>>2];c[j+8>>2]=c[z+8>>2];c[z+0>>2]=0;c[z+4>>2]=0;c[z+8>>2]=0;Rm(z);Lg[c[(c[B>>2]|0)+24>>2]&127](A,B);if((a[k]&1)==0){c[k+4>>2]=0;a[k]=0}else{c[c[k+8>>2]>>2]=0;c[k+4>>2]=0}en(k,0);c[k+0>>2]=c[A+0>>2];c[k+4>>2]=c[A+4>>2];c[k+8>>2]=c[A+8>>2];c[A+0>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;bn(A);E=Mg[c[(c[B>>2]|0)+36>>2]&127](B)|0;c[m>>2]=E;i=n;return}}function as(b,d,e,f,g,h,j,k,l,m,n,o,p,q,r){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;q=q|0;r=r|0;var s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0;s=i;c[e>>2]=b;t=q+4|0;u=q+8|0;v=(f&512|0)==0;w=p+4|0;x=p+8|0;y=(r|0)>0;z=o+1|0;A=o+8|0;B=o+4|0;C=g;g=0;while(1){switch(a[l+g|0]|0){case 3:{D=a[q]|0;E=(D&1)==0;if(E){F=(D&255)>>>1}else{F=c[t>>2]|0}if((F|0)==0){G=C}else{if(E){H=t}else{H=c[u>>2]|0}E=c[H>>2]|0;D=c[e>>2]|0;c[e>>2]=D+4;c[D>>2]=E;G=C}break};case 1:{c[d>>2]=c[e>>2];E=ch[c[(c[j>>2]|0)+44>>2]&31](j,32)|0;D=c[e>>2]|0;c[e>>2]=D+4;c[D>>2]=E;G=C;break};case 2:{E=a[p]|0;D=(E&1)==0;if(D){I=(E&255)>>>1}else{I=c[w>>2]|0}if((I|0)==0|v){G=C}else{if(D){J=w;K=(E&255)>>>1}else{J=c[x>>2]|0;K=c[w>>2]|0}E=J+(K<<2)|0;D=c[e>>2]|0;if((J|0)==(E|0)){L=D}else{M=(J+(K+ -1<<2)+(0-J)|0)>>>2;N=D;O=J;while(1){c[N>>2]=c[O>>2];P=O+4|0;if((P|0)==(E|0)){break}N=N+4|0;O=P}L=D+(M+1<<2)|0}c[e>>2]=L;G=C}break};case 0:{c[d>>2]=c[e>>2];G=C;break};case 4:{O=c[e>>2]|0;N=k?C+4|0:C;a:do{if(N>>>0<h>>>0){E=N;while(1){P=E+4|0;if(!(Sg[c[(c[j>>2]|0)+12>>2]&31](j,2048,c[E>>2]|0)|0)){Q=E;break a}if(P>>>0<h>>>0){E=P}else{Q=P;break}}}else{Q=N}}while(0);if(y){if(Q>>>0>N>>>0){M=c[e>>2]|0;D=Q;E=r;while(1){R=D+ -4|0;S=M+4|0;c[M>>2]=c[R>>2];T=E+ -1|0;U=(T|0)>0;if(R>>>0>N>>>0&U){M=S;D=R;E=T}else{break}}c[e>>2]=S;if(U){V=R;W=T;X=34}else{E=c[e>>2]|0;c[e>>2]=E+4;Y=E;Z=R}}else{V=Q;W=r;X=34}if((X|0)==34){X=0;E=ch[c[(c[j>>2]|0)+44>>2]&31](j,48)|0;D=c[e>>2]|0;M=D+4|0;c[e>>2]=M;if((W|0)>0){P=D;_=M;M=W;while(1){c[P>>2]=E;M=M+ -1|0;if((M|0)<=0){break}else{$=_;_=_+4|0;P=$}}c[e>>2]=D+(W+1<<2);Y=D+(W<<2)|0;Z=V}else{Y=D;Z=V}}c[Y>>2]=m;aa=Z}else{aa=Q}if((aa|0)==(N|0)){P=ch[c[(c[j>>2]|0)+44>>2]&31](j,48)|0;_=c[e>>2]|0;M=_+4|0;c[e>>2]=M;c[_>>2]=P;ba=M}else{M=a[o]|0;P=(M&1)==0;if(P){ca=(M&255)>>>1}else{ca=c[B>>2]|0}if((ca|0)==0){da=aa;ea=-1;fa=0;ga=0}else{if(P){ha=z}else{ha=c[A>>2]|0}da=aa;ea=a[ha]|0;fa=0;ga=0}while(1){P=c[e>>2]|0;if((ga|0)==(ea|0)){M=P+4|0;c[e>>2]=M;c[P>>2]=n;_=fa+1|0;E=a[o]|0;$=(E&1)==0;if($){ia=(E&255)>>>1}else{ia=c[B>>2]|0}if(_>>>0<ia>>>0){if($){ja=z}else{ja=c[A>>2]|0}if((a[ja+_|0]|0)==127){ka=M;la=-1;ma=_;na=0}else{if($){oa=z}else{oa=c[A>>2]|0}ka=M;la=a[oa+_|0]|0;ma=_;na=0}}else{ka=M;la=ea;ma=_;na=0}}else{ka=P;la=ea;ma=fa;na=ga}P=da+ -4|0;_=c[P>>2]|0;M=ka+4|0;c[e>>2]=M;c[ka>>2]=_;if((P|0)==(N|0)){ba=M;break}else{da=P;ea=la;fa=ma;ga=na+1|0}}}if((O|0)!=(ba|0)?(D=ba+ -4|0,D>>>0>O>>>0):0){P=O;M=D;while(1){D=c[P>>2]|0;c[P>>2]=c[M>>2];c[M>>2]=D;D=P+4|0;_=M+ -4|0;if(D>>>0<_>>>0){P=D;M=_}else{G=N;break}}}else{G=N}break};default:{G=C}}g=g+1|0;if((g|0)==4){break}else{C=G}}G=a[q]|0;q=(G&1)==0;if(q){pa=(G&255)>>>1}else{pa=c[t>>2]|0}if(pa>>>0>1){if(q){qa=t;ra=(G&255)>>>1}else{qa=c[u>>2]|0;ra=c[t>>2]|0}t=qa+4|0;u=qa+(ra<<2)|0;G=c[e>>2]|0;if((t|0)==(u|0)){sa=G}else{q=(qa+(ra+ -1<<2)+(0-t)|0)>>>2;ra=G;qa=t;while(1){c[ra>>2]=c[qa>>2];qa=qa+4|0;if((qa|0)==(u|0)){break}else{ra=ra+4|0}}sa=G+(q+1<<2)|0}c[e>>2]=sa}sa=f&176;if((sa|0)==32){c[d>>2]=c[e>>2];i=s;return}else if((sa|0)==16){i=s;return}else{c[d>>2]=b;i=s;return}}function bs(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0;d=i;i=i+480|0;k=d;l=d+464|0;m=d+460|0;n=d+456|0;o=d+452|0;p=d+440|0;q=d+468|0;r=d+420|0;s=d+416|0;t=d+16|0;u=d+12|0;v=d+432|0;w=d+436|0;ln(l,g);x=c[l>>2]|0;if(!((c[5534]|0)==-1)){c[k>>2]=22136;c[k+4>>2]=165;c[k+8>>2]=0;Mm(22136,k,166)}y=(c[22140>>2]|0)+ -1|0;z=c[x+8>>2]|0;if(!((c[x+12>>2]|0)-z>>2>>>0>y>>>0)){A=Wd(4)|0;Tu(A);qg(A|0,30104,152)}x=c[z+(y<<2)>>2]|0;if((x|0)==0){A=Wd(4)|0;Tu(A);qg(A|0,30104,152)}A=a[j]|0;y=(A&1)==0;if(y){B=(A&255)>>>1}else{B=c[j+4>>2]|0}if((B|0)==0){C=0}else{if(y){D=j+4|0}else{D=c[j+8>>2]|0}y=c[D>>2]|0;C=(y|0)==(ch[c[(c[x>>2]|0)+44>>2]&31](x,45)|0)}c[m>>2]=0;c[p+0>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;c[q+0>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;$r(f,C,l,m,n,o,p,q,r,s);f=a[j]|0;y=(f&1)==0;if(y){E=(f&255)>>>1}else{E=c[j+4>>2]|0}D=c[s>>2]|0;if((E|0)>(D|0)){if(y){F=(f&255)>>>1}else{F=c[j+4>>2]|0}y=a[r]|0;if((y&1)==0){G=(y&255)>>>1}else{G=c[r+4>>2]|0}y=a[q]|0;if((y&1)==0){H=(y&255)>>>1}else{H=c[q+4>>2]|0}I=G+(F-D<<1|1)+H|0}else{H=a[r]|0;if((H&1)==0){J=(H&255)>>>1}else{J=c[r+4>>2]|0}H=a[q]|0;if((H&1)==0){K=(H&255)>>>1}else{K=c[q+4>>2]|0}I=J+2+K|0}K=I+D|0;if(K>>>0>100){I=nv(K<<2)|0;if((I|0)==0){Av()}else{L=I;M=I}}else{L=0;M=t}if((f&1)==0){N=j+4|0;O=(f&255)>>>1}else{N=c[j+8>>2]|0;O=c[j+4>>2]|0}as(M,u,v,c[g+4>>2]|0,N,N+(O<<2)|0,x,C,m,c[n>>2]|0,c[o>>2]|0,p,q,r,D);c[w>>2]=c[e>>2];e=c[u>>2]|0;u=c[v>>2]|0;c[k+0>>2]=c[w+0>>2];Yp(b,k,M,e,u,g,h);if((L|0)==0){bn(r);bn(q);Rm(p);P=c[l>>2]|0;sm(P)|0;i=d;return}ov(L);bn(r);bn(q);Rm(p);P=c[l>>2]|0;sm(P)|0;i=d;return}function cs(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function ds(a){a=a|0;return}function es(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;e=i;if((a[d]&1)==0){f=d+1|0}else{f=c[d+8>>2]|0}d=Gd(f|0,1)|0;i=e;return d>>>((d|0)!=(-1|0)|0)|0}function fs(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;d=i;i=i+16|0;j=d;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;k=a[h]|0;if((k&1)==0){l=h+1|0;m=(k&255)>>>1;n=h+1|0}else{k=c[h+8>>2]|0;l=k;m=c[h+4>>2]|0;n=k}k=l+m|0;if(n>>>0<k>>>0){m=n;do{Xm(j,a[m]|0);m=m+1|0}while((m|0)!=(k|0));k=(e|0)==-1?-1:e<<1;if((a[j]&1)==0){o=k;p=9}else{q=k;r=c[j+8>>2]|0}}else{o=(e|0)==-1?-1:e<<1;p=9}if((p|0)==9){q=o;r=j+1|0}o=Hf(q|0,f|0,g|0,r|0)|0;c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;r=Rv(o|0)|0;g=o+r|0;if((r|0)>0){s=o}else{Rm(j);i=d;return}do{Xm(b,a[s]|0);s=s+1|0}while((s|0)!=(g|0));Rm(j);i=d;return}function gs(a,b){a=a|0;b=b|0;a=i;ac(((b|0)==-1?-1:b<<1)|0)|0;i=a;return}function hs(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function is(a){a=a|0;return}function js(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;e=i;if((a[d]&1)==0){f=d+1|0}else{f=c[d+8>>2]|0}d=Gd(f|0,1)|0;i=e;return d>>>((d|0)!=(-1|0)|0)|0}function ks(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;d=i;i=i+176|0;j=d;k=d+48|0;l=d+8|0;m=d+12|0;n=d+16|0;o=d+32|0;p=d+40|0;c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[o+4>>2]=0;c[o>>2]=23800;q=a[h]|0;if((q&1)==0){r=h+4|0;s=(q&255)>>>1;t=h+4|0}else{q=c[h+8>>2]|0;r=q;s=c[h+4>>2]|0;t=q}q=r+(s<<2)|0;s=j;c[s>>2]=0;c[s+4>>2]=0;a:do{if(t>>>0<q>>>0){s=k+32|0;r=t;h=23800|0;while(1){c[m>>2]=r;u=(dh[c[h+12>>2]&15](o,j,r,q,m,k,s,l)|0)==2;v=c[m>>2]|0;if(u|(v|0)==(r|0)){break}if(k>>>0<(c[l>>2]|0)>>>0){u=k;do{Xm(n,a[u]|0);u=u+1|0}while(u>>>0<(c[l>>2]|0)>>>0);w=c[m>>2]|0}else{w=v}if(!(w>>>0<q>>>0)){break a}r=w;h=c[o>>2]|0}Gr(23024)}}while(0);if((a[n]&1)==0){x=n+1|0}else{x=c[n+8>>2]|0}o=Hf(((e|0)==-1?-1:e<<1)|0,f|0,g|0,x|0)|0;c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[p+4>>2]=0;c[p>>2]=23904;x=Rv(o|0)|0;g=o+x|0;f=j;c[f>>2]=0;c[f+4>>2]=0;if((x|0)<=0){Rm(n);i=d;return}x=g;f=k+128|0;e=o;o=23904|0;while(1){c[m>>2]=e;w=(dh[c[o+16>>2]&15](p,j,e,(x-e|0)>32?e+32|0:g,m,k,f,l)|0)==2;q=c[m>>2]|0;if(w|(q|0)==(e|0)){y=20;break}if(k>>>0<(c[l>>2]|0)>>>0){w=k;do{fn(b,c[w>>2]|0);w=w+4|0}while(w>>>0<(c[l>>2]|0)>>>0);z=c[m>>2]|0}else{z=q}if(!(z>>>0<g>>>0)){y=25;break}e=z;o=c[p>>2]|0}if((y|0)==20){Gr(23024)}else if((y|0)==25){Rm(n);i=d;return}}function ls(a,b){a=a|0;b=b|0;a=i;ac(((b|0)==-1?-1:b<<1)|0)|0;i=a;return}function ms(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=22232;e=b+8|0;b=c[e>>2]|0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}if((b|0)==(c[5508]|0)){i=d;return}Tc(c[e>>2]|0);i=d;return}function ns(a){a=a|0;a=Wd(8)|0;tm(a,22024);c[a>>2]=18992;qg(a|0,19032,68)}function os(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;i=i+16|0;f=e;c[b+4>>2]=d+ -1;c[b>>2]=22064;d=b+8|0;g=b+12|0;h=b+136|0;j=b+24|0;a[h]=1;c[g>>2]=j;c[d>>2]=j;c[b+16>>2]=h;h=28;k=j;do{if((k|0)==0){l=0}else{c[k>>2]=0;l=c[g>>2]|0}k=l+4|0;c[g>>2]=k;h=h+ -1|0}while((h|0)!=0);Pm(b+144|0,22048,1);h=c[d>>2]|0;d=c[g>>2]|0;if((d|0)!=(h|0)){c[g>>2]=d+(~((d+ -4+(0-h)|0)>>>2)<<2)}c[26956>>2]=0;c[6738]=20544;if(!((c[5142]|0)==-1)){c[f>>2]=20568;c[f+4>>2]=165;c[f+8>>2]=0;Mm(20568,f,166)}ps(b,26952,(c[20572>>2]|0)+ -1|0);c[26948>>2]=0;c[6736]=20584;if(!((c[5152]|0)==-1)){c[f>>2]=20608;c[f+4>>2]=165;c[f+8>>2]=0;Mm(20608,f,166)}ps(b,26944,(c[20612>>2]|0)+ -1|0);c[26932>>2]=0;c[6732]=22160;c[26936>>2]=0;a[26940|0]=0;c[26936>>2]=c[(Ud()|0)>>2];if(!((c[5536]|0)==-1)){c[f>>2]=22144;c[f+4>>2]=165;c[f+8>>2]=0;Mm(22144,f,166)}ps(b,26928,(c[22148>>2]|0)+ -1|0);c[26924>>2]=0;c[6730]=23120;if(!((c[5534]|0)==-1)){c[f>>2]=22136;c[f+4>>2]=165;c[f+8>>2]=0;Mm(22136,f,166)}ps(b,26920,(c[22140>>2]|0)+ -1|0);c[26916>>2]=0;c[6728]=23336;if(!((c[5552]|0)==-1)){c[f>>2]=22208;c[f+4>>2]=165;c[f+8>>2]=0;Mm(22208,f,166)}ps(b,26912,(c[22212>>2]|0)+ -1|0);c[26900>>2]=0;c[6724]=22232;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}c[26904>>2]=c[5508];if(!((c[5554]|0)==-1)){c[f>>2]=22216;c[f+4>>2]=165;c[f+8>>2]=0;Mm(22216,f,166)}ps(b,26896,(c[22220>>2]|0)+ -1|0);c[26892>>2]=0;c[6722]=23560;if(!((c[5568]|0)==-1)){c[f>>2]=22272;c[f+4>>2]=165;c[f+8>>2]=0;Mm(22272,f,166)}ps(b,26888,(c[22276>>2]|0)+ -1|0);c[26884>>2]=0;c[6720]=23680;if(!((c[5570]|0)==-1)){c[f>>2]=22280;c[f+4>>2]=165;c[f+8>>2]=0;Mm(22280,f,166)}ps(b,26880,(c[22284>>2]|0)+ -1|0);c[26860>>2]=0;c[6714]=22312;a[26864|0]=46;a[26865|0]=44;c[26868>>2]=0;c[26872>>2]=0;c[26876>>2]=0;if(!((c[5572]|0)==-1)){c[f>>2]=22288;c[f+4>>2]=165;c[f+8>>2]=0;Mm(22288,f,166)}ps(b,26856,(c[22292>>2]|0)+ -1|0);c[26828>>2]=0;c[6706]=22352;c[26832>>2]=46;c[26836>>2]=44;c[26840>>2]=0;c[26844>>2]=0;c[26848>>2]=0;if(!((c[5574]|0)==-1)){c[f>>2]=22296;c[f+4>>2]=165;c[f+8>>2]=0;Mm(22296,f,166)}ps(b,26824,(c[22300>>2]|0)+ -1|0);c[26820>>2]=0;c[6704]=20624;if(!((c[5170]|0)==-1)){c[f>>2]=20680;c[f+4>>2]=165;c[f+8>>2]=0;Mm(20680,f,166)}ps(b,26816,(c[20684>>2]|0)+ -1|0);c[26812>>2]=0;c[6702]=20744;if(!((c[5200]|0)==-1)){c[f>>2]=20800;c[f+4>>2]=165;c[f+8>>2]=0;Mm(20800,f,166)}ps(b,26808,(c[20804>>2]|0)+ -1|0);c[26804>>2]=0;c[6700]=20816;if(!((c[5216]|0)==-1)){c[f>>2]=20864;c[f+4>>2]=165;c[f+8>>2]=0;Mm(20864,f,166)}ps(b,26800,(c[20868>>2]|0)+ -1|0);c[26796>>2]=0;c[6698]=20880;if(!((c[5232]|0)==-1)){c[f>>2]=20928;c[f+4>>2]=165;c[f+8>>2]=0;Mm(20928,f,166)}ps(b,26792,(c[20932>>2]|0)+ -1|0);c[26788>>2]=0;c[6696]=21472;if(!((c[5380]|0)==-1)){c[f>>2]=21520;c[f+4>>2]=165;c[f+8>>2]=0;Mm(21520,f,166)}ps(b,26784,(c[21524>>2]|0)+ -1|0);c[26780>>2]=0;c[6694]=21536;if(!((c[5396]|0)==-1)){c[f>>2]=21584;c[f+4>>2]=165;c[f+8>>2]=0;Mm(21584,f,166)}ps(b,26776,(c[21588>>2]|0)+ -1|0);c[26772>>2]=0;c[6692]=21600;if(!((c[5412]|0)==-1)){c[f>>2]=21648;c[f+4>>2]=165;c[f+8>>2]=0;Mm(21648,f,166)}ps(b,26768,(c[21652>>2]|0)+ -1|0);c[26764>>2]=0;c[6690]=21664;if(!((c[5428]|0)==-1)){c[f>>2]=21712;c[f+4>>2]=165;c[f+8>>2]=0;Mm(21712,f,166)}ps(b,26760,(c[21716>>2]|0)+ -1|0);c[26756>>2]=0;c[6688]=21728;if(!((c[5438]|0)==-1)){c[f>>2]=21752;c[f+4>>2]=165;c[f+8>>2]=0;Mm(21752,f,166)}ps(b,26752,(c[21756>>2]|0)+ -1|0);c[26748>>2]=0;c[6686]=21808;if(!((c[5458]|0)==-1)){c[f>>2]=21832;c[f+4>>2]=165;c[f+8>>2]=0;Mm(21832,f,166)}ps(b,26744,(c[21836>>2]|0)+ -1|0);c[26740>>2]=0;c[6684]=21864;if(!((c[5472]|0)==-1)){c[f>>2]=21888;c[f+4>>2]=165;c[f+8>>2]=0;Mm(21888,f,166)}ps(b,26736,(c[21892>>2]|0)+ -1|0);c[26732>>2]=0;c[6682]=21912;if(!((c[5484]|0)==-1)){c[f>>2]=21936;c[f+4>>2]=165;c[f+8>>2]=0;Mm(21936,f,166)}ps(b,26728,(c[21940>>2]|0)+ -1|0);c[26716>>2]=0;c[6678]=20960;c[26720>>2]=21008;if(!((c[5260]|0)==-1)){c[f>>2]=21040;c[f+4>>2]=165;c[f+8>>2]=0;Mm(21040,f,166)}ps(b,26712,(c[21044>>2]|0)+ -1|0);c[26700>>2]=0;c[6674]=21112;c[26704>>2]=21160;if(!((c[5298]|0)==-1)){c[f>>2]=21192;c[f+4>>2]=165;c[f+8>>2]=0;Mm(21192,f,166)}ps(b,26696,(c[21196>>2]|0)+ -1|0);c[26684>>2]=0;c[6670]=23056;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}c[26688>>2]=c[5508];c[6670]=21408;if(!((c[5356]|0)==-1)){c[f>>2]=21424;c[f+4>>2]=165;c[f+8>>2]=0;Mm(21424,f,166)}ps(b,26680,(c[21428>>2]|0)+ -1|0);c[26668>>2]=0;c[6666]=23056;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}c[26672>>2]=c[5508];c[6666]=21440;if(!((c[5364]|0)==-1)){c[f>>2]=21456;c[f+4>>2]=165;c[f+8>>2]=0;Mm(21456,f,166)}ps(b,26664,(c[21460>>2]|0)+ -1|0);c[26660>>2]=0;c[6664]=21952;if(!((c[5494]|0)==-1)){c[f>>2]=21976;c[f+4>>2]=165;c[f+8>>2]=0;Mm(21976,f,166)}ps(b,26656,(c[21980>>2]|0)+ -1|0);c[26652>>2]=0;c[6662]=21992;if((c[5504]|0)==-1){m=c[22020>>2]|0;n=m+ -1|0;ps(b,26648,n);i=e;return}c[f>>2]=22016;c[f+4>>2]=165;c[f+8>>2]=0;Mm(22016,f,166);m=c[22020>>2]|0;n=m+ -1|0;ps(b,26648,n);i=e;return}function ps(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;rm(b);f=a+8|0;g=a+12|0;a=c[g>>2]|0;h=c[f>>2]|0;j=a-h>>2;do{if(!(j>>>0>d>>>0)){k=d+1|0;if(j>>>0<k>>>0){tu(f,k-j|0);l=c[f>>2]|0;break}if(j>>>0>k>>>0?(m=h+(k<<2)|0,(a|0)!=(m|0)):0){c[g>>2]=a+(~((a+ -4+(0-m)|0)>>>2)<<2);l=h}else{l=h}}else{l=h}}while(0);h=c[l+(d<<2)>>2]|0;if((h|0)==0){n=l;o=n+(d<<2)|0;c[o>>2]=b;i=e;return}sm(h)|0;n=c[f>>2]|0;o=n+(d<<2)|0;c[o>>2]=b;i=e;return}function qs(a){a=a|0;var b=0;b=i;rs(a);vv(a);i=b;return}function rs(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=i;c[b>>2]=22064;e=b+12|0;f=c[e>>2]|0;g=b+8|0;h=c[g>>2]|0;if((f|0)!=(h|0)){j=f;f=h;h=0;while(1){k=c[f+(h<<2)>>2]|0;if((k|0)==0){l=j;m=f}else{sm(k)|0;l=c[e>>2]|0;m=c[g>>2]|0}h=h+1|0;if(!(h>>>0<l-m>>2>>>0)){break}else{j=l;f=m}}}Rm(b+144|0);m=c[g>>2]|0;if((m|0)==0){i=d;return}g=c[e>>2]|0;if((g|0)!=(m|0)){c[e>>2]=g+(~((g+ -4+(0-m)|0)>>>2)<<2)}if((b+24|0)==(m|0)){a[b+136|0]=0;i=d;return}else{vv(m);i=d;return}}function ss(){var b=0,d=0,e=0;b=i;if((a[22120]|0)!=0){d=c[5528]|0;i=b;return d|0}if((ab(22120)|0)==0){d=c[5528]|0;i=b;return d|0}if((a[22096]|0)==0?(ab(22096)|0)!=0:0){os(26488,1);c[5520]=26488;c[5522]=22080;Bc(22096)}e=c[c[5522]>>2]|0;c[5526]=e;rm(e);c[5528]=22104;Bc(22120);d=c[5528]|0;i=b;return d|0}function ts(a){a=a|0;var b=0,d=0;b=i;d=c[(ss()|0)>>2]|0;c[a>>2]=d;rm(d);i=b;return}function us(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;e=c[b>>2]|0;c[a>>2]=e;rm(e);i=d;return}function vs(a){a=a|0;var b=0;b=i;sm(c[a>>2]|0)|0;i=b;return}function ws(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;i=i+16|0;e=d;f=c[a>>2]|0;if(!((c[b>>2]|0)==-1)){c[e>>2]=b;c[e+4>>2]=165;c[e+8>>2]=0;Mm(b,e,166)}e=(c[b+4>>2]|0)+ -1|0;b=c[f+8>>2]|0;if(!((c[f+12>>2]|0)-b>>2>>>0>e>>>0)){g=Wd(4)|0;Tu(g);qg(g|0,30104,152)}f=c[b+(e<<2)>>2]|0;if((f|0)==0){g=Wd(4)|0;Tu(g);qg(g|0,30104,152)}else{i=d;return f|0}return 0}function xs(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function ys(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}Kg[c[(c[a>>2]|0)+4>>2]&255](a);i=b;return}function zs(a){a=a|0;var b=0;b=c[5532]|0;c[5532]=b+1;c[a+4>>2]=b+1;return}function As(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function Bs(a,d,e){a=a|0;d=d|0;e=e|0;var f=0;a=i;if(!(e>>>0<128)){f=0;i=a;return f|0}f=(b[(c[(Ud()|0)>>2]|0)+(e<<1)>>1]&d)<<16>>16!=0;i=a;return f|0}function Cs(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0;a=i;if((d|0)==(e|0)){g=d;i=a;return g|0}else{h=d;j=f}while(1){f=c[h>>2]|0;if(f>>>0<128){k=b[(c[(Ud()|0)>>2]|0)+(f<<1)>>1]|0}else{k=0}b[j>>1]=k;f=h+4|0;if((f|0)==(e|0)){g=e;break}else{h=f;j=j+2|0}}i=a;return g|0}function Ds(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;a=i;a:do{if((e|0)==(f|0)){g=e}else{h=e;while(1){j=c[h>>2]|0;if(j>>>0<128?!((b[(c[(Ud()|0)>>2]|0)+(j<<1)>>1]&d)<<16>>16==0):0){g=h;break a}j=h+4|0;if((j|0)==(f|0)){g=f;break}else{h=j}}}}while(0);i=a;return g|0}function Es(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0;a=i;a:do{if((e|0)==(f|0)){g=e}else{h=e;while(1){j=c[h>>2]|0;if(!(j>>>0<128)){g=h;break a}k=h+4|0;if((b[(c[(Ud()|0)>>2]|0)+(j<<1)>>1]&d)<<16>>16==0){g=h;break a}if((k|0)==(f|0)){g=f;break}else{h=k}}}}while(0);i=a;return g|0}function Fs(a,b){a=a|0;b=b|0;var d=0;a=i;if(!(b>>>0<128)){d=b;i=a;return d|0}d=c[(c[(ib()|0)>>2]|0)+(b<<2)>>2]|0;i=a;return d|0}function Gs(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;a=i;if((b|0)==(d|0)){e=b;i=a;return e|0}else{f=b}while(1){b=c[f>>2]|0;if(b>>>0<128){g=c[(c[(ib()|0)>>2]|0)+(b<<2)>>2]|0}else{g=b}c[f>>2]=g;b=f+4|0;if((b|0)==(d|0)){e=d;break}else{f=b}}i=a;return e|0}function Hs(a,b){a=a|0;b=b|0;var d=0;a=i;if(!(b>>>0<128)){d=b;i=a;return d|0}d=c[(c[(Xf()|0)>>2]|0)+(b<<2)>>2]|0;i=a;return d|0}function Is(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;a=i;if((b|0)==(d|0)){e=b;i=a;return e|0}else{f=b}while(1){b=c[f>>2]|0;if(b>>>0<128){g=c[(c[(Xf()|0)>>2]|0)+(b<<2)>>2]|0}else{g=b}c[f>>2]=g;b=f+4|0;if((b|0)==(d|0)){e=d;break}else{f=b}}i=a;return e|0}function Js(a,b){a=a|0;b=b|0;return b<<24>>24|0}function Ks(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;b=i;if((d|0)==(e|0)){g=d;i=b;return g|0}else{h=d;j=f}while(1){c[j>>2]=a[h]|0;f=h+1|0;if((f|0)==(e|0)){g=e;break}else{h=f;j=j+4|0}}i=b;return g|0}function Ls(a,b,c){a=a|0;b=b|0;c=c|0;return(b>>>0<128?b&255:c)|0}function Ms(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0;b=i;if((d|0)==(e|0)){h=d;i=b;return h|0}j=((e+ -4+(0-d)|0)>>>2)+1|0;k=d;l=g;while(1){g=c[k>>2]|0;a[l]=g>>>0<128?g&255:f;k=k+4|0;if((k|0)==(e|0)){break}else{l=l+1|0}}h=d+(j<<2)|0;i=b;return h|0}function Ns(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=22160;e=c[b+8>>2]|0;if((e|0)!=0?(a[b+12|0]|0)!=0:0){wv(e)}vv(b);i=d;return}function Os(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=22160;e=c[b+8>>2]|0;if((e|0)!=0?(a[b+12|0]|0)!=0:0){wv(e)}i=d;return}function Ps(a,b){a=a|0;b=b|0;var d=0;a=i;if(!(b<<24>>24>-1)){d=b;i=a;return d|0}d=c[(c[(ib()|0)>>2]|0)+((b&255)<<2)>>2]&255;i=a;return d|0}function Qs(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;b=i;if((d|0)==(e|0)){f=d;i=b;return f|0}else{g=d}while(1){d=a[g]|0;if(d<<24>>24>-1){h=c[(c[(ib()|0)>>2]|0)+(d<<24>>24<<2)>>2]&255}else{h=d}a[g]=h;d=g+1|0;if((d|0)==(e|0)){f=e;break}else{g=d}}i=b;return f|0}function Rs(a,b){a=a|0;b=b|0;var d=0;a=i;if(!(b<<24>>24>-1)){d=b;i=a;return d|0}d=c[(c[(Xf()|0)>>2]|0)+(b<<24>>24<<2)>>2]&255;i=a;return d|0}function Ss(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;b=i;if((d|0)==(e|0)){f=d;i=b;return f|0}else{g=d}while(1){d=a[g]|0;if(d<<24>>24>-1){h=c[(c[(Xf()|0)>>2]|0)+(d<<24>>24<<2)>>2]&255}else{h=d}a[g]=h;d=g+1|0;if((d|0)==(e|0)){f=e;break}else{g=d}}i=b;return f|0}function Ts(a,b){a=a|0;b=b|0;return b|0}function Us(b,c,d,e){b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;b=i;if((c|0)==(d|0)){f=c}else{g=c;c=e;while(1){a[c]=a[g]|0;e=g+1|0;if((e|0)==(d|0)){f=d;break}else{g=e;c=c+1|0}}}i=b;return f|0}function Vs(a,b,c){a=a|0;b=b|0;c=c|0;return(b<<24>>24>-1?b:c)|0}function Ws(b,c,d,e,f){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;b=i;if((c|0)==(d|0)){g=c;i=b;return g|0}else{h=c;j=f}while(1){f=a[h]|0;a[j]=f<<24>>24>-1?f:e;f=h+1|0;if((f|0)==(d|0)){g=d;break}else{h=f;j=j+1|0}}i=b;return g|0}function Xs(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function Ys(a,b,d,e,f,g,h,i){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;c[f>>2]=d;c[i>>2]=g;return 3}function Zs(a,b,d,e,f,g,h,i){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;c[f>>2]=d;c[i>>2]=g;return 3}function _s(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;c[f>>2]=d;return 3}function $s(a){a=a|0;return 1}function at(a){a=a|0;return 1}function bt(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;b=d-c|0;return(b>>>0<e>>>0?b:e)|0}function ct(a){a=a|0;return 1}function dt(a){a=a|0;var b=0;b=i;ms(a);vv(a);i=b;return}function et(b,d,e,f,g,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;l=i;i=i+16|0;m=l;n=l+8|0;o=(e|0)==(f|0);a:do{if(!o){p=e;while(1){q=p+4|0;if((c[p>>2]|0)==0){r=p;break}if((q|0)==(f|0)){r=f;break}else{p=q}}c[k>>2]=h;c[g>>2]=e;if(!(o|(h|0)==(j|0))){p=j;q=b+8|0;s=e;t=h;u=r;while(1){v=d;w=c[v+4>>2]|0;x=m;c[x>>2]=c[v>>2];c[x+4>>2]=w;w=nc(c[q>>2]|0)|0;x=Gu(t,g,u-s>>2,p-t|0,d)|0;if((w|0)!=0){nc(w|0)|0}if((x|0)==0){y=1;z=33;break}else if((x|0)==-1){z=10;break}w=(c[k>>2]|0)+x|0;c[k>>2]=w;if((w|0)==(j|0)){z=31;break}if((u|0)==(f|0)){A=c[g>>2]|0;B=w;C=f}else{w=nc(c[q>>2]|0)|0;x=Fu(n,0,d)|0;if((w|0)!=0){nc(w|0)|0}if((x|0)==-1){y=2;z=33;break}w=c[k>>2]|0;if(x>>>0>(p-w|0)>>>0){y=1;z=33;break}b:do{if((x|0)!=0){v=w;D=x;E=n;while(1){F=a[E]|0;c[k>>2]=v+1;a[v]=F;F=D+ -1|0;if((F|0)==0){break b}v=c[k>>2]|0;D=F;E=E+1|0}}}while(0);x=(c[g>>2]|0)+4|0;c[g>>2]=x;c:do{if((x|0)==(f|0)){G=f}else{w=x;while(1){E=w+4|0;if((c[w>>2]|0)==0){G=w;break c}if((E|0)==(f|0)){G=f;break}else{w=E}}}}while(0);A=x;B=c[k>>2]|0;C=G}if((A|0)==(f|0)|(B|0)==(j|0)){H=A;break a}else{s=A;t=B;u=C}}if((z|0)==10){c[k>>2]=t;d:do{if((s|0)==(c[g>>2]|0)){I=s}else{u=s;p=t;while(1){w=c[u>>2]|0;E=nc(c[q>>2]|0)|0;D=Fu(p,w,m)|0;if((E|0)!=0){nc(E|0)|0}if((D|0)==-1){I=u;break d}E=(c[k>>2]|0)+D|0;c[k>>2]=E;D=u+4|0;if((D|0)==(c[g>>2]|0)){I=D;break}else{u=D;p=E}}}}while(0);c[g>>2]=I;y=2;i=l;return y|0}else if((z|0)==31){H=c[g>>2]|0;break}else if((z|0)==33){i=l;return y|0}}else{H=e}}else{c[k>>2]=h;c[g>>2]=e;H=e}}while(0);y=(H|0)!=(f|0)|0;i=l;return y|0}function ft(b,d,e,f,g,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;l=i;i=i+16|0;m=l;n=(e|0)==(f|0);a:do{if(!n){o=e;while(1){p=o+1|0;if((a[o]|0)==0){q=o;break}if((p|0)==(f|0)){q=f;break}else{o=p}}c[k>>2]=h;c[g>>2]=e;if(!(n|(h|0)==(j|0))){o=j;p=b+8|0;r=e;s=h;t=q;while(1){u=d;v=c[u+4>>2]|0;w=m;c[w>>2]=c[u>>2];c[w+4>>2]=v;x=t;v=nc(c[p>>2]|0)|0;w=Cu(s,g,x-r|0,o-s>>2,d)|0;if((v|0)!=0){nc(v|0)|0}if((w|0)==-1){y=10;break}else if((w|0)==0){z=2;y=32;break}v=(c[k>>2]|0)+(w<<2)|0;c[k>>2]=v;if((v|0)==(j|0)){y=30;break}w=c[g>>2]|0;if((t|0)==(f|0)){A=w;B=v;C=f}else{u=nc(c[p>>2]|0)|0;D=Bu(v,w,1,d)|0;if((u|0)!=0){nc(u|0)|0}if((D|0)!=0){z=2;y=32;break}c[k>>2]=(c[k>>2]|0)+4;D=(c[g>>2]|0)+1|0;c[g>>2]=D;b:do{if((D|0)==(f|0)){E=f}else{u=D;while(1){w=u+1|0;if((a[u]|0)==0){E=u;break b}if((w|0)==(f|0)){E=f;break}else{u=w}}}}while(0);A=D;B=c[k>>2]|0;C=E}if((A|0)==(f|0)|(B|0)==(j|0)){F=A;break a}else{r=A;s=B;t=C}}if((y|0)==10){c[k>>2]=s;c:do{if((r|0)!=(c[g>>2]|0)){t=r;o=s;while(1){u=nc(c[p>>2]|0)|0;w=Bu(o,t,x-t|0,m)|0;if((u|0)!=0){nc(u|0)|0}if((w|0)==0){G=t+1|0}else if((w|0)==-2){y=16;break}else if((w|0)==-1){y=15;break}else{G=t+w|0}w=(c[k>>2]|0)+4|0;c[k>>2]=w;if((G|0)==(c[g>>2]|0)){H=G;break c}else{t=G;o=w}}if((y|0)==15){c[g>>2]=t;z=2;i=l;return z|0}else if((y|0)==16){c[g>>2]=t;z=1;i=l;return z|0}}else{H=r}}while(0);c[g>>2]=H;z=(H|0)!=(f|0)|0;i=l;return z|0}else if((y|0)==30){F=c[g>>2]|0;break}else if((y|0)==32){i=l;return z|0}}else{F=e}}else{c[k>>2]=h;c[g>>2]=e;F=e}}while(0);z=(F|0)!=(f|0)|0;i=l;return z|0}function gt(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0;h=i;i=i+16|0;j=h;c[g>>2]=e;e=nc(c[b+8>>2]|0)|0;b=Fu(j,0,d)|0;if((e|0)!=0){nc(e|0)|0}if((b|0)==0|(b|0)==-1){k=2;i=h;return k|0}e=b+ -1|0;b=c[g>>2]|0;if(e>>>0>(f-b|0)>>>0){k=1;i=h;return k|0}if((e|0)==0){k=0;i=h;return k|0}else{l=b;m=e;n=j}while(1){j=a[n]|0;c[g>>2]=l+1;a[l]=j;j=m+ -1|0;if((j|0)==0){k=0;break}l=c[g>>2]|0;m=j;n=n+1|0}i=h;return k|0}function ht(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;d=a+8|0;a=nc(c[d>>2]|0)|0;e=Eu(0,0,4)|0;if((a|0)!=0){nc(a|0)|0}if((e|0)==0){e=c[d>>2]|0;if((e|0)!=0){d=nc(e|0)|0;if((d|0)==0){f=0}else{nc(d|0)|0;f=0}}else{f=1}}else{f=-1}i=b;return f|0}function it(a){a=a|0;return 0}function jt(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;g=i;if((f|0)==0|(d|0)==(e|0)){h=0;i=g;return h|0}j=e;k=a+8|0;a=d;d=0;l=0;while(1){m=nc(c[k>>2]|0)|0;n=Au(a,j-a|0,b)|0;if((m|0)!=0){nc(m|0)|0}if((n|0)==0){o=a+1|0;p=1}else if((n|0)==-2|(n|0)==-1){h=d;q=9;break}else{o=a+n|0;p=n}n=p+d|0;m=l+1|0;if(m>>>0>=f>>>0|(o|0)==(e|0)){h=n;q=9;break}else{a=o;d=n;l=m}}if((q|0)==9){i=g;return h|0}return 0}function kt(a){a=a|0;var b=0,d=0,e=0;b=i;d=c[a+8>>2]|0;if((d|0)!=0){a=nc(d|0)|0;if((a|0)==0){e=4}else{nc(a|0)|0;e=4}}else{e=1}i=b;return e|0}function lt(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function mt(a,b,d,e,f,g,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0;b=i;i=i+16|0;a=b+4|0;k=b;c[a>>2]=d;c[k>>2]=g;l=nt(d,e,a,g,h,k,1114111,0)|0;c[f>>2]=d+((c[a>>2]|0)-d>>1<<1);c[j>>2]=g+((c[k>>2]|0)-g);i=b;return l|0}function nt(d,f,g,h,j,k,l,m){d=d|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0;n=i;c[g>>2]=d;c[k>>2]=h;do{if((m&2|0)!=0){if((j-h|0)<3){o=1;i=n;return o|0}else{c[k>>2]=h+1;a[h]=-17;d=c[k>>2]|0;c[k>>2]=d+1;a[d]=-69;d=c[k>>2]|0;c[k>>2]=d+1;a[d]=-65;break}}}while(0);h=f;m=c[g>>2]|0;if(!(m>>>0<f>>>0)){o=0;i=n;return o|0}d=j;j=m;a:while(1){m=b[j>>1]|0;p=m&65535;if(p>>>0>l>>>0){o=2;q=26;break}do{if((m&65535)<128){r=c[k>>2]|0;if((d-r|0)<1){o=1;q=26;break a}c[k>>2]=r+1;a[r]=m}else{if((m&65535)<2048){r=c[k>>2]|0;if((d-r|0)<2){o=1;q=26;break a}c[k>>2]=r+1;a[r]=p>>>6|192;r=c[k>>2]|0;c[k>>2]=r+1;a[r]=p&63|128;break}if((m&65535)<55296){r=c[k>>2]|0;if((d-r|0)<3){o=1;q=26;break a}c[k>>2]=r+1;a[r]=p>>>12|224;r=c[k>>2]|0;c[k>>2]=r+1;a[r]=p>>>6&63|128;r=c[k>>2]|0;c[k>>2]=r+1;a[r]=p&63|128;break}if(!((m&65535)<56320)){if((m&65535)<57344){o=2;q=26;break a}r=c[k>>2]|0;if((d-r|0)<3){o=1;q=26;break a}c[k>>2]=r+1;a[r]=p>>>12|224;r=c[k>>2]|0;c[k>>2]=r+1;a[r]=p>>>6&63|128;r=c[k>>2]|0;c[k>>2]=r+1;a[r]=p&63|128;break}if((h-j|0)<4){o=1;q=26;break a}r=j+2|0;s=e[r>>1]|0;if((s&64512|0)!=56320){o=2;q=26;break a}if((d-(c[k>>2]|0)|0)<4){o=1;q=26;break a}t=p&960;if(((t<<10)+65536|p<<10&64512|s&1023)>>>0>l>>>0){o=2;q=26;break a}c[g>>2]=r;r=(t>>>6)+1|0;t=c[k>>2]|0;c[k>>2]=t+1;a[t]=r>>>2|240;t=c[k>>2]|0;c[k>>2]=t+1;a[t]=p>>>2&15|r<<4&48|128;r=c[k>>2]|0;c[k>>2]=r+1;a[r]=p<<4&48|s>>>6&15|128;r=c[k>>2]|0;c[k>>2]=r+1;a[r]=s&63|128}}while(0);p=(c[g>>2]|0)+2|0;c[g>>2]=p;if(p>>>0<f>>>0){j=p}else{o=0;q=26;break}}if((q|0)==26){i=n;return o|0}return 0}function ot(a,b,d,e,f,g,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0;b=i;i=i+16|0;a=b+4|0;k=b;c[a>>2]=d;c[k>>2]=g;l=pt(d,e,a,g,h,k,1114111,0)|0;c[f>>2]=d+((c[a>>2]|0)-d);c[j>>2]=g+((c[k>>2]|0)-g>>1<<1);i=b;return l|0}function pt(e,f,g,h,j,k,l,m){e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;n=i;c[g>>2]=e;c[k>>2]=h;h=c[g>>2]|0;if(((((m&4|0)!=0?(f-h|0)>2:0)?(a[h]|0)==-17:0)?(a[h+1|0]|0)==-69:0)?(a[h+2|0]|0)==-65:0){m=h+3|0;c[g>>2]=m;o=m}else{o=h}a:do{if(o>>>0<f>>>0){h=f;m=j;e=c[k>>2]|0;p=o;b:while(1){if(!(e>>>0<j>>>0)){q=p;break a}r=a[p]|0;s=r&255;if(s>>>0>l>>>0){t=2;u=41;break}do{if(r<<24>>24>-1){b[e>>1]=r&255;c[g>>2]=p+1}else{if((r&255)<194){t=2;u=41;break b}if((r&255)<224){if((h-p|0)<2){t=1;u=41;break b}v=d[p+1|0]|0;if((v&192|0)!=128){t=2;u=41;break b}w=v&63|s<<6&1984;if(w>>>0>l>>>0){t=2;u=41;break b}b[e>>1]=w;c[g>>2]=p+2;break}if((r&255)<240){if((h-p|0)<3){t=1;u=41;break b}w=a[p+1|0]|0;v=a[p+2|0]|0;if((s|0)==237){if(!((w&-32)<<24>>24==-128)){t=2;u=41;break b}}else if((s|0)==224){if(!((w&-32)<<24>>24==-96)){t=2;u=41;break b}}else{if(!((w&-64)<<24>>24==-128)){t=2;u=41;break b}}x=v&255;if((x&192|0)!=128){t=2;u=41;break b}v=(w&255)<<6&4032|s<<12|x&63;if((v&65535)>>>0>l>>>0){t=2;u=41;break b}b[e>>1]=v;c[g>>2]=p+3;break}if(!((r&255)<245)){t=2;u=41;break b}if((h-p|0)<4){t=1;u=41;break b}v=a[p+1|0]|0;x=a[p+2|0]|0;w=a[p+3|0]|0;if((s|0)==240){if(!((v+112<<24>>24&255)<48)){t=2;u=41;break b}}else if((s|0)==244){if(!((v&-16)<<24>>24==-128)){t=2;u=41;break b}}else{if(!((v&-64)<<24>>24==-128)){t=2;u=41;break b}}y=x&255;if((y&192|0)!=128){t=2;u=41;break b}x=w&255;if((x&192|0)!=128){t=2;u=41;break b}if((m-e|0)<4){t=1;u=41;break b}w=s&7;z=v&255;v=y<<6;A=x&63;if((z<<12&258048|w<<18|v&4032|A)>>>0>l>>>0){t=2;u=41;break b}b[e>>1]=z<<2&60|y>>>4&3|((z>>>4&3|w<<2)<<6)+16320|55296;w=e+2|0;c[k>>2]=w;b[w>>1]=A|v&960|56320;c[g>>2]=(c[g>>2]|0)+4}}while(0);s=(c[k>>2]|0)+2|0;c[k>>2]=s;r=c[g>>2]|0;if(r>>>0<f>>>0){e=s;p=r}else{q=r;break a}}if((u|0)==41){i=n;return t|0}}else{q=o}}while(0);t=q>>>0<f>>>0|0;i=n;return t|0}function qt(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;c[f>>2]=d;return 3}function rt(a){a=a|0;return 0}function st(a){a=a|0;return 0}function tt(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;b=i;a=ut(c,d,e,1114111,0)|0;i=b;return a|0}function ut(b,c,e,f,g){b=b|0;c=c|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;h=i;if((((g&4|0)!=0?(c-b|0)>2:0)?(a[b]|0)==-17:0)?(a[b+1|0]|0)==-69:0){j=(a[b+2|0]|0)==-65?b+3|0:b}else{j=b}a:do{if(j>>>0<c>>>0&(e|0)!=0){g=c;k=j;l=0;b:while(1){m=a[k]|0;n=m&255;if(n>>>0>f>>>0){o=k;break a}do{if(m<<24>>24>-1){p=k+1|0;q=l}else{if((m&255)<194){o=k;break a}if((m&255)<224){if((g-k|0)<2){o=k;break a}r=d[k+1|0]|0;if((r&192|0)!=128){o=k;break a}if((r&63|n<<6&1984)>>>0>f>>>0){o=k;break a}p=k+2|0;q=l;break}if((m&255)<240){s=k;if((g-s|0)<3){o=k;break a}r=a[k+1|0]|0;t=a[k+2|0]|0;if((n|0)==237){if(!((r&-32)<<24>>24==-128)){u=23;break b}}else if((n|0)==224){if(!((r&-32)<<24>>24==-96)){u=21;break b}}else{if(!((r&-64)<<24>>24==-128)){u=25;break b}}v=t&255;if((v&192|0)!=128){o=k;break a}if(((r&255)<<6&4032|n<<12&61440|v&63)>>>0>f>>>0){o=k;break a}p=k+3|0;q=l;break}if(!((m&255)<245)){o=k;break a}w=k;if((g-w|0)<4){o=k;break a}if((e-l|0)>>>0<2){o=k;break a}v=a[k+1|0]|0;r=a[k+2|0]|0;t=a[k+3|0]|0;if((n|0)==244){if(!((v&-16)<<24>>24==-128)){u=36;break b}}else if((n|0)==240){if(!((v+112<<24>>24&255)<48)){u=34;break b}}else{if(!((v&-64)<<24>>24==-128)){u=38;break b}}x=r&255;if((x&192|0)!=128){o=k;break a}r=t&255;if((r&192|0)!=128){o=k;break a}if(((v&255)<<12&258048|n<<18&1835008|x<<6&4032|r&63)>>>0>f>>>0){o=k;break a}p=k+4|0;q=l+1|0}}while(0);n=q+1|0;if(p>>>0<c>>>0&n>>>0<e>>>0){k=p;l=n}else{o=p;break a}}if((u|0)==21){y=s-b|0;i=h;return y|0}else if((u|0)==23){y=s-b|0;i=h;return y|0}else if((u|0)==25){y=s-b|0;i=h;return y|0}else if((u|0)==34){y=w-b|0;i=h;return y|0}else if((u|0)==36){y=w-b|0;i=h;return y|0}else if((u|0)==38){y=w-b|0;i=h;return y|0}}else{o=j}}while(0);y=o-b|0;i=h;return y|0}function vt(a){a=a|0;return 4}function wt(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function xt(a,b,d,e,f,g,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0;b=i;i=i+16|0;a=b+4|0;k=b;c[a>>2]=d;c[k>>2]=g;l=yt(d,e,a,g,h,k,1114111,0)|0;c[f>>2]=d+((c[a>>2]|0)-d>>2<<2);c[j>>2]=g+((c[k>>2]|0)-g);i=b;return l|0}function yt(b,d,e,f,g,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0;l=i;c[e>>2]=b;c[h>>2]=f;do{if((k&2|0)!=0){if((g-f|0)<3){m=1;i=l;return m|0}else{c[h>>2]=f+1;a[f]=-17;b=c[h>>2]|0;c[h>>2]=b+1;a[b]=-69;b=c[h>>2]|0;c[h>>2]=b+1;a[b]=-65;break}}}while(0);f=c[e>>2]|0;if(!(f>>>0<d>>>0)){m=0;i=l;return m|0}k=g;g=f;a:while(1){f=c[g>>2]|0;if((f&-2048|0)==55296|f>>>0>j>>>0){m=2;n=19;break}do{if(!(f>>>0<128)){if(f>>>0<2048){b=c[h>>2]|0;if((k-b|0)<2){m=1;n=19;break a}c[h>>2]=b+1;a[b]=f>>>6|192;b=c[h>>2]|0;c[h>>2]=b+1;a[b]=f&63|128;break}b=c[h>>2]|0;o=k-b|0;if(f>>>0<65536){if((o|0)<3){m=1;n=19;break a}c[h>>2]=b+1;a[b]=f>>>12|224;p=c[h>>2]|0;c[h>>2]=p+1;a[p]=f>>>6&63|128;p=c[h>>2]|0;c[h>>2]=p+1;a[p]=f&63|128;break}else{if((o|0)<4){m=1;n=19;break a}c[h>>2]=b+1;a[b]=f>>>18|240;b=c[h>>2]|0;c[h>>2]=b+1;a[b]=f>>>12&63|128;b=c[h>>2]|0;c[h>>2]=b+1;a[b]=f>>>6&63|128;b=c[h>>2]|0;c[h>>2]=b+1;a[b]=f&63|128;break}}else{b=c[h>>2]|0;if((k-b|0)<1){m=1;n=19;break a}c[h>>2]=b+1;a[b]=f}}while(0);f=(c[e>>2]|0)+4|0;c[e>>2]=f;if(f>>>0<d>>>0){g=f}else{m=0;n=19;break}}if((n|0)==19){i=l;return m|0}return 0}function zt(a,b,d,e,f,g,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0;b=i;i=i+16|0;a=b+4|0;k=b;c[a>>2]=d;c[k>>2]=g;l=At(d,e,a,g,h,k,1114111,0)|0;c[f>>2]=d+((c[a>>2]|0)-d);c[j>>2]=g+((c[k>>2]|0)-g>>2<<2);i=b;return l|0}function At(b,e,f,g,h,j,k,l){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;m=i;c[f>>2]=b;c[j>>2]=g;g=c[f>>2]|0;if(((((l&4|0)!=0?(e-g|0)>2:0)?(a[g]|0)==-17:0)?(a[g+1|0]|0)==-69:0)?(a[g+2|0]|0)==-65:0){l=g+3|0;c[f>>2]=l;n=l}else{n=g}a:do{if(n>>>0<e>>>0){g=e;l=c[j>>2]|0;b=n;while(1){if(!(l>>>0<h>>>0)){o=b;p=39;break a}q=a[b]|0;r=q&255;do{if(q<<24>>24>-1){if(r>>>0>k>>>0){s=2;break a}c[l>>2]=r;c[f>>2]=b+1}else{if((q&255)<194){s=2;break a}if((q&255)<224){if((g-b|0)<2){s=1;break a}t=d[b+1|0]|0;if((t&192|0)!=128){s=2;break a}u=t&63|r<<6&1984;if(u>>>0>k>>>0){s=2;break a}c[l>>2]=u;c[f>>2]=b+2;break}if((q&255)<240){if((g-b|0)<3){s=1;break a}u=a[b+1|0]|0;t=a[b+2|0]|0;if((r|0)==237){if(!((u&-32)<<24>>24==-128)){s=2;break a}}else if((r|0)==224){if(!((u&-32)<<24>>24==-96)){s=2;break a}}else{if(!((u&-64)<<24>>24==-128)){s=2;break a}}v=t&255;if((v&192|0)!=128){s=2;break a}t=(u&255)<<6&4032|r<<12&61440|v&63;if(t>>>0>k>>>0){s=2;break a}c[l>>2]=t;c[f>>2]=b+3;break}if(!((q&255)<245)){s=2;break a}if((g-b|0)<4){s=1;break a}t=a[b+1|0]|0;v=a[b+2|0]|0;u=a[b+3|0]|0;if((r|0)==240){if(!((t+112<<24>>24&255)<48)){s=2;break a}}else if((r|0)==244){if(!((t&-16)<<24>>24==-128)){s=2;break a}}else{if(!((t&-64)<<24>>24==-128)){s=2;break a}}w=v&255;if((w&192|0)!=128){s=2;break a}v=u&255;if((v&192|0)!=128){s=2;break a}u=(t&255)<<12&258048|r<<18&1835008|w<<6&4032|v&63;if(u>>>0>k>>>0){s=2;break a}c[l>>2]=u;c[f>>2]=b+4}}while(0);r=(c[j>>2]|0)+4|0;c[j>>2]=r;q=c[f>>2]|0;if(q>>>0<e>>>0){l=r;b=q}else{o=q;p=39;break}}}else{o=n;p=39}}while(0);if((p|0)==39){s=o>>>0<e>>>0|0}i=m;return s|0}function Bt(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;c[f>>2]=d;return 3}function Ct(a){a=a|0;return 0}function Dt(a){a=a|0;return 0}function Et(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;b=i;a=Ft(c,d,e,1114111,0)|0;i=b;return a|0}function Ft(b,c,e,f,g){b=b|0;c=c|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;h=i;if((((g&4|0)!=0?(c-b|0)>2:0)?(a[b]|0)==-17:0)?(a[b+1|0]|0)==-69:0){j=(a[b+2|0]|0)==-65?b+3|0:b}else{j=b}a:do{if(j>>>0<c>>>0&(e|0)!=0){g=c;k=j;l=1;b:while(1){m=a[k]|0;n=m&255;do{if(m<<24>>24>-1){if(n>>>0>f>>>0){o=k;break a}p=k+1|0}else{if((m&255)<194){o=k;break a}if((m&255)<224){if((g-k|0)<2){o=k;break a}q=d[k+1|0]|0;if((q&192|0)!=128){o=k;break a}if((q&63|n<<6&1984)>>>0>f>>>0){o=k;break a}p=k+2|0;break}if((m&255)<240){r=k;if((g-r|0)<3){o=k;break a}q=a[k+1|0]|0;s=a[k+2|0]|0;if((n|0)==237){if(!((q&-32)<<24>>24==-128)){t=23;break b}}else if((n|0)==224){if(!((q&-32)<<24>>24==-96)){t=21;break b}}else{if(!((q&-64)<<24>>24==-128)){t=25;break b}}u=s&255;if((u&192|0)!=128){o=k;break a}if(((q&255)<<6&4032|n<<12&61440|u&63)>>>0>f>>>0){o=k;break a}p=k+3|0;break}if(!((m&255)<245)){o=k;break a}v=k;if((g-v|0)<4){o=k;break a}u=a[k+1|0]|0;q=a[k+2|0]|0;s=a[k+3|0]|0;if((n|0)==240){if(!((u+112<<24>>24&255)<48)){t=33;break b}}else if((n|0)==244){if(!((u&-16)<<24>>24==-128)){t=35;break b}}else{if(!((u&-64)<<24>>24==-128)){t=37;break b}}w=q&255;if((w&192|0)!=128){o=k;break a}q=s&255;if((q&192|0)!=128){o=k;break a}if(((u&255)<<12&258048|n<<18&1835008|w<<6&4032|q&63)>>>0>f>>>0){o=k;break a}p=k+4|0}}while(0);if(!(p>>>0<c>>>0&l>>>0<e>>>0)){o=p;break a}k=p;l=l+1|0}if((t|0)==21){x=r-b|0;i=h;return x|0}else if((t|0)==23){x=r-b|0;i=h;return x|0}else if((t|0)==25){x=r-b|0;i=h;return x|0}else if((t|0)==33){x=v-b|0;i=h;return x|0}else if((t|0)==35){x=v-b|0;i=h;return x|0}else if((t|0)==37){x=v-b|0;i=h;return x|0}}else{o=j}}while(0);x=o-b|0;i=h;return x|0}function Gt(a){a=a|0;return 4}function Ht(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function It(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function Jt(a){a=a|0;var b=0;b=i;c[a>>2]=22312;Rm(a+12|0);vv(a);i=b;return}function Kt(a){a=a|0;var b=0;b=i;c[a>>2]=22312;Rm(a+12|0);i=b;return}function Lt(a){a=a|0;var b=0;b=i;c[a>>2]=22352;Rm(a+16|0);vv(a);i=b;return}function Mt(a){a=a|0;var b=0;b=i;c[a>>2]=22352;Rm(a+16|0);i=b;return}function Nt(b){b=b|0;return a[b+8|0]|0}function Ot(a){a=a|0;return c[a+8>>2]|0}function Pt(b){b=b|0;return a[b+9|0]|0}function Qt(a){a=a|0;return c[a+12>>2]|0}function Rt(a,b){a=a|0;b=b|0;var c=0;c=i;Om(a,b+12|0);i=c;return}function St(a,b){a=a|0;b=b|0;var c=0;c=i;Om(a,b+16|0);i=c;return}function Tt(a,b){a=a|0;b=b|0;b=i;Pm(a,22384,4);i=b;return}function Ut(a,b){a=a|0;b=b|0;b=i;$m(a,22392,Ou(22392)|0);i=b;return}function Vt(a,b){a=a|0;b=b|0;b=i;Pm(a,22416,5);i=b;return}function Wt(a,b){a=a|0;b=b|0;b=i;$m(a,22424,Ou(22424)|0);i=b;return}function Xt(b){b=b|0;var d=0;b=i;if((a[22456]|0)!=0){d=c[5612]|0;i=b;return d|0}if((ab(22456)|0)==0){d=c[5612]|0;i=b;return d|0}if((a[29656]|0)==0?(ab(29656)|0)!=0:0){Ov(29488,0,168)|0;Ag(169,0,p|0)|0;Bc(29656)}Tm(29488,29664)|0;Tm(29500|0,29672)|0;Tm(29512|0,29680)|0;Tm(29524|0,29688)|0;Tm(29536|0,29704)|0;Tm(29548|0,29720)|0;Tm(29560|0,29728)|0;Tm(29572|0,29744)|0;Tm(29584|0,29752)|0;Tm(29596|0,29760)|0;Tm(29608|0,29768)|0;Tm(29620|0,29776)|0;Tm(29632|0,29784)|0;Tm(29644|0,29792)|0;c[5612]=29488;Bc(22456);d=c[5612]|0;i=b;return d|0}function Yt(b){b=b|0;var d=0;b=i;if((a[22472]|0)!=0){d=c[5616]|0;i=b;return d|0}if((ab(22472)|0)==0){d=c[5616]|0;i=b;return d|0}if((a[29120]|0)==0?(ab(29120)|0)!=0:0){Ov(28952,0,168)|0;Ag(170,0,p|0)|0;Bc(29120)}cn(28952,29128)|0;cn(28964|0,29160)|0;cn(28976|0,29192)|0;cn(28988|0,29224)|0;cn(29e3|0,29264)|0;cn(29012|0,29304)|0;cn(29024|0,29336)|0;cn(29036|0,29376)|0;cn(29048|0,29392)|0;cn(29060|0,29408)|0;cn(29072|0,29424)|0;cn(29084|0,29440)|0;cn(29096|0,29456)|0;cn(29108|0,29472)|0;c[5616]=28952;Bc(22472);d=c[5616]|0;i=b;return d|0}function Zt(b){b=b|0;var d=0;b=i;if((a[22488]|0)!=0){d=c[5620]|0;i=b;return d|0}if((ab(22488)|0)==0){d=c[5620]|0;i=b;return d|0}if((a[28728]|0)==0?(ab(28728)|0)!=0:0){Ov(28440,0,288)|0;Ag(171,0,p|0)|0;Bc(28728)}Tm(28440,28736)|0;Tm(28452|0,28744)|0;Tm(28464|0,28760)|0;Tm(28476|0,28768)|0;Tm(28488|0,28776)|0;Tm(28500|0,28784)|0;Tm(28512|0,28792)|0;Tm(28524|0,28800)|0;Tm(28536|0,28808)|0;Tm(28548|0,28824)|0;Tm(28560|0,28832)|0;Tm(28572|0,28848)|0;Tm(28584|0,28864)|0;Tm(28596|0,28872)|0;Tm(28608|0,28880)|0;Tm(28620|0,28888)|0;Tm(28632|0,28776)|0;Tm(28644|0,28896)|0;Tm(28656|0,28904)|0;Tm(28668|0,28912)|0;Tm(28680|0,28920)|0;Tm(28692|0,28928)|0;Tm(28704|0,28936)|0;Tm(28716|0,28944)|0;c[5620]=28440;Bc(22488);d=c[5620]|0;i=b;return d|0}function _t(b){b=b|0;var d=0;b=i;if((a[22504]|0)!=0){d=c[5624]|0;i=b;return d|0}if((ab(22504)|0)==0){d=c[5624]|0;i=b;return d|0}if((a[27888]|0)==0?(ab(27888)|0)!=0:0){Ov(27600,0,288)|0;Ag(172,0,p|0)|0;Bc(27888)}cn(27600,27896)|0;cn(27612|0,27928)|0;cn(27624|0,27968)|0;cn(27636|0,27992)|0;cn(27648|0,28312)|0;cn(27660|0,28016)|0;cn(27672|0,28040)|0;cn(27684|0,28064)|0;cn(27696|0,28096)|0;cn(27708|0,28136)|0;cn(27720|0,28168)|0;cn(27732|0,28208)|0;cn(27744|0,28248)|0;cn(27756|0,28264)|0;cn(27768|0,28280)|0;cn(27780|0,28296)|0;cn(27792|0,28312)|0;cn(27804|0,28328)|0;cn(27816|0,28344)|0;cn(27828|0,28360)|0;cn(27840|0,28376)|0;cn(27852|0,28392)|0;cn(27864|0,28408)|0;cn(27876|0,28424)|0;c[5624]=27600;Bc(22504);d=c[5624]|0;i=b;return d|0}function $t(b){b=b|0;var d=0;b=i;if((a[22520]|0)!=0){d=c[5628]|0;i=b;return d|0}if((ab(22520)|0)==0){d=c[5628]|0;i=b;return d|0}if((a[27576]|0)==0?(ab(27576)|0)!=0:0){Ov(27288,0,288)|0;Ag(173,0,p|0)|0;Bc(27576)}Tm(27288,27584)|0;Tm(27300|0,27592)|0;c[5628]=27288;Bc(22520);d=c[5628]|0;i=b;return d|0}function au(b){b=b|0;var d=0;b=i;if((a[22536]|0)!=0){d=c[5632]|0;i=b;return d|0}if((ab(22536)|0)==0){d=c[5632]|0;i=b;return d|0}if((a[27248]|0)==0?(ab(27248)|0)!=0:0){Ov(26960,0,288)|0;Ag(174,0,p|0)|0;Bc(27248)}cn(26960,27256)|0;cn(26972|0,27272)|0;c[5632]=26960;Bc(22536);d=c[5632]|0;i=b;return d|0}function bu(b){b=b|0;b=i;if((a[22560]|0)==0?(ab(22560)|0)!=0:0){Pm(22544,22568,8);Ag(175,22544,p|0)|0;Bc(22560)}i=b;return 22544}function cu(b){b=b|0;b=i;if((a[22600]|0)!=0){i=b;return 22584}if((ab(22600)|0)==0){i=b;return 22584}$m(22584,22608,Ou(22608)|0);Ag(176,22584,p|0)|0;Bc(22600);i=b;return 22584}function du(b){b=b|0;b=i;if((a[22664]|0)==0?(ab(22664)|0)!=0:0){Pm(22648,22672,8);Ag(175,22648,p|0)|0;Bc(22664)}i=b;return 22648}function eu(b){b=b|0;b=i;if((a[22704]|0)!=0){i=b;return 22688}if((ab(22704)|0)==0){i=b;return 22688}$m(22688,22712,Ou(22712)|0);Ag(176,22688,p|0)|0;Bc(22704);i=b;return 22688}function fu(b){b=b|0;b=i;if((a[22768]|0)==0?(ab(22768)|0)!=0:0){Pm(22752,22776,20);Ag(175,22752,p|0)|0;Bc(22768)}i=b;return 22752}function gu(b){b=b|0;b=i;if((a[22816]|0)!=0){i=b;return 22800}if((ab(22816)|0)==0){i=b;return 22800}$m(22800,22824,Ou(22824)|0);Ag(176,22800,p|0)|0;Bc(22816);i=b;return 22800}function hu(b){b=b|0;b=i;if((a[22928]|0)==0?(ab(22928)|0)!=0:0){Pm(22912,22936,11);Ag(175,22912,p|0)|0;Bc(22928)}i=b;return 22912}function iu(b){b=b|0;b=i;if((a[22968]|0)!=0){i=b;return 22952}if((ab(22968)|0)==0){i=b;return 22952}$m(22952,22976,Ou(22976)|0);Ag(176,22952,p|0)|0;Bc(22968);i=b;return 22952}function ju(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0.0,j=0,k=0,l=0.0;f=i;i=i+16|0;g=f;if((b|0)==(d|0)){c[e>>2]=4;h=0.0;i=f;return+h}j=be()|0;k=c[j>>2]|0;c[j>>2]=0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}l=+Jv(b,g,c[5508]|0);b=c[j>>2]|0;if((b|0)==0){c[j>>2]=k}if((c[g>>2]|0)!=(d|0)){c[e>>2]=4;h=0.0;i=f;return+h}if((b|0)!=34){h=l;i=f;return+h}c[e>>2]=4;h=l;i=f;return+h}function ku(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0.0,j=0,k=0,l=0.0;f=i;i=i+16|0;g=f;if((b|0)==(d|0)){c[e>>2]=4;h=0.0;i=f;return+h}j=be()|0;k=c[j>>2]|0;c[j>>2]=0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}l=+Jv(b,g,c[5508]|0);b=c[j>>2]|0;if((b|0)==0){c[j>>2]=k}if((c[g>>2]|0)!=(d|0)){c[e>>2]=4;h=0.0;i=f;return+h}if((b|0)!=34){h=l;i=f;return+h}c[e>>2]=4;h=l;i=f;return+h}function lu(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0.0,j=0,k=0,l=0.0;f=i;i=i+16|0;g=f;if((b|0)==(d|0)){c[e>>2]=4;h=0.0;i=f;return+h}j=be()|0;k=c[j>>2]|0;c[j>>2]=0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}l=+Jv(b,g,c[5508]|0);b=c[j>>2]|0;if((b|0)==0){c[j>>2]=k}if((c[g>>2]|0)!=(d|0)){c[e>>2]=4;h=0.0;i=f;return+h}if((b|0)==34){c[e>>2]=4}h=l;i=f;return+h}function mu(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;g=i;i=i+16|0;h=g;do{if((b|0)!=(d|0)){if((a[b]|0)==45){c[e>>2]=4;j=0;k=0;break}l=be()|0;m=c[l>>2]|0;c[l>>2]=0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}n=td(b|0,h|0,f|0,c[5508]|0)|0;o=c[l>>2]|0;if((o|0)==0){c[l>>2]=m}if((c[h>>2]|0)!=(d|0)){c[e>>2]=4;j=0;k=0;break}if((o|0)==34){c[e>>2]=4;j=-1;k=-1}else{j=I;k=n}}else{c[e>>2]=4;j=0;k=0}}while(0);I=j;i=g;return k|0}function nu(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;g=i;i=i+16|0;h=g;if((b|0)==(d|0)){c[e>>2]=4;j=0;i=g;return j|0}if((a[b]|0)==45){c[e>>2]=4;j=0;i=g;return j|0}k=be()|0;l=c[k>>2]|0;c[k>>2]=0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}m=td(b|0,h|0,f|0,c[5508]|0)|0;f=I;b=c[k>>2]|0;if((b|0)==0){c[k>>2]=l}if((c[h>>2]|0)!=(d|0)){c[e>>2]=4;j=0;i=g;return j|0}if((b|0)==34|(f>>>0>0|(f|0)==0&m>>>0>4294967295)){c[e>>2]=4;j=-1;i=g;return j|0}else{j=m;i=g;return j|0}return 0}function ou(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;g=i;i=i+16|0;h=g;if((b|0)==(d|0)){c[e>>2]=4;j=0;i=g;return j|0}if((a[b]|0)==45){c[e>>2]=4;j=0;i=g;return j|0}k=be()|0;l=c[k>>2]|0;c[k>>2]=0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}m=td(b|0,h|0,f|0,c[5508]|0)|0;f=I;b=c[k>>2]|0;if((b|0)==0){c[k>>2]=l}if((c[h>>2]|0)!=(d|0)){c[e>>2]=4;j=0;i=g;return j|0}if((b|0)==34|(f>>>0>0|(f|0)==0&m>>>0>4294967295)){c[e>>2]=4;j=-1;i=g;return j|0}else{j=m;i=g;return j|0}return 0}function pu(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;g=i;i=i+16|0;h=g;if((b|0)==(d|0)){c[e>>2]=4;j=0;i=g;return j|0}if((a[b]|0)==45){c[e>>2]=4;j=0;i=g;return j|0}k=be()|0;l=c[k>>2]|0;c[k>>2]=0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}m=td(b|0,h|0,f|0,c[5508]|0)|0;f=I;b=c[k>>2]|0;if((b|0)==0){c[k>>2]=l}if((c[h>>2]|0)!=(d|0)){c[e>>2]=4;j=0;i=g;return j|0}if((b|0)==34|(f>>>0>0|(f|0)==0&m>>>0>65535)){c[e>>2]=4;j=-1;i=g;return j|0}else{j=m&65535;i=g;return j|0}return 0}function qu(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;g=i;i=i+16|0;h=g;if((b|0)==(d|0)){c[e>>2]=4;j=0;k=0;I=j;i=g;return k|0}l=be()|0;m=c[l>>2]|0;c[l>>2]=0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}n=Yb(b|0,h|0,f|0,c[5508]|0)|0;f=I;b=c[l>>2]|0;if((b|0)==0){c[l>>2]=m}if((c[h>>2]|0)!=(d|0)){c[e>>2]=4;j=0;k=0;I=j;i=g;return k|0}if((b|0)==34){c[e>>2]=4;e=(f|0)>0|(f|0)==0&n>>>0>0;I=e?2147483647:-2147483648;i=g;return(e?-1:0)|0}else{j=f;k=n;I=j;i=g;return k|0}return 0}function ru(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;g=i;i=i+16|0;h=g;if((b|0)==(d|0)){c[e>>2]=4;j=0;i=g;return j|0}k=be()|0;l=c[k>>2]|0;c[k>>2]=0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}m=Yb(b|0,h|0,f|0,c[5508]|0)|0;f=I;b=c[k>>2]|0;if((b|0)==0){c[k>>2]=l}if((c[h>>2]|0)!=(d|0)){c[e>>2]=4;j=0;i=g;return j|0}do{if((b|0)==34){c[e>>2]=4;if((f|0)>0|(f|0)==0&m>>>0>0){j=2147483647;i=g;return j|0}}else{if((f|0)<-1|(f|0)==-1&m>>>0<2147483648){c[e>>2]=4;break}if((f|0)>0|(f|0)==0&m>>>0>2147483647){c[e>>2]=4;j=2147483647;i=g;return j|0}else{j=m;i=g;return j|0}}}while(0);j=-2147483648;i=g;return j|0}function su(a){a=a|0;var b=0,e=0,f=0,g=0,h=0;b=i;e=a+4|0;f=d[e]|d[e+1|0]<<8|d[e+2|0]<<16|d[e+3|0]<<24;g=e+4|0;e=d[g]|d[g+1|0]<<8|d[g+2|0]<<16|d[g+3|0]<<24;g=(c[a>>2]|0)+(e>>1)|0;if((e&1|0)==0){h=f;Kg[h&255](g);i=b;return}else{h=c[(c[g>>2]|0)+f>>2]|0;Kg[h&255](g);i=b;return}}function tu(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;e=i;f=b+8|0;g=b+4|0;h=c[g>>2]|0;j=c[f>>2]|0;k=h;if(!(j-k>>2>>>0<d>>>0)){l=d;m=h;do{if((m|0)==0){n=0}else{c[m>>2]=0;n=c[g>>2]|0}m=n+4|0;c[g>>2]=m;l=l+ -1|0}while((l|0)!=0);i=e;return}l=b+16|0;m=c[b>>2]|0;n=k-m>>2;k=n+d|0;if(k>>>0>1073741823){ns(0)}h=j-m|0;if(h>>2>>>0<536870911){m=h>>1;h=m>>>0<k>>>0?k:m;if((h|0)!=0){m=b+128|0;if((a[m]|0)==0&h>>>0<29){a[m]=1;o=h;p=l}else{q=h;r=11}}else{o=0;p=0}}else{q=1073741823;r=11}if((r|0)==11){o=q;p=sv(q<<2)|0}q=d;d=p+(n<<2)|0;do{if((d|0)==0){s=0}else{c[d>>2]=0;s=d}d=s+4|0;q=q+ -1|0}while((q|0)!=0);q=c[b>>2]|0;s=(c[g>>2]|0)-q|0;r=p+(n-(s>>2)<<2)|0;Nv(r|0,q|0,s|0)|0;c[b>>2]=r;c[g>>2]=d;c[f>>2]=p+(o<<2);if((q|0)==0){i=e;return}if((l|0)==(q|0)){a[b+128|0]=0;i=e;return}else{vv(q);i=e;return}}function uu(a){a=a|0;a=i;bn(27236|0);bn(27224|0);bn(27212|0);bn(27200|0);bn(27188|0);bn(27176|0);bn(27164|0);bn(27152|0);bn(27140|0);bn(27128|0);bn(27116|0);bn(27104|0);bn(27092|0);bn(27080|0);bn(27068|0);bn(27056|0);bn(27044|0);bn(27032|0);bn(27020|0);bn(27008|0);bn(26996|0);bn(26984|0);bn(26972|0);bn(26960);i=a;return}function vu(a){a=a|0;a=i;Rm(27564|0);Rm(27552|0);Rm(27540|0);Rm(27528|0);Rm(27516|0);Rm(27504|0);Rm(27492|0);Rm(27480|0);Rm(27468|0);Rm(27456|0);Rm(27444|0);Rm(27432|0);Rm(27420|0);Rm(27408|0);Rm(27396|0);Rm(27384|0);Rm(27372|0);Rm(27360|0);Rm(27348|0);Rm(27336|0);Rm(27324|0);Rm(27312|0);Rm(27300|0);Rm(27288);i=a;return}function wu(a){a=a|0;a=i;bn(27876|0);bn(27864|0);bn(27852|0);bn(27840|0);bn(27828|0);bn(27816|0);bn(27804|0);bn(27792|0);bn(27780|0);bn(27768|0);bn(27756|0);bn(27744|0);bn(27732|0);bn(27720|0);bn(27708|0);bn(27696|0);bn(27684|0);bn(27672|0);bn(27660|0);bn(27648|0);bn(27636|0);bn(27624|0);bn(27612|0);bn(27600);i=a;return}function xu(a){a=a|0;a=i;Rm(28716|0);Rm(28704|0);Rm(28692|0);Rm(28680|0);Rm(28668|0);Rm(28656|0);Rm(28644|0);Rm(28632|0);Rm(28620|0);Rm(28608|0);Rm(28596|0);Rm(28584|0);Rm(28572|0);Rm(28560|0);Rm(28548|0);Rm(28536|0);Rm(28524|0);Rm(28512|0);Rm(28500|0);Rm(28488|0);Rm(28476|0);Rm(28464|0);Rm(28452|0);Rm(28440);i=a;return}function yu(a){a=a|0;a=i;bn(29108|0);bn(29096|0);bn(29084|0);bn(29072|0);bn(29060|0);bn(29048|0);bn(29036|0);bn(29024|0);bn(29012|0);bn(29e3|0);bn(28988|0);bn(28976|0);bn(28964|0);bn(28952);i=a;return}function zu(a){a=a|0;a=i;Rm(29644|0);Rm(29632|0);Rm(29620|0);Rm(29608|0);Rm(29596|0);Rm(29584|0);Rm(29572|0);Rm(29560|0);Rm(29548|0);Rm(29536|0);Rm(29524|0);Rm(29512|0);Rm(29500|0);Rm(29488);i=a;return}function Au(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=i;e=Bu(0,a,b,(c|0)!=0?c:30008)|0;i=d;return e|0}function Bu(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;g=i;i=i+16|0;h=g;c[h>>2]=b;j=(f|0)==0?30016:f;f=c[j>>2]|0;a:do{if((d|0)==0){if((f|0)==0){k=0;i=g;return k|0}}else{if((b|0)==0){c[h>>2]=h;l=h}else{l=b}if((e|0)==0){k=-2;i=g;return k|0}do{if((f|0)==0){m=a[d]|0;n=m&255;if(m<<24>>24>-1){c[l>>2]=n;k=m<<24>>24!=0|0;i=g;return k|0}else{m=n+ -194|0;if(m>>>0>50){break a}o=e+ -1|0;p=c[29800+(m<<2)>>2]|0;q=d+1|0;break}}else{o=e;p=f;q=d}}while(0);b:do{if((o|0)==0){r=p}else{m=a[q]|0;n=(m&255)>>>3;if((n+ -16|n+(p>>26))>>>0>7){break a}else{s=o;t=m;u=p;v=q}while(1){v=v+1|0;u=(t&255)+ -128|u<<6;s=s+ -1|0;if((u|0)>=0){break}if((s|0)==0){r=u;break b}t=a[v]|0;if(((t&255)+ -128|0)>>>0>63){break a}}c[j>>2]=0;c[l>>2]=u;k=e-s|0;i=g;return k|0}}while(0);c[j>>2]=r;k=-2;i=g;return k|0}}while(0);c[j>>2]=0;c[(be()|0)>>2]=84;k=-1;i=g;return k|0}function Cu(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;g=i;i=i+1040|0;h=g+8|0;j=g;k=c[b>>2]|0;c[j>>2]=k;l=(a|0)!=0;m=l?e:256;e=l?a:h;a:do{if((k|0)==0|(m|0)==0){n=d;o=m;p=k;q=0;r=e}else{a=d;s=m;t=k;u=0;v=e;while(1){w=a>>>2;x=w>>>0>=s>>>0;if(!(x|a>>>0>131)){n=a;o=s;p=t;q=u;r=v;break a}y=x?s:w;z=a-y|0;w=Du(v,j,y,f)|0;if((w|0)==-1){break}if((v|0)==(h|0)){A=s;B=h}else{A=s-w|0;B=v+(w<<2)|0}y=w+u|0;w=c[j>>2]|0;if((w|0)==0|(A|0)==0){n=z;o=A;p=w;q=y;r=B;break a}else{a=z;s=A;t=w;u=y;v=B}}n=z;o=0;p=c[j>>2]|0;q=-1;r=v}}while(0);b:do{if((p|0)!=0?!((o|0)==0|(n|0)==0):0){z=n;B=o;A=p;h=q;e=r;while(1){C=Bu(e,A,z,f)|0;if((C+2|0)>>>0<3){break}k=(c[j>>2]|0)+C|0;c[j>>2]=k;m=B+ -1|0;d=h+1|0;if((m|0)==0|(z|0)==(C|0)){D=d;break b}else{z=z-C|0;B=m;A=k;h=d;e=e+4|0}}if((C|0)==0){c[j>>2]=0;D=h;break}else if((C|0)==-1){D=-1;break}else{c[f>>2]=0;D=h;break}}else{D=q}}while(0);if(!l){i=g;return D|0}c[b>>2]=c[j>>2];i=g;return D|0}function Du(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0;h=i;j=c[e>>2]|0;if((g|0)!=0?(k=c[g>>2]|0,(k|0)!=0):0){if((b|0)==0){l=f;m=k;n=j;o=16}else{c[g>>2]=0;p=b;q=f;r=k;s=j;o=36}}else{if((b|0)==0){t=f;u=j;o=7}else{v=b;w=f;x=j;o=6}}a:while(1){if((o|0)==6){o=0;if((w|0)==0){y=f;o=53;break}else{z=v;A=w;B=x}while(1){j=a[B]|0;do{if(((j&255)+ -1|0)>>>0<127?(B&3|0)==0&A>>>0>3:0){k=z;g=A;C=B;while(1){D=c[C>>2]|0;if(((D+ -16843009|D)&-2139062144|0)!=0){o=30;break}c[k>>2]=D&255;c[k+4>>2]=d[C+1|0]|0;c[k+8>>2]=d[C+2|0]|0;E=C+4|0;F=k+16|0;c[k+12>>2]=d[C+3|0]|0;G=g+ -4|0;if(G>>>0>3){k=F;g=G;C=E}else{o=31;break}}if((o|0)==30){o=0;H=k;I=g;J=D&255;K=C;break}else if((o|0)==31){o=0;H=F;I=G;J=a[E]|0;K=E;break}}else{H=z;I=A;J=j;K=B}}while(0);L=J&255;if(!((L+ -1|0)>>>0<127)){break}c[H>>2]=L;j=I+ -1|0;if((j|0)==0){y=f;o=53;break a}else{z=H+4|0;A=j;B=K+1|0}}j=L+ -194|0;if(j>>>0>50){M=H;N=I;O=K;o=47;break}p=H;q=I;r=c[29800+(j<<2)>>2]|0;s=K+1|0;o=36;continue}else if((o|0)==7){o=0;j=a[u]|0;if(((j&255)+ -1|0)>>>0<127?(u&3|0)==0:0){P=c[u>>2]|0;if(((P+ -16843009|P)&-2139062144|0)==0){Q=t;R=u;while(1){S=R+4|0;T=Q+ -4|0;U=c[S>>2]|0;if(((U+ -16843009|U)&-2139062144|0)==0){Q=T;R=S}else{V=T;W=U;X=S;break}}}else{V=t;W=P;X=u}Y=V;Z=W&255;_=X}else{Y=t;Z=j;_=u}R=Z&255;if((R+ -1|0)>>>0<127){t=Y+ -1|0;u=_+1|0;o=7;continue}Q=R+ -194|0;if(Q>>>0>50){M=b;N=Y;O=_;o=47;break}l=Y;m=c[29800+(Q<<2)>>2]|0;n=_+1|0;o=16;continue}else if((o|0)==16){o=0;Q=(d[n]|0)>>>3;if((Q+ -16|Q+(m>>26))>>>0>7){o=17;break}Q=n+1|0;if((m&33554432|0)!=0){if(((d[Q]|0)+ -128|0)>>>0>63){o=20;break}R=n+2|0;if((m&524288|0)==0){$=R}else{if(((d[R]|0)+ -128|0)>>>0>63){o=23;break}$=n+3|0}}else{$=Q}t=l+ -1|0;u=$;o=7;continue}else if((o|0)==36){o=0;Q=d[s]|0;R=Q>>>3;if((R+ -16|R+(r>>26))>>>0>7){o=37;break}R=s+1|0;aa=Q+ -128|r<<6;if((aa|0)<0){Q=(d[R]|0)+ -128|0;if(Q>>>0>63){o=40;break}S=s+2|0;ba=Q|aa<<6;if((ba|0)<0){Q=(d[S]|0)+ -128|0;if(Q>>>0>63){o=43;break}ca=Q|ba<<6;da=s+3|0}else{ca=ba;da=S}}else{ca=aa;da=R}c[p>>2]=ca;v=p+4|0;w=q+ -1|0;x=da;o=6;continue}}if((o|0)==17){ea=b;fa=l;ga=m;ha=n+ -1|0;o=46}else if((o|0)==20){ea=b;fa=l;ga=m;ha=n+ -1|0;o=46}else if((o|0)==23){ea=b;fa=l;ga=m;ha=n+ -1|0;o=46}else if((o|0)==37){ea=p;fa=q;ga=r;ha=s+ -1|0;o=46}else if((o|0)==40){ea=p;fa=q;ga=aa;ha=s+ -1|0;o=46}else if((o|0)==43){ea=p;fa=q;ga=ba;ha=s+ -1|0;o=46}else if((o|0)==53){i=h;return y|0}if((o|0)==46){if((ga|0)==0){M=ea;N=fa;O=ha;o=47}else{ia=ea;ja=ha}}if((o|0)==47){if((a[O]|0)==0){if((M|0)!=0){c[M>>2]=0;c[e>>2]=0}y=f-N|0;i=h;return y|0}else{ia=M;ja=O}}c[(be()|0)>>2]=84;if((ia|0)==0){y=-1;i=h;return y|0}c[e>>2]=ja;y=-1;i=h;return y|0}function Eu(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;g=i;i=i+16|0;h=g;c[h>>2]=b;if((e|0)==0){j=0;i=g;return j|0}do{if((f|0)!=0){if((b|0)==0){c[h>>2]=h;k=h}else{k=b}l=a[e]|0;m=l&255;if(l<<24>>24>-1){c[k>>2]=m;j=l<<24>>24!=0|0;i=g;return j|0}l=m+ -194|0;if(!(l>>>0>50)){m=e+1|0;n=c[29800+(l<<2)>>2]|0;if(f>>>0<4?(n&-2147483648>>>((f*6|0)+ -6|0)|0)!=0:0){break}l=d[m]|0;m=l>>>3;if(!((m+ -16|m+(n>>26))>>>0>7)){m=l+ -128|n<<6;if((m|0)>=0){c[k>>2]=m;j=2;i=g;return j|0}n=(d[e+2|0]|0)+ -128|0;if(!(n>>>0>63)){l=n|m<<6;if((l|0)>=0){c[k>>2]=l;j=3;i=g;return j|0}m=(d[e+3|0]|0)+ -128|0;if(!(m>>>0>63)){c[k>>2]=m|l<<6;j=4;i=g;return j|0}}}}}}while(0);c[(be()|0)>>2]=84;j=-1;i=g;return j|0}function Fu(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;e=i;if((b|0)==0){f=1;i=e;return f|0}if(d>>>0<128){a[b]=d;f=1;i=e;return f|0}if(d>>>0<2048){a[b]=d>>>6|192;a[b+1|0]=d&63|128;f=2;i=e;return f|0}if(d>>>0<55296|(d+ -57344|0)>>>0<8192){a[b]=d>>>12|224;a[b+1|0]=d>>>6&63|128;a[b+2|0]=d&63|128;f=3;i=e;return f|0}if((d+ -65536|0)>>>0<1048576){a[b]=d>>>18|240;a[b+1|0]=d>>>12&63|128;a[b+2|0]=d>>>6&63|128;a[b+3|0]=d&63|128;f=4;i=e;return f|0}else{c[(be()|0)>>2]=84;f=-1;i=e;return f|0}return 0}function Gu(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;f=i;i=i+272|0;g=f+8|0;h=f;j=c[b>>2]|0;c[h>>2]=j;k=(a|0)!=0;l=k?e:256;e=k?a:g;a:do{if((j|0)==0|(l|0)==0){m=d;n=l;o=j;p=0;q=e}else{a=d;r=l;s=j;t=0;u=e;while(1){v=a>>>0>=r>>>0;if(!(v|a>>>0>32)){m=a;n=r;o=s;p=t;q=u;break a}w=v?r:a;x=a-w|0;v=Hu(u,h,w,0)|0;if((v|0)==-1){break}if((u|0)==(g|0)){y=r;z=g}else{y=r-v|0;z=u+v|0}w=v+t|0;v=c[h>>2]|0;if((v|0)==0|(y|0)==0){m=x;n=y;o=v;p=w;q=z;break a}else{a=x;r=y;s=v;t=w;u=z}}m=x;n=0;o=c[h>>2]|0;p=-1;q=u}}while(0);b:do{if((o|0)!=0?!((n|0)==0|(m|0)==0):0){x=m;z=n;y=o;g=p;e=q;while(1){A=Fu(e,c[y>>2]|0,0)|0;if((A+1|0)>>>0<2){break}j=(c[h>>2]|0)+4|0;c[h>>2]=j;l=x+ -1|0;d=g+1|0;if((z|0)==(A|0)|(l|0)==0){B=d;break b}else{x=l;z=z-A|0;y=j;g=d;e=e+A|0}}if((A|0)==0){c[h>>2]=0;B=g}else{B=-1}}else{B=p}}while(0);if(!k){i=f;return B|0}c[b>>2]=c[h>>2];i=f;return B|0}function Hu(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;f=i;i=i+16|0;g=f;if((b|0)==0){h=c[d>>2]|0;j=c[h>>2]|0;if((j|0)==0){k=0;i=f;return k|0}else{l=0;m=j;n=h}while(1){if(m>>>0>127){h=Fu(g,m,0)|0;if((h|0)==-1){k=-1;o=26;break}else{p=h}}else{p=1}h=p+l|0;j=n+4|0;q=c[j>>2]|0;if((q|0)==0){k=h;o=26;break}else{l=h;m=q;n=j}}if((o|0)==26){i=f;return k|0}}a:do{if(e>>>0>3){n=b;m=e;l=c[d>>2]|0;while(1){p=c[l>>2]|0;if((p|0)==0){r=n;s=m;break a}if(p>>>0>127){j=Fu(n,p,0)|0;if((j|0)==-1){k=-1;break}t=n+j|0;u=m-j|0;v=l}else{a[n]=p;t=n+1|0;u=m+ -1|0;v=c[d>>2]|0}p=v+4|0;c[d>>2]=p;if(u>>>0>3){n=t;m=u;l=p}else{r=t;s=u;break a}}i=f;return k|0}else{r=b;s=e}}while(0);b:do{if((s|0)!=0){b=r;u=s;t=c[d>>2]|0;while(1){v=c[t>>2]|0;if((v|0)==0){o=24;break}if(v>>>0>127){l=Fu(g,v,0)|0;if((l|0)==-1){k=-1;o=26;break}if(l>>>0>u>>>0){o=20;break}Fu(b,c[t>>2]|0,0)|0;w=b+l|0;x=u-l|0;y=t}else{a[b]=v;w=b+1|0;x=u+ -1|0;y=c[d>>2]|0}v=y+4|0;c[d>>2]=v;if((x|0)==0){z=0;break b}else{b=w;u=x;t=v}}if((o|0)==20){k=e-u|0;i=f;return k|0}else if((o|0)==24){a[b]=0;z=u;break}else if((o|0)==26){i=f;return k|0}}else{z=0}}while(0);c[d>>2]=0;k=e-z|0;i=f;return k|0}function Iu(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;f=i;g=d&255;h=(e|0)==0;a:do{if((b&3|0)==0|h){j=e;k=h;l=b;m=5}else{n=d&255;o=e;p=b;while(1){if((a[p]|0)==n<<24>>24){q=o;r=p;m=6;break a}s=p+1|0;t=o+ -1|0;u=(t|0)==0;if((s&3|0)==0|u){j=t;k=u;l=s;m=5;break}else{o=t;p=s}}}}while(0);if((m|0)==5){if(k){v=0;w=l}else{q=j;r=l;m=6}}b:do{if((m|0)==6){l=d&255;if(!((a[r]|0)==l<<24>>24)){j=ea(g,16843009)|0;c:do{if(q>>>0>3){k=q;b=r;while(1){e=c[b>>2]^j;if(((e&-2139062144^-2139062144)&e+ -16843009|0)!=0){x=k;y=b;break c}e=b+4|0;h=k+ -4|0;if(h>>>0>3){k=h;b=e}else{x=h;y=e;break}}}else{x=q;y=r}}while(0);if((x|0)==0){v=0;w=y}else{j=x;b=y;while(1){if((a[b]|0)==l<<24>>24){v=j;w=b;break b}k=b+1|0;e=j+ -1|0;if((e|0)==0){v=0;w=k;break}else{j=e;b=k}}}}else{v=q;w=r}}}while(0);i=f;return((v|0)!=0?w:0)|0}function Ju(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;f=c&255;c=d;while(1){d=c+ -1|0;if((c|0)==0){g=0;h=4;break}j=b+d|0;if((a[j]|0)==f<<24>>24){g=j;h=4;break}else{c=d}}if((h|0)==4){i=e;return g|0}return 0}function Ku(b,c){b=b|0;c=c|0;var d=0,e=0;d=i;e=Lu(b,c)|0;i=d;return((a[e]|0)==(c&255)<<24>>24?e:0)|0}function Lu(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;f=d&255;if((f|0)==0){g=b+(Rv(b|0)|0)|0;i=e;return g|0}a:do{if((b&3|0)!=0){h=d&255;j=b;while(1){k=a[j]|0;if(k<<24>>24==0){g=j;l=13;break}m=j+1|0;if(k<<24>>24==h<<24>>24){g=j;l=13;break}if((m&3|0)==0){n=m;break a}else{j=m}}if((l|0)==13){i=e;return g|0}}else{n=b}}while(0);b=ea(f,16843009)|0;f=c[n>>2]|0;b:do{if(((f&-2139062144^-2139062144)&f+ -16843009|0)==0){l=f;j=n;while(1){h=l^b;m=j+4|0;if(((h&-2139062144^-2139062144)&h+ -16843009|0)!=0){o=j;break b}h=c[m>>2]|0;if(((h&-2139062144^-2139062144)&h+ -16843009|0)==0){l=h;j=m}else{o=m;break}}}else{o=n}}while(0);n=d&255;d=o;while(1){o=a[d]|0;if(o<<24>>24==0|o<<24>>24==n<<24>>24){g=d;break}else{d=d+1|0}}i=e;return g|0}function Mu(a,b){a=a|0;b=b|0;var c=0,d=0;c=i;d=Ju(a,b,(Rv(a|0)|0)+1|0)|0;i=c;return d|0}function Nu(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;f=i;i=i+1056|0;g=f+1024|0;h=f;j=a[e]|0;if(j<<24>>24==0){k=b;i=f;return k|0}l=Ku(b,j<<24>>24)|0;if((l|0)==0){k=0;i=f;return k|0}b=a[e+1|0]|0;if(b<<24>>24==0){k=l;i=f;return k|0}m=l+1|0;n=a[m]|0;if(n<<24>>24==0){k=0;i=f;return k|0}o=a[e+2|0]|0;if(o<<24>>24==0){p=b&255|(j&255)<<8;q=m;m=n;r=d[l]<<8|n&255;while(1){s=r&65535;if((s|0)==(p|0)){t=q;u=m;break}v=q+1|0;w=a[v]|0;if(w<<24>>24==0){t=v;u=0;break}else{q=v;m=w;r=w&255|s<<8}}k=u<<24>>24==0?0:t+ -1|0;i=f;return k|0}t=l+2|0;u=a[t]|0;if(u<<24>>24==0){k=0;i=f;return k|0}r=a[e+3|0]|0;if(r<<24>>24==0){m=(b&255)<<16|(j&255)<<24|(o&255)<<8;q=(u&255)<<8|(n&255)<<16|d[l]<<24;if((q|0)==(m|0)){x=t;y=0}else{p=t;t=q;while(1){q=p+1|0;s=a[q]|0;w=(s&255|t)<<8;v=s<<24>>24==0;if(v|(w|0)==(m|0)){x=q;y=v;break}else{p=q;t=w}}}k=y?0:x+ -2|0;i=f;return k|0}x=l+3|0;y=a[x]|0;if(y<<24>>24==0){k=0;i=f;return k|0}if((a[e+4|0]|0)==0){t=(b&255)<<16|(j&255)<<24|(o&255)<<8|r&255;r=(u&255)<<8|(n&255)<<16|y&255|d[l]<<24;if((r|0)==(t|0)){z=x;A=0}else{y=x;x=r;while(1){r=y+1|0;n=a[r]|0;u=n&255|x<<8;o=n<<24>>24==0;if(o|(u|0)==(t|0)){z=r;A=o;break}else{y=r;x=u}}}k=A?0:z+ -3|0;i=f;return k|0}c[g+0>>2]=0;c[g+4>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0;c[g+16>>2]=0;c[g+20>>2]=0;c[g+24>>2]=0;c[g+28>>2]=0;z=j;j=0;while(1){if((a[l+j|0]|0)==0){k=0;B=80;break}A=z&255;x=g+(A>>>5<<2)|0;c[x>>2]=c[x>>2]|1<<(A&31);C=j+1|0;c[h+(A<<2)>>2]=C;z=a[e+C|0]|0;if(z<<24>>24==0){break}else{j=C}}if((B|0)==80){i=f;return k|0}a:do{if(C>>>0>1){z=1;A=-1;x=0;b:while(1){y=z;t=x;u=1;while(1){r=y;D=t;c:while(1){E=r;o=1;while(1){F=a[e+(o+A)|0]|0;G=a[e+E|0]|0;if(!(F<<24>>24==G<<24>>24)){break c}n=o+1|0;if((o|0)==(u|0)){break}b=n+D|0;if(b>>>0<C>>>0){E=b;o=n}else{H=A;I=u;break b}}o=D+u|0;n=o+1|0;if(n>>>0<C>>>0){r=n;D=o}else{H=A;I=u;break b}}r=E-A|0;if(!((F&255)>(G&255))){break}o=E+1|0;if(o>>>0<C>>>0){y=o;t=E;u=r}else{H=A;I=r;break b}}u=D+2|0;if(u>>>0<C>>>0){z=u;A=D;x=D+1|0}else{H=D;I=1;break}}x=1;A=-1;z=0;while(1){u=x;t=z;y=1;while(1){r=u;J=t;d:while(1){K=r;o=1;while(1){L=a[e+(o+A)|0]|0;M=a[e+K|0]|0;if(!(L<<24>>24==M<<24>>24)){break d}n=o+1|0;if((o|0)==(y|0)){break}b=n+J|0;if(b>>>0<C>>>0){K=b;o=n}else{N=H;O=A;P=I;Q=y;break a}}o=J+y|0;n=o+1|0;if(n>>>0<C>>>0){r=n;J=o}else{N=H;O=A;P=I;Q=y;break a}}r=K-A|0;if(!((L&255)<(M&255))){break}o=K+1|0;if(o>>>0<C>>>0){u=o;t=K;y=r}else{N=H;O=A;P=I;Q=r;break a}}y=J+2|0;if(y>>>0<C>>>0){x=y;A=J;z=J+1|0}else{N=H;O=J;P=I;Q=1;break}}}else{N=-1;O=-1;P=1;Q=1}}while(0);I=(O+1|0)>>>0>(N+1|0)>>>0;J=I?Q:P;P=I?O:N;N=P+1|0;if((Kv(e,e+J|0,N)|0)==0){O=C-J|0;I=C|63;if((C|0)!=(J|0)){Q=l;H=0;K=l;e:while(1){M=Q;do{if((K-M|0)>>>0<C>>>0){L=Iu(K,0,I)|0;if((L|0)!=0){if((L-M|0)>>>0<C>>>0){k=0;B=80;break e}else{R=L;break}}else{R=K+I|0;break}}else{R=K}}while(0);M=d[Q+j|0]|0;if((1<<(M&31)&c[g+(M>>>5<<2)>>2]|0)==0){Q=Q+C|0;H=0;K=R;continue}L=c[h+(M<<2)>>2]|0;M=C-L|0;if((C|0)!=(L|0)){Q=Q+((H|0)!=0&M>>>0<J>>>0?O:M)|0;H=0;K=R;continue}M=N>>>0>H>>>0?N:H;L=a[e+M|0]|0;f:do{if(L<<24>>24==0){S=N}else{D=L;E=M;while(1){G=E+1|0;if(!(D<<24>>24==(a[Q+E|0]|0))){break}F=a[e+G|0]|0;if(F<<24>>24==0){S=N;break f}else{D=F;E=G}}Q=Q+(E-P)|0;H=0;K=R;continue e}}while(0);while(1){if(!(S>>>0>H>>>0)){break}M=S+ -1|0;if((a[e+M|0]|0)==(a[Q+M|0]|0)){S=M}else{break}}if((S|0)==(H|0)){k=Q;B=80;break}Q=Q+J|0;H=O;K=R}if((B|0)==80){i=f;return k|0}}else{T=I;U=C}}else{I=C-P+ -1|0;T=C|63;U=(P>>>0>I>>>0?P:I)+1|0}I=e+N|0;R=l;K=l;g:while(1){l=R;do{if((K-l|0)>>>0<C>>>0){O=Iu(K,0,T)|0;if((O|0)!=0){if((O-l|0)>>>0<C>>>0){k=0;B=80;break g}else{V=O;break}}else{V=K+T|0;break}}else{V=K}}while(0);l=d[R+j|0]|0;if((1<<(l&31)&c[g+(l>>>5<<2)>>2]|0)==0){R=R+C|0;K=V;continue}O=c[h+(l<<2)>>2]|0;if((C|0)!=(O|0)){R=R+(C-O)|0;K=V;continue}O=a[I]|0;h:do{if(O<<24>>24==0){W=N}else{l=O;H=N;while(1){J=H+1|0;if(!(l<<24>>24==(a[R+H|0]|0))){break}Q=a[e+J|0]|0;if(Q<<24>>24==0){W=N;break h}else{l=Q;H=J}}R=R+(H-P)|0;K=V;continue g}}while(0);do{if((W|0)==0){k=R;B=80;break g}W=W+ -1|0}while((a[e+W|0]|0)==(a[R+W|0]|0));R=R+U|0;K=V}if((B|0)==80){i=f;return k|0}return 0}function Ou(a){a=a|0;var b=0,d=0;b=i;d=a;while(1){if((c[d>>2]|0)==0){break}else{d=d+4|0}}i=b;return d-a>>2|0}function Pu(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;if((d|0)==0){i=e;return a|0}else{f=d;g=b;h=a}while(1){f=f+ -1|0;c[h>>2]=c[g>>2];if((f|0)==0){break}else{g=g+4|0;h=h+4|0}}i=e;return a|0}function Qu(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;f=(d|0)==0;if(a-b>>2>>>0<d>>>0){if(!f){g=d;do{g=g+ -1|0;c[a+(g<<2)>>2]=c[b+(g<<2)>>2]}while((g|0)!=0)}}else{if(!f){f=b;b=a;g=d;while(1){g=g+ -1|0;c[b>>2]=c[f>>2];if((g|0)==0){break}else{f=f+4|0;b=b+4|0}}}}i=e;return a|0}function Ru(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;if((d|0)!=0){f=d;d=a;while(1){f=f+ -1|0;c[d>>2]=b;if((f|0)==0){break}else{d=d+4|0}}}i=e;return a|0}function Su(a){a=a|0;return}function Tu(a){a=a|0;c[a>>2]=30032;return}function Uu(a){a=a|0;var b=0;b=i;Tb(a|0);vv(a);i=b;return}function Vu(a){a=a|0;var b=0;b=i;Tb(a|0);i=b;return}function Wu(a){a=a|0;return 30048}function Xu(a){a=a|0;return}function Yu(a){a=a|0;return}function Zu(a){a=a|0;return}function _u(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function $u(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function av(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function bv(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;i=i+64|0;f=e;if((a|0)==(b|0)){g=1;i=e;return g|0}if((b|0)==0){g=0;i=e;return g|0}h=fv(b,30160,30216,0)|0;if((h|0)==0){g=0;i=e;return g|0}b=f+0|0;j=b+56|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(j|0));c[f>>2]=h;c[f+8>>2]=a;c[f+12>>2]=-1;c[f+48>>2]=1;lh[c[(c[h>>2]|0)+28>>2]&63](h,f,c[d>>2]|0,1);if((c[f+24>>2]|0)!=1){g=0;i=e;return g|0}c[d>>2]=c[f+16>>2];g=1;i=e;return g|0}function cv(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;if((c[d+8>>2]|0)!=(b|0)){i=g;return}b=d+16|0;h=c[b>>2]|0;if((h|0)==0){c[b>>2]=e;c[d+24>>2]=f;c[d+36>>2]=1;i=g;return}if((h|0)!=(e|0)){e=d+36|0;c[e>>2]=(c[e>>2]|0)+1;c[d+24>>2]=2;a[d+54|0]=1;i=g;return}e=d+24|0;if((c[e>>2]|0)!=2){i=g;return}c[e>>2]=f;i=g;return}function dv(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;if((b|0)!=(c[d+8>>2]|0)){h=c[b+8>>2]|0;lh[c[(c[h>>2]|0)+28>>2]&63](h,d,e,f);i=g;return}h=d+16|0;b=c[h>>2]|0;if((b|0)==0){c[h>>2]=e;c[d+24>>2]=f;c[d+36>>2]=1;i=g;return}if((b|0)!=(e|0)){e=d+36|0;c[e>>2]=(c[e>>2]|0)+1;c[d+24>>2]=2;a[d+54|0]=1;i=g;return}e=d+24|0;if((c[e>>2]|0)!=2){i=g;return}c[e>>2]=f;i=g;return}function ev(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;g=i;if((b|0)==(c[d+8>>2]|0)){h=d+16|0;j=c[h>>2]|0;if((j|0)==0){c[h>>2]=e;c[d+24>>2]=f;c[d+36>>2]=1;i=g;return}if((j|0)!=(e|0)){j=d+36|0;c[j>>2]=(c[j>>2]|0)+1;c[d+24>>2]=2;a[d+54|0]=1;i=g;return}j=d+24|0;if((c[j>>2]|0)!=2){i=g;return}c[j>>2]=f;i=g;return}j=c[b+12>>2]|0;h=b+(j<<3)+16|0;k=c[b+20>>2]|0;l=k>>8;if((k&1|0)==0){m=l}else{m=c[(c[e>>2]|0)+l>>2]|0}l=c[b+16>>2]|0;lh[c[(c[l>>2]|0)+28>>2]&63](l,d,e+m|0,(k&2|0)!=0?f:2);if((j|0)<=1){i=g;return}j=d+54|0;k=b+24|0;while(1){b=c[k+4>>2]|0;m=b>>8;if((b&1|0)==0){n=m}else{n=c[(c[e>>2]|0)+m>>2]|0}m=c[k>>2]|0;lh[c[(c[m>>2]|0)+28>>2]&63](m,d,e+n|0,(b&2|0)!=0?f:2);if((a[j]|0)!=0){o=16;break}b=k+8|0;if(b>>>0<h>>>0){k=b}else{o=16;break}}if((o|0)==16){i=g;return}}function fv(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;h=i;i=i+64|0;j=h;k=c[d>>2]|0;l=d+(c[k+ -8>>2]|0)|0;m=c[k+ -4>>2]|0;c[j>>2]=f;c[j+4>>2]=d;c[j+8>>2]=e;c[j+12>>2]=g;g=j+16|0;e=j+20|0;d=j+24|0;k=j+28|0;n=j+32|0;o=j+40|0;p=(m|0)==(f|0);f=g+0|0;q=f+36|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(q|0));b[g+36>>1]=0;a[g+38|0]=0;if(p){c[j+48>>2]=1;Wg[c[(c[m>>2]|0)+20>>2]&31](m,j,l,l,1,0);r=(c[d>>2]|0)==1?l:0;i=h;return r|0}Hg[c[(c[m>>2]|0)+24>>2]&15](m,j,l,1,0);l=c[j+36>>2]|0;if((l|0)==0){if((c[o>>2]|0)!=1){r=0;i=h;return r|0}if((c[k>>2]|0)!=1){r=0;i=h;return r|0}r=(c[n>>2]|0)==1?c[e>>2]|0:0;i=h;return r|0}else if((l|0)==1){if((c[d>>2]|0)!=1){if((c[o>>2]|0)!=0){r=0;i=h;return r|0}if((c[k>>2]|0)!=1){r=0;i=h;return r|0}if((c[n>>2]|0)!=1){r=0;i=h;return r|0}}r=c[g>>2]|0;i=h;return r|0}else{r=0;i=h;return r|0}return 0}function gv(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;h=i;if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)!=(e|0)){i=h;return}j=d+28|0;if((c[j>>2]|0)==1){i=h;return}c[j>>2]=f;i=h;return}if((b|0)==(c[d>>2]|0)){if((c[d+16>>2]|0)!=(e|0)?(j=d+20|0,(c[j>>2]|0)!=(e|0)):0){c[d+32>>2]=f;k=d+44|0;if((c[k>>2]|0)==4){i=h;return}l=c[b+12>>2]|0;m=b+(l<<3)+16|0;a:do{if((l|0)>0){n=d+52|0;o=d+53|0;p=d+54|0;q=b+8|0;r=d+24|0;s=0;t=0;u=b+16|0;b:while(1){a[n]=0;a[o]=0;v=c[u+4>>2]|0;w=v>>8;if((v&1|0)==0){x=w}else{x=c[(c[e>>2]|0)+w>>2]|0}w=c[u>>2]|0;Wg[c[(c[w>>2]|0)+20>>2]&31](w,d,e,e+x|0,2-(v>>>1&1)|0,g);if((a[p]|0)!=0){y=s;z=t;break}do{if((a[o]|0)!=0){if((a[n]|0)==0){if((c[q>>2]&1|0)==0){y=s;z=1;break b}else{A=s;B=1;break}}if((c[r>>2]|0)==1){C=27;break a}if((c[q>>2]&2|0)==0){C=27;break a}else{A=1;B=1}}else{A=s;B=t}}while(0);v=u+8|0;if(v>>>0<m>>>0){s=A;t=B;u=v}else{y=A;z=B;break}}if(y){D=z;C=26}else{E=z;C=23}}else{E=0;C=23}}while(0);if((C|0)==23){c[j>>2]=e;j=d+40|0;c[j>>2]=(c[j>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54|0]=1;if(E){C=27}else{C=28}}else{D=E;C=26}}if((C|0)==26){if(D){C=27}else{C=28}}if((C|0)==27){c[k>>2]=3;i=h;return}else if((C|0)==28){c[k>>2]=4;i=h;return}}if((f|0)!=1){i=h;return}c[d+32>>2]=1;i=h;return}k=c[b+12>>2]|0;D=b+(k<<3)+16|0;E=c[b+20>>2]|0;j=E>>8;if((E&1|0)==0){F=j}else{F=c[(c[e>>2]|0)+j>>2]|0}j=c[b+16>>2]|0;Hg[c[(c[j>>2]|0)+24>>2]&15](j,d,e+F|0,(E&2|0)!=0?f:2,g);E=b+24|0;if((k|0)<=1){i=h;return}k=c[b+8>>2]|0;if((k&2|0)==0?(b=d+36|0,(c[b>>2]|0)!=1):0){if((k&1|0)==0){k=d+54|0;F=E;while(1){if((a[k]|0)!=0){C=53;break}if((c[b>>2]|0)==1){C=53;break}j=c[F+4>>2]|0;z=j>>8;if((j&1|0)==0){G=z}else{G=c[(c[e>>2]|0)+z>>2]|0}z=c[F>>2]|0;Hg[c[(c[z>>2]|0)+24>>2]&15](z,d,e+G|0,(j&2|0)!=0?f:2,g);j=F+8|0;if(j>>>0<D>>>0){F=j}else{C=53;break}}if((C|0)==53){i=h;return}}F=d+24|0;G=d+54|0;k=E;while(1){if((a[G]|0)!=0){C=53;break}if((c[b>>2]|0)==1?(c[F>>2]|0)==1:0){C=53;break}j=c[k+4>>2]|0;z=j>>8;if((j&1|0)==0){H=z}else{H=c[(c[e>>2]|0)+z>>2]|0}z=c[k>>2]|0;Hg[c[(c[z>>2]|0)+24>>2]&15](z,d,e+H|0,(j&2|0)!=0?f:2,g);j=k+8|0;if(j>>>0<D>>>0){k=j}else{C=53;break}}if((C|0)==53){i=h;return}}k=d+54|0;H=E;while(1){if((a[k]|0)!=0){C=53;break}E=c[H+4>>2]|0;F=E>>8;if((E&1|0)==0){I=F}else{I=c[(c[e>>2]|0)+F>>2]|0}F=c[H>>2]|0;Hg[c[(c[F>>2]|0)+24>>2]&15](F,d,e+I|0,(E&2|0)!=0?f:2,g);E=H+8|0;if(E>>>0<D>>>0){H=E}else{C=53;break}}if((C|0)==53){i=h;return}}function hv(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=i;if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)!=(e|0)){i=h;return}j=d+28|0;if((c[j>>2]|0)==1){i=h;return}c[j>>2]=f;i=h;return}if((b|0)!=(c[d>>2]|0)){j=c[b+8>>2]|0;Hg[c[(c[j>>2]|0)+24>>2]&15](j,d,e,f,g);i=h;return}if((c[d+16>>2]|0)!=(e|0)?(j=d+20|0,(c[j>>2]|0)!=(e|0)):0){c[d+32>>2]=f;k=d+44|0;if((c[k>>2]|0)==4){i=h;return}l=d+52|0;a[l]=0;m=d+53|0;a[m]=0;n=c[b+8>>2]|0;Wg[c[(c[n>>2]|0)+20>>2]&31](n,d,e,e,1,g);if((a[m]|0)!=0){if((a[l]|0)==0){o=1;p=13}}else{o=0;p=13}do{if((p|0)==13){c[j>>2]=e;l=d+40|0;c[l>>2]=(c[l>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54|0]=1;if(o){break}}else{p=16}if((p|0)==16?o:0){break}c[k>>2]=4;i=h;return}}while(0);c[k>>2]=3;i=h;return}if((f|0)!=1){i=h;return}c[d+32>>2]=1;i=h;return}function iv(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;g=i;if((c[d+8>>2]|0)==(b|0)){if((c[d+4>>2]|0)!=(e|0)){i=g;return}h=d+28|0;if((c[h>>2]|0)==1){i=g;return}c[h>>2]=f;i=g;return}if((c[d>>2]|0)!=(b|0)){i=g;return}if((c[d+16>>2]|0)!=(e|0)?(b=d+20|0,(c[b>>2]|0)!=(e|0)):0){c[d+32>>2]=f;c[b>>2]=e;e=d+40|0;c[e>>2]=(c[e>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54|0]=1}c[d+44>>2]=4;i=g;return}if((f|0)!=1){i=g;return}c[d+32>>2]=1;i=g;return}function jv(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;j=i;if((b|0)!=(c[d+8>>2]|0)){k=d+52|0;l=a[k]|0;m=d+53|0;n=a[m]|0;o=c[b+12>>2]|0;p=b+(o<<3)+16|0;a[k]=0;a[m]=0;q=c[b+20>>2]|0;r=q>>8;if((q&1|0)==0){s=r}else{s=c[(c[f>>2]|0)+r>>2]|0}r=c[b+16>>2]|0;Wg[c[(c[r>>2]|0)+20>>2]&31](r,d,e,f+s|0,(q&2|0)!=0?g:2,h);a:do{if((o|0)>1){q=d+24|0;s=b+8|0;r=d+54|0;t=b+24|0;do{if((a[r]|0)!=0){break a}if((a[k]|0)==0){if((a[m]|0)!=0?(c[s>>2]&1|0)==0:0){break a}}else{if((c[q>>2]|0)==1){break a}if((c[s>>2]&2|0)==0){break a}}a[k]=0;a[m]=0;u=c[t+4>>2]|0;v=u>>8;if((u&1|0)==0){w=v}else{w=c[(c[f>>2]|0)+v>>2]|0}v=c[t>>2]|0;Wg[c[(c[v>>2]|0)+20>>2]&31](v,d,e,f+w|0,(u&2|0)!=0?g:2,h);t=t+8|0}while(t>>>0<p>>>0)}}while(0);a[k]=l;a[m]=n;i=j;return}a[d+53|0]=1;if((c[d+4>>2]|0)!=(f|0)){i=j;return}a[d+52|0]=1;f=d+16|0;n=c[f>>2]|0;if((n|0)==0){c[f>>2]=e;c[d+24>>2]=g;c[d+36>>2]=1;if(!((c[d+48>>2]|0)==1&(g|0)==1)){i=j;return}a[d+54|0]=1;i=j;return}if((n|0)!=(e|0)){e=d+36|0;c[e>>2]=(c[e>>2]|0)+1;a[d+54|0]=1;i=j;return}e=d+24|0;n=c[e>>2]|0;if((n|0)==2){c[e>>2]=g;x=g}else{x=n}if(!((c[d+48>>2]|0)==1&(x|0)==1)){i=j;return}a[d+54|0]=1;i=j;return}function kv(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0;j=i;if((b|0)!=(c[d+8>>2]|0)){k=c[b+8>>2]|0;Wg[c[(c[k>>2]|0)+20>>2]&31](k,d,e,f,g,h);i=j;return}a[d+53|0]=1;if((c[d+4>>2]|0)!=(f|0)){i=j;return}a[d+52|0]=1;f=d+16|0;h=c[f>>2]|0;if((h|0)==0){c[f>>2]=e;c[d+24>>2]=g;c[d+36>>2]=1;if(!((c[d+48>>2]|0)==1&(g|0)==1)){i=j;return}a[d+54|0]=1;i=j;return}if((h|0)!=(e|0)){e=d+36|0;c[e>>2]=(c[e>>2]|0)+1;a[d+54|0]=1;i=j;return}e=d+24|0;h=c[e>>2]|0;if((h|0)==2){c[e>>2]=g;l=g}else{l=h}if(!((c[d+48>>2]|0)==1&(l|0)==1)){i=j;return}a[d+54|0]=1;i=j;return}



function mh(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+7&-8;return b|0}function nh(){return i|0}function oh(a){a=a|0;i=a}function ph(a,b){a=a|0;b=b|0;if((t|0)==0){t=a;u=b}}function qh(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0]}function rh(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0];a[k+4|0]=a[b+4|0];a[k+5|0]=a[b+5|0];a[k+6|0]=a[b+6|0];a[k+7|0]=a[b+7|0]}function sh(a){a=a|0;I=a}function th(a){a=a|0;J=a}function uh(a){a=a|0;K=a}function vh(a){a=a|0;L=a}function wh(a){a=a|0;M=a}function xh(a){a=a|0;N=a}function yh(a){a=a|0;O=a}function zh(a){a=a|0;P=a}function Ah(a){a=a|0;Q=a}function Bh(a){a=a|0;R=a}function Ch(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;i=i+272|0;e=d;Nh(e);f=Th(e,a,b,448,392)|0;c[e>>2]=464;b=e+92|0;a=e+236|0;while(1){g=a+ -72|0;Xj(a+ -52|0);if((g|0)==(b|0)){break}else{a=g}}gk(e+76|0);Sh(e);i=d;return f|0}function Dh(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;c[a>>2]=464;d=a+92|0;e=a+236|0;while(1){f=e+ -72|0;Xj(e+ -52|0);if((f|0)==(d|0)){break}else{e=f}}gk(a+76|0);Sh(a);i=b;return}function Eh(a){a=a|0;sb(a|0)|0;Za()}function Fh(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;c[a>>2]=464;d=a+92|0;e=a+236|0;while(1){f=e+ -72|0;Xj(e+ -52|0);if((f|0)==(d|0)){break}else{e=f}}gk(a+76|0);Sh(a);vv(a);i=b;return}function Gh(a){a=a|0;var b=0,d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;b=i;i=i+16|0;d=b;e=Hl()|0;if(!(Tj(c[32>>2]|0,a+76|0)|0)){f=0;i=b;return f|0}h=c[a+88>>2]|0;j=(h+3|0)/4|0;k=c[152>>2]|0;c[d>>2]=k;c[d+4>>2]=c[280>>2];l=j*160|0;m=j<<4;n=k;k=0;while(1){if(!(Uj(n,a+(k*72|0)+112|0)|0)){f=0;o=14;break}p=Sg[c[(c[e>>2]|0)+8>>2]&31](e,l,32)|0;q=a+(k*72|0)+148|0;c[q>>2]=p;c[q+4>>2]=p+(((p|0)!=0?j:0)*160|0);p=Sg[c[(c[e>>2]|0)+8>>2]&31](e,m,16)|0;q=a+(k*72|0)+156|0;c[q>>2]=p;c[q+4>>2]=p+(((p|0)!=0?j:0)<<4);p=Sg[c[(c[e>>2]|0)+8>>2]&31](e,60,4)|0;if((p|0)==0){r=0}else{dk(p,h);r=p}c[a+(k*72|0)+144>>2]=r;p=k+1|0;if((p|0)>=2){break}n=c[d+(p<<2)>>2]|0;k=p}if((o|0)==14){i=b;return f|0}g[a+104>>2]=1.0;g[a+108>>2]=0.0;g[a+176>>2]=1.0;g[a+180>>2]=1.0;o=Sg[c[(c[e>>2]|0)+8>>2]&31](e,l,32)|0;l=a+244|0;c[l>>2]=o;c[l+4>>2]=o+(((o|0)!=0?j:0)*160|0);j=Sg[c[(c[e>>2]|0)+8>>2]&31](e,h<<6,64)|0;e=a+252|0;c[e>>2]=j;c[e+4>>2]=j+(((j|0)!=0?h:0)<<6);a:do{if((h|0)>0){j=c[a+84>>2]|0;e=0;while(1){o=e+1|0;if((Nu(c[j+(e<<2)>>2]|0,960)|0)!=0){break}if((o|0)<(h|0)){e=o}else{break a}}c[a+236>>2]=e}}while(0);Mh(a);f=1;i=b;return f|0}function Hh(a){a=a|0;var b=0,d=0,e=0;b=i;d=Hl()|0;Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[a+148>>2]|0);Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[a+156>>2]|0);e=c[a+144>>2]|0;if((e|0)!=0){ek(e);Lg[c[(c[d>>2]|0)+12>>2]&127](d,e)}Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[a+220>>2]|0);Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[a+228>>2]|0);e=c[a+216>>2]|0;if((e|0)!=0){ek(e);Lg[c[(c[d>>2]|0)+12>>2]&127](d,e)}Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[a+244>>2]|0);Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[a+252>>2]|0);i=b;return}function Ih(a,b){a=a|0;b=+b;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;d=i;i=i+128|0;e=d+100|0;f=d+40|0;h=d+8|0;j=d;k=d+80|0;l=e+4|0;m=e+8|0;n=e+12|0;o=0;do{p=a+(o*72|0)+92|0;q=a+(o*72|0)+112|0;Qj(p,q,b);bk(e);c[l>>2]=q;c[m>>2]=c[a+(o*72|0)+144>>2];g[e>>2]=+g[p>>2];p=a+(o*72|0)+148|0;q=c[p+4>>2]|0;r=n;c[r>>2]=c[p>>2];c[r+4>>2]=q;o=o+1|0;if(!(ck(e)|0)){s=0;t=6;break}}while((o|0)<2);if((t|0)==6){i=d;return s|0}Zj(f);Zj(f+20|0);t=c[a+152>>2]|0;o=f+4|0;c[o>>2]=c[a+148>>2];c[o+4>>2]=t;g[f>>2]=+g[a+104>>2];t=c[a+160>>2]|0;o=f+12|0;c[o>>2]=c[a+156>>2];c[o+4>>2]=t;t=c[a+224>>2]|0;o=f+24|0;c[o>>2]=c[a+220>>2];c[o+4>>2]=t;g[f+20>>2]=+g[a+176>>2];t=c[a+232>>2]|0;o=f+32|0;c[o>>2]=c[a+228>>2];c[o+4>>2]=t;_j(h);g[h>>2]=+g[a+240>>2];c[h+4>>2]=f;c[h+8>>2]=f+40;f=a+76|0;hk(j,f);t=j;j=c[t+4>>2]|0;o=h+12|0;c[o>>2]=c[t>>2];c[o+4>>2]=j;j=a+244|0;o=j;t=c[o+4>>2]|0;e=h+20|0;c[e>>2]=c[o>>2];c[e+4>>2]=t;if(!($j(h)|0)){s=0;i=d;return s|0}c[k+0>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k>>2]=f;f=c[a+248>>2]|0;h=k+4|0;c[h>>2]=c[j>>2];c[h+4>>2]=f;f=a+252|0;a=c[f+4>>2]|0;h=k+12|0;c[h>>2]=c[f>>2];c[h+4>>2]=a;s=ak(k)|0;i=d;return s|0}function Jh(b,d){b=b|0;d=d|0;var e=0,f=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;i=i+144|0;f=e;j=e+72|0;l=e+8|0;Hg[c[(c[d>>2]|0)+36>>2]&15](d,552,0,544,1);if((a[544]|0)!=0){fh[c[(c[d>>2]|0)+20>>2]&15](d,584,576,1)|0;h[k>>3]=+g[154];c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];gd(j|0,624,f|0)|0;bh[c[(c[d>>2]|0)+12>>2]&1](d,j,0.0,1.0,616,1.0,(a[576]|0)!=0)|0;if((a[576]|0)!=0){g[b+104>>2]=1.0;g[b+108>>2]=1.0- +g[154];g[b+176>>2]=1.0;g[b+180>>2]=+g[154]}lh[c[(c[d>>2]|0)+28>>2]&63](d,648,0,1);lh[c[(c[d>>2]|0)+28>>2]&63](d,672,0,1);m=b+104|0;h[k>>3]=+g[m>>2];c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];gd(j|0,696,f|0)|0;bh[c[(c[d>>2]|0)+12>>2]&1](d,j,0.0,1.0,m,1.0,(a[576]|0)==0)|0;m=b+108|0;h[k>>3]=+g[m>>2];c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];gd(j|0,720,f|0)|0;bh[c[(c[d>>2]|0)+12>>2]&1](d,j,0.0,1.0,m,1.0,(a[576]|0)==0)|0;lh[c[(c[d>>2]|0)+28>>2]&63](d,744,0,1);m=b+176|0;h[k>>3]=+g[m>>2];c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];gd(j|0,696,f|0)|0;bh[c[(c[d>>2]|0)+12>>2]&1](d,j,0.0,1.0,m,1.0,(a[576]|0)==0)|0;m=b+180|0;h[k>>3]=+g[m>>2];c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];gd(j|0,720,f|0)|0;bh[c[(c[d>>2]|0)+12>>2]&1](d,j,0.0,1.0,m,1.0,(a[576]|0)==0)|0;m=b+240|0;h[k>>3]=+g[m>>2];c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];gd(j|0,768,f|0)|0;bh[c[(c[d>>2]|0)+12>>2]&1](d,j,.009999999776482582,1.0,m,1.0,1)|0;Mh(b)}Kg[c[(c[d>>2]|0)+40>>2]&255](d);Hg[c[(c[d>>2]|0)+36>>2]&15](d,792,0,784,1);if(((a[784]|0)!=0?(m=b+88|0,(c[m>>2]|0)!=0):0)?(lh[c[(c[d>>2]|0)+28>>2]&63](d,800,0,0),j=b+236|0,n=c[j>>2]|0,c[f>>2]=c[(c[b+84>>2]|0)+(n<<2)>>2],c[f+4>>2]=n,gd(l|0,840,f|0)|0,hh[c[(c[d>>2]|0)+16>>2]&1](d,l,0,(c[m>>2]|0)+ -1|0,j,1.0,1)|0):0){Mh(b)}Kg[c[(c[d>>2]|0)+40>>2]&255](d);Hg[c[(c[d>>2]|0)+36>>2]&15](d,856,0,848,1);if((a[848]|0)==0){o=c[d>>2]|0;p=o+40|0;q=c[p>>2]|0;Kg[q&255](d);i=e;return 1}else{r=0}do{Hg[c[(c[d>>2]|0)+36>>2]&15](d,c[936+(r<<2)>>2]|0,0,0,1);if((a[880+r|0]|0)!=0){Rj(b+(r*72|0)+92|0,b+(r*72|0)+112|0,d,1)}Kg[c[(c[d>>2]|0)+40>>2]&255](d);r=r+1|0}while((r|0)<2);o=c[d>>2]|0;p=o+40|0;q=c[p>>2]|0;Kg[q&255](d);i=e;return 1}function Kh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0;d=i;i=i+80|0;e=d+72|0;f=d+64|0;h=d;j=c[(c[b>>2]|0)+24>>2]|0;k=a+76|0;l=c[a+256>>2]|0;c[f>>2]=c[a+252>>2];c[f+4>>2]=l;l=h+0|0;a=l+64|0;do{c[l>>2]=0;l=l+4|0}while((l|0)<(a|0));g[h>>2]=1.0;g[h+20>>2]=1.0;g[h+40>>2]=1.0;g[h+60>>2]=1.0;c[e+0>>2]=c[f+0>>2];c[e+4>>2]=c[f+4>>2];f=Pg[j&15](b,k,e,h,1)|0;i=d;return f|0}function Lh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;i=i+16|0;e=d+8|0;f=d;g=c[a+256>>2]|0;c[f>>2]=c[a+252>>2];c[f+4>>2]=g;c[e+0>>2]=c[f+0>>2];c[e+4>>2]=c[f+4>>2];Sj(e,b);i=d;return}function Mh(a){a=a|0;var b=0,d=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0;b=i;i=i+2112|0;d=b+32|0;f=b+48|0;h=b+16|0;j=b;k=a+88|0;if((c[k>>2]|0)>0){l=a+156|0;m=a+228|0;n=0;do{o=(c[l>>2]|0)+(n<<4)|0;c[o+0>>2]=c[944>>2];c[o+4>>2]=c[948>>2];c[o+8>>2]=c[952>>2];c[o+12>>2]=c[956>>2];o=(c[m>>2]|0)+(n<<4)|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[o+0>>2]=c[d+0>>2];c[o+4>>2]=c[d+4>>2];c[o+8>>2]=c[d+8>>2];c[o+12>>2]=c[d+12>>2];n=n+1|0}while((n|0)<(((c[k>>2]|0)+3|0)/4|0|0))}jk(a+76|0,c[a+236>>2]|0,f);k=f+2048|0;if((c[k>>2]|0)<=0){i=b;return}n=a+156|0;d=a+108|0;m=a+228|0;l=a+180|0;a=0;do{o=e[f+(a<<1)>>1]|0;p=o>>>2;q=(c[n>>2]|0)+(p<<4)|0;r=o&3;s=+g[d>>2];c[h+0>>2]=c[q+0>>2];c[h+4>>2]=c[q+4>>2];c[h+8>>2]=c[q+8>>2];c[h+12>>2]=c[q+12>>2];g[h+(r<<2)>>2]=s;c[q+0>>2]=c[h+0>>2];c[q+4>>2]=c[h+4>>2];c[q+8>>2]=c[h+8>>2];c[q+12>>2]=c[h+12>>2];q=(c[m>>2]|0)+(p<<4)|0;s=+g[l>>2];c[j+0>>2]=c[q+0>>2];c[j+4>>2]=c[q+4>>2];c[j+8>>2]=c[q+8>>2];c[j+12>>2]=c[q+12>>2];g[j+(r<<2)>>2]=s;c[q+0>>2]=c[j+0>>2];c[q+4>>2]=c[j+4>>2];c[q+8>>2]=c[j+8>>2];c[q+12>>2]=c[j+12>>2];a=a+1|0}while((a|0)<(c[k>>2]|0));i=b;return}function Nh(a){a=a|0;var b=0,d=0,e=0,f=0,h=0;b=i;i=i+32|0;d=b;Qh(a);c[a>>2]=464;fk(a+76|0);e=a+236|0;f=a+92|0;do{Pj(f);g[f+12>>2]=1.0;g[f+16>>2]=1.0;Wj(f+20|0);h=f+52|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[h+16>>2]=0;f=f+72|0}while((f|0)!=(e|0));c[a+236>>2]=0;_j(d);g[a+240>>2]=+g[d>>2];d=a+244|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;i=b;return}function Oh(){var a=0;a=i;tk(8,40,56,104,0,0);Ag(31,8,p|0)|0;tk(128,160,184,240,0,0);Ag(31,128,p|0)|0;tk(256,288,312,368,0,0);Ag(31,256,p|0)|0;i=a;return}function Ph(a,b){a=a|0;b=b|0;return(c[a+24>>2]|0)>>>0<17|0}function Qh(d){d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;e=i;c[d>>2]=1360;a[d+4|0]=0;a[d+5|0]=0;a[d+6|0]=0;g[d+8>>2]=60.0;g[d+12>>2]=1.0;f=d+16|0;c[d+36>>2]=0;c[d+40>>2]=0;h=d+44|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;b[f+16>>1]=0;a[f+18|0]=0;f=Hl()|0;j=Sg[c[(c[f>>2]|0)+8>>2]&31](f,16,16)|0;if((j|0)==0){k=0}else{Mj(j,128);k=j}c[h>>2]=k;k=Hl()|0;h=Sg[c[(c[k>>2]|0)+8>>2]&31](k,16,16)|0;if((h|0)==0){l=0}else{Mj(h,128);l=h}c[d+48>>2]=l;l=d+52|0;h=Hl()|0;k=Sg[c[(c[h>>2]|0)+8>>2]&31](h,16,16)|0;if((k|0)==0){m=0;c[l>>2]=m;n=d+56|0;o=n;p=o;c[p>>2]=640;q=o+4|0;r=q;c[r>>2]=360;s=d+64|0;c[s+0>>2]=0;c[s+4>>2]=0;c[s+8>>2]=0;i=e;return}Mj(k,128);m=k;c[l>>2]=m;n=d+56|0;o=n;p=o;c[p>>2]=640;q=o+4|0;r=q;c[r>>2]=360;s=d+64|0;c[s+0>>2]=0;c[s+4>>2]=0;c[s+8>>2]=0;i=e;return}function Rh(a){a=a|0;var b=0;b=i;Sh(a);vv(a);i=b;return}function Sh(b){b=b|0;var d=0,e=0,f=0;d=i;c[b>>2]=1360;e=Hl()|0;f=c[b+44>>2]|0;if((f|0)!=0){Nj(f);Lg[c[(c[e>>2]|0)+12>>2]&127](e,f)}f=Hl()|0;e=c[b+48>>2]|0;if((e|0)!=0){Nj(e);Lg[c[(c[f>>2]|0)+12>>2]&127](f,e)}e=Hl()|0;f=c[b+52>>2]|0;if((f|0)!=0){Nj(f);Lg[c[(c[e>>2]|0)+12>>2]&127](e,f)}if((a[b+64|0]&1)==0){i=d;return}f=c[b+72>>2]|0;b=Hl()|0;Lg[c[(c[b>>2]|0)+12>>2]&127](b,f);i=d;return}function Th(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;h=i;i=i+32|0;j=h+24|0;k=h;l=h+8|0;m=h+16|0;if((c[336]|0)!=0){n=1;i=h;return n|0}c[336]=b;o=Mk(d,e,f,1528)|0;if((o|0)!=0){a[b+4|0]=1;n=(o|0)!=1|0;i=h;return n|0}o=b+56|0;f=1392+(c[1288>>2]<<3)|0;e=c[f+4>>2]|0;d=o;c[d>>2]=c[f>>2];c[d+4>>2]=e;Uh(b);do{if((a[1221|0]|0)==0){e=Mg[c[(c[b>>2]|0)+8>>2]&127](b)|0;ub(162,b|0,0,1);Kg[c[(c[b>>2]|0)+12>>2]&255](b);if(e){p=0}else{q=29}}else{if(($a()|0)==0){c[336]=0;n=1;i=h;return n|0}kb(131092,2);kb(131093,0);kb(131091,4);if((vc(c[o>>2]|0,c[b+60>>2]|0,8,8,8,8,32,0,65537)|0)==0){xl(k);e=Vh(fo(Vh(fo(Vh(c[k>>2]|0,1584)|0,2)|0,1648)|0,0)|0,1648)|0;ln(j,e+(c[(c[e>>2]|0)+ -12>>2]|0)|0);d=ws(j,22144)|0;f=ch[c[(c[d>>2]|0)+28>>2]&31](d,10)|0;vs(j);go(e,f)|0;Tn(e)|0;zl(k);Eb();q=29;break}wl(l);e=Vh(c[l>>2]|0,1656)|0;f=Vh(Wh(e,id(7938)|0)|0,1704)|0;ln(j,f+(c[(c[f>>2]|0)+ -12>>2]|0)|0);e=ws(j,22144)|0;d=ch[c[(c[e>>2]|0)+28>>2]&31](e,10)|0;vs(j);go(f,d)|0;Tn(f)|0;zl(l);f=Hl()|0;d=Sg[c[(c[f>>2]|0)+8>>2]&31](f,352,32)|0;if((d|0)==0){r=0}else{ii(d);r=d}d=b+24|0;c[d>>2]=r;f=Hl()|0;e=Sg[c[(c[f>>2]|0)+8>>2]&31](f,72,8)|0;if((e|0)==0){s=0}else{Pi(e,c[d>>2]|0);s=e}e=b+36|0;c[e>>2]=s;if(Mg[c[(c[s>>2]|0)+8>>2]&127](s)|0){f=Hl()|0;t=Sg[c[(c[f>>2]|0)+8>>2]&31](f,52,4)|0;if((t|0)==0){u=0}else{Dj(t);u=t}t=b+28|0;c[t>>2]=u;f=Hl()|0;v=Sg[c[(c[f>>2]|0)+8>>2]&31](f,16496,16)|0;if((v|0)==0){w=0}else{pi(v);w=v}v=b+40|0;c[v>>2]=w;Se(1);Dg(g|0);Lb(45);Qf(1);f=Mg[c[(c[b>>2]|0)+8>>2]&127](b)|0;ub(162,b|0,0,1);Kg[c[(c[b>>2]|0)+12>>2]&255](b);x=Hl()|0;y=c[t>>2]|0;if((y|0)!=0){Kg[c[c[y>>2]>>2]&255](y);Lg[c[(c[x>>2]|0)+12>>2]&127](x,y)}c[t>>2]=0;t=Hl()|0;y=c[v>>2]|0;if((y|0)!=0){Kg[c[c[y>>2]>>2]&255](y);Lg[c[(c[t>>2]|0)+12>>2]&127](t,y)}c[v>>2]=0;z=f}else{z=0}f=Hl()|0;v=c[e>>2]|0;if((v|0)!=0){Kg[c[c[v>>2]>>2]&255](v);Lg[c[(c[f>>2]|0)+12>>2]&127](f,v)}c[e>>2]=0;e=Hl()|0;v=c[d>>2]|0;if((v|0)!=0){ji(v);Lg[c[(c[e>>2]|0)+12>>2]&127](e,v)}c[d>>2]=0;Eb();if(z){p=0}else{q=29}}}while(0);if((q|0)==29){xl(m);q=Vh(c[m>>2]|0,1712)|0;ln(j,q+(c[(c[q>>2]|0)+ -12>>2]|0)|0);z=ws(j,22144)|0;b=ch[c[(c[z>>2]|0)+28>>2]&31](z,10)|0;vs(j);go(q,b)|0;Tn(q)|0;zl(m);p=1}c[336]=0;n=p;i=h;return n|0}function Uh(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;d=i;i=i+32|0;e=d+16|0;f=d;ml(e,2288,2296);if(!(pl(e)|0)){fi(b+64|0,2304)|0;ol(e);i=d;return}sl(e,0,1)|0;g=tl(e)|0;sl(e,0,2)|0;h=Hl()|0;j=Sg[c[(c[h>>2]|0)+8>>2]&31](h,g,1)|0;k=b+64|0;if((ql(e,j,g)|0)==(g|0)){b=j+g|0;l=j;if(g>>>0>4294967279){Nm(0)}if(g>>>0<11){a[f]=g<<1;m=f+1|0}else{n=g+16&-16;o=Hl()|0;p=Sg[c[(c[o>>2]|0)+8>>2]&31](o,n,1)|0;c[f+8>>2]=p;c[f>>2]=n|1;c[f+4>>2]=g;m=p}if((g|0)==0){q=m}else{p=j;n=m;while(1){a[n]=a[p]|0;p=p+1|0;if((p|0)==(b|0)){break}else{n=n+1|0}}q=m+(j+(g-l))|0}a[q]=0;di(k,f)|0;if(!((a[f]&1)==0)){q=c[f+8>>2]|0;f=Hl()|0;Lg[c[(c[f>>2]|0)+12>>2]&127](f,q)}}else{fi(k,2304)|0}Lg[c[(c[h>>2]|0)+12>>2]&127](h,j);ol(e);i=d;return}function Vh(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;e=i;i=i+32|0;f=e+16|0;g=e;h=e+8|0;j=e+12|0;a[g]=0;c[g+4>>2]=b;k=c[(c[b>>2]|0)+ -12>>2]|0;if((c[b+(k+16)>>2]|0)!=0){co(g);i=e;return b|0}l=c[b+(k+72)>>2]|0;if((l|0)==0){m=k}else{Tn(l)|0;m=c[(c[b>>2]|0)+ -12>>2]|0}a[g]=1;l=Rv(d|0)|0;c[h>>2]=c[b+(m+24)>>2];if((c[b+(m+4)>>2]&176|0)==32){n=d+l|0}else{n=d}k=b+m|0;o=b+(m+76)|0;m=c[o>>2]|0;if((m|0)==-1){ln(f,k);p=ws(f,22144)|0;q=ch[c[(c[p>>2]|0)+28>>2]&31](p,32)|0;vs(f);p=q<<24>>24;c[o>>2]=p;r=k;s=p}else{r=k;s=m}m=s&255;s=d+l|0;c[f+0>>2]=c[h+0>>2];gi(j,f,d,n,s,r,m);if((c[j>>2]|0)!=0){co(g);i=e;return b|0}j=c[(c[b>>2]|0)+ -12>>2]|0;jn(b+j|0,c[b+(j+16)>>2]|5);co(g);i=e;return b|0}function Wh(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;e=i;i=i+32|0;f=e+16|0;g=e;h=e+8|0;j=e+12|0;a[g]=0;c[g+4>>2]=b;k=c[(c[b>>2]|0)+ -12>>2]|0;if((c[b+(k+16)>>2]|0)!=0){co(g);i=e;return b|0}l=c[b+(k+72)>>2]|0;if((l|0)==0){m=k}else{Tn(l)|0;m=c[(c[b>>2]|0)+ -12>>2]|0}a[g]=1;l=Rv(d|0)|0;c[h>>2]=c[b+(m+24)>>2];if((c[b+(m+4)>>2]&176|0)==32){n=d+l|0}else{n=d}k=b+m|0;o=b+(m+76)|0;m=c[o>>2]|0;if((m|0)==-1){ln(f,k);p=ws(f,22144)|0;q=ch[c[(c[p>>2]|0)+28>>2]&31](p,32)|0;vs(f);p=q<<24>>24;c[o>>2]=p;r=k;s=p}else{r=k;s=m}m=s&255;s=d+l|0;c[f+0>>2]=c[h+0>>2];gi(j,f,d,n,s,r,m);if((c[j>>2]|0)!=0){co(g);i=e;return b|0}j=c[(c[b>>2]|0)+ -12>>2]|0;jn(b+j|0,c[b+(j+16)>>2]|5);co(g);i=e;return b|0}function Xh(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;e=c[336]|0;c[e+56>>2]=a;c[e+60>>2]=b;Fc(0,0,a|0,b|0);oi(c[(c[336]|0)+24>>2]|0,a,b);Gj(c[(c[336]|0)+28>>2]|0,a,b);i=d;return}function Yh(){a[(c[336]|0)+4|0]=1;return 0}function Zh(a){a=a|0;var b=0,d=0;b=i;d=c[440]|0;c[440]=d+1;_h(a,d)|0;i=b;return}function _h(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,j=0,k=0,l=0,m=0;e=i;i=i+16|0;f=e+8|0;g=e;j=e+4|0;Kj(f,c[b+44>>2]|0);a:do{if(((a[b+4|0]|0)==0?(yf(257)|0)!=1:0)?(k=c[992>>2]|0,!((k|0)>0&(k|0)<(d|0))):0){do{if((a[1221|0]|0)!=0){if((Ye(131074)|0)==0){zf();h[b+16>>3]=+nf();l=0;break a}if((a[1221|0]|0)!=0){tf(g|0,j|0);k=c[b+56>>2]|0;m=c[b+60>>2]|0;if((k|0)==(c[g>>2]|0)?(m|0)==(c[j>>2]|0):0){break}mf(k|0,m|0)}}}while(0);if((a[1776]|0)==0?(ab(1776)|0)!=0:0){c[442]=yf(258)|0;Bc(1776)}m=yf(258)|0;if((c[442]|0)==0&(m|0)==1){k=b+32|0;a[k]=a[k]^1}c[442]=m;if($h(b,(d|0)==0)|0){if((a[1221|0]|0)!=0?!(ai(b)|0):0){l=2;break}l=0}else{l=2}}else{l=1}}while(0);Lj(f);i=e;return l|0}function $h(b,d){b=b|0;d=d|0;var e=0,f=0,j=0,k=0,l=0.0,m=0,n=0.0,o=0.0,p=0.0;e=i;i=i+32|0;f=e+24|0;j=e;k=(a[b+32|0]|0)==0;l=+nf();if(!k){h[b+16>>3]=l;m=1;i=e;return m|0}n=+h[b+16>>3];if(l==0.0){o=n+.016666666666666666}else{o=l}l=o-n;h[b+16>>3]=o;do{if((a[b+5|0]|0)==0){if((a[b+6|0]|0)==0){p=l*+g[b+12>>2];break}else{p=1.0/+g[b+8>>2];break}}else{p=0.0}}while(0);k=c[b+28>>2]|0;if((k|0)!=0){Hj(k)|0}Kj(f,c[b+48>>2]|0);k=_g[c[(c[b>>2]|0)+16>>2]&1](b,p)|0;Lj(f);f=b+24|0;if((c[f>>2]|0)==0){m=k;i=e;return m|0}El(j);Lg[c[(c[b>>2]|0)+28>>2]&127](b,j);ki(c[f>>2]|0,j,l,d);m=k;i=e;return m|0}function ai(b){b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;i=i+80|0;e=d+64|0;f=d;Kj(e,c[b+52>>2]|0);ge(.33000001311302185,.3330000042915344,.3149999976158142,0.0);Kf(16640);cd(2884);Md(1029);cd(2929);mg(1);Mc(515);h=b+24|0;mi(c[h>>2]|0);j=b+36|0;k=ch[c[(c[b>>2]|0)+24>>2]&31](b,c[j>>2]|0)|0;Lj(e);mg(0);e=c[j>>2]|0;Yg[c[(c[e>>2]|0)+16>>2]&3](e,10,1.0);mg(1);e=c[j>>2]|0;j=c[(c[e>>2]|0)+12>>2]|0;l=f+0|0;m=l+64|0;do{c[l>>2]=0;l=l+4|0}while((l|0)<(m|0));g[f>>2]=1.0;g[f+20>>2]=1.0;g[f+40>>2]=1.0;g[f+60>>2]=1.0;Lg[j&127](e,f);ni(c[h>>2]|0);if(k){n=bi(b)|0}else{n=0}if((a[b+34|0]|0)==0?(a[b+33|0]|0)==0:0){hg();i=d;return n|0}Jj(c[b+28>>2]|0,1029)|0;hg();i=d;return n|0}function bi(b){b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0,t=0,u=0,v=0;d=i;i=i+80|0;e=d+64|0;f=d;h=d+12|0;j=d+16|0;k=d+32|0;l=d+48|0;m=c[b+56>>2]|0;n=c[b+60>>2]|0;c[e>>2]=0;c[e+4>>2]=0;o=e+8|0;c[o>>2]=m;m=e+12|0;c[m>>2]=n;c[f>>2]=0;n=f+4|0;c[n>>2]=0;p=f+8|0;a[p]=0;Cb(f|0,h|0);c[n>>2]=(c[m>>2]|0)-(c[h>>2]|0);a[p]=(Ae(0)|0)==1|0;p=b+40|0;ti(c[p>>2]|0,f,e,c[b+36>>2]|0);q=+(c[o>>2]|0)+-4.0;r=+(c[m>>2]|0)+-4.0;g[j>>2]=2.0;g[j+4>>2]=2.0;g[j+8>>2]=q;g[j+12>>2]=r;e=c[p>>2]|0;f=b+32|0;Hg[c[(c[e>>2]|0)+36>>2]&15](e,1784,j,f,0);if((a[f]|0)!=0){j=c[p>>2]|0;h=b+64|0;if((a[h]&1)==0){s=h+1|0}else{s=c[b+72>>2]|0}lh[c[(c[j>>2]|0)+28>>2]&63](j,s,0,0)}Kg[c[(c[e>>2]|0)+40>>2]&255](e);if((a[f]|0)!=0){t=1;u=c[p>>2]|0;ui(u);i=d;return t|0}if(+(c[o>>2]|0)>404.0){r=+(c[m>>2]|0)+-4.0+-16.0;g[k>>2]=2.0;g[k+4>>2]=2.0;g[k+8>>2]=200.0;g[k+12>>2]=r;e=c[p>>2]|0;Hg[c[(c[e>>2]|0)+36>>2]&15](e,1808,k,1800,1);if((a[1800]|0)!=0){ci(b)|0}Kg[c[(c[e>>2]|0)+40>>2]&255](e);if((a[f]|0)!=0){t=1;u=c[p>>2]|0;ui(u);i=d;return t|0}}r=+(c[o>>2]|0);if(!(r>202.0)){t=1;u=c[p>>2]|0;ui(u);i=d;return t|0}q=+(c[m>>2]|0)+-4.0+-16.0;g[l>>2]=r+-200.0+-2.0;g[l+4>>2]=2.0;g[l+8>>2]=200.0;g[l+12>>2]=q;m=c[p>>2]|0;Hg[c[(c[m>>2]|0)+36>>2]&15](m,1832,l,1824,1);if((a[1824]|0)==0){v=1}else{v=ch[c[(c[b>>2]|0)+20>>2]&31](b,c[p>>2]|0)|0}Kg[c[(c[m>>2]|0)+40>>2]&255](m);t=v;u=c[p>>2]|0;ui(u);i=d;return t|0}function ci(b){b=b|0;var e=0,f=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0.0,y=0,z=0,A=0,B=0,C=0;e=i;i=i+320|0;f=e;j=e+128|0;l=e+48|0;m=e+24|0;n=e+8|0;o=e+256|0;p=e+64|0;q=e+40|0;r=e+192|0;s=b+40|0;t=c[s>>2]|0;Hg[c[(c[t>>2]|0)+36>>2]&15](t,1848,0,1840,1);if((a[1840]|0)!=0){u=b+44|0;Oj(l,c[u>>2]|0);v=l+8|0;w=+g[v>>2];if(w==0.0){x=0.0}else{x=1.0e3/w}h[k>>3]=x;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];gd(j|0,1864,f|0)|0;y=c[s>>2]|0;Hg[c[(c[y>>2]|0)+36>>2]&15](y,j,0,1880,1);if((a[1880]|0)!=0){h[k>>3]=+g[v>>2];c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];gd(j|0,1888,f|0)|0;v=c[s>>2]|0;z=c[u>>2]|0;Qg[c[(c[v>>2]|0)+32>>2]&1](v,j,0.0,+g[l+4>>2],+g[l+12>>2],c[z+12>>2]|0,c[z+8>>2]|0,c[z+4>>2]|0)}Kg[c[(c[y>>2]|0)+40>>2]&255](y);y=b+48|0;Oj(m,c[y>>2]|0);h[k>>3]=+g[m+8>>2];c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];gd(j|0,1904,f|0)|0;z=c[s>>2]|0;Hg[c[(c[z>>2]|0)+36>>2]&15](z,j,0,1920,1);if((a[1920]|0)!=0){l=c[s>>2]|0;v=c[y>>2]|0;Qg[c[(c[l>>2]|0)+32>>2]&1](l,0,0.0,+g[m+4>>2],+g[m+12>>2],c[v+12>>2]|0,c[v+8>>2]|0,c[v+4>>2]|0)}Kg[c[(c[z>>2]|0)+40>>2]&255](z);z=b+52|0;Oj(n,c[z>>2]|0);h[k>>3]=+g[n+8>>2];c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];gd(j|0,1928,f|0)|0;v=c[s>>2]|0;Hg[c[(c[v>>2]|0)+36>>2]&15](v,j,0,1944,1);if((a[1944]|0)!=0){j=c[s>>2]|0;m=c[z>>2]|0;Qg[c[(c[j>>2]|0)+32>>2]&1](j,0,0.0,+g[n+4>>2],+g[n+12>>2],c[m+12>>2]|0,c[m+8>>2]|0,c[m+4>>2]|0)}Kg[c[(c[v>>2]|0)+40>>2]&255](v)}Kg[c[(c[t>>2]|0)+40>>2]&255](t);t=c[s>>2]|0;Hg[c[(c[t>>2]|0)+36>>2]&15](t,1960,0,1952,1);do{if((a[1952]|0)!=0){v=c[s>>2]|0;fh[c[(c[v>>2]|0)+8>>2]&15](v,1976,1,b+5|0)|0;v=c[s>>2]|0;m=b+6|0;fh[c[(c[v>>2]|0)+20>>2]&15](v,1984,m,1)|0;if((a[m]|0)==0){m=b+12|0;h[k>>3]=+g[m>>2];c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];gd(o|0,2e3,f|0)|0;v=c[s>>2]|0;bh[c[(c[v>>2]|0)+12>>2]&1](v,o,-5.0,5.0,m,1.0,1)|0;v=c[s>>2]|0;if(!(fh[c[(c[v>>2]|0)+8>>2]&15](v,2024,+g[m>>2]!=1.0,0)|0)){break}g[m>>2]=1.0;break}else{m=b+8|0;h[k>>3]=+g[m>>2];c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];gd(p|0,2048,f|0)|0;v=c[s>>2]|0;bh[c[(c[v>>2]|0)+12>>2]&1](v,p,1.0,200.0,m,.5,1)|0;v=c[s>>2]|0;if(!(fh[c[(c[v>>2]|0)+8>>2]&15](v,2072,+g[m>>2]!=60.0,0)|0)){break}g[m>>2]=60.0;break}}}while(0);Kg[c[(c[t>>2]|0)+40>>2]&255](t);t=c[s>>2]|0;Hg[c[(c[t>>2]|0)+36>>2]&15](t,2104,0,2096,1);if((a[2096]|0)!=0){if((a[2120]|0)==0?(ab(2120)|0)!=0:0){a[2112]=(Ye(131091)|0)!=0|0;Bc(2120)}if((a[2136]|0)==0?(ab(2136)|0)!=0:0){a[2128]=a[2112]|0;Bc(2136)}p=c[s>>2]|0;do{if(fh[c[(c[p>>2]|0)+20>>2]&15](p,2144,2128,(a[2112]|0)!=0)|0){if((a[2128]|0)==0){ug(32925);break}else{cd(32925);break}}}while(0);p=c[s>>2]|0;if(fh[c[(c[p>>2]|0)+20>>2]&15](p,2168,2160,1)|0){Se(d[2160]|0)}}c[q>>2]=0;p=c[b+56>>2]|0;o=b+60|0;m=0;do{v=c[1392+(m<<3)>>2]|0;if((v|0)>(p|0)){break}if((v|0)==(p|0)?(c[1396+(m<<3)>>2]|0)>=(c[o>>2]|0):0){break}m=m+1|0;c[q>>2]=m}while((m|0)<16);m=c[o>>2]|0;c[f>>2]=p;c[f+4>>2]=m;gd(r|0,2184,f|0)|0;f=c[s>>2]|0;if(hh[c[(c[f>>2]|0)+16>>2]&1](f,r,0,16,q,1.0,1)|0){r=1392+(c[q>>2]<<3)|0;q=c[r+4>>2]|0;f=b+56|0;c[f>>2]=c[r>>2];c[f+4>>2]=q}Kg[c[(c[t>>2]|0)+40>>2]&255](t);t=c[s>>2]|0;Hg[c[(c[t>>2]|0)+36>>2]&15](t,2216,0,2208,1);if((a[2208]|0)!=0){q=c[s>>2]|0;f=b+33|0;fh[c[(c[q>>2]|0)+8>>2]&15](q,2224,1,f)|0;q=c[s>>2]|0;a[b+34|0]=(fh[c[(c[q>>2]|0)+8>>2]&15](q,2240,(a[f]|0)==0,0)|0)&1}Kg[c[(c[t>>2]|0)+40>>2]&255](t);t=c[s>>2]|0;Hg[c[(c[t>>2]|0)+36>>2]&15](t,2272,0,2264,1);if((a[2264]|0)==0){A=c[t>>2]|0;B=A+40|0;C=c[B>>2]|0;Kg[C&255](t);i=e;return 1}li(c[b+24>>2]|0,c[s>>2]|0);A=c[t>>2]|0;B=A+40|0;C=c[B>>2]|0;Kg[C&255](t);i=e;return 1}function di(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;if((b|0)==(d|0)){i=e;return b|0}f=a[d]|0;if((f&1)==0){g=(f&255)>>>1;h=d+1|0}else{g=c[d+4>>2]|0;h=c[d+8>>2]|0}d=a[b]|0;if((d&1)==0){j=10;k=d}else{d=c[b>>2]|0;j=(d&-2)+ -1|0;k=d&255}d=(k&1)==0;if(j>>>0<g>>>0){if(d){l=(k&255)>>>1}else{l=c[b+4>>2]|0}ei(b,j,g-j|0,l,0,l,g,h);i=e;return b|0}if(d){m=b+1|0}else{m=c[b+8>>2]|0}Sv(m|0,h|0,g|0)|0;a[m+g|0]=0;if((a[b]&1)==0){a[b]=g<<1;i=e;return b|0}else{c[b+4>>2]=g;i=e;return b|0}return 0}function ei(b,d,e,f,g,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;l=i;if((-18-d|0)>>>0<e>>>0){Nm(0)}if((a[b]&1)==0){m=b+1|0}else{m=c[b+8>>2]|0}if(d>>>0<2147483623){n=e+d|0;e=d<<1;o=n>>>0<e>>>0?e:n;if(o>>>0<11){p=11}else{p=o+16&-16}}else{p=-17}o=Hl()|0;n=Sg[c[(c[o>>2]|0)+8>>2]&31](o,p,1)|0;if((g|0)!=0){Nv(n|0,m|0,g|0)|0}if((j|0)!=0){Nv(n+g|0,k|0,j|0)|0}k=f-h|0;if((k|0)!=(g|0)){Nv(n+(j+g)|0,m+(h+g)|0,k-g|0)|0}if((d|0)==10){q=b+8|0;c[q>>2]=n;r=p|1;c[b>>2]=r;s=k+j|0;t=b+4|0;c[t>>2]=s;u=n+s|0;a[u]=0;i=l;return}d=Hl()|0;Lg[c[(c[d>>2]|0)+12>>2]&127](d,m);q=b+8|0;c[q>>2]=n;r=p|1;c[b>>2]=r;s=k+j|0;t=b+4|0;c[t>>2]=s;u=n+s|0;a[u]=0;i=l;return}function fi(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;f=Rv(d|0)|0;g=a[b]|0;if((g&1)==0){h=g;j=10}else{g=c[b>>2]|0;h=g&255;j=(g&-2)+ -1|0}g=(h&1)==0;if(j>>>0<f>>>0){if(g){k=(h&255)>>>1}else{k=c[b+4>>2]|0}ei(b,j,f-j|0,k,0,k,f,d);i=e;return b|0}if(g){l=b+1|0}else{l=c[b+8>>2]|0}Sv(l|0,d|0,f|0)|0;a[l+f|0]=0;if((a[b]&1)==0){a[b]=f<<1;i=e;return b|0}else{c[b+4>>2]=f;i=e;return b|0}return 0}function gi(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;k=i;i=i+16|0;l=k;m=c[d>>2]|0;if((m|0)==0){c[b>>2]=0;i=k;return}n=g;g=e;o=n-g|0;p=h+12|0;h=c[p>>2]|0;q=(h|0)>(o|0)?h-o|0:0;o=f;h=o-g|0;if((h|0)>0?(Sg[c[(c[m>>2]|0)+48>>2]&31](m,e,h)|0)!=(h|0):0){c[d>>2]=0;c[b>>2]=0;i=k;return}do{if((q|0)>0){if(q>>>0<11){h=q<<1&255;a[l]=h;r=l;s=h;t=l+1|0}else{h=q+16&-16;e=sv(h)|0;c[l+8>>2]=e;g=h|1;c[l>>2]=g;c[l+4>>2]=q;r=l;s=g&255;t=e}Ov(t|0,j|0,q|0)|0;a[t+q|0]=0;if((s&1)==0){u=l+1|0}else{u=c[l+8>>2]|0}if((Sg[c[(c[m>>2]|0)+48>>2]&31](m,u,q)|0)==(q|0)){if((a[r]&1)==0){break}vv(c[l+8>>2]|0);break}c[d>>2]=0;c[b>>2]=0;if((a[r]&1)==0){i=k;return}vv(c[l+8>>2]|0);i=k;return}}while(0);l=n-o|0;if((l|0)>0?(Sg[c[(c[m>>2]|0)+48>>2]&31](m,f,l)|0)!=(l|0):0){c[d>>2]=0;c[b>>2]=0;i=k;return}c[p>>2]=0;c[b>>2]=m;i=k;return}function hi(){var a=0;a=i;pk(968,1e3,1016,-1,0,0);Ag(28,968,p|0)|0;kk(1200,1224,1232,1,0,0);Ag(25,1200,p|0)|0;pk(1264,1296,1312,5,0,22);Ag(28,1264,p|0)|0;i=a;return}function ii(b){b=b|0;var d=0,e=0,f=0,h=0;d=i;e=b+0|0;f=e+64|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(f|0));g[b>>2]=1.0;g[b+20>>2]=1.0;g[b+40>>2]=1.0;g[b+60>>2]=1.0;h=b+64|0;e=h+0|0;f=e+64|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(f|0));g[h>>2]=1.0;g[b+84>>2]=1.0;g[b+104>>2]=1.0;g[b+124>>2]=1.0;h=b+128|0;e=h+0|0;f=e+64|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(f|0));g[h>>2]=1.0;g[b+148>>2]=1.0;g[b+168>>2]=1.0;g[b+188>>2]=1.0;h=b+192|0;e=h+0|0;f=e+64|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(f|0));g[h>>2]=1.0;g[b+212>>2]=1.0;g[b+232>>2]=1.0;g[b+252>>2]=1.0;h=b+256|0;c[h>>2]=-1098511726;c[h+4>>2]=1059117436;h=b+264|0;c[h+0>>2]=c[2384>>2];c[h+4>>2]=c[2388>>2];c[h+8>>2]=c[2392>>2];g[b+276>>2]=8.0;h=b+280|0;c[h>>2]=-1098511726;c[h+4>>2]=1059117436;a[b+288|0]=1;h=b+292|0;c[h+0>>2]=c[2384>>2];c[h+4>>2]=c[2388>>2];c[h+8>>2]=c[2392>>2];a[b+304|0]=0;g[b+308>>2]=8.0;a[b+312|0]=0;a[b+313|0]=1;h=b+316|0;e=b+336|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[h+16>>2]=0;a[e]=1;i=d;return}function ji(a){a=a|0;return}function ki(b,d,e,f){b=b|0;d=d|0;e=+e;f=f|0;var h=0,j=0,l=0,m=0,n=0,o=0,p=0.0,q=0,r=0.0,s=0,t=0.0,u=0,v=0.0,w=0,x=0.0,y=0,z=0.0,A=0,B=0,C=0,D=0.0,E=0,F=0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,V=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0,ca=0.0,da=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0.0,pa=0.0,qa=0.0,ra=0.0,sa=0.0,ta=0.0,ua=0,va=0,wa=0,xa=0.0,ya=0.0,za=0.0,Aa=0,Ba=0.0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0;h=i;i=i+32|0;j=h+24|0;l=h;m=h+8|0;n=b+336|0;if(!(!((a[n]|0)!=0|f)?(yf(70)|0)!=1:0)){o=3}if((((o|0)==3?(p=+g[d>>2],q=d+12|0,r=+g[q>>2],p<=r):0)?(s=d+4|0,t=+g[s>>2],u=d+16|0,v=+g[u>>2],t<=v):0)?(w=d+8|0,x=+g[w>>2],y=d+20|0,z=+g[y>>2],x<=z):0){g[b+264>>2]=(r+p)*.5;g[b+268>>2]=(v+t)*.5;g[b+272>>2]=(z+x)*.5;x=+g[q>>2]- +g[d>>2];z=+g[u>>2]- +g[s>>2];t=+g[y>>2]- +g[w>>2];if((a[b+313|0]|0)==0|f){g[b+276>>2]=+U(+(x*x+z*z+t*t))*.5*1.399999976158142/+Y(.5235987901687622)}g[b+316>>2]=f?0.0:.15000000596046448}f=Kd()|0;w=b+332|0;y=c[w>>2]|0;c[w>>2]=f;if((f|0)!=(y|0)){w=b+276|0;t=+g[w>>2];g[w>>2]=t+ +(y-f|0)*.019999999552965164*t;g[b+316>>2]=0.0}Cb(j|0,l|0);f=c[j>>2]|0;y=b+320|0;w=f-(c[y>>2]|0)|0;s=c[l>>2]|0;u=b+324|0;d=s-(c[u>>2]|0)|0;c[y>>2]=f;c[u>>2]=s;s=~~(e*500.0);u=(s|0)<1?1:s;s=yf(286)|0;f=ea(s-(yf(285)|0)|0,u)|0;s=yf(284)|0;y=ea(s-(yf(283)|0)|0,u)|0;u=f+w|0;w=y+d|0;if((y|f|0)==0?(Ae(1)|0)!=1:0){A=0;B=0;C=0}else{o=13}do{if((o|0)==13){if((yf(289)|0)==1){f=b+276|0;g[f>>2]=+(w|0)*.10000000149011612+ +g[f>>2];g[b+316>>2]=0.0;A=0;B=0;C=1;break}if((yf(287)|0)==1){t=+(0-u|0)*.009999999776482582;z=+(w|0)*.009999999776482582;f=b+264|0;y=b+268|0;d=b+272|0;x=z*+g[b+148>>2]+(t*+g[b+144>>2]+ +g[y>>2]);v=z*+g[b+164>>2]+(t*+g[b+160>>2]+ +g[d>>2]);g[f>>2]=z*+g[b+132>>2]+(t*+g[b+128>>2]+ +g[f>>2]);g[y>>2]=x;g[d>>2]=v;A=1;B=0;C=0;break}else{d=b+256|0;g[d>>2]=+Qd(+(+g[d>>2]- +(w|0)*.0020000000949949026),6.2831854820251465);d=b+260|0;g[d>>2]=+Qd(+(+g[d>>2]- +(u|0)*.0020000000949949026),6.2831854820251465);g[b+316>>2]=0.0;A=0;B=1;C=0;break}}}while(0);u=Ae(2)|0;w=b+328|0;d=(c[w>>2]|0)==1&(u|0)==0;c[w>>2]=u;if(!d){v=+g[b+316>>2];if(v>.0010000000474974513){D=v;E=A;o=21}else{d=b+256|0;u=c[d>>2]|0;w=c[d+4>>2]|0;d=b+280|0;c[d>>2]=u;c[d+4>>2]=w;d=b+292|0;y=b+264|0;c[d+0>>2]=c[y+0>>2];c[d+4>>2]=c[y+4>>2];c[d+8>>2]=c[y+8>>2];v=+g[b+276>>2];g[b+308>>2]=v;F=u;G=w;H=+g[b+292>>2];I=+g[b+296>>2];J=+g[b+300>>2];K=v;L=A}}else{hd(2978,m|0);v=+((c[j>>2]|0)-(c[m>>2]|0)|0)/+(c[m+8>>2]|0)*2.0+-1.0;j=c[m+12>>2]|0;x=+(j-(c[l>>2]|0)-(c[m+4>>2]|0)|0)/+(j|0)*2.0+-1.0;t=+g[b>>2];z=+g[b+128>>2];p=+g[b+16>>2];r=+g[b+132>>2];M=+g[b+32>>2];N=+g[b+136>>2];O=+g[b+48>>2];P=+g[b+140>>2];Q=t*z+p*r+M*N+O*P;R=+g[b+4>>2];S=+g[b+20>>2];T=+g[b+36>>2];V=+g[b+52>>2];Z=z*R+r*S+N*T+P*V;_=+g[b+8>>2];$=+g[b+24>>2];aa=+g[b+40>>2];ba=+g[b+56>>2];ca=z*_+r*$+N*aa+P*ba;da=+g[b+12>>2];fa=+g[b+28>>2];ga=+g[b+44>>2];ha=+g[b+60>>2];ia=z*da+r*fa+N*ga+P*ha;P=+g[b+144>>2];N=+g[b+148>>2];r=+g[b+152>>2];z=+g[b+156>>2];ja=t*P+p*N+M*r+O*z;ka=R*P+S*N+T*r+V*z;la=_*P+$*N+aa*r+ba*z;ma=da*P+fa*N+ga*r+ha*z;z=+g[b+160>>2];r=+g[b+164>>2];N=+g[b+168>>2];P=+g[b+172>>2];na=t*z+p*r+M*N+O*P;oa=R*z+S*r+T*N+V*P;pa=_*z+$*r+aa*N+ba*P;qa=da*z+fa*r+ga*N+ha*P;P=+g[b+176>>2];N=+g[b+180>>2];r=+g[b+184>>2];z=+g[b+188>>2];ra=t*P+p*N+M*r+O*z;O=R*P+S*N+T*r+V*z;V=_*P+$*N+aa*r+ba*z;ba=da*P+fa*N+ga*r+ha*z;z=pa*ba-qa*V;ha=oa*ba-qa*O;r=oa*V-pa*O;ga=na*ba-qa*ra;N=na*V-pa*ra;fa=na*O-oa*ra;P=la*ba-ma*V;da=ka*ba-ma*O;aa=ka*V-la*O;$=ja*ba-ma*ra;ba=ja*V-la*ra;V=ja*O-ka*ra;ra=la*qa-ma*pa;O=ka*qa-ma*oa;_=ka*pa-la*oa;T=ja*qa-ma*na;qa=ja*pa-la*na;pa=ja*oa-ka*na;na=ma*r+(ka*z-la*ha);oa=-ja;S=la*ga+z*oa-ma*N;R=ma*fa+(ja*ha-ka*ga);ja=ka*N+r*oa-la*fa;la=-Z;oa=-Q;ka=1.0/(ia*ja+(ca*R+(Q*na+Z*S)));ma=ka*R;R=ka*(Z*ga+ha*oa-ia*fa);M=ka*(ia*V+(Q*da-Z*$));p=ka*(Z*T+O*oa-ia*pa);t=ka*ja;ja=ka*(ca*fa+(Q*r-Z*N));fa=ka*(Z*ba+aa*oa-ca*V);V=ka*(ca*pa+(Q*_-Z*qa));pa=v*ka*na+x*ka*S;S=v*ka*(z*la+ca*ha-ia*r)+x*ka*(ia*N+(Q*z-ca*ga));ga=v*ka*(ia*aa+(Z*P-ca*da))+x*ka*(ca*$+P*oa-ia*ba);ba=v*ka*(ra*la+ca*O-ia*_)+x*ka*(ia*qa+(Q*ra-ca*T));T=V+(p*-1.0+ba);ca=V+(p+ba);ba=(t+(ma*-1.0+pa))/T;p=(ja+(R*-1.0+S))/T;V=(fa+(M*-1.0+ga))/T;T=(t+(ma+pa))/ca-ba;pa=(ja+(R+S))/ca-p;S=(fa+(M+ga))/ca-V;ca=1.0/+U(+(T*T+pa*pa+S*S));ga=pa*ca;j=ga!=0.0;pa=-p/ga;m=b+264|0;g[m>>2]=j?ba+T*ca*pa:0.0;g[m+4>>2]=j?p+ga*pa:0.0;g[m+8>>2]=j?V+S*ca*pa:0.0;g[b+316>>2]=.15000000596046448;D=.15000000596046448;E=1;o=21}if((o|0)==21){pa=D>e?e:D;e=pa/D;o=b+280|0;j=b+256|0;if((a[b+288|0]|0)==0){m=j;ca=+g[m>>2];sa=ca;ta=+g[m+4>>2]}else{ca=+g[o>>2];S=+g[b+284>>2];sa=ca+e*(+g[j>>2]-ca);ta=S+e*(+g[b+260>>2]-S)}j=(g[k>>2]=sa,c[k>>2]|0);m=(g[k>>2]=ta,c[k>>2]|0);l=o;c[l>>2]=j;c[l+4>>2]=m;ta=+g[b+264>>2];if((a[b+304|0]|0)==0){ua=b+296|0;va=b+300|0;wa=b+292|0;xa=ta;ya=+g[b+268>>2];za=+g[b+272>>2]}else{l=b+292|0;sa=+g[l>>2];o=b+296|0;S=+g[o>>2];A=b+300|0;ca=+g[A>>2];ua=o;va=A;wa=l;xa=sa+e*(ta-sa);ya=S+e*(+g[b+268>>2]-S);za=ca+e*(+g[b+272>>2]-ca)}g[wa>>2]=xa;g[ua>>2]=ya;g[va>>2]=za;if((a[b+312|0]|0)==0){Aa=b+308|0;Ba=+g[b+276>>2]}else{va=b+308|0;ca=+g[va>>2];Aa=va;Ba=ca+e*(+g[b+276>>2]-ca)}g[Aa>>2]=Ba;g[b+316>>2]=D-pa;F=j;G=m;H=xa;I=ya;J=za;K=Ba;L=E}Ba=(c[k>>2]=G,+g[k>>2]);za=(c[k>>2]=F,+g[k>>2]);ya=+W(+Ba);xa=+X(+Ba);Ba=1.0-ya;pa=Ba*0.0;D=xa*0.0;ca=ya+pa;e=pa+D;S=pa-xa;sa=pa-D;D=ya+Ba;Ba=xa+pa;pa=+W(+za);xa=+X(+za);za=1.0-pa;ya=za*0.0;ta=xa*0.0;V=pa+za;za=ya+ta;ga=ya-ta;ta=pa+ya;pa=xa+ya;p=ya-xa;xa=e*0.0;ya=S*0.0;T=H*0.0;ba=T+(ya+(ca+xa));M=ca*0.0;fa=I*0.0;R=fa+(ya+(e+M));ja=M+xa;ma=J*0.0;t=ma+(S+ja);S=ya+ja+0.0;ja=D*0.0;ya=T+(sa+ja+xa);ra=sa*0.0;Q=fa+(xa+(D+ra));D=ja+ra;ja=ma+(e+D);e=xa+D+0.0;D=T+(M+(Ba+ra));T=Ba*0.0;Ba=fa+(M+(sa+T));sa=T+ra;ra=ma+(ca+sa);ca=M+sa+0.0;sa=H+0.0;H=I+0.0;I=J+0.0;J=sa*0.0;M=J+(ga*D+(ya*za+V*ba));ma=H*0.0;T=ma+(ga*Ba+(V*R+za*Q));fa=I*0.0;xa=fa+(ga*ra+(V*t+za*ja));qa=ga*ca+(V*S+za*e)+0.0;V=J+(pa*D+(ya*ta+ga*ba));ia=ma+(pa*Ba+(ga*R+ta*Q));ka=fa+(pa*ra+(ga*t+ta*ja));x=pa*ca+(ga*S+ta*e)+0.0;ga=J+(ta*D+(ya*p+za*ba));J=ma+(ta*Ba+(za*R+p*Q));ma=fa+(ta*ra+(za*t+p*ja));fa=ta*ca+(za*S+p*e)+0.0;p=sa+(D*0.0+(ya*0.0+ba*0.0));ba=H+(Ba*0.0+(R*0.0+Q*0.0));Q=I+(ra*0.0+(t*0.0+ja*0.0));ja=ca*0.0+(S*0.0+e*0.0)+1.0;e=V*0.0;S=ga*0.0;ca=p*0.0;t=ca+(S+(M+e));ra=ia*0.0;I=J*0.0;R=ba*0.0;Ba=R+(I+(T+ra));H=ka*0.0;ya=ma*0.0;D=Q*0.0;sa=D+(ya+(xa+H));za=x*0.0;ta=fa*0.0;pa=ja*0.0;_=pa+(ta+(qa+za));O=M*0.0;M=ca+(S+(V+O));V=T*0.0;T=R+(I+(ia+V));ia=xa*0.0;xa=D+(ya+(ka+ia));ka=qa*0.0;qa=pa+(ta+(x+ka));x=O+e;e=ca+(ga+x);ca=V+ra;ra=R+(J+ca);R=ia+H;H=D+(ma+R);D=ka+za;za=pa+(fa+D);pa=p+(K*ga+x);x=ba+(K*J+ca);ca=Q+(K*ma+R);R=ja+(K*fa+D);D=H*R-ca*za;fa=R*ra-za*x;K=ca*ra-H*x;ja=R*e-za*pa;ma=ca*e-H*pa;Q=x*e-ra*pa;J=R*xa-ca*qa;ba=R*T-x*qa;ga=ca*T-x*xa;p=R*M-pa*qa;R=ca*M-pa*xa;ca=x*M-pa*T;pa=za*xa-H*qa;x=za*T-ra*qa;ka=H*T-ra*xa;ia=za*M-e*qa;za=H*M-e*xa;H=ra*M-e*T;e=qa*K+(T*D-xa*fa);ra=-M;V=xa*ja+D*ra-qa*ma;O=qa*Q+(M*fa-T*ja);M=T*ma+K*ra-xa*Q;xa=-Ba;ra=-t;T=1.0/(_*M+(sa*O+(t*e+Ba*V)));g[b+128>>2]=T*e;g[b+132>>2]=T*(D*xa+sa*fa-_*K);g[b+136>>2]=T*(_*ga+(Ba*J-sa*ba));g[b+140>>2]=T*(pa*xa+sa*x-_*ka);g[b+144>>2]=T*V;g[b+148>>2]=T*(_*ma+(t*D-sa*ja));g[b+152>>2]=T*(sa*p+J*ra-_*R);g[b+156>>2]=T*(_*za+(t*pa-sa*ia));g[b+160>>2]=T*O;g[b+164>>2]=T*(Ba*ja+fa*ra-_*Q);g[b+168>>2]=T*(_*ca+(t*ba-Ba*p));g[b+172>>2]=T*(Ba*ia+x*ra-_*H);g[b+176>>2]=T*M;g[b+180>>2]=T*(sa*Q+(t*K-Ba*ma));g[b+184>>2]=T*(Ba*R+ga*ra-sa*ca);g[b+188>>2]=T*(sa*H+(t*ka-Ba*za));if(C|B){Ca=0;Da=a[n]|0;Ea=Da&255;Fa=Ea&Ca;Ga=Fa&255;a[n]=Ga;i=h;return}Ca=L&1^1;Da=a[n]|0;Ea=Da&255;Fa=Ea&Ca;Ga=Fa&255;a[n]=Ga;i=h;return}function li(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;lh[c[(c[d>>2]|0)+28>>2]&63](d,2400,0,0);fh[c[(c[d>>2]|0)+20>>2]&15](d,2480,b+336|0,1)|0;Hg[c[(c[d>>2]|0)+36>>2]&15](d,2512,0,2504,1);if((a[2504]|0)==0){f=c[d>>2]|0;g=f+40|0;h=c[g>>2]|0;Kg[h&255](d);i=e;return}fh[c[(c[d>>2]|0)+20>>2]&15](d,2536,b+288|0,1)|0;fh[c[(c[d>>2]|0)+20>>2]&15](d,2560,b+304|0,1)|0;j=b+313|0;fh[c[(c[d>>2]|0)+20>>2]&15](d,2584,j,1)|0;fh[c[(c[d>>2]|0)+20>>2]&15](d,2608,b+312|0,(a[j]|0)==0)|0;f=c[d>>2]|0;g=f+40|0;h=c[g>>2]|0;Kg[h&255](d);i=e;return}function mi(a){a=a|0;var b=0.0,c=0.0,d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0;b=+g[a>>2];c=+g[a+128>>2];d=+g[a+16>>2];e=+g[a+132>>2];f=+g[a+32>>2];h=+g[a+136>>2];i=+g[a+48>>2];j=+g[a+140>>2];k=+g[a+4>>2];l=+g[a+20>>2];m=+g[a+36>>2];n=+g[a+52>>2];o=+g[a+8>>2];p=+g[a+24>>2];q=+g[a+40>>2];r=+g[a+56>>2];s=+g[a+12>>2];t=+g[a+28>>2];u=+g[a+44>>2];v=+g[a+60>>2];w=+g[a+144>>2];x=+g[a+148>>2];y=+g[a+152>>2];z=+g[a+156>>2];A=+g[a+160>>2];B=+g[a+164>>2];C=+g[a+168>>2];D=+g[a+172>>2];E=+g[a+176>>2];F=+g[a+180>>2];G=+g[a+184>>2];H=+g[a+188>>2];g[a+192>>2]=b*c+d*e+f*h+i*j;g[a+196>>2]=c*k+e*l+h*m+j*n;g[a+200>>2]=c*o+e*p+h*q+j*r;g[a+204>>2]=c*s+e*t+h*u+j*v;g[a+208>>2]=b*w+d*x+f*y+i*z;g[a+212>>2]=k*w+l*x+m*y+n*z;g[a+216>>2]=o*w+p*x+q*y+r*z;g[a+220>>2]=s*w+t*x+u*y+v*z;g[a+224>>2]=b*A+d*B+f*C+i*D;g[a+228>>2]=k*A+l*B+m*C+n*D;g[a+232>>2]=o*A+p*B+q*C+r*D;g[a+236>>2]=s*A+t*B+u*C+v*D;g[a+240>>2]=b*E+d*F+f*G+i*H;g[a+244>>2]=k*E+l*F+m*G+n*H;g[a+248>>2]=o*E+p*F+q*G+r*H;g[a+252>>2]=s*E+t*F+u*G+v*H;return}function ni(a){a=a|0;var b=0,d=0,e=0;b=i;d=a+192|0;e=a+64|0;a=d+64|0;do{c[d>>2]=c[e>>2];d=d+4|0;e=e+4|0}while((d|0)<(a|0));i=b;return}function oi(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0;e=i;f=+(b|0);h=+(d|0);if((d|0)==0){j=.005773502867668867}else{j=f/h*.005773502867668867}g[a>>2]=.009999999776482582/j;d=a+4|0;b=a+20|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;g[b>>2]=1.7320506572723389;b=a+24|0;d=a+40|0;c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;g[d>>2]=-1.0000200271606445;g[a+44>>2]=-1.0;g[a+48>>2]=0.0;g[a+52>>2]=0.0;g[a+56>>2]=-.02000020071864128;g[a+60>>2]=0.0;g[a+64>>2]=2.0/f;d=a+68|0;f=2.0/h;b=a+84|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;g[b>>2]=f;b=a+88|0;d=a+104|0;c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;g[d>>2]=-2.0;g[a+108>>2]=0.0;g[a+112>>2]=-1.0;g[a+116>>2]=-1.0;g[a+120>>2]=0.0;g[a+124>>2]=1.0;i=e;return}function pi(b){b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0;d=i;c[b>>2]=2648;c[b+4>>2]=0;c[b+8>>2]=0;a[b+12|0]=0;e=b+16|0;c[b+16488>>2]=0;c[b+16492>>2]=0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;e=0;do{f=+(e|0)*6.2831854820251465*.125;h=+W(+f)*32.0;j=+X(+f)*32.0;g[b+(e<<3)+40>>2]=h+(h>=0.0?.5:-.5);g[b+(e<<3)+44>>2]=j+(j>=0.0?.5:-.5);e=e+1|0}while((e|0)!=8);qi(b);i=d;return}function qi(b){b=b|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0.0;e=i;f=Hl()|0;h=Sg[c[(c[f>>2]|0)+8>>2]&31](f,65536,1)|0;Ov(h|0,0,65536)|0;f=0;do{j=d[2864+((f|0)/8|0)|0]|0;k=0;do{l=k+f|0;m=0-(j>>>(7-k|0)&1)&255;n=(((l|0)/672|0)<<10)+((l|0)%672|0)<<2;a[h+n|0]=m;a[h+(n|1)|0]=m;a[h+(n|2)|0]=m;a[h+(n|3)|0]=m;k=k+1|0}while((k|0)!=8);f=f+8|0}while((f|0)<6720);f=b+16488|0;fd(1,f|0);ie(3553,c[f>>2]|0);bc(3553,10240,9728);bc(3553,10241,9728);_e(3553,0,6408,1024,16,0,6408,5121,h|0);fc(3317,1);ie(3553,0);f=Hl()|0;Lg[c[(c[f>>2]|0)+12>>2]&127](f,h);h=0;do{f=h+ -32|0;if(f>>>0<95){o=+(f|0)*.0068359375;g[b+(h<<6)+104>>2]=o;g[b+(h<<6)+108>>2]=0.0;g[b+(h<<6)+136>>2]=0.0;g[b+(h<<6)+140>>2]=10.0;g[b+(h<<6)+112>>2]=o;g[b+(h<<6)+116>>2]=.625;g[b+(h<<6)+144>>2]=0.0;g[b+(h<<6)+148>>2]=0.0;o=+(h+ -31|0)*.0068359375;g[b+(h<<6)+120>>2]=o;g[b+(h<<6)+124>>2]=0.0;g[b+(h<<6)+152>>2]=7.0;g[b+(h<<6)+156>>2]=10.0;g[b+(h<<6)+128>>2]=o;g[b+(h<<6)+132>>2]=.625;g[b+(h<<6)+160>>2]=7.0;g[b+(h<<6)+164>>2]=0.0}else{f=b+(h<<6)+104|0;k=f+64|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(k|0))}h=h+1|0}while((h|0)!=256);i=e;return}function ri(a){a=a|0;var b=0;b=i;si(a);vv(a);i=b;return}function si(a){a=a|0;var b=0,d=0,e=0;b=i;c[a>>2]=2648;d=a+16488|0;nb(1,d|0);c[d>>2]=0;d=c[a+28>>2]|0;if((d|0)==0){i=b;return}e=a+32|0;a=c[e>>2]|0;if((a|0)!=(d|0)){c[e>>2]=a+(~(((a+ -24+(0-d)|0)>>>0)/24|0)*24|0)}a=Hl()|0;Lg[c[(c[a>>2]|0)+12>>2]&127](a,d);i=b;return}function ti(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0;h=i;i=i+32|0;j=h;k=b+28|0;l=c[k>>2]|0;m=b+32|0;if((l|0)!=(c[m>>2]|0)){i=h;return}c[b+16492>>2]=f;f=b+4|0;c[f+0>>2]=c[d+0>>2];c[f+4>>2]=c[d+4>>2];a[f+8|0]=a[d+8|0]|0;c[b+16>>2]=0;c[b+24>>2]=0;n=+(c[e+4>>2]|0);o=+(c[e+8>>2]|0);p=+(c[e+12>>2]|0);g[j>>2]=+(c[e>>2]|0);g[j+4>>2]=n;g[j+8>>2]=o;g[j+12>>2]=p;g[j+16>>2]=p+-13.0;a[j+20|0]=0;if((l|0)==(c[b+36>>2]|0)){Ii(k,j)}else{if((l|0)==0){q=0}else{c[l+0>>2]=c[j+0>>2];c[l+4>>2]=c[j+4>>2];c[l+8>>2]=c[j+8>>2];c[l+12>>2]=c[j+12>>2];c[l+16>>2]=c[j+16>>2];c[l+20>>2]=c[j+20>>2];q=c[m>>2]|0}c[m>>2]=q+24}Kf(256);cd(3042);pb(770,771);i=h;return}function ui(b){b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0.0,o=0.0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0;d=i;i=i+128|0;e=d;f=d+112|0;h=d+80|0;j=d+96|0;k=b+32|0;l=c[k>>2]|0;c[k>>2]=l+(~(((l+ -24+(0-(l+ -24))|0)>>>0)/24|0)*24|0);l=b+20|0;if((a[b+12|0]|0)!=0){if((c[l>>2]|0)==0){c[l>>2]=-1}}else{c[l>>2]=0}l=b+16492|0;k=c[(c[l>>2]|0)+64>>2]|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;g[e>>2]=1.0;m=e+4|0;c[m+0>>2]=c[f+0>>2];c[m+4>>2]=c[f+4>>2];c[m+8>>2]=c[f+8>>2];c[m+12>>2]=c[f+12>>2];g[e+20>>2]=1.0;f=e+24|0;c[f+0>>2]=c[h+0>>2];c[f+4>>2]=c[h+4>>2];c[f+8>>2]=c[h+8>>2];c[f+12>>2]=c[h+12>>2];g[e+40>>2]=1.0;h=e+44|0;c[h+0>>2]=c[j+0>>2];c[h+4>>2]=c[j+4>>2];c[h+8>>2]=c[j+8>>2];c[h+12>>2]=c[j+12>>2];g[e+60>>2]=1.0;j=e+64|0;c[j>>2]=k;k=e+68|0;c[k>>2]=2;h=b+4|0;n=+(c[h>>2]|0);f=b+8|0;o=+(c[f>>2]|0);b=c[j>>2]|0;m=b+12|0;p=c[m>>2]|0;q=p+16|0;r=b+8|0;s=c[r>>2]|0;if(q>>>0>s>>>0){c[r>>2]=s<<1;s=Hl()|0;t=b+4|0;u=fh[c[(c[s>>2]|0)+16>>2]&15](s,c[t>>2]|0,c[r>>2]|0,1)|0;c[t>>2]=u;v=u;w=c[m>>2]|0}else{v=c[b+4>>2]|0;w=p}g[v+w>>2]=n;g[v+(w+4)>>2]=o;g[v+(w+8)>>2]=0.0;a[v+(w+12)|0]=-16;a[v+(w+13)|0]=-16;a[v+(w+14)|0]=-16;a[v+(w+15)|0]=-1;c[m>>2]=q;o=+(c[h>>2]|0)+16.0;n=+(c[f>>2]|0)+-8.0;q=c[j>>2]|0;m=q+12|0;w=c[m>>2]|0;v=w+16|0;p=q+8|0;b=c[p>>2]|0;if(v>>>0>b>>>0){c[p>>2]=b<<1;b=Hl()|0;u=q+4|0;t=fh[c[(c[b>>2]|0)+16>>2]&15](b,c[u>>2]|0,c[p>>2]|0,1)|0;c[u>>2]=t;x=t;y=c[m>>2]|0}else{x=c[q+4>>2]|0;y=w}g[x+y>>2]=o;g[x+(y+4)>>2]=n;g[x+(y+8)>>2]=0.0;a[x+(y+12)|0]=-16;a[x+(y+13)|0]=-16;a[x+(y+14)|0]=-16;a[x+(y+15)|0]=-1;c[m>>2]=v;n=+(c[h>>2]|0)+8.0;o=+(c[f>>2]|0)+-8.0;v=c[j>>2]|0;m=v+12|0;y=c[m>>2]|0;x=y+16|0;w=v+8|0;q=c[w>>2]|0;if(x>>>0>q>>>0){c[w>>2]=q<<1;q=Hl()|0;t=v+4|0;u=fh[c[(c[q>>2]|0)+16>>2]&15](q,c[t>>2]|0,c[w>>2]|0,1)|0;c[t>>2]=u;z=u;A=c[m>>2]|0}else{z=c[v+4>>2]|0;A=y}g[z+A>>2]=n;g[z+(A+4)>>2]=o;g[z+(A+8)>>2]=0.0;a[z+(A+12)|0]=-16;a[z+(A+13)|0]=-16;a[z+(A+14)|0]=-16;a[z+(A+15)|0]=-1;c[m>>2]=x;o=+(c[h>>2]|0)+8.0;n=+(c[f>>2]|0)+-16.0;f=c[j>>2]|0;h=f+12|0;x=c[h>>2]|0;m=x+16|0;A=f+8|0;z=c[A>>2]|0;if(m>>>0>z>>>0){c[A>>2]=z<<1;z=Hl()|0;y=f+4|0;v=fh[c[(c[z>>2]|0)+16>>2]&15](z,c[y>>2]|0,c[A>>2]|0,1)|0;c[y>>2]=v;B=v;C=c[h>>2]|0;D=B+C|0;g[D>>2]=o;E=C+4|0;F=B+E|0;g[F>>2]=n;G=C+8|0;H=B+G|0;g[H>>2]=0.0;I=C+12|0;J=B+I|0;a[J]=-16;K=C+13|0;L=B+K|0;a[L]=-16;M=C+14|0;N=B+M|0;a[N]=-16;O=C+15|0;P=B+O|0;a[P]=-1;c[h>>2]=m;Q=c[j>>2]|0;R=c[k>>2]|0;Ni(Q,R,e);ug(3042);c[l>>2]=0;i=d;return}else{B=c[f+4>>2]|0;C=x;D=B+C|0;g[D>>2]=o;E=C+4|0;F=B+E|0;g[F>>2]=n;G=C+8|0;H=B+G|0;g[H>>2]=0.0;I=C+12|0;J=B+I|0;a[J]=-16;K=C+13|0;L=B+K|0;a[L]=-16;M=C+14|0;N=B+M|0;a[N]=-16;O=C+15|0;P=B+O|0;a[P]=-1;c[h>>2]=m;Q=c[j>>2]|0;R=c[k>>2]|0;Ni(Q,R,e);ug(3042);c[l>>2]=0;i=d;return}}function vi(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0,L=0.0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;j=i;i=i+160|0;k=j;l=j+144|0;m=j+112|0;n=j+96|0;o=j+80|0;p=j+128|0;q=b+28|0;r=c[q>>2]|0;s=b+32|0;t=c[s>>2]|0;if((r|0)==(t|0)){i=j;return}u=r;if((t-u|0)==-24){v=t+(~(((t+ -24+(0-u)|0)>>>0)/24|0)*24|0)|0;c[s>>2]=v;w=v;x=r}else{Hi(q,1);w=c[s>>2]|0;x=c[q>>2]|0}q=(w-x|0)/24|0;w=q+ -2|0;s=q+ -1|0;q=x+(s*24|0)|0;r=(d|0)!=0;v=(f|0)!=0;u=r|v;y=u?14.0:0.0;z=+g[x+(w*24|0)>>2];if((e|0)==0){A=z+2.0;g[q>>2]=A;B=+g[x+(w*24|0)+4>>2];g[x+(s*24|0)+4>>2]=B;C=+g[x+(w*24|0)+8>>2]+-4.0;D=C<0.0?0.0:C;g[x+(s*24|0)+8>>2]=D;C=+g[x+(w*24|0)+16>>2];g[x+(s*24|0)+12>>2]=C;E=C;F=B;G=A;H=D}else{D=z+ +g[e>>2];g[q>>2]=D;q=e+4|0;z=+g[x+(w*24|0)+4>>2]+ +g[q>>2];g[x+(s*24|0)+4>>2]=z;A=+g[x+(w*24|0)+8>>2]- +g[e>>2];B=+g[e+8>>2];C=A<B?A:B;B=C<0.0?0.0:C;g[x+(s*24|0)+8>>2]=B;C=+g[x+(w*24|0)+12>>2]- +g[q>>2];A=+g[e+12>>2];I=C<A?C:A;A=I<0.0?0.0:I;g[x+(s*24|0)+12>>2]=A;E=A;F=z;G=D;H=B}if(v?(a[f]|0)==0:0){B=F+E-y;g[x+(s*24|0)+4>>2]=B;g[x+(s*24|0)+12>>2]=y;e=x+(s*24|0)+16|0;g[e>>2]=y;a[x+(s*24|0)+20|0]=h&1;J=y;K=e;L=B}else{e=x+(s*24|0)+16|0;g[e>>2]=E;a[x+(s*24|0)+20|0]=h&1;if(E<y){g[e>>2]=0.0;i=j;return}else{J=E;K=e;L=F}}if(!u){g[K>>2]=J+-4.0;i=j;return}u=b+24|0;c[u>>2]=(c[u>>2]|0)+1;F=J-y;g[K>>2]=F;J=F+L;g[l>>2]=G;e=l+4|0;g[e>>2]=J;h=l+8|0;g[h>>2]=H;s=l+12|0;g[s>>2]=y;g[m>>2]=G+13.0+2.0;g[m+4>>2]=J;g[m+8>>2]=H+-13.0+-2.0;g[m+12>>2]=13.0;if(!(v?(a[f]|0)==0:0)){g[K>>2]=+g[K>>2]+-4.0}K=k+0|0;x=K+64|0;do{c[K>>2]=0;K=K+4|0}while((K|0)<(x|0));g[k>>2]=1.0;g[k+20>>2]=1.0;g[k+40>>2]=1.0;g[k+60>>2]=1.0;yi(b,l,1.0,2696,k);if(r){+wi(b,d,m,3,2704)}if(!v){i=j;return}v=c[u>>2]|0;H=+(c[b+4>>2]|0);y=+(c[b+8>>2]|0);L=+g[l>>2];if(((((L<=H?L+ +g[h>>2]>H:0)?(H=+g[e>>2],H<=y):0)?H+ +g[s>>2]>y:0)?(s=b+20|0,e=c[s>>2]|0,c[b+16>>2]=(e|0)<1|(e|0)==(v|0)?v:0,(e|0)==0):0)?(a[b+12|0]|0)!=0:0){c[s>>2]=v}if((a[b+12|0]|0)==0&((c[b+16>>2]|0)==(v|0)&(c[b+20>>2]|0)==(v|0))){a[f]=a[f]^1}v=c[(c[b+16492>>2]|0)+64>>2]|0;c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;c[o+12>>2]=0;c[p+0>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;c[p+12>>2]=0;g[k>>2]=1.0;b=k+4|0;c[b+0>>2]=c[n+0>>2];c[b+4>>2]=c[n+4>>2];c[b+8>>2]=c[n+8>>2];c[b+12>>2]=c[n+12>>2];g[k+20>>2]=1.0;n=k+24|0;c[n+0>>2]=c[o+0>>2];c[n+4>>2]=c[o+4>>2];c[n+8>>2]=c[o+8>>2];c[n+12>>2]=c[o+12>>2];g[k+40>>2]=1.0;o=k+44|0;c[o+0>>2]=c[p+0>>2];c[o+4>>2]=c[p+4>>2];c[o+8>>2]=c[p+8>>2];c[o+12>>2]=c[p+12>>2];g[k+60>>2]=1.0;p=k+64|0;c[p>>2]=v;v=k+68|0;c[v>>2]=4;y=G+3.0;if((a[f]|0)==0){H=J+11.0;f=c[p>>2]|0;o=f+12|0;n=c[o>>2]|0;b=n+16|0;s=f+8|0;e=c[s>>2]|0;if(b>>>0>e>>>0){c[s>>2]=e<<1;e=Hl()|0;h=f+4|0;l=fh[c[(c[e>>2]|0)+16>>2]&15](e,c[h>>2]|0,c[s>>2]|0,1)|0;c[h>>2]=l;M=l;N=c[o>>2]|0}else{M=c[f+4>>2]|0;N=n}g[M+N>>2]=y;g[M+(N+4)>>2]=H;g[M+(N+8)>>2]=0.0;a[M+(N+12)|0]=-128;a[M+(N+13)|0]=-128;a[M+(N+14)|0]=-128;a[M+(N+15)|0]=-1;c[o>>2]=b;b=c[p>>2]|0;o=b+12|0;N=c[o>>2]|0;M=N+16|0;n=b+8|0;f=c[n>>2]|0;if(M>>>0>f>>>0){c[n>>2]=f<<1;f=Hl()|0;l=b+4|0;h=fh[c[(c[f>>2]|0)+16>>2]&15](f,c[l>>2]|0,c[n>>2]|0,1)|0;c[l>>2]=h;O=h;P=c[o>>2]|0}else{O=c[b+4>>2]|0;P=N}g[O+P>>2]=G+7.0;g[O+(P+4)>>2]=J+3.0;g[O+(P+8)>>2]=0.0;a[O+(P+12)|0]=-128;a[O+(P+13)|0]=-128;a[O+(P+14)|0]=-128;a[O+(P+15)|0]=-1;c[o>>2]=M;M=c[p>>2]|0;o=M+12|0;P=c[o>>2]|0;O=P+16|0;N=M+8|0;b=c[N>>2]|0;if(O>>>0>b>>>0){c[N>>2]=b<<1;b=Hl()|0;h=M+4|0;l=fh[c[(c[b>>2]|0)+16>>2]&15](b,c[h>>2]|0,c[N>>2]|0,1)|0;c[h>>2]=l;Q=l;R=c[o>>2]|0}else{Q=c[M+4>>2]|0;R=P}g[Q+R>>2]=G+11.0;g[Q+(R+4)>>2]=H;g[Q+(R+8)>>2]=0.0;a[Q+(R+12)|0]=-128;a[Q+(R+13)|0]=-128;a[Q+(R+14)|0]=-128;a[Q+(R+15)|0]=-1;c[o>>2]=O}else{O=c[p>>2]|0;o=O+12|0;R=c[o>>2]|0;Q=R+16|0;P=O+8|0;M=c[P>>2]|0;if(Q>>>0>M>>>0){c[P>>2]=M<<1;M=Hl()|0;l=O+4|0;h=fh[c[(c[M>>2]|0)+16>>2]&15](M,c[l>>2]|0,c[P>>2]|0,1)|0;c[l>>2]=h;S=h;T=c[o>>2]|0}else{S=c[O+4>>2]|0;T=R}g[S+T>>2]=y;g[S+(T+4)>>2]=J+3.0;g[S+(T+8)>>2]=0.0;a[S+(T+12)|0]=-128;a[S+(T+13)|0]=-128;a[S+(T+14)|0]=-128;a[S+(T+15)|0]=-1;c[o>>2]=Q;Q=c[p>>2]|0;o=Q+12|0;T=c[o>>2]|0;S=T+16|0;R=Q+8|0;O=c[R>>2]|0;if(S>>>0>O>>>0){c[R>>2]=O<<1;O=Hl()|0;h=Q+4|0;l=fh[c[(c[O>>2]|0)+16>>2]&15](O,c[h>>2]|0,c[R>>2]|0,1)|0;c[h>>2]=l;U=l;V=c[o>>2]|0}else{U=c[Q+4>>2]|0;V=T}g[U+V>>2]=G+11.0;g[U+(V+4)>>2]=J+7.0;g[U+(V+8)>>2]=0.0;a[U+(V+12)|0]=-128;a[U+(V+13)|0]=-128;a[U+(V+14)|0]=-128;a[U+(V+15)|0]=-1;c[o>>2]=S;S=c[p>>2]|0;o=S+12|0;V=c[o>>2]|0;U=V+16|0;T=S+8|0;Q=c[T>>2]|0;if(U>>>0>Q>>>0){c[T>>2]=Q<<1;Q=Hl()|0;l=S+4|0;h=fh[c[(c[Q>>2]|0)+16>>2]&15](Q,c[l>>2]|0,c[T>>2]|0,1)|0;c[l>>2]=h;W=h;X=c[o>>2]|0}else{W=c[S+4>>2]|0;X=V}g[W+X>>2]=y;g[W+(X+4)>>2]=J+11.0;g[W+(X+8)>>2]=0.0;a[W+(X+12)|0]=-128;a[W+(X+13)|0]=-128;a[W+(X+14)|0]=-128;a[W+(X+15)|0]=-1;c[o>>2]=U}Ni(c[p>>2]|0,c[v>>2]|0,k);i=j;return}function wi(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0,r=0,s=0.0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0.0,O=0.0,P=0.0,Q=0,R=0,T=0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0.0,ga=0,ha=0.0,ia=0.0,ja=0,ka=0;j=i;i=i+640|0;k=j+128|0;l=j;m=j+96|0;n=j+80|0;o=j+112|0;p=+g[e+12>>2];q=~~p;r=q+2|0;if((q+13|0)>>>0<23){s=p;i=j;return+s}q=(r|0)>779?64:(r|0)/12|0;r=e+8|0;t=(~~+g[r>>2]|0)/7|0;u=0;v=0;w=d;a:while(1){d=w+t|0;x=a[w]|0;y=u;z=w;while(1){if(x<<24>>24==0){A=13;break a}y=x<<24>>24==32|x<<24>>24==9?z:y;B=z+1|0;x=a[B]|0;C=x<<24>>24==10;if(C|(z+2|0)>>>0>d>>>0){break}else{z=B}}d=C|(y|0)==0;x=d?B:y;D=d?y:0;d=x+ -1|0;b:do{if(d>>>0<w>>>0){E=x}else{F=d;G=x;while(1){H=a[F]|0;if(!(H<<24>>24==9|H<<24>>24==32)){E=G;break b}H=F+ -1|0;if(H>>>0<w>>>0){E=F;break}else{I=F;F=H;G=I}}}}while(0);x=v+1|0;c[k+(v<<3)>>2]=w;c[k+(v<<3)+4>>2]=E;if((x|0)==(q|0)){J=q;break}else{K=E}while(1){L=a[K]|0;if(!(L<<24>>24==9|L<<24>>24==32)){break}K=K+1|0}u=D;v=x;w=L<<24>>24==10?K+1|0:K}if((A|0)==13){if((v|0)<(q|0)){q=z+ -1|0;c:do{if(q>>>0<w>>>0){M=z}else{A=q;K=z;while(1){L=a[A]|0;if(!(L<<24>>24==9|L<<24>>24==32)){M=K;break c}L=A+ -1|0;if(L>>>0<w>>>0){M=A;break}else{u=A;A=L;K=u}}}}while(0);if((w|0)!=(M|0)){c[k+(v<<3)>>2]=w;c[k+(v<<3)+4>>2]=M;J=v+1|0}else{J=v}}else{J=v}}if((J|0)==0){s=p;i=j;return+s}v=e+4|0;N=+g[v>>2];switch(f|0){case 5:case 4:case 3:{O=+S(+(N+-10.0+(+((J<<1)+ -2|0)+(+(J*10|0)+(p+-1.0)))*.5));break};case 8:case 7:case 6:{O=+((J*12|0)+ -12|0)+N;break};default:{O=N+p+-10.0}}ie(3553,c[b+16488>>2]|0);d:do{if((J|0)>0){M=b+16492|0;w=l+4|0;z=l+20|0;q=l+24|0;K=l+40|0;A=l+44|0;x=l+60|0;D=l+64|0;u=l+68|0;L=h+1|0;E=h+2|0;B=h+3|0;if((f|0)==1){C=0;p=O;while(1){t=c[k+(C<<3)>>2]|0;d=(c[k+(C<<3)+4>>2]|0)-t|0;N=+S(+(+g[e>>2]+(+g[r>>2]- +(d*7|0))*.5));y=c[(c[M>>2]|0)+64>>2]|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;c[o+12>>2]=0;g[l>>2]=1.0;c[w+0>>2]=c[m+0>>2];c[w+4>>2]=c[m+4>>2];c[w+8>>2]=c[m+8>>2];c[w+12>>2]=c[m+12>>2];g[z>>2]=1.0;c[q+0>>2]=c[n+0>>2];c[q+4>>2]=c[n+4>>2];c[q+8>>2]=c[n+8>>2];c[q+12>>2]=c[n+12>>2];g[K>>2]=1.0;c[A+0>>2]=c[o+0>>2];c[A+4>>2]=c[o+4>>2];c[A+8>>2]=c[o+8>>2];c[A+12>>2]=c[o+12>>2];g[x>>2]=1.0;c[D>>2]=y;c[u>>2]=4;y=a[h]|0;G=a[L]|0;F=a[E]|0;I=a[B]|0;if((d|0)>0){H=0;P=0.0;while(1){Q=a[t+H|0]|0;if(Q<<24>>24>-1){R=Q<<24>>24;Q=0;do{T=c[3704+(Q<<2)>>2]|0;U=+g[b+(R<<6)+(T<<3)+104>>2];V=+g[b+(R<<6)+(T<<3)+108>>2];W=P+(N+ +g[b+(R<<6)+(T<<3)+136>>2]);X=p+ +g[b+(R<<6)+(T<<3)+140>>2];T=c[D>>2]|0;Y=T+12|0;Z=c[Y>>2]|0;_=Z+24|0;$=T+8|0;aa=c[$>>2]|0;if(_>>>0>aa>>>0){c[$>>2]=aa<<1;aa=Hl()|0;ba=T+4|0;ca=fh[c[(c[aa>>2]|0)+16>>2]&15](aa,c[ba>>2]|0,c[$>>2]|0,1)|0;c[ba>>2]=ca;da=ca;ea=c[Y>>2]|0}else{da=c[T+4>>2]|0;ea=Z}g[da+ea>>2]=W;g[da+(ea+4)>>2]=X;g[da+(ea+8)>>2]=0.0;g[da+(ea+12)>>2]=U;g[da+(ea+16)>>2]=V;a[da+(ea+20)|0]=y;a[da+(ea+21)|0]=G;a[da+(ea+22)|0]=F;a[da+(ea+23)|0]=I;c[Y>>2]=_;Q=Q+1|0}while(Q>>>0<6)}H=H+1|0;if((H|0)>=(d|0)){break}else{P=P+7.0}}}Oi(c[D>>2]|0,c[u>>2]|0,l);P=p+-12.0;d=C+1|0;if((d|0)<(J|0)){C=d;p=P}else{fa=P;break d}}}else{ga=0;ha=O}while(1){C=c[k+(ga<<3)>>2]|0;d=(c[k+(ga<<3)+4>>2]|0)-C|0;p=+g[e>>2];switch(f|0){case 7:case 4:case 1:{ia=+S(+(p+(+g[r>>2]- +(d*7|0))*.5));break};case 8:case 5:case 2:{ia=p+ +g[r>>2]- +(d*7|0);break};default:{ia=p}}H=c[(c[M>>2]|0)+64>>2]|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;c[o+12>>2]=0;g[l>>2]=1.0;c[w+0>>2]=c[m+0>>2];c[w+4>>2]=c[m+4>>2];c[w+8>>2]=c[m+8>>2];c[w+12>>2]=c[m+12>>2];g[z>>2]=1.0;c[q+0>>2]=c[n+0>>2];c[q+4>>2]=c[n+4>>2];c[q+8>>2]=c[n+8>>2];c[q+12>>2]=c[n+12>>2];g[K>>2]=1.0;c[A+0>>2]=c[o+0>>2];c[A+4>>2]=c[o+4>>2];c[A+8>>2]=c[o+8>>2];c[A+12>>2]=c[o+12>>2];g[x>>2]=1.0;c[D>>2]=H;c[u>>2]=4;H=a[h]|0;I=a[L]|0;F=a[E]|0;G=a[B]|0;if((d|0)>0){y=0;p=0.0;while(1){t=a[C+y|0]|0;if(t<<24>>24>-1){Q=t<<24>>24;t=0;do{R=c[3704+(t<<2)>>2]|0;P=+g[b+(Q<<6)+(R<<3)+104>>2];N=+g[b+(Q<<6)+(R<<3)+108>>2];V=p+(ia+ +g[b+(Q<<6)+(R<<3)+136>>2]);U=ha+ +g[b+(Q<<6)+(R<<3)+140>>2];R=c[D>>2]|0;_=R+12|0;Y=c[_>>2]|0;Z=Y+24|0;T=R+8|0;ca=c[T>>2]|0;if(Z>>>0>ca>>>0){c[T>>2]=ca<<1;ca=Hl()|0;ba=R+4|0;$=fh[c[(c[ca>>2]|0)+16>>2]&15](ca,c[ba>>2]|0,c[T>>2]|0,1)|0;c[ba>>2]=$;ja=$;ka=c[_>>2]|0}else{ja=c[R+4>>2]|0;ka=Y}g[ja+ka>>2]=V;g[ja+(ka+4)>>2]=U;g[ja+(ka+8)>>2]=0.0;g[ja+(ka+12)>>2]=P;g[ja+(ka+16)>>2]=N;a[ja+(ka+20)|0]=H;a[ja+(ka+21)|0]=I;a[ja+(ka+22)|0]=F;a[ja+(ka+23)|0]=G;c[_>>2]=Z;t=t+1|0}while(t>>>0<6)}y=y+1|0;if((y|0)>=(d|0)){break}else{p=p+7.0}}}Oi(c[D>>2]|0,c[u>>2]|0,l);p=ha+-12.0;d=ga+1|0;if((d|0)<(J|0)){ga=d;ha=p}else{fa=p;break d}}}else{fa=O}}while(0);ie(3553,0);s=fa+10.0+2.0- +g[v>>2];i=j;return+s}function xi(b){b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0;d=i;i=i+160|0;e=d+64|0;f=d+128|0;h=d;j=b+32|0;k=c[j>>2]|0;l=k+ -24|0;c[f+0>>2]=c[l+0>>2];c[f+4>>2]=c[l+4>>2];c[f+8>>2]=c[l+8>>2];c[f+12>>2]=c[l+12>>2];c[f+16>>2]=c[l+16>>2];c[f+20>>2]=c[l+20>>2];m=((k+ -24+(0-l)|0)>>>0)/24|0;c[j>>2]=k+(~m*24|0);j=-2-m|0;m=f+12|0;n=+g[m>>2];if((a[f+20|0]|0)==0){o=n}else{p=+g[f+16>>2];q=n-p;n=q<0.0?0.0:q;l=f+4|0;g[l>>2]=p+ +g[l>>2];g[m>>2]=n;o=n}if(!(o>0.0)){r=o;s=r+4.0;t=k+(j*24|0)+16|0;u=+g[t>>2];v=u-s;g[t>>2]=v;i=d;return}m=f+12|0;g[h>>2]=1.0;l=h+4|0;w=h+20|0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;g[w>>2]=1.0;w=h+24|0;l=h+40|0;c[w+0>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;c[w+12>>2]=0;g[l>>2]=1.0;g[h+44>>2]=0.0;g[h+48>>2]=0.0;g[h+52>>2]=0.0;g[h+56>>2]=-.10000000149011612;g[h+60>>2]=1.0;yi(b,f,1.0,2712,h);h=e+0|0;l=h+64|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(l|0));g[e>>2]=1.0;g[e+20>>2]=1.0;g[e+40>>2]=1.0;g[e+60>>2]=1.0;Gi(b,f,1.0,2720,e);r=+g[m>>2];s=r+4.0;t=k+(j*24|0)+16|0;u=+g[t>>2];v=u-s;g[t>>2]=v;i=d;return}function yi(b,d,e,f,h){b=b|0;d=d|0;e=+e;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0.0,v=0,w=0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0,T=0,U=0.0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0;j=i;i=i+80|0;k=j;if(e<=0.0){l=c[(c[b+16492>>2]|0)+64>>2]|0;m=k+0|0;n=h+0|0;o=m+64|0;do{c[m>>2]=c[n>>2];m=m+4|0;n=n+4|0}while((m|0)<(o|0));p=k+64|0;c[p>>2]=l;l=k+68|0;c[l>>2]=5;q=a[f]|0;r=a[f+1|0]|0;s=a[f+2|0]|0;t=a[f+3|0]|0;u=+g[d>>2];v=d+4|0;w=d+12|0;x=+g[v>>2]+ +g[w>>2];y=c[p>>2]|0;z=y+12|0;A=c[z>>2]|0;B=A+16|0;C=y+8|0;D=c[C>>2]|0;if(B>>>0>D>>>0){c[C>>2]=D<<1;D=Hl()|0;E=y+4|0;F=fh[c[(c[D>>2]|0)+16>>2]&15](D,c[E>>2]|0,c[C>>2]|0,1)|0;c[E>>2]=F;G=F;H=c[z>>2]|0}else{G=c[y+4>>2]|0;H=A}g[G+H>>2]=u;g[G+(H+4)>>2]=x;g[G+(H+8)>>2]=0.0;a[G+(H+12)|0]=q;a[G+(H+13)|0]=r;a[G+(H+14)|0]=s;a[G+(H+15)|0]=t;c[z>>2]=B;x=+g[v>>2];B=c[p>>2]|0;z=B+12|0;H=c[z>>2]|0;G=H+16|0;A=B+8|0;y=c[A>>2]|0;if(G>>>0>y>>>0){c[A>>2]=y<<1;y=Hl()|0;F=B+4|0;E=fh[c[(c[y>>2]|0)+16>>2]&15](y,c[F>>2]|0,c[A>>2]|0,1)|0;c[F>>2]=E;I=E;J=c[z>>2]|0}else{I=c[B+4>>2]|0;J=H}g[I+J>>2]=u;g[I+(J+4)>>2]=x;g[I+(J+8)>>2]=0.0;a[I+(J+12)|0]=q;a[I+(J+13)|0]=r;a[I+(J+14)|0]=s;a[I+(J+15)|0]=t;c[z>>2]=G;x=+g[d>>2]+ +g[d+8>>2];u=+g[v>>2]+ +g[w>>2];w=c[p>>2]|0;G=w+12|0;z=c[G>>2]|0;J=z+16|0;I=w+8|0;H=c[I>>2]|0;if(J>>>0>H>>>0){c[I>>2]=H<<1;H=Hl()|0;B=w+4|0;E=fh[c[(c[H>>2]|0)+16>>2]&15](H,c[B>>2]|0,c[I>>2]|0,1)|0;c[B>>2]=E;K=E;L=c[G>>2]|0}else{K=c[w+4>>2]|0;L=z}g[K+L>>2]=x;g[K+(L+4)>>2]=u;g[K+(L+8)>>2]=0.0;a[K+(L+12)|0]=q;a[K+(L+13)|0]=r;a[K+(L+14)|0]=s;a[K+(L+15)|0]=t;c[G>>2]=J;u=+g[v>>2];v=c[p>>2]|0;J=v+12|0;G=c[J>>2]|0;L=G+16|0;K=v+8|0;z=c[K>>2]|0;if(L>>>0>z>>>0){c[K>>2]=z<<1;z=Hl()|0;w=v+4|0;E=fh[c[(c[z>>2]|0)+16>>2]&15](z,c[w>>2]|0,c[K>>2]|0,1)|0;c[w>>2]=E;M=E;N=c[J>>2]|0}else{M=c[v+4>>2]|0;N=G}g[M+N>>2]=x;g[M+(N+4)>>2]=u;g[M+(N+8)>>2]=0.0;a[M+(N+12)|0]=q;a[M+(N+13)|0]=r;a[M+(N+14)|0]=s;a[M+(N+15)|0]=t;c[J>>2]=L;Ni(c[p>>2]|0,c[l>>2]|0,k);i=j;return}u=+g[d>>2]+e;l=d+4|0;x=+g[l>>2]+e;p=d+8|0;O=e*2.0;P=+g[p>>2]-O;L=d+12|0;Q=+g[L>>2]-O;O=e*.03125;J=c[(c[b+16492>>2]|0)+64>>2]|0;m=k+0|0;n=h+0|0;o=m+64|0;do{c[m>>2]=c[n>>2];m=m+4|0;n=n+4|0}while((m|0)<(o|0));n=k+64|0;c[n>>2]=J;J=k+68|0;c[J>>2]=4;m=a[f]|0;o=a[f+1|0]|0;h=a[f+2|0]|0;t=a[f+3|0]|0;R=u+P;P=x+Q;f=1;N=0;while(1){M=c[n>>2]|0;s=M+12|0;r=c[s>>2]|0;q=r+16|0;G=M+8|0;v=c[G>>2]|0;if(q>>>0>v>>>0){c[G>>2]=v<<1;v=Hl()|0;E=M+4|0;w=fh[c[(c[v>>2]|0)+16>>2]&15](v,c[E>>2]|0,c[G>>2]|0,1)|0;c[E>>2]=w;S=w;T=c[s>>2]|0}else{S=c[M+4>>2]|0;T=r}g[S+T>>2]=R;g[S+(T+4)>>2]=P;g[S+(T+8)>>2]=0.0;a[S+(T+12)|0]=m;a[S+(T+13)|0]=o;a[S+(T+14)|0]=h;a[S+(T+15)|0]=t;c[s>>2]=q;Q=R+O*+g[b+(N<<3)+40>>2];U=P+O*+g[b+(N<<3)+44>>2];q=c[n>>2]|0;s=q+12|0;r=c[s>>2]|0;M=r+16|0;w=q+8|0;E=c[w>>2]|0;if(M>>>0>E>>>0){c[w>>2]=E<<1;E=Hl()|0;G=q+4|0;v=fh[c[(c[E>>2]|0)+16>>2]&15](E,c[G>>2]|0,c[w>>2]|0,1)|0;c[G>>2]=v;V=v;W=c[s>>2]|0}else{V=c[q+4>>2]|0;W=r}g[V+W>>2]=Q;g[V+(W+4)>>2]=U;g[V+(W+8)>>2]=0.0;a[V+(W+12)|0]=m;a[V+(W+13)|0]=o;a[V+(W+14)|0]=h;a[V+(W+15)|0]=t;c[s>>2]=M;U=R+O*+g[b+(f<<3)+40>>2];Q=P+O*+g[b+(f<<3)+44>>2];M=c[n>>2]|0;s=M+12|0;r=c[s>>2]|0;q=r+16|0;v=M+8|0;G=c[v>>2]|0;if(q>>>0>G>>>0){c[v>>2]=G<<1;G=Hl()|0;w=M+4|0;E=fh[c[(c[G>>2]|0)+16>>2]&15](G,c[w>>2]|0,c[v>>2]|0,1)|0;c[w>>2]=E;X=E;Y=c[s>>2]|0}else{X=c[M+4>>2]|0;Y=r}g[X+Y>>2]=U;g[X+(Y+4)>>2]=Q;g[X+(Y+8)>>2]=0.0;a[X+(Y+12)|0]=m;a[X+(Y+13)|0]=o;a[X+(Y+14)|0]=h;a[X+(Y+15)|0]=t;c[s>>2]=q;q=f+1|0;if((q|0)<3){s=f;f=q;N=s}else{Z=3;_=2;break}}while(1){N=c[n>>2]|0;f=N+12|0;Y=c[f>>2]|0;X=Y+16|0;W=N+8|0;V=c[W>>2]|0;if(X>>>0>V>>>0){c[W>>2]=V<<1;V=Hl()|0;T=N+4|0;S=fh[c[(c[V>>2]|0)+16>>2]&15](V,c[T>>2]|0,c[W>>2]|0,1)|0;c[T>>2]=S;$=S;aa=c[f>>2]|0}else{$=c[N+4>>2]|0;aa=Y}g[$+aa>>2]=u;g[$+(aa+4)>>2]=P;g[$+(aa+8)>>2]=0.0;a[$+(aa+12)|0]=m;a[$+(aa+13)|0]=o;a[$+(aa+14)|0]=h;a[$+(aa+15)|0]=t;c[f>>2]=X;Q=u+O*+g[b+(_<<3)+40>>2];U=P+O*+g[b+(_<<3)+44>>2];X=c[n>>2]|0;f=X+12|0;Y=c[f>>2]|0;N=Y+16|0;S=X+8|0;T=c[S>>2]|0;if(N>>>0>T>>>0){c[S>>2]=T<<1;T=Hl()|0;W=X+4|0;V=fh[c[(c[T>>2]|0)+16>>2]&15](T,c[W>>2]|0,c[S>>2]|0,1)|0;c[W>>2]=V;ba=V;ca=c[f>>2]|0}else{ba=c[X+4>>2]|0;ca=Y}g[ba+ca>>2]=Q;g[ba+(ca+4)>>2]=U;g[ba+(ca+8)>>2]=0.0;a[ba+(ca+12)|0]=m;a[ba+(ca+13)|0]=o;a[ba+(ca+14)|0]=h;a[ba+(ca+15)|0]=t;c[f>>2]=N;U=u+O*+g[b+(Z<<3)+40>>2];Q=P+O*+g[b+(Z<<3)+44>>2];N=c[n>>2]|0;f=N+12|0;Y=c[f>>2]|0;X=Y+16|0;V=N+8|0;W=c[V>>2]|0;if(X>>>0>W>>>0){c[V>>2]=W<<1;W=Hl()|0;S=N+4|0;T=fh[c[(c[W>>2]|0)+16>>2]&15](W,c[S>>2]|0,c[V>>2]|0,1)|0;c[S>>2]=T;da=T;ea=c[f>>2]|0}else{da=c[N+4>>2]|0;ea=Y}g[da+ea>>2]=U;g[da+(ea+4)>>2]=Q;g[da+(ea+8)>>2]=0.0;a[da+(ea+12)|0]=m;a[da+(ea+13)|0]=o;a[da+(ea+14)|0]=h;a[da+(ea+15)|0]=t;c[f>>2]=X;X=Z+1|0;if((X|0)<5){f=Z;Z=X;_=f}else{fa=5;ga=4;break}}while(1){_=c[n>>2]|0;Z=_+12|0;ea=c[Z>>2]|0;da=ea+16|0;ca=_+8|0;ba=c[ca>>2]|0;if(da>>>0>ba>>>0){c[ca>>2]=ba<<1;ba=Hl()|0;aa=_+4|0;$=fh[c[(c[ba>>2]|0)+16>>2]&15](ba,c[aa>>2]|0,c[ca>>2]|0,1)|0;c[aa>>2]=$;ha=$;ia=c[Z>>2]|0}else{ha=c[_+4>>2]|0;ia=ea}g[ha+ia>>2]=u;g[ha+(ia+4)>>2]=x;g[ha+(ia+8)>>2]=0.0;a[ha+(ia+12)|0]=m;a[ha+(ia+13)|0]=o;a[ha+(ia+14)|0]=h;a[ha+(ia+15)|0]=t;c[Z>>2]=da;Q=u+O*+g[b+(ga<<3)+40>>2];U=x+O*+g[b+(ga<<3)+44>>2];da=c[n>>2]|0;Z=da+12|0;ea=c[Z>>2]|0;_=ea+16|0;$=da+8|0;aa=c[$>>2]|0;if(_>>>0>aa>>>0){c[$>>2]=aa<<1;aa=Hl()|0;ca=da+4|0;ba=fh[c[(c[aa>>2]|0)+16>>2]&15](aa,c[ca>>2]|0,c[$>>2]|0,1)|0;c[ca>>2]=ba;ja=ba;ka=c[Z>>2]|0}else{ja=c[da+4>>2]|0;ka=ea}g[ja+ka>>2]=Q;g[ja+(ka+4)>>2]=U;g[ja+(ka+8)>>2]=0.0;a[ja+(ka+12)|0]=m;a[ja+(ka+13)|0]=o;a[ja+(ka+14)|0]=h;a[ja+(ka+15)|0]=t;c[Z>>2]=_;U=u+O*+g[b+(fa<<3)+40>>2];Q=x+O*+g[b+(fa<<3)+44>>2];_=c[n>>2]|0;Z=_+12|0;ea=c[Z>>2]|0;da=ea+16|0;ba=_+8|0;ca=c[ba>>2]|0;if(da>>>0>ca>>>0){c[ba>>2]=ca<<1;ca=Hl()|0;$=_+4|0;aa=fh[c[(c[ca>>2]|0)+16>>2]&15](ca,c[$>>2]|0,c[ba>>2]|0,1)|0;c[$>>2]=aa;la=aa;ma=c[Z>>2]|0}else{la=c[_+4>>2]|0;ma=ea}g[la+ma>>2]=U;g[la+(ma+4)>>2]=Q;g[la+(ma+8)>>2]=0.0;a[la+(ma+12)|0]=m;a[la+(ma+13)|0]=o;a[la+(ma+14)|0]=h;a[la+(ma+15)|0]=t;c[Z>>2]=da;da=fa+1|0;if((da|0)<7){Z=fa;fa=da;ga=Z}else{na=7;oa=6;break}}while(1){ga=(na|0)==8?0:na;fa=c[n>>2]|0;ma=fa+12|0;la=c[ma>>2]|0;ka=la+16|0;ja=fa+8|0;ia=c[ja>>2]|0;if(ka>>>0>ia>>>0){c[ja>>2]=ia<<1;ia=Hl()|0;ha=fa+4|0;Z=fh[c[(c[ia>>2]|0)+16>>2]&15](ia,c[ha>>2]|0,c[ja>>2]|0,1)|0;c[ha>>2]=Z;pa=Z;qa=c[ma>>2]|0}else{pa=c[fa+4>>2]|0;qa=la}g[pa+qa>>2]=R;g[pa+(qa+4)>>2]=x;g[pa+(qa+8)>>2]=0.0;a[pa+(qa+12)|0]=m;a[pa+(qa+13)|0]=o;a[pa+(qa+14)|0]=h;a[pa+(qa+15)|0]=t;c[ma>>2]=ka;Q=R+O*+g[b+(oa<<3)+40>>2];U=x+O*+g[b+(oa<<3)+44>>2];ka=c[n>>2]|0;ma=ka+12|0;la=c[ma>>2]|0;fa=la+16|0;Z=ka+8|0;ha=c[Z>>2]|0;if(fa>>>0>ha>>>0){c[Z>>2]=ha<<1;ha=Hl()|0;ja=ka+4|0;ia=fh[c[(c[ha>>2]|0)+16>>2]&15](ha,c[ja>>2]|0,c[Z>>2]|0,1)|0;c[ja>>2]=ia;ra=ia;sa=c[ma>>2]|0}else{ra=c[ka+4>>2]|0;sa=la}g[ra+sa>>2]=Q;g[ra+(sa+4)>>2]=U;g[ra+(sa+8)>>2]=0.0;a[ra+(sa+12)|0]=m;a[ra+(sa+13)|0]=o;a[ra+(sa+14)|0]=h;a[ra+(sa+15)|0]=t;c[ma>>2]=fa;U=R+O*+g[b+(ga<<3)+40>>2];Q=x+O*+g[b+(ga<<3)+44>>2];ga=c[n>>2]|0;fa=ga+12|0;ma=c[fa>>2]|0;la=ma+16|0;ka=ga+8|0;ia=c[ka>>2]|0;if(la>>>0>ia>>>0){c[ka>>2]=ia<<1;ia=Hl()|0;ja=ga+4|0;Z=fh[c[(c[ia>>2]|0)+16>>2]&15](ia,c[ja>>2]|0,c[ka>>2]|0,1)|0;c[ja>>2]=Z;ta=Z;ua=c[fa>>2]|0}else{ta=c[ga+4>>2]|0;ua=ma}g[ta+ua>>2]=U;g[ta+(ua+4)>>2]=Q;g[ta+(ua+8)>>2]=0.0;a[ta+(ua+12)|0]=m;a[ta+(ua+13)|0]=o;a[ta+(ua+14)|0]=h;a[ta+(ua+15)|0]=t;c[fa>>2]=la;la=na+1|0;if((la|0)<9){fa=na;na=la;oa=fa}else{break}}O=+g[d>>2];oa=c[n>>2]|0;na=oa+12|0;ua=c[na>>2]|0;ta=ua+16|0;b=oa+8|0;sa=c[b>>2]|0;if(ta>>>0>sa>>>0){c[b>>2]=sa<<1;sa=Hl()|0;ra=oa+4|0;qa=fh[c[(c[sa>>2]|0)+16>>2]&15](sa,c[ra>>2]|0,c[b>>2]|0,1)|0;c[ra>>2]=qa;va=qa;wa=c[na>>2]|0}else{va=c[oa+4>>2]|0;wa=ua}g[va+wa>>2]=O;g[va+(wa+4)>>2]=x;g[va+(wa+8)>>2]=0.0;a[va+(wa+12)|0]=m;a[va+(wa+13)|0]=o;a[va+(wa+14)|0]=h;a[va+(wa+15)|0]=t;c[na>>2]=ta;O=+g[d>>2]+ +g[p>>2];ta=c[n>>2]|0;na=ta+12|0;wa=c[na>>2]|0;va=wa+16|0;ua=ta+8|0;oa=c[ua>>2]|0;if(va>>>0>oa>>>0){c[ua>>2]=oa<<1;oa=Hl()|0;qa=ta+4|0;ra=fh[c[(c[oa>>2]|0)+16>>2]&15](oa,c[qa>>2]|0,c[ua>>2]|0,1)|0;c[qa>>2]=ra;xa=ra;ya=c[na>>2]|0}else{xa=c[ta+4>>2]|0;ya=wa}g[xa+ya>>2]=O;g[xa+(ya+4)>>2]=x;g[xa+(ya+8)>>2]=0.0;a[xa+(ya+12)|0]=m;a[xa+(ya+13)|0]=o;a[xa+(ya+14)|0]=h;a[xa+(ya+15)|0]=t;c[na>>2]=va;O=+g[d>>2]+ +g[p>>2];va=c[n>>2]|0;na=va+12|0;ya=c[na>>2]|0;xa=ya+16|0;wa=va+8|0;ta=c[wa>>2]|0;if(xa>>>0>ta>>>0){c[wa>>2]=ta<<1;ta=Hl()|0;ra=va+4|0;qa=fh[c[(c[ta>>2]|0)+16>>2]&15](ta,c[ra>>2]|0,c[wa>>2]|0,1)|0;c[ra>>2]=qa;za=qa;Aa=c[na>>2]|0}else{za=c[va+4>>2]|0;Aa=ya}g[za+Aa>>2]=O;g[za+(Aa+4)>>2]=P;g[za+(Aa+8)>>2]=0.0;a[za+(Aa+12)|0]=m;a[za+(Aa+13)|0]=o;a[za+(Aa+14)|0]=h;a[za+(Aa+15)|0]=t;c[na>>2]=xa;O=+g[d>>2]+ +g[p>>2];p=c[n>>2]|0;xa=p+12|0;na=c[xa>>2]|0;Aa=na+16|0;za=p+8|0;ya=c[za>>2]|0;if(Aa>>>0>ya>>>0){c[za>>2]=ya<<1;ya=Hl()|0;va=p+4|0;qa=fh[c[(c[ya>>2]|0)+16>>2]&15](ya,c[va>>2]|0,c[za>>2]|0,1)|0;c[va>>2]=qa;Ba=qa;Ca=c[xa>>2]|0}else{Ba=c[p+4>>2]|0;Ca=na}g[Ba+Ca>>2]=O;g[Ba+(Ca+4)>>2]=P;g[Ba+(Ca+8)>>2]=0.0;a[Ba+(Ca+12)|0]=m;a[Ba+(Ca+13)|0]=o;a[Ba+(Ca+14)|0]=h;a[Ba+(Ca+15)|0]=t;c[xa>>2]=Aa;O=+g[d>>2];Aa=c[n>>2]|0;xa=Aa+12|0;Ca=c[xa>>2]|0;Ba=Ca+16|0;na=Aa+8|0;p=c[na>>2]|0;if(Ba>>>0>p>>>0){c[na>>2]=p<<1;p=Hl()|0;qa=Aa+4|0;va=fh[c[(c[p>>2]|0)+16>>2]&15](p,c[qa>>2]|0,c[na>>2]|0,1)|0;c[qa>>2]=va;Da=va;Ea=c[xa>>2]|0}else{Da=c[Aa+4>>2]|0;Ea=Ca}g[Da+Ea>>2]=O;g[Da+(Ea+4)>>2]=P;g[Da+(Ea+8)>>2]=0.0;a[Da+(Ea+12)|0]=m;a[Da+(Ea+13)|0]=o;a[Da+(Ea+14)|0]=h;a[Da+(Ea+15)|0]=t;c[xa>>2]=Ba;P=+g[d>>2];d=c[n>>2]|0;Ba=d+12|0;xa=c[Ba>>2]|0;Ea=xa+16|0;Da=d+8|0;Ca=c[Da>>2]|0;if(Ea>>>0>Ca>>>0){c[Da>>2]=Ca<<1;Ca=Hl()|0;Aa=d+4|0;va=fh[c[(c[Ca>>2]|0)+16>>2]&15](Ca,c[Aa>>2]|0,c[Da>>2]|0,1)|0;c[Aa>>2]=va;Fa=va;Ga=c[Ba>>2]|0}else{Fa=c[d+4>>2]|0;Ga=xa}g[Fa+Ga>>2]=P;g[Fa+(Ga+4)>>2]=x;g[Fa+(Ga+8)>>2]=0.0;a[Fa+(Ga+12)|0]=m;a[Fa+(Ga+13)|0]=o;a[Fa+(Ga+14)|0]=h;a[Fa+(Ga+15)|0]=t;c[Ba>>2]=Ea;P=+g[l>>2];Ea=c[n>>2]|0;Ba=Ea+12|0;Ga=c[Ba>>2]|0;Fa=Ga+16|0;xa=Ea+8|0;d=c[xa>>2]|0;if(Fa>>>0>d>>>0){c[xa>>2]=d<<1;d=Hl()|0;va=Ea+4|0;Aa=fh[c[(c[d>>2]|0)+16>>2]&15](d,c[va>>2]|0,c[xa>>2]|0,1)|0;c[va>>2]=Aa;Ha=Aa;Ia=c[Ba>>2]|0}else{Ha=c[Ea+4>>2]|0;Ia=Ga}g[Ha+Ia>>2]=u;g[Ha+(Ia+4)>>2]=P;g[Ha+(Ia+8)>>2]=0.0;a[Ha+(Ia+12)|0]=m;a[Ha+(Ia+13)|0]=o;a[Ha+(Ia+14)|0]=h;a[Ha+(Ia+15)|0]=t;c[Ba>>2]=Fa;P=+g[l>>2];Fa=c[n>>2]|0;Ba=Fa+12|0;Ia=c[Ba>>2]|0;Ha=Ia+16|0;Ga=Fa+8|0;Ea=c[Ga>>2]|0;if(Ha>>>0>Ea>>>0){c[Ga>>2]=Ea<<1;Ea=Hl()|0;Aa=Fa+4|0;va=fh[c[(c[Ea>>2]|0)+16>>2]&15](Ea,c[Aa>>2]|0,c[Ga>>2]|0,1)|0;c[Aa>>2]=va;Ja=va;Ka=c[Ba>>2]|0}else{Ja=c[Fa+4>>2]|0;Ka=Ia}g[Ja+Ka>>2]=R;g[Ja+(Ka+4)>>2]=P;g[Ja+(Ka+8)>>2]=0.0;a[Ja+(Ka+12)|0]=m;a[Ja+(Ka+13)|0]=o;a[Ja+(Ka+14)|0]=h;a[Ja+(Ka+15)|0]=t;c[Ba>>2]=Ha;Ha=c[n>>2]|0;Ba=Ha+12|0;Ka=c[Ba>>2]|0;Ja=Ka+16|0;Ia=Ha+8|0;Fa=c[Ia>>2]|0;if(Ja>>>0>Fa>>>0){c[Ia>>2]=Fa<<1;Fa=Hl()|0;va=Ha+4|0;Aa=fh[c[(c[Fa>>2]|0)+16>>2]&15](Fa,c[va>>2]|0,c[Ia>>2]|0,1)|0;c[va>>2]=Aa;La=Aa;Ma=c[Ba>>2]|0}else{La=c[Ha+4>>2]|0;Ma=Ka}g[La+Ma>>2]=R;g[La+(Ma+4)>>2]=x;g[La+(Ma+8)>>2]=0.0;a[La+(Ma+12)|0]=m;a[La+(Ma+13)|0]=o;a[La+(Ma+14)|0]=h;a[La+(Ma+15)|0]=t;c[Ba>>2]=Ja;Ja=c[n>>2]|0;Ba=Ja+12|0;Ma=c[Ba>>2]|0;La=Ma+16|0;Ka=Ja+8|0;Ha=c[Ka>>2]|0;if(La>>>0>Ha>>>0){c[Ka>>2]=Ha<<1;Ha=Hl()|0;Aa=Ja+4|0;va=fh[c[(c[Ha>>2]|0)+16>>2]&15](Ha,c[Aa>>2]|0,c[Ka>>2]|0,1)|0;c[Aa>>2]=va;Na=va;Oa=c[Ba>>2]|0}else{Na=c[Ja+4>>2]|0;Oa=Ma}g[Na+Oa>>2]=R;g[Na+(Oa+4)>>2]=x;g[Na+(Oa+8)>>2]=0.0;a[Na+(Oa+12)|0]=m;a[Na+(Oa+13)|0]=o;a[Na+(Oa+14)|0]=h;a[Na+(Oa+15)|0]=t;c[Ba>>2]=La;La=c[n>>2]|0;Ba=La+12|0;Oa=c[Ba>>2]|0;Na=Oa+16|0;Ma=La+8|0;Ja=c[Ma>>2]|0;if(Na>>>0>Ja>>>0){c[Ma>>2]=Ja<<1;Ja=Hl()|0;va=La+4|0;Aa=fh[c[(c[Ja>>2]|0)+16>>2]&15](Ja,c[va>>2]|0,c[Ma>>2]|0,1)|0;c[va>>2]=Aa;Pa=Aa;Qa=c[Ba>>2]|0}else{Pa=c[La+4>>2]|0;Qa=Oa}g[Pa+Qa>>2]=u;g[Pa+(Qa+4)>>2]=x;g[Pa+(Qa+8)>>2]=0.0;a[Pa+(Qa+12)|0]=m;a[Pa+(Qa+13)|0]=o;a[Pa+(Qa+14)|0]=h;a[Pa+(Qa+15)|0]=t;c[Ba>>2]=Na;x=+g[l>>2];Na=c[n>>2]|0;Ba=Na+12|0;Qa=c[Ba>>2]|0;Pa=Qa+16|0;Oa=Na+8|0;La=c[Oa>>2]|0;if(Pa>>>0>La>>>0){c[Oa>>2]=La<<1;La=Hl()|0;Aa=Na+4|0;va=fh[c[(c[La>>2]|0)+16>>2]&15](La,c[Aa>>2]|0,c[Oa>>2]|0,1)|0;c[Aa>>2]=va;Ra=va;Sa=c[Ba>>2]|0}else{Ra=c[Na+4>>2]|0;Sa=Qa}g[Ra+Sa>>2]=u;g[Ra+(Sa+4)>>2]=x;g[Ra+(Sa+8)>>2]=0.0;a[Ra+(Sa+12)|0]=m;a[Ra+(Sa+13)|0]=o;a[Ra+(Sa+14)|0]=h;a[Ra+(Sa+15)|0]=t;c[Ba>>2]=Pa;x=+g[l>>2]+ +g[L>>2]-e;Pa=c[n>>2]|0;Ba=Pa+12|0;Sa=c[Ba>>2]|0;Ra=Sa+16|0;Qa=Pa+8|0;Na=c[Qa>>2]|0;if(Ra>>>0>Na>>>0){c[Qa>>2]=Na<<1;Na=Hl()|0;va=Pa+4|0;Aa=fh[c[(c[Na>>2]|0)+16>>2]&15](Na,c[va>>2]|0,c[Qa>>2]|0,1)|0;c[va>>2]=Aa;Ta=Aa;Ua=c[Ba>>2]|0}else{Ta=c[Pa+4>>2]|0;Ua=Sa}g[Ta+Ua>>2]=u;g[Ta+(Ua+4)>>2]=x;g[Ta+(Ua+8)>>2]=0.0;a[Ta+(Ua+12)|0]=m;a[Ta+(Ua+13)|0]=o;a[Ta+(Ua+14)|0]=h;a[Ta+(Ua+15)|0]=t;c[Ba>>2]=Ra;x=+g[l>>2]+ +g[L>>2]-e;Ra=c[n>>2]|0;Ba=Ra+12|0;Ua=c[Ba>>2]|0;Ta=Ua+16|0;Sa=Ra+8|0;Pa=c[Sa>>2]|0;if(Ta>>>0>Pa>>>0){c[Sa>>2]=Pa<<1;Pa=Hl()|0;Aa=Ra+4|0;va=fh[c[(c[Pa>>2]|0)+16>>2]&15](Pa,c[Aa>>2]|0,c[Sa>>2]|0,1)|0;c[Aa>>2]=va;Va=va;Wa=c[Ba>>2]|0}else{Va=c[Ra+4>>2]|0;Wa=Ua}g[Va+Wa>>2]=R;g[Va+(Wa+4)>>2]=x;g[Va+(Wa+8)>>2]=0.0;a[Va+(Wa+12)|0]=m;a[Va+(Wa+13)|0]=o;a[Va+(Wa+14)|0]=h;a[Va+(Wa+15)|0]=t;c[Ba>>2]=Ta;x=+g[l>>2]+ +g[L>>2];Ta=c[n>>2]|0;Ba=Ta+12|0;Wa=c[Ba>>2]|0;Va=Wa+16|0;Ua=Ta+8|0;Ra=c[Ua>>2]|0;if(Va>>>0>Ra>>>0){c[Ua>>2]=Ra<<1;Ra=Hl()|0;va=Ta+4|0;Aa=fh[c[(c[Ra>>2]|0)+16>>2]&15](Ra,c[va>>2]|0,c[Ua>>2]|0,1)|0;c[va>>2]=Aa;Xa=Aa;Ya=c[Ba>>2]|0}else{Xa=c[Ta+4>>2]|0;Ya=Wa}g[Xa+Ya>>2]=R;g[Xa+(Ya+4)>>2]=x;g[Xa+(Ya+8)>>2]=0.0;a[Xa+(Ya+12)|0]=m;a[Xa+(Ya+13)|0]=o;a[Xa+(Ya+14)|0]=h;a[Xa+(Ya+15)|0]=t;c[Ba>>2]=Va;x=+g[l>>2]+ +g[L>>2];Va=c[n>>2]|0;Ba=Va+12|0;Ya=c[Ba>>2]|0;Xa=Ya+16|0;Wa=Va+8|0;Ta=c[Wa>>2]|0;if(Xa>>>0>Ta>>>0){c[Wa>>2]=Ta<<1;Ta=Hl()|0;Aa=Va+4|0;va=fh[c[(c[Ta>>2]|0)+16>>2]&15](Ta,c[Aa>>2]|0,c[Wa>>2]|0,1)|0;c[Aa>>2]=va;Za=va;_a=c[Ba>>2]|0}else{Za=c[Va+4>>2]|0;_a=Ya}g[Za+_a>>2]=R;g[Za+(_a+4)>>2]=x;g[Za+(_a+8)>>2]=0.0;a[Za+(_a+12)|0]=m;a[Za+(_a+13)|0]=o;a[Za+(_a+14)|0]=h;a[Za+(_a+15)|0]=t;c[Ba>>2]=Xa;x=+g[l>>2]+ +g[L>>2];Xa=c[n>>2]|0;Ba=Xa+12|0;_a=c[Ba>>2]|0;Za=_a+16|0;Ya=Xa+8|0;Va=c[Ya>>2]|0;if(Za>>>0>Va>>>0){c[Ya>>2]=Va<<1;Va=Hl()|0;va=Xa+4|0;Aa=fh[c[(c[Va>>2]|0)+16>>2]&15](Va,c[va>>2]|0,c[Ya>>2]|0,1)|0;c[va>>2]=Aa;$a=Aa;ab=c[Ba>>2]|0}else{$a=c[Xa+4>>2]|0;ab=_a}g[$a+ab>>2]=u;g[$a+(ab+4)>>2]=x;g[$a+(ab+8)>>2]=0.0;a[$a+(ab+12)|0]=m;a[$a+(ab+13)|0]=o;a[$a+(ab+14)|0]=h;a[$a+(ab+15)|0]=t;c[Ba>>2]=Za;x=+g[l>>2]+ +g[L>>2]-e;L=c[n>>2]|0;l=L+12|0;Za=c[l>>2]|0;Ba=Za+16|0;ab=L+8|0;$a=c[ab>>2]|0;if(Ba>>>0>$a>>>0){c[ab>>2]=$a<<1;$a=Hl()|0;_a=L+4|0;Xa=fh[c[(c[$a>>2]|0)+16>>2]&15]($a,c[_a>>2]|0,c[ab>>2]|0,1)|0;c[_a>>2]=Xa;bb=Xa;cb=c[l>>2]|0}else{bb=c[L+4>>2]|0;cb=Za}g[bb+cb>>2]=u;g[bb+(cb+4)>>2]=x;g[bb+(cb+8)>>2]=0.0;a[bb+(cb+12)|0]=m;a[bb+(cb+13)|0]=o;a[bb+(cb+14)|0]=h;a[bb+(cb+15)|0]=t;c[l>>2]=Ba;Ni(c[n>>2]|0,c[J>>2]|0,k);i=j;return}function zi(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0,r=0,s=0,t=0.0,u=0.0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0,D=0,E=0;h=i;i=i+96|0;j=h;k=h+80|0;l=h+64|0;m=c[b+32>>2]|0;if((c[b+28>>2]|0)==(m|0)){n=0;i=h;return n|0}o=m+ -8|0;p=+g[o>>2];if(p<17.0){n=0;i=h;return n|0}g[o>>2]=p+-13.0;g[k>>2]=+g[m+ -24>>2]+6.0;q=k+4|0;g[q>>2]=+g[m+ -20>>2]+ +g[o>>2];r=k+8|0;g[r>>2]=+g[m+ -16>>2]+-12.0;m=k+12|0;g[m>>2]=13.0;g[o>>2]=+g[o>>2]+-4.0;o=b+24|0;s=(c[o>>2]|0)+1|0;c[o>>2]=s;if(e){p=+(c[b+4>>2]|0);t=+(c[b+8>>2]|0);u=+g[k>>2];if(((((u<=p?u+ +g[r>>2]>p:0)?(p=+g[q>>2],p<=t):0)?p+ +g[m>>2]>t:0)?(o=b+20|0,v=c[o>>2]|0,c[b+16>>2]=(v|0)<1|(v|0)==(s|0)?s:0,(v|0)==0):0)?(a[b+12|0]|0)!=0:0){c[o>>2]=s}o=(c[b+16>>2]|0)==(s|0);v=(c[b+20>>2]|0)==(s|0);w=v&1;x=o&1;y=(a[b+12|0]|0)==0&(o&v)}else{w=0;x=0;y=0}if((f|0)==0){z=w}else{v=a[f]|0;if(y){o=v^1;a[f]=o;A=o}else{A=v}z=A|w}if(e){if(z<<24>>24==0){if(x<<24>>24==0){B=0.0;C=2728;D=2736;E=2744}else{B=0.0;C=2792;D=2800;E=2744}}else{B=1.0;C=2776;D=2784;E=2744}}else{B=0.0;C=2752;D=2760;E=2768}x=j+0|0;z=x+64|0;do{c[x>>2]=0;x=x+4|0}while((x|0)<(z|0));g[j>>2]=1.0;g[j+20>>2]=1.0;g[j+40>>2]=1.0;g[j+60>>2]=1.0;yi(b,k,4.0,C,j);x=j+0|0;z=x+64|0;do{c[x>>2]=0;x=x+4|0}while((x|0)<(z|0));g[j>>2]=1.0;g[j+20>>2]=1.0;g[j+40>>2]=1.0;g[j+60>>2]=1.0;Gi(b,k,4.0,D,j);t=+g[q>>2]-B;p=+g[r>>2]+-8.0;u=+g[m>>2]-B;g[l>>2]=+g[k>>2]+4.0;g[l+4>>2]=t;g[l+8>>2]=p;g[l+12>>2]=u;+wi(b,d,l,4,E);n=y;i=h;return n|0}function Ai(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0.0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0;h=i;i=i+160|0;j=h;k=h+144|0;l=h+96|0;m=h+80|0;n=h+112|0;o=h+128|0;p=c[b+32>>2]|0;if((c[b+28>>2]|0)==(p|0)){q=0;i=h;return q|0}r=p+ -8|0;s=+g[r>>2];if(s<17.0){q=0;i=h;return q|0}t=s+-13.0;s=+g[p+ -24>>2]+6.0;u=t+ +g[p+ -20>>2];v=+g[p+ -16>>2]+-12.0;g[r>>2]=t+-4.0;g[k>>2]=s;r=k+4|0;g[r>>2]=u;p=k+8|0;g[p>>2]=13.0;w=k+12|0;g[w>>2]=13.0;x=b+24|0;y=(c[x>>2]|0)+1|0;c[x>>2]=y;if(f){t=+(c[b+4>>2]|0);z=+(c[b+8>>2]|0);if(((s<=t?u<=z&s+v>t&u+13.0>z:0)?(f=b+20|0,x=c[f>>2]|0,c[b+16>>2]=(x|0)<1|(x|0)==(y|0)?y:0,(x|0)==0):0)?(a[b+12|0]|0)!=0:0){c[f>>2]=y}f=(c[b+16>>2]|0)==(y|0);x=(c[b+20>>2]|0)==(y|0);if((a[b+12|0]|0)==0&(f&x)){a[e]=a[e]^1;A=1}else{A=0}if(f){B=x?2776:2792;C=x?2784:2800;D=A;E=2744}else{B=2728;C=2736;D=A;E=2744}}else{B=2752;C=2760;D=0;E=2768}A=j+0|0;x=A+64|0;do{c[A>>2]=0;A=A+4|0}while((A|0)<(x|0));g[j>>2]=1.0;g[j+20>>2]=1.0;g[j+40>>2]=1.0;g[j+60>>2]=1.0;yi(b,k,0.0,B,j);A=j+0|0;x=A+64|0;do{c[A>>2]=0;A=A+4|0}while((A|0)<(x|0));g[j>>2]=1.0;g[j+20>>2]=1.0;g[j+40>>2]=1.0;g[j+60>>2]=1.0;Gi(b,k,0.0,C,j);if((a[e]|0)!=0){e=c[(c[b+16492>>2]|0)+64>>2]|0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;g[j>>2]=1.0;A=j+4|0;c[A+0>>2]=c[l+0>>2];c[A+4>>2]=c[l+4>>2];c[A+8>>2]=c[l+8>>2];c[A+12>>2]=c[l+12>>2];g[j+20>>2]=1.0;l=j+24|0;c[l+0>>2]=c[m+0>>2];c[l+4>>2]=c[m+4>>2];c[l+8>>2]=c[m+8>>2];c[l+12>>2]=c[m+12>>2];g[j+40>>2]=1.0;m=j+44|0;c[m+0>>2]=c[n+0>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];c[m+12>>2]=c[n+12>>2];g[j+60>>2]=1.0;n=j+64|0;c[n>>2]=e;e=j+68|0;c[e>>2]=4;m=a[C]|0;l=a[C+1|0]|0;A=a[C+2|0]|0;x=a[C+3|0]|0;z=+g[k>>2]+ +g[p>>2]*.125;t=+g[r>>2]+ +g[w>>2]*.5;C=c[n>>2]|0;B=C+12|0;f=c[B>>2]|0;y=f+16|0;F=C+8|0;G=c[F>>2]|0;if(y>>>0>G>>>0){c[F>>2]=G<<1;G=Hl()|0;H=C+4|0;I=fh[c[(c[G>>2]|0)+16>>2]&15](G,c[H>>2]|0,c[F>>2]|0,1)|0;c[H>>2]=I;J=I;K=c[B>>2]|0}else{J=c[C+4>>2]|0;K=f}g[J+K>>2]=z;g[J+(K+4)>>2]=t;g[J+(K+8)>>2]=0.0;a[J+(K+12)|0]=m;a[J+(K+13)|0]=l;a[J+(K+14)|0]=A;a[J+(K+15)|0]=x;c[B>>2]=y;t=+g[k>>2]+ +g[p>>2]*.5;z=+g[r>>2]+ +g[w>>2]*.125;y=c[n>>2]|0;B=y+12|0;K=c[B>>2]|0;J=K+16|0;f=y+8|0;C=c[f>>2]|0;if(J>>>0>C>>>0){c[f>>2]=C<<1;C=Hl()|0;I=y+4|0;H=fh[c[(c[C>>2]|0)+16>>2]&15](C,c[I>>2]|0,c[f>>2]|0,1)|0;c[I>>2]=H;L=H;M=c[B>>2]|0}else{L=c[y+4>>2]|0;M=K}g[L+M>>2]=t;g[L+(M+4)>>2]=z;g[L+(M+8)>>2]=0.0;a[L+(M+12)|0]=m;a[L+(M+13)|0]=l;a[L+(M+14)|0]=A;a[L+(M+15)|0]=x;c[B>>2]=J;z=+g[k>>2]+ +g[p>>2]*.5;t=+g[r>>2]+ +g[w>>2]*.5;J=c[n>>2]|0;B=J+12|0;M=c[B>>2]|0;L=M+16|0;K=J+8|0;y=c[K>>2]|0;if(L>>>0>y>>>0){c[K>>2]=y<<1;y=Hl()|0;H=J+4|0;I=fh[c[(c[y>>2]|0)+16>>2]&15](y,c[H>>2]|0,c[K>>2]|0,1)|0;c[H>>2]=I;N=I;O=c[B>>2]|0}else{N=c[J+4>>2]|0;O=M}g[N+O>>2]=z;g[N+(O+4)>>2]=t;g[N+(O+8)>>2]=0.0;a[N+(O+12)|0]=m;a[N+(O+13)|0]=l;a[N+(O+14)|0]=A;a[N+(O+15)|0]=x;c[B>>2]=L;t=+g[k>>2]+ +g[p>>2]/3.0;z=+g[r>>2]+ +g[w>>2]*.5;L=c[n>>2]|0;B=L+12|0;O=c[B>>2]|0;N=O+16|0;M=L+8|0;J=c[M>>2]|0;if(N>>>0>J>>>0){c[M>>2]=J<<1;J=Hl()|0;I=L+4|0;H=fh[c[(c[J>>2]|0)+16>>2]&15](J,c[I>>2]|0,c[M>>2]|0,1)|0;c[I>>2]=H;P=H;Q=c[B>>2]|0}else{P=c[L+4>>2]|0;Q=O}g[P+Q>>2]=t;g[P+(Q+4)>>2]=z;g[P+(Q+8)>>2]=0.0;a[P+(Q+12)|0]=m;a[P+(Q+13)|0]=l;a[P+(Q+14)|0]=A;a[P+(Q+15)|0]=x;c[B>>2]=N;z=+g[k>>2]+ +g[p>>2]*.5;t=+g[r>>2]+ +g[w>>2]*.125;N=c[n>>2]|0;B=N+12|0;Q=c[B>>2]|0;P=Q+16|0;O=N+8|0;L=c[O>>2]|0;if(P>>>0>L>>>0){c[O>>2]=L<<1;L=Hl()|0;H=N+4|0;I=fh[c[(c[L>>2]|0)+16>>2]&15](L,c[H>>2]|0,c[O>>2]|0,1)|0;c[H>>2]=I;R=I;S=c[B>>2]|0}else{R=c[N+4>>2]|0;S=Q}g[R+S>>2]=z;g[R+(S+4)>>2]=t;g[R+(S+8)>>2]=0.0;a[R+(S+12)|0]=m;a[R+(S+13)|0]=l;a[R+(S+14)|0]=A;a[R+(S+15)|0]=x;c[B>>2]=P;t=+g[p>>2];z=+g[k>>2]+t-t/6.0;t=+g[w>>2];s=+g[r>>2]+t-t/6.0;r=c[n>>2]|0;w=r+12|0;P=c[w>>2]|0;B=P+16|0;S=r+8|0;R=c[S>>2]|0;if(B>>>0>R>>>0){c[S>>2]=R<<1;R=Hl()|0;Q=r+4|0;N=fh[c[(c[R>>2]|0)+16>>2]&15](R,c[Q>>2]|0,c[S>>2]|0,1)|0;c[Q>>2]=N;T=N;U=c[w>>2]|0}else{T=c[r+4>>2]|0;U=P}g[T+U>>2]=z;g[T+(U+4)>>2]=s;g[T+(U+8)>>2]=0.0;a[T+(U+12)|0]=m;a[T+(U+13)|0]=l;a[T+(U+14)|0]=A;a[T+(U+15)|0]=x;c[w>>2]=B;Ni(c[n>>2]|0,c[e>>2]|0,j)}s=+g[p>>2];g[o>>2]=+g[k>>2]+s+2.0;g[o+4>>2]=u;g[o+8>>2]=v-s+-2.0;g[o+12>>2]=13.0;+wi(b,d,o,3,E);q=D;i=h;return q|0}function Bi(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0,w=0,x=0,y=0.0,z=0,A=0,B=0,C=0,D=0;j=i;i=i+112|0;k=j;l=j+96|0;m=j+64|0;n=j+80|0;o=c[b+32>>2]|0;if((c[b+28>>2]|0)==(o|0)){p=0;i=j;return p|0}q=o+ -8|0;r=+g[q>>2];if(r<17.0){p=0;i=j;return p|0}s=r+-13.0;r=+g[o+ -24>>2]+6.0;t=s+ +g[o+ -20>>2];u=+g[o+ -16>>2]+-12.0;g[q>>2]=s+-4.0;g[l>>2]=r;q=l+4|0;g[q>>2]=t;o=l+8|0;g[o>>2]=13.0;v=l+12|0;g[v>>2]=13.0;w=b+24|0;x=(c[w>>2]|0)+1|0;c[w>>2]=x;if(h){s=+(c[b+4>>2]|0);y=+(c[b+8>>2]|0);if(((r<=s?t<=y&r+u>s&t+13.0>y:0)?(h=b+20|0,w=c[h>>2]|0,c[b+16>>2]=(w|0)<1|(w|0)==(x|0)?x:0,(w|0)==0):0)?(a[b+12|0]|0)!=0:0){c[h>>2]=x}h=(c[b+16>>2]|0)==(x|0);w=(c[b+20>>2]|0)==(x|0);if((a[b+12|0]|0)==0&(h&w)){c[f>>2]=d;z=1}else{z=0}if(h){A=w?2776:2792;B=w?2784:2800;C=z;D=2744}else{A=2728;B=2736;C=z;D=2744}}else{A=2752;B=2760;C=0;D=2752}z=k+0|0;w=z+64|0;do{c[z>>2]=0;z=z+4|0}while((z|0)<(w|0));g[k>>2]=1.0;g[k+20>>2]=1.0;g[k+40>>2]=1.0;g[k+60>>2]=1.0;yi(b,l,2.0,A,k);z=k+0|0;w=z+64|0;do{c[z>>2]=0;z=z+4|0}while((z|0)<(w|0));g[k>>2]=1.0;g[k+20>>2]=1.0;g[k+40>>2]=1.0;g[k+60>>2]=1.0;Gi(b,l,2.0,B,k);if((c[f>>2]|0)==(d|0)){y=+g[q>>2]+1.0;s=+g[o>>2]+-3.0;r=+g[v>>2]+-3.0;g[m>>2]=+g[l>>2]+1.0;g[m+4>>2]=y;g[m+8>>2]=s;g[m+12>>2]=r;z=k+0|0;w=z+64|0;do{c[z>>2]=0;z=z+4|0}while((z|0)<(w|0));g[k>>2]=1.0;g[k+20>>2]=1.0;g[k+40>>2]=1.0;g[k+60>>2]=1.0;yi(b,m,2.0,B,k)}r=+g[o>>2];g[n>>2]=+g[l>>2]+r+2.0;g[n+4>>2]=t;g[n+8>>2]=u-r+-2.0;g[n+12>>2]=13.0;+wi(b,e,n,3,D);p=C;i=j;return p|0}function Ci(b,d,e,f,j,l,m,n){b=b|0;d=d|0;e=+e;f=+f;j=+j;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0.0,E=0,F=0,G=0.0,H=0.0,I=0.0,J=0.0,K=0,L=0,M=0,N=0,O=0.0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0;o=i;i=i+272|0;p=o;q=o+224|0;r=o+208|0;s=o+80|0;t=o+192|0;u=o+256|0;v=o+240|0;w=o+160|0;x=o+128|0;y=o+112|0;z=o+176|0;A=o+96|0;B=o+144|0;C=(d|0)!=0;D=C?53.0:39.0;E=c[b+32>>2]|0;if((c[b+28>>2]|0)==(E|0)){i=o;return}F=E+ -8|0;G=+g[F>>2];if(G<D+4.0){i=o;return}H=G-D;G=+g[E+ -24>>2]+6.0;I=H+ +g[E+ -20>>2];J=+g[E+ -16>>2]+-12.0;g[F>>2]=H+-4.0;g[q>>2]=G;F=q+4|0;g[F>>2]=I;E=q+8|0;g[E>>2]=J+-35.0+-2.0;K=q+12|0;g[K>>2]=39.0;L=p+0|0;M=L+64|0;do{c[L>>2]=0;L=L+4|0}while((L|0)<(M|0));g[p>>2]=1.0;g[p+20>>2]=1.0;g[p+40>>2]=1.0;g[p+60>>2]=1.0;yi(b,q,0.0,2808,p);L=p+0|0;M=L+64|0;do{c[L>>2]=0;L=L+4|0}while((L|0)<(M|0));g[p>>2]=1.0;g[p+20>>2]=1.0;g[p+40>>2]=1.0;g[p+60>>2]=1.0;Gi(b,q,0.0,2744,p);L=b+16492|0;M=c[(c[L>>2]|0)+64>>2]|0;c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[s+0>>2]=0;c[s+4>>2]=0;c[s+8>>2]=0;c[s+12>>2]=0;c[t+0>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;c[t+12>>2]=0;g[p>>2]=1.0;N=p+4|0;c[N+0>>2]=c[r+0>>2];c[N+4>>2]=c[r+4>>2];c[N+8>>2]=c[r+8>>2];c[N+12>>2]=c[r+12>>2];g[p+20>>2]=1.0;r=p+24|0;c[r+0>>2]=c[s+0>>2];c[r+4>>2]=c[s+4>>2];c[r+8>>2]=c[s+8>>2];c[r+12>>2]=c[s+12>>2];g[p+40>>2]=1.0;s=p+44|0;c[s+0>>2]=c[t+0>>2];c[s+4>>2]=c[t+4>>2];c[s+8>>2]=c[t+8>>2];c[s+12>>2]=c[t+12>>2];g[p+60>>2]=1.0;t=p+64|0;c[t>>2]=M;M=p+68|0;c[M>>2]=1;H=+g[q>>2];O=+g[F>>2]+ +g[K>>2]*.5;s=c[t>>2]|0;r=s+12|0;N=c[r>>2]|0;P=N+16|0;Q=s+8|0;R=c[Q>>2]|0;if(P>>>0>R>>>0){c[Q>>2]=R<<1;R=Hl()|0;S=s+4|0;T=fh[c[(c[R>>2]|0)+16>>2]&15](R,c[S>>2]|0,c[Q>>2]|0,1)|0;c[S>>2]=T;U=T;V=c[r>>2]|0}else{U=c[s+4>>2]|0;V=N}g[U+V>>2]=H;g[U+(V+4)>>2]=O;g[U+(V+8)>>2]=0.0;a[U+(V+12)|0]=32;a[U+(V+13)|0]=32;a[U+(V+14)|0]=32;a[U+(V+15)|0]=-1;c[r>>2]=P;O=+g[q>>2]+ +g[E>>2];H=+g[F>>2]+ +g[K>>2]*.5;P=c[t>>2]|0;r=P+12|0;V=c[r>>2]|0;U=V+16|0;N=P+8|0;s=c[N>>2]|0;if(U>>>0>s>>>0){c[N>>2]=s<<1;s=Hl()|0;T=P+4|0;S=fh[c[(c[s>>2]|0)+16>>2]&15](s,c[T>>2]|0,c[N>>2]|0,1)|0;c[T>>2]=S;W=S;X=c[r>>2]|0}else{W=c[P+4>>2]|0;X=V}g[W+X>>2]=O;g[W+(X+4)>>2]=H;g[W+(X+8)>>2]=0.0;a[W+(X+12)|0]=32;a[W+(X+13)|0]=32;a[W+(X+14)|0]=32;a[W+(X+15)|0]=-1;c[r>>2]=U;Ni(c[t>>2]|0,c[M>>2]|0,p);H=+g[F>>2]+ +g[K>>2]+-10.0;g[v>>2]=G;g[v+4>>2]=H;g[v+8>>2]=J;g[v+12>>2]=10.0;h[k>>3]=f;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];gd(u|0,2632,p|0)|0;M=Ku(u,101)|0;t=Mu(u,48)|0;if((M|0)!=0&t>>>0>M>>>0){U=t+1|0;Sv(M+2|0,U|0,(Rv(U|0)|0)+1|0)|0}+wi(b,u,v,5,2744);H=+g[F>>2]+ +g[K>>2]*.5+-5.0;g[w>>2]=G;g[w+4>>2]=H;g[w+8>>2]=J;g[w+12>>2]=10.0;h[k>>3]=j;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];gd(u|0,2632,p|0)|0;v=Ku(u,101)|0;U=Mu(u,48)|0;if((v|0)!=0&U>>>0>v>>>0){M=U+1|0;Sv(v+2|0,M|0,(Rv(M|0)|0)+1|0)|0}+wi(b,u,w,5,2744);j=+g[F>>2];g[x>>2]=G;g[x+4>>2]=j;g[x+8>>2]=J;g[x+12>>2]=10.0;h[k>>3]=e;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];gd(u|0,2632,p|0)|0;w=Ku(u,101)|0;M=Mu(u,48)|0;if((w|0)!=0&M>>>0>w>>>0){v=M+1|0;Sv(w+2|0,v|0,(Rv(v|0)|0)+1|0)|0}+wi(b,u,x,5,2744);if(C){g[y>>2]=G;g[y+4>>2]=D+I+-10.0;g[y+8>>2]=J;g[y+12>>2]=10.0;+wi(b,d,y,0,2744)}y=n-m|0;if((y|0)<=4){i=o;return}J=+g[F>>2];I=J+1.0;D=J+ +g[K>>2]+-1.0;J=(D-I)/(f-e);f=+g[E>>2];G=-(f+-2.0)/+((y>>2)+ -1|0);j=+g[q>>2];q=c[(c[L>>2]|0)+64>>2]|0;c[z+0>>2]=0;c[z+4>>2]=0;c[z+8>>2]=0;c[z+12>>2]=0;c[A+0>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;c[A+12>>2]=0;c[B+0>>2]=0;c[B+4>>2]=0;c[B+8>>2]=0;c[B+12>>2]=0;g[p>>2]=1.0;L=p+4|0;c[L+0>>2]=c[z+0>>2];c[L+4>>2]=c[z+4>>2];c[L+8>>2]=c[z+8>>2];c[L+12>>2]=c[z+12>>2];g[p+20>>2]=1.0;z=p+24|0;c[z+0>>2]=c[A+0>>2];c[z+4>>2]=c[A+4>>2];c[z+8>>2]=c[A+8>>2];c[z+12>>2]=c[A+12>>2];g[p+40>>2]=1.0;A=p+44|0;c[A+0>>2]=c[B+0>>2];c[A+4>>2]=c[B+4>>2];c[A+8>>2]=c[B+8>>2];c[A+12>>2]=c[B+12>>2];g[p+60>>2]=1.0;B=p+64|0;c[B>>2]=q;q=p+68|0;c[q>>2]=3;if(l>>>0<n>>>0){A=l;z=n;H=f+j+-1.0;while(1){j=I+J*(+g[A>>2]-e);f=j<D?j:D;L=c[B>>2]|0;y=L+12|0;E=c[y>>2]|0;K=E+16|0;F=L+8|0;d=c[F>>2]|0;if(K>>>0>d>>>0){c[F>>2]=d<<1;d=Hl()|0;b=L+4|0;C=fh[c[(c[d>>2]|0)+16>>2]&15](d,c[b>>2]|0,c[F>>2]|0,1)|0;c[b>>2]=C;Y=C;Z=c[y>>2]|0}else{Y=c[L+4>>2]|0;Z=E}g[Y+Z>>2]=H;g[Y+(Z+4)>>2]=f<I?I:f;g[Y+(Z+8)>>2]=0.0;a[Y+(Z+12)|0]=0;a[Y+(Z+13)|0]=-32;a[Y+(Z+14)|0]=0;a[Y+(Z+15)|0]=-1;c[y>>2]=K;K=A+4|0;y=(K|0)==(n|0);A=y?m:K;z=y?l:z;if(!(A>>>0<z>>>0)){break}else{H=G+H}}}Ni(c[B>>2]|0,c[q>>2]|0,p);i=o;return}function Di(b,d,e,f,h,j,k){b=b|0;d=d|0;e=+e;f=+f;h=h|0;j=+j;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0,C=0,D=0,E=0,F=0.0,G=0.0,H=0,I=0,J=0.0,K=0,L=0,M=0,N=0,O=0.0,P=0.0;l=i;i=i+112|0;m=l;n=l+96|0;o=l+64|0;p=l+80|0;q=c[b+32>>2]|0;if((c[b+28>>2]|0)==(q|0)){r=0;i=l;return r|0}s=q+ -8|0;t=+g[s>>2];if(t<17.0){r=0;i=l;return r|0}u=t+-13.0;t=+g[q+ -24>>2]+6.0;v=u+ +g[q+ -20>>2];w=+g[q+ -16>>2]+-12.0;g[s>>2]=u+-4.0;s=b+24|0;q=(c[s>>2]|0)+1|0;c[s>>2]=q;u=+g[h>>2];x=u<f?u:f;y=x<e?e:x;do{if(k){x=t+-4.0;s=c[b+4>>2]|0;z=+(s|0);A=+(c[b+8>>2]|0);if(((x<=z?v<=A&x+(w+8.0)>z&v+13.0>A:0)?(B=b+20|0,C=c[B>>2]|0,c[b+16>>2]=(C|0)<1|(C|0)==(q|0)?q:0,(C|0)==0):0)?(a[b+12|0]|0)!=0:0){c[B>>2]=q}B=(c[b+20>>2]|0)==(q|0);if((c[b+16>>2]|0)==(q|0)){D=B?2784:2800;E=B?2776:2840}else{D=2736;E=2824}A=+V(+e,+j);z=+V(+f,+j);if(!B){x=+V(+y,+j);g[h>>2]=y;F=A;G=z;H=2816;I=2736;J=x;K=D;L=E;M=2744;break}B=s-~~t|0;s=(B|0)<0?0:B;if(+(s|0)>w){N=~~w}else{N=s}x=A+(z-A)*+(N|0)/w;O=+V(+x,+(1.0/j));P=O<f?O:f;g[h>>2]=P<e?e:P;F=A;G=z;H=2816;I=2736;J=x;K=D;L=E;M=2744}else{F=+V(+e,+j);G=+V(+f,+j);H=2752;I=2760;J=+V(+y,+j);K=2760;L=2832;M=2768}}while(0);g[n>>2]=t;E=n+4|0;g[E>>2]=v;D=n+8|0;g[D>>2]=w;N=n+12|0;g[N>>2]=13.0;q=m+0|0;k=q+64|0;do{c[q>>2]=0;q=q+4|0}while((q|0)<(k|0));g[m>>2]=1.0;g[m+20>>2]=1.0;g[m+40>>2]=1.0;g[m+60>>2]=1.0;yi(b,n,1.0,H,m);q=m+0|0;k=q+64|0;do{c[q>>2]=0;q=q+4|0}while((q|0)<(k|0));g[m>>2]=1.0;g[m+20>>2]=1.0;g[m+40>>2]=1.0;g[m+60>>2]=1.0;Gi(b,n,1.0,I,m);g[o>>2]=t+ +S(+(w*(J-F)/(G-F)))+-4.0;g[o+4>>2]=v+-1.0;g[o+8>>2]=8.0;g[o+12>>2]=15.0;q=m+0|0;k=q+64|0;do{c[q>>2]=0;q=q+4|0}while((q|0)<(k|0));g[m>>2]=1.0;g[m+20>>2]=1.0;g[m+40>>2]=1.0;g[m+60>>2]=1.0;yi(b,o,1.0,L,m);q=m+0|0;k=q+64|0;do{c[q>>2]=0;q=q+4|0}while((q|0)<(k|0));g[m>>2]=1.0;g[m+20>>2]=1.0;g[m+40>>2]=1.0;g[m+60>>2]=1.0;Gi(b,o,1.0,K,m);v=+g[E>>2];F=+g[D>>2]+-2.0;G=+g[N>>2];g[p>>2]=+g[n>>2]+1.0;g[p+4>>2]=v;g[p+8>>2]=F;g[p+12>>2]=G;+wi(b,d,p,4,M);r=u!=+g[h>>2];i=l;return r|0}function Ei(a,b,d,e,f,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=+h;j=j|0;var k=0,l=0,m=0;k=i;i=i+16|0;l=k;g[l>>2]=+(c[f>>2]|0);m=bh[c[(c[a>>2]|0)+12>>2]&1](a,b,+(d|0),+(e|0),l,h,j)|0;c[f>>2]=~~+g[l>>2];i=k;return m|0}function Fi(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0.0,l=0.0,m=0,n=0.0;f=i;i=i+16|0;h=f;j=c[a+32>>2]|0;if((c[a+28>>2]|0)==(j|0)){i=f;return}if(e){k=10.0}else{l=+g[j+ -8>>2]+-4.0;k=l<0.0?0.0:l}m=j+ -8|0;l=+g[m>>2];if(l<k+4.0){i=f;return}n=l-k;g[h>>2]=+g[j+ -24>>2]+6.0;g[h+4>>2]=+g[j+ -20>>2]+n;g[h+8>>2]=+g[j+ -16>>2]+-12.0;g[h+12>>2]=k;g[m>>2]=n+-4.0;n=+wi(a,b,h,c[2848+(d<<2)>>2]|0,2744);if(e){i=f;return}g[m>>2]=n+-4.0;i=f;return}function Gi(b,d,e,f,h){b=b|0;d=d|0;e=+e;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0,v=0,w=0,x=0,y=0.0,z=0,A=0.0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0.0,S=0.0,T=0.0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0;j=i;i=i+128|0;k=j+80|0;l=j;c[k+0>>2]=c[h+0>>2];c[k+4>>2]=c[h+4>>2];c[k+8>>2]=c[h+8>>2];c[k+12>>2]=c[h+12>>2];m=h+16|0;n=k+16|0;c[n+0>>2]=c[m+0>>2];c[n+4>>2]=c[m+4>>2];c[n+8>>2]=c[m+8>>2];c[n+12>>2]=c[m+12>>2];n=h+32|0;o=k+32|0;c[o+0>>2]=c[n+0>>2];c[o+4>>2]=c[n+4>>2];c[o+8>>2]=c[n+8>>2];c[o+12>>2]=c[n+12>>2];p=+g[h+48>>2]+(+g[h>>2]*-.5+ +g[m>>2]*-.5+ +g[n>>2]*0.0);q=+g[h+52>>2]+(+g[h+4>>2]*-.5+ +g[h+20>>2]*-.5+ +g[h+36>>2]*0.0);r=+g[h+56>>2]+(+g[h+8>>2]*-.5+ +g[h+24>>2]*-.5+ +g[h+40>>2]*0.0);s=+g[h+60>>2]+(+g[h+12>>2]*-.5+ +g[h+28>>2]*-.5+ +g[h+44>>2]*0.0);if(e<=0.0){h=c[(c[b+16492>>2]|0)+64>>2]|0;t=l+0|0;u=k+0|0;v=t+48|0;do{c[t>>2]=c[u>>2];t=t+4|0;u=u+4|0}while((t|0)<(v|0));g[l+48>>2]=p;g[l+52>>2]=q;g[l+56>>2]=r;g[l+60>>2]=s;n=l+64|0;c[n>>2]=h;h=l+68|0;c[h>>2]=2;m=a[f]|0;o=a[f+1|0]|0;w=a[f+2|0]|0;x=a[f+3|0]|0;y=+g[d>>2];z=d+4|0;A=+g[z>>2];B=c[n>>2]|0;C=B+12|0;D=c[C>>2]|0;E=D+16|0;F=B+8|0;G=c[F>>2]|0;if(E>>>0>G>>>0){c[F>>2]=G<<1;G=Hl()|0;H=B+4|0;I=fh[c[(c[G>>2]|0)+16>>2]&15](G,c[H>>2]|0,c[F>>2]|0,1)|0;c[H>>2]=I;J=I;K=c[C>>2]|0}else{J=c[B+4>>2]|0;K=D}g[J+K>>2]=y;g[J+(K+4)>>2]=A;g[J+(K+8)>>2]=0.0;a[J+(K+12)|0]=m;a[J+(K+13)|0]=o;a[J+(K+14)|0]=w;a[J+(K+15)|0]=x;c[C>>2]=E;y=+g[d>>2]+ +g[d+8>>2];E=c[n>>2]|0;C=E+12|0;K=c[C>>2]|0;J=K+16|0;D=E+8|0;B=c[D>>2]|0;if(J>>>0>B>>>0){c[D>>2]=B<<1;B=Hl()|0;I=E+4|0;H=fh[c[(c[B>>2]|0)+16>>2]&15](B,c[I>>2]|0,c[D>>2]|0,1)|0;c[I>>2]=H;L=H;M=c[C>>2]|0}else{L=c[E+4>>2]|0;M=K}g[L+M>>2]=y;g[L+(M+4)>>2]=A;g[L+(M+8)>>2]=0.0;a[L+(M+12)|0]=m;a[L+(M+13)|0]=o;a[L+(M+14)|0]=w;a[L+(M+15)|0]=x;c[C>>2]=J;A=+g[z>>2]+ +g[d+12>>2];z=c[n>>2]|0;J=z+12|0;C=c[J>>2]|0;M=C+16|0;L=z+8|0;K=c[L>>2]|0;if(M>>>0>K>>>0){c[L>>2]=K<<1;K=Hl()|0;E=z+4|0;H=fh[c[(c[K>>2]|0)+16>>2]&15](K,c[E>>2]|0,c[L>>2]|0,1)|0;c[E>>2]=H;N=H;O=c[J>>2]|0}else{N=c[z+4>>2]|0;O=C}g[N+O>>2]=y;g[N+(O+4)>>2]=A;g[N+(O+8)>>2]=0.0;a[N+(O+12)|0]=m;a[N+(O+13)|0]=o;a[N+(O+14)|0]=w;a[N+(O+15)|0]=x;c[J>>2]=M;y=+g[d>>2];M=c[n>>2]|0;J=M+12|0;O=c[J>>2]|0;N=O+16|0;C=M+8|0;z=c[C>>2]|0;if(N>>>0>z>>>0){c[C>>2]=z<<1;z=Hl()|0;H=M+4|0;E=fh[c[(c[z>>2]|0)+16>>2]&15](z,c[H>>2]|0,c[C>>2]|0,1)|0;c[H>>2]=E;P=E;Q=c[J>>2]|0}else{P=c[M+4>>2]|0;Q=O}g[P+Q>>2]=y;g[P+(Q+4)>>2]=A;g[P+(Q+8)>>2]=0.0;a[P+(Q+12)|0]=m;a[P+(Q+13)|0]=o;a[P+(Q+14)|0]=w;a[P+(Q+15)|0]=x;c[J>>2]=N;Ni(c[n>>2]|0,c[h>>2]|0,l);i=j;return}A=+g[d>>2]+e;y=+g[d+4>>2]+e;R=e*2.0;S=+g[d+8>>2]-R;T=+g[d+12>>2]-R;R=e*.03125;d=c[(c[b+16492>>2]|0)+64>>2]|0;t=l+0|0;u=k+0|0;v=t+48|0;do{c[t>>2]=c[u>>2];t=t+4|0;u=u+4|0}while((t|0)<(v|0));g[l+48>>2]=p;g[l+52>>2]=q;g[l+56>>2]=r;g[l+60>>2]=s;u=l+64|0;c[u>>2]=d;d=l+68|0;c[d>>2]=2;t=a[f]|0;v=a[f+1|0]|0;k=a[f+2|0]|0;h=a[f+3|0]|0;s=A+S;S=y+T;f=0;while(1){T=s+R*+g[b+(f<<3)+40>>2];r=S+R*+g[b+(f<<3)+44>>2];n=c[u>>2]|0;N=n+12|0;J=c[N>>2]|0;x=J+16|0;Q=n+8|0;P=c[Q>>2]|0;if(x>>>0>P>>>0){c[Q>>2]=P<<1;P=Hl()|0;w=n+4|0;o=fh[c[(c[P>>2]|0)+16>>2]&15](P,c[w>>2]|0,c[Q>>2]|0,1)|0;c[w>>2]=o;U=o;V=c[N>>2]|0}else{U=c[n+4>>2]|0;V=J}g[U+V>>2]=T;g[U+(V+4)>>2]=r;g[U+(V+8)>>2]=0.0;a[U+(V+12)|0]=t;a[U+(V+13)|0]=v;a[U+(V+14)|0]=k;a[U+(V+15)|0]=h;c[N>>2]=x;x=f+1|0;if((x|0)<3){f=x}else{W=2;break}}while(1){r=A+R*+g[b+(W<<3)+40>>2];T=S+R*+g[b+(W<<3)+44>>2];f=c[u>>2]|0;V=f+12|0;U=c[V>>2]|0;x=U+16|0;N=f+8|0;J=c[N>>2]|0;if(x>>>0>J>>>0){c[N>>2]=J<<1;J=Hl()|0;n=f+4|0;o=fh[c[(c[J>>2]|0)+16>>2]&15](J,c[n>>2]|0,c[N>>2]|0,1)|0;c[n>>2]=o;X=o;Y=c[V>>2]|0}else{X=c[f+4>>2]|0;Y=U}g[X+Y>>2]=r;g[X+(Y+4)>>2]=T;g[X+(Y+8)>>2]=0.0;a[X+(Y+12)|0]=t;a[X+(Y+13)|0]=v;a[X+(Y+14)|0]=k;a[X+(Y+15)|0]=h;c[V>>2]=x;x=W+1|0;if((x|0)<5){W=x}else{Z=4;break}}while(1){S=A+R*+g[b+(Z<<3)+40>>2];T=y+R*+g[b+(Z<<3)+44>>2];W=c[u>>2]|0;Y=W+12|0;X=c[Y>>2]|0;x=X+16|0;V=W+8|0;U=c[V>>2]|0;if(x>>>0>U>>>0){c[V>>2]=U<<1;U=Hl()|0;f=W+4|0;o=fh[c[(c[U>>2]|0)+16>>2]&15](U,c[f>>2]|0,c[V>>2]|0,1)|0;c[f>>2]=o;_=o;$=c[Y>>2]|0}else{_=c[W+4>>2]|0;$=X}g[_+$>>2]=S;g[_+($+4)>>2]=T;g[_+($+8)>>2]=0.0;a[_+($+12)|0]=t;a[_+($+13)|0]=v;a[_+($+14)|0]=k;a[_+($+15)|0]=h;c[Y>>2]=x;x=Z+1|0;if((x|0)<7){Z=x}else{aa=6;break}}do{A=s+R*+g[b+(aa<<3)+40>>2];T=y+R*+g[b+(aa<<3)+44>>2];Z=c[u>>2]|0;$=Z+12|0;_=c[$>>2]|0;x=_+16|0;Y=Z+8|0;X=c[Y>>2]|0;if(x>>>0>X>>>0){c[Y>>2]=X<<1;X=Hl()|0;W=Z+4|0;o=fh[c[(c[X>>2]|0)+16>>2]&15](X,c[W>>2]|0,c[Y>>2]|0,1)|0;c[W>>2]=o;ba=o;ca=c[$>>2]|0}else{ba=c[Z+4>>2]|0;ca=_}g[ba+ca>>2]=A;g[ba+(ca+4)>>2]=T;g[ba+(ca+8)>>2]=0.0;a[ba+(ca+12)|0]=t;a[ba+(ca+13)|0]=v;a[ba+(ca+14)|0]=k;a[ba+(ca+15)|0]=h;c[$>>2]=x;aa=aa+1|0}while((aa|0)<8);T=s+R*+g[b+40>>2];s=y+R*+g[b+44>>2];b=c[u>>2]|0;aa=b+12|0;ca=c[aa>>2]|0;ba=ca+16|0;x=b+8|0;$=c[x>>2]|0;if(ba>>>0>$>>>0){c[x>>2]=$<<1;$=Hl()|0;_=b+4|0;Z=fh[c[(c[$>>2]|0)+16>>2]&15]($,c[_>>2]|0,c[x>>2]|0,1)|0;c[_>>2]=Z;da=Z;ea=c[aa>>2]|0}else{da=c[b+4>>2]|0;ea=ca}g[da+ea>>2]=T;g[da+(ea+4)>>2]=s;g[da+(ea+8)>>2]=0.0;a[da+(ea+12)|0]=t;a[da+(ea+13)|0]=v;a[da+(ea+14)|0]=k;a[da+(ea+15)|0]=h;c[aa>>2]=ba;Ni(c[u>>2]|0,c[d>>2]|0,l);i=j;return}function Hi(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;d=i;e=a+8|0;f=a+4|0;g=c[f>>2]|0;h=c[e>>2]|0;j=g;if(!(((h-j|0)/24|0)>>>0<b>>>0)){k=b;l=g;do{if((l|0)==0){m=0}else{c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;c[l+16>>2]=0;c[l+20>>2]=0;m=c[f>>2]|0}l=m+24|0;c[f>>2]=l;k=k+ -1|0}while((k|0)!=0);i=d;return}k=c[a>>2]|0;l=(j-k|0)/24|0;j=l+b|0;if(j>>>0>178956970){ns(0)}m=(h-k|0)/24|0;if(m>>>0<89478485){k=m<<1;m=k>>>0<j>>>0?j:k;if((m|0)==0){n=0;o=0}else{p=m;q=9}}else{p=178956970;q=9}if((q|0)==9){q=Hl()|0;n=p;o=Sg[c[(c[q>>2]|0)+8>>2]&31](q,p*24|0,8)|0}p=b;b=o+(l*24|0)|0;do{if((b|0)==0){r=0}else{c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;c[b+20>>2]=0;r=b}b=r+24|0;p=p+ -1|0}while((p|0)!=0);p=c[a>>2]|0;r=(c[f>>2]|0)-p|0;q=o+((((r|0)/-24|0)+l|0)*24|0)|0;Nv(q|0,p|0,r|0)|0;r=c[a>>2]|0;c[a>>2]=q;c[f>>2]=b;c[e>>2]=o+(n*24|0);if((r|0)==0){i=d;return}n=Hl()|0;Lg[c[(c[n>>2]|0)+12>>2]&127](n,r);i=d;return}function Ii(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;d=i;e=a+4|0;f=c[a>>2]|0;g=((c[e>>2]|0)-f|0)/24|0;h=g+1|0;if(h>>>0>178956970){ns(0)}j=a+8|0;k=((c[j>>2]|0)-f|0)/24|0;if(k>>>0<89478485){f=k<<1;k=f>>>0<h>>>0?h:f;if((k|0)==0){l=0;m=0}else{n=k;o=5}}else{n=178956970;o=5}if((o|0)==5){o=Hl()|0;l=n;m=Sg[c[(c[o>>2]|0)+8>>2]&31](o,n*24|0,8)|0}n=m+(g*24|0)|0;if((n|0)!=0){c[n+0>>2]=c[b+0>>2];c[n+4>>2]=c[b+4>>2];c[n+8>>2]=c[b+8>>2];c[n+12>>2]=c[b+12>>2];c[n+16>>2]=c[b+16>>2];c[n+20>>2]=c[b+20>>2]}b=c[a>>2]|0;n=(c[e>>2]|0)-b|0;o=m+((((n|0)/-24|0)+g|0)*24|0)|0;Nv(o|0,b|0,n|0)|0;n=c[a>>2]|0;c[a>>2]=o;c[e>>2]=m+(h*24|0);c[j>>2]=m+(l*24|0);if((n|0)==0){i=d;return}l=Hl()|0;Lg[c[(c[l>>2]|0)+12>>2]&127](l,n);i=d;return}function Ji(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=1024;c[a+12>>2]=0;c[a+16>>2]=0;c[a+20>>2]=0;c[a+24>>2]=b;return}function Ki(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;if((c[a>>2]|0)!=0){Lg[c[954]&127](1,a);c[a>>2]=0}d=Hl()|0;e=a+4|0;Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[e>>2]|0);c[e>>2]=0;e=Hl()|0;d=a+16|0;f=c[d>>2]|0;if((f|0)!=0){Kg[c[c[f>>2]>>2]&255](f);Lg[c[(c[e>>2]|0)+12>>2]&127](e,f)}c[d>>2]=0;d=Hl()|0;f=a+20|0;e=c[f>>2]|0;if((e|0)==0){c[f>>2]=0;g=a+24|0;c[g>>2]=0;i=b;return}Kg[c[c[e>>2]>>2]&255](e);Lg[c[(c[d>>2]|0)+12>>2]&127](d,e);c[f>>2]=0;g=a+24|0;c[g>>2]=0;i=b;return}function Li(a){a=a|0;var b=0,d=0,e=0;b=i;Lg[c[968]&127](1,a);d=Hl()|0;c[a+4>>2]=Sg[c[(c[d>>2]|0)+8>>2]&31](d,c[a+8>>2]|0,1)|0;d=fj()|0;c[a+16>>2]=d;if((d|0)==0){e=0;i=b;return e|0}d=ij()|0;c[a+20>>2]=d;e=(d|0)!=0;i=b;return e|0}function Mi(a){a=a|0;return}function Ni(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;Lg[c[970]&127](34962,c[a>>2]|0);f=a+12|0;lh[c[972]&63](34962,c[f>>2]|0,c[a+4>>2]|0,35040);g=a+16|0;gj(c[g>>2]|0,d,(c[(c[a+24>>2]|0)+12>>2]|0)+192|0,16,0,16,12);qf(b|0,0,(c[f>>2]|0)>>>4|0);hj(c[g>>2]|0);Lg[c[970]&127](34962,0);c[f>>2]=0;i=e;return}function Oi(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;Lg[c[970]&127](34962,c[a>>2]|0);f=a+12|0;lh[c[972]&63](34962,c[f>>2]|0,c[a+4>>2]|0,35040);g=a+20|0;jj(c[g>>2]|0,d,(c[(c[a+24>>2]|0)+12>>2]|0)+192|0,24,0,24,12,24,20);qf(b|0,0,((c[f>>2]|0)>>>0)/24|0|0);kj(c[g>>2]|0);Lg[c[970]&127](34962,0);c[f>>2]=0;i=e;return}function Pi(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;c[a>>2]=3832;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=b;b=a+16|0;c[b>>2]=2046;e=a+20|0;f=a+40|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;f=a+56|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;f=Hl()|0;c[e>>2]=Sg[c[(c[f>>2]|0)+8>>2]&31](f,c[b>>2]<<6,16)|0;i=d;return}function Qi(a){a=a|0;var b=0;b=i;Ri(a);vv(a);i=b;return}function Ri(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=i;c[a>>2]=3832;d=Hl()|0;Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[a+4>>2]|0);d=a+56|0;if((c[d>>2]|0)!=0){Lg[c[954]&127](1,d);c[d>>2]=0}d=a+60|0;if((c[d>>2]|0)!=0){Lg[c[954]&127](1,d);c[d>>2]=0}d=Hl()|0;e=a+20|0;Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[e>>2]|0);c[e>>2]=0;e=Hl()|0;d=a+64|0;f=c[d>>2]|0;if((f|0)!=0){Ki(f);Lg[c[(c[e>>2]|0)+12>>2]&127](e,f)}c[d>>2]=0;d=Hl()|0;f=a+68|0;e=c[f>>2]|0;if((e|0)!=0){Kg[c[c[e>>2]>>2]&255](e);Lg[c[(c[d>>2]|0)+12>>2]&127](d,e)}c[f>>2]=0;f=a+24|0;e=a+56|0;while(1){a=e+ -16|0;if((c[a>>2]|0)!=0){Lg[c[954]&127](1,a);c[a>>2]=0}d=e+ -4|0;if((c[d>>2]|0)!=0){g=Hl()|0;h=c[d>>2]|0;if((h|0)!=0){Kg[c[c[h>>2]>>2]&255](h);Lg[c[(c[g>>2]|0)+12>>2]&127](g,h)}c[d>>2]=0}if((a|0)==(f|0)){break}else{e=a}}i=b;return}function Si(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;if(!(Ti(0)|0)){d=0;i=b;return d|0}if(!(Ui(a)|0)){d=0;i=b;return d|0}Lg[c[968]&127](1,a+56|0);Lg[c[968]&127](1,a+60|0);e=Hl()|0;f=Sg[c[(c[e>>2]|0)+8>>2]&31](e,28,4)|0;if((f|0)==0){g=0}else{Ji(f,a);g=f}c[a+64>>2]=g;if(!(Li(g)|0)){d=0;i=b;return d|0}g=pj()|0;c[a+68>>2]=g;d=(g|0)!=0;i=b;return d|0}function Ti(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Lb=0,Mb=0;b=i;i=i+592|0;d=b+576|0;e=b+568|0;f=b+560|0;g=b+552|0;h=b+544|0;j=b+536|0;k=b+528|0;l=b+520|0;m=b+512|0;n=b+504|0;o=b+496|0;p=b+488|0;q=b+480|0;r=b+472|0;s=b+464|0;t=b+456|0;u=b+448|0;v=b+440|0;w=b+432|0;x=b+424|0;y=b+416|0;z=b+408|0;A=b+400|0;B=b+392|0;C=b+384|0;D=b+376|0;E=b+368|0;F=b+360|0;G=b+352|0;H=b+344|0;I=b+336|0;J=b+328|0;K=b+320|0;L=b+312|0;M=b+304|0;N=b+296|0;O=b+288|0;P=b+128|0;Q=b+120|0;R=b+112|0;S=b+104|0;T=b+96|0;U=b+88|0;V=b+80|0;W=b+72|0;X=b+64|0;Y=b+48|0;Z=b+40|0;_=b+32|0;$=b+24|0;aa=b+16|0;ba=b+8|0;ca=b;da=b+56|0;ea=b+136|0;fa=b+144|0;ga=b+152|0;ha=b+160|0;ia=b+168|0;ja=b+176|0;ka=b+184|0;la=b+192|0;ma=b+200|0;na=b+208|0;oa=b+216|0;pa=b+224|0;qa=b+232|0;ra=b+240|0;sa=b+248|0;ta=b+256|0;ua=b+264|0;va=b+272|0;wa=b+280|0;xa=Kb(3952)|0;c[970]=xa;if((xa|0)==0){xl(e);xa=Vh(c[e>>2]|0,3968)|0;ln(d,xa+(c[(c[xa>>2]|0)+ -12>>2]|0)|0);ya=ws(d,22144)|0;za=ch[c[(c[ya>>2]|0)+28>>2]&31](ya,10)|0;vs(d);go(xa,za)|0;Tn(xa)|0;zl(e);Aa=0}else{Aa=1}e=Kb(4016)|0;c[954]=e;if((e|0)==0){xl(f);e=Vh(c[f>>2]|0,4032)|0;ln(d,e+(c[(c[e>>2]|0)+ -12>>2]|0)|0);xa=ws(d,22144)|0;za=ch[c[(c[xa>>2]|0)+28>>2]&31](xa,10)|0;vs(d);go(e,za)|0;Tn(e)|0;zl(f);Ba=0}else{Ba=Aa}Aa=Kb(4080)|0;c[968]=Aa;if((Aa|0)==0){xl(g);Aa=Vh(c[g>>2]|0,4096)|0;ln(d,Aa+(c[(c[Aa>>2]|0)+ -12>>2]|0)|0);f=ws(d,22144)|0;e=ch[c[(c[f>>2]|0)+28>>2]&31](f,10)|0;vs(d);go(Aa,e)|0;Tn(Aa)|0;zl(g);Ca=0}else{Ca=Ba}Ba=Kb(4144)|0;c[1040]=Ba;if((Ba|0)==0){xl(h);Ba=Vh(c[h>>2]|0,4168)|0;ln(d,Ba+(c[(c[Ba>>2]|0)+ -12>>2]|0)|0);g=ws(d,22144)|0;Aa=ch[c[(c[g>>2]|0)+28>>2]&31](g,10)|0;vs(d);go(Ba,Aa)|0;Tn(Ba)|0;zl(h);Da=0}else{Da=Ca}Ca=Kb(4208)|0;c[972]=Ca;if((Ca|0)==0){xl(j);Ca=Vh(c[j>>2]|0,4224)|0;ln(d,Ca+(c[(c[Ca>>2]|0)+ -12>>2]|0)|0);h=ws(d,22144)|0;Ba=ch[c[(c[h>>2]|0)+28>>2]&31](h,10)|0;vs(d);go(Ca,Ba)|0;Tn(Ca)|0;zl(j);Ea=0}else{Ea=Da}Da=Kb(4272)|0;c[1072]=Da;if((Da|0)==0){xl(k);Da=Vh(c[k>>2]|0,4296)|0;ln(d,Da+(c[(c[Da>>2]|0)+ -12>>2]|0)|0);j=ws(d,22144)|0;Ca=ch[c[(c[j>>2]|0)+28>>2]&31](j,10)|0;vs(d);go(Da,Ca)|0;Tn(Da)|0;zl(k);Fa=0}else{Fa=Ea}Ea=Kb(4344)|0;c[1090]=Ea;if((Ea|0)==0){xl(l);Ea=Vh(c[l>>2]|0,4368)|0;ln(d,Ea+(c[(c[Ea>>2]|0)+ -12>>2]|0)|0);k=ws(d,22144)|0;Da=ch[c[(c[k>>2]|0)+28>>2]&31](k,10)|0;vs(d);go(Ea,Da)|0;Tn(Ea)|0;zl(l);Ga=0}else{Ga=1}l=Kb(4408)|0;c[1106]=l;if((l|0)==0){xl(m);l=Vh(c[m>>2]|0,4432)|0;ln(d,l+(c[(c[l>>2]|0)+ -12>>2]|0)|0);Ea=ws(d,22144)|0;Da=ch[c[(c[Ea>>2]|0)+28>>2]&31](Ea,10)|0;vs(d);go(l,Da)|0;Tn(l)|0;zl(m);Ha=0}else{Ha=Ga}Ga=Kb(4480)|0;c[1126]=Ga;if((Ga|0)==0){xl(n);Ga=Vh(c[n>>2]|0,4512)|0;ln(d,Ga+(c[(c[Ga>>2]|0)+ -12>>2]|0)|0);m=ws(d,22144)|0;l=ch[c[(c[m>>2]|0)+28>>2]&31](m,10)|0;vs(d);go(Ga,l)|0;Tn(Ga)|0;zl(n);Ia=0}else{Ia=Fa}Fa=Kb(4568)|0;c[1146]=Fa;if((Fa|0)==0){xl(o);Fa=Vh(c[o>>2]|0,4592)|0;ln(d,Fa+(c[(c[Fa>>2]|0)+ -12>>2]|0)|0);n=ws(d,22144)|0;Ga=ch[c[(c[n>>2]|0)+28>>2]&31](n,10)|0;vs(d);go(Fa,Ga)|0;Tn(Fa)|0;zl(o);Ja=0}else{Ja=Ia}Ia=Kb(4640)|0;c[1166]=Ia;if((Ia|0)==0){xl(p);Ia=Vh(c[p>>2]|0,4672)|0;ln(d,Ia+(c[(c[Ia>>2]|0)+ -12>>2]|0)|0);o=ws(d,22144)|0;Fa=ch[c[(c[o>>2]|0)+28>>2]&31](o,10)|0;vs(d);go(Ia,Fa)|0;Tn(Ia)|0;zl(p);Ka=0}else{Ka=Ja}Ja=Kb(4728)|0;c[1186]=Ja;if((Ja|0)==0){xl(q);Ja=Vh(c[q>>2]|0,4752)|0;ln(d,Ja+(c[(c[Ja>>2]|0)+ -12>>2]|0)|0);p=ws(d,22144)|0;Ia=ch[c[(c[p>>2]|0)+28>>2]&31](p,10)|0;vs(d);go(Ja,Ia)|0;Tn(Ja)|0;zl(q);La=0}else{La=Ka}Ka=Kb(4800)|0;c[1204]=Ka;if((Ka|0)==0){xl(r);Ka=Vh(c[r>>2]|0,4824)|0;ln(d,Ka+(c[(c[Ka>>2]|0)+ -12>>2]|0)|0);q=ws(d,22144)|0;Ja=ch[c[(c[q>>2]|0)+28>>2]&31](q,10)|0;vs(d);go(Ka,Ja)|0;Tn(Ka)|0;zl(r);Ma=0}else{Ma=La}La=Kb(4872)|0;c[1222]=La;if((La|0)==0){xl(s);La=Vh(c[s>>2]|0,4896)|0;ln(d,La+(c[(c[La>>2]|0)+ -12>>2]|0)|0);r=ws(d,22144)|0;Ka=ch[c[(c[r>>2]|0)+28>>2]&31](r,10)|0;vs(d);go(La,Ka)|0;Tn(La)|0;zl(s);Na=0}else{Na=Ma}Ma=Kb(4944)|0;c[1240]=Ma;if((Ma|0)==0){xl(t);Ma=Vh(c[t>>2]|0,4968)|0;ln(d,Ma+(c[(c[Ma>>2]|0)+ -12>>2]|0)|0);s=ws(d,22144)|0;La=ch[c[(c[s>>2]|0)+28>>2]&31](s,10)|0;vs(d);go(Ma,La)|0;Tn(Ma)|0;zl(t);Oa=0}else{Oa=Na}Na=Kb(5016)|0;c[1258]=Na;if((Na|0)==0){xl(u);Na=Vh(c[u>>2]|0,5040)|0;ln(d,Na+(c[(c[Na>>2]|0)+ -12>>2]|0)|0);t=ws(d,22144)|0;Ma=ch[c[(c[t>>2]|0)+28>>2]&31](t,10)|0;vs(d);go(Na,Ma)|0;Tn(Na)|0;zl(u);Pa=0}else{Pa=Oa}Oa=Kb(5088)|0;c[1276]=Oa;if((Oa|0)==0){xl(v);Oa=Vh(c[v>>2]|0,5112)|0;ln(d,Oa+(c[(c[Oa>>2]|0)+ -12>>2]|0)|0);u=ws(d,22144)|0;Na=ch[c[(c[u>>2]|0)+28>>2]&31](u,10)|0;vs(d);go(Oa,Na)|0;Tn(Oa)|0;zl(v);Qa=0}else{Qa=Pa}Pa=Kb(5160)|0;c[984]=Pa;if((Pa|0)==0){xl(w);Pa=Vh(c[w>>2]|0,5192)|0;ln(d,Pa+(c[(c[Pa>>2]|0)+ -12>>2]|0)|0);v=ws(d,22144)|0;Oa=ch[c[(c[v>>2]|0)+28>>2]&31](v,10)|0;vs(d);go(Pa,Oa)|0;Tn(Pa)|0;zl(w);Ra=0}else{Ra=Qa}Qa=Kb(5248)|0;c[976]=Qa;if((Qa|0)==0){xl(x);Qa=Vh(c[x>>2]|0,5280)|0;ln(d,Qa+(c[(c[Qa>>2]|0)+ -12>>2]|0)|0);w=ws(d,22144)|0;Pa=ch[c[(c[w>>2]|0)+28>>2]&31](w,10)|0;vs(d);go(Qa,Pa)|0;Tn(Qa)|0;zl(x);Sa=0}else{Sa=Ra}Ra=Kb(5336)|0;c[1340]=Ra;if((Ra|0)==0){xl(y);Ra=Vh(c[y>>2]|0,5368)|0;ln(d,Ra+(c[(c[Ra>>2]|0)+ -12>>2]|0)|0);x=ws(d,22144)|0;Qa=ch[c[(c[x>>2]|0)+28>>2]&31](x,10)|0;vs(d);go(Ra,Qa)|0;Tn(Ra)|0;zl(y);Ta=0}else{Ta=Sa}Sa=Kb(5416)|0;c[1360]=Sa;if((Sa|0)==0){xl(z);Sa=Vh(c[z>>2]|0,5448)|0;ln(d,Sa+(c[(c[Sa>>2]|0)+ -12>>2]|0)|0);y=ws(d,22144)|0;Ra=ch[c[(c[y>>2]|0)+28>>2]&31](y,10)|0;vs(d);go(Sa,Ra)|0;Tn(Sa)|0;zl(z);Ua=0}else{Ua=Ta}Ta=Kb(5496)|0;c[1380]=Ta;if((Ta|0)==0){xl(A);Ta=Vh(c[A>>2]|0,5528)|0;ln(d,Ta+(c[(c[Ta>>2]|0)+ -12>>2]|0)|0);z=ws(d,22144)|0;Sa=ch[c[(c[z>>2]|0)+28>>2]&31](z,10)|0;vs(d);go(Ta,Sa)|0;Tn(Ta)|0;zl(A);Va=0}else{Va=Ua}Ua=Kb(5584)|0;c[1402]=Ua;if((Ua|0)==0){xl(B);Ua=Vh(c[B>>2]|0,5616)|0;ln(d,Ua+(c[(c[Ua>>2]|0)+ -12>>2]|0)|0);A=ws(d,22144)|0;Ta=ch[c[(c[A>>2]|0)+28>>2]&31](A,10)|0;vs(d);go(Ua,Ta)|0;Tn(Ua)|0;zl(B);Wa=0}else{Wa=Va}Va=Kb(5664)|0;c[1420]=Va;if((Va|0)==0){xl(C);Va=Vh(c[C>>2]|0,5688)|0;ln(d,Va+(c[(c[Va>>2]|0)+ -12>>2]|0)|0);B=ws(d,22144)|0;Ua=ch[c[(c[B>>2]|0)+28>>2]&31](B,10)|0;vs(d);go(Va,Ua)|0;Tn(Va)|0;zl(C);Xa=0}else{Xa=Wa}Wa=Kb(5736)|0;c[1440]=Wa;if((Wa|0)==0){xl(D);Wa=Vh(c[D>>2]|0,5768)|0;ln(d,Wa+(c[(c[Wa>>2]|0)+ -12>>2]|0)|0);C=ws(d,22144)|0;Va=ch[c[(c[C>>2]|0)+28>>2]&31](C,10)|0;vs(d);go(Wa,Va)|0;Tn(Wa)|0;zl(D);Ya=0}else{Ya=Xa}Xa=Kb(5816)|0;c[1458]=Xa;if((Xa|0)==0){xl(E);Xa=Vh(c[E>>2]|0,5840)|0;ln(d,Xa+(c[(c[Xa>>2]|0)+ -12>>2]|0)|0);D=ws(d,22144)|0;Wa=ch[c[(c[D>>2]|0)+28>>2]&31](D,10)|0;vs(d);go(Xa,Wa)|0;Tn(Xa)|0;zl(E);Za=0}else{Za=Ya}Ya=Kb(5888)|0;c[1478]=Ya;if((Ya|0)==0){xl(F);Ya=Vh(c[F>>2]|0,5920)|0;ln(d,Ya+(c[(c[Ya>>2]|0)+ -12>>2]|0)|0);E=ws(d,22144)|0;Xa=ch[c[(c[E>>2]|0)+28>>2]&31](E,10)|0;vs(d);go(Ya,Xa)|0;Tn(Ya)|0;zl(F);_a=0}else{_a=Za}Za=Kb(5968)|0;c[1498]=Za;if((Za|0)==0){xl(G);Za=Vh(c[G>>2]|0,6e3)|0;ln(d,Za+(c[(c[Za>>2]|0)+ -12>>2]|0)|0);F=ws(d,22144)|0;Ya=ch[c[(c[F>>2]|0)+28>>2]&31](F,10)|0;vs(d);go(Za,Ya)|0;Tn(Za)|0;zl(G);$a=0}else{$a=_a}_a=Kb(6048)|0;c[1518]=_a;if((_a|0)==0){xl(H);_a=Vh(c[H>>2]|0,6080)|0;ln(d,_a+(c[(c[_a>>2]|0)+ -12>>2]|0)|0);G=ws(d,22144)|0;Za=ch[c[(c[G>>2]|0)+28>>2]&31](G,10)|0;vs(d);go(_a,Za)|0;Tn(_a)|0;zl(H);ab=0}else{ab=$a}$a=Kb(6136)|0;c[1538]=$a;if(($a|0)==0){xl(I);$a=Vh(c[I>>2]|0,6160)|0;ln(d,$a+(c[(c[$a>>2]|0)+ -12>>2]|0)|0);H=ws(d,22144)|0;_a=ch[c[(c[H>>2]|0)+28>>2]&31](H,10)|0;vs(d);go($a,_a)|0;Tn($a)|0;zl(I);bb=0}else{bb=ab}ab=Kb(6208)|0;c[1556]=ab;if((ab|0)==0){xl(J);ab=Vh(c[J>>2]|0,6232)|0;ln(d,ab+(c[(c[ab>>2]|0)+ -12>>2]|0)|0);I=ws(d,22144)|0;$a=ch[c[(c[I>>2]|0)+28>>2]&31](I,10)|0;vs(d);go(ab,$a)|0;Tn(ab)|0;zl(J);cb=0}else{cb=bb}bb=Kb(6280)|0;c[1576]=bb;if((bb|0)==0){xl(K);bb=Vh(c[K>>2]|0,6312)|0;ln(d,bb+(c[(c[bb>>2]|0)+ -12>>2]|0)|0);J=ws(d,22144)|0;ab=ch[c[(c[J>>2]|0)+28>>2]&31](J,10)|0;vs(d);go(bb,ab)|0;Tn(bb)|0;zl(K);db=0}else{db=cb}cb=Kb(6360)|0;c[1596]=cb;if((cb|0)==0){xl(L);cb=Vh(c[L>>2]|0,6392)|0;ln(d,cb+(c[(c[cb>>2]|0)+ -12>>2]|0)|0);K=ws(d,22144)|0;bb=ch[c[(c[K>>2]|0)+28>>2]&31](K,10)|0;vs(d);go(cb,bb)|0;Tn(cb)|0;zl(L);eb=0}else{eb=db}db=Kb(6440)|0;c[1618]=db;if((db|0)==0){xl(M);db=Vh(c[M>>2]|0,6480)|0;ln(d,db+(c[(c[db>>2]|0)+ -12>>2]|0)|0);L=ws(d,22144)|0;cb=ch[c[(c[L>>2]|0)+28>>2]&31](L,10)|0;vs(d);go(db,cb)|0;Tn(db)|0;zl(M);fb=0}else{fb=eb}eb=Kb(6536)|0;c[1638]=eb;if((eb|0)==0){xl(N);eb=Vh(c[N>>2]|0,6560)|0;ln(d,eb+(c[(c[eb>>2]|0)+ -12>>2]|0)|0);M=ws(d,22144)|0;db=ch[c[(c[M>>2]|0)+28>>2]&31](M,10)|0;vs(d);go(eb,db)|0;Tn(eb)|0;zl(N);gb=0}else{gb=fb}fb=Kb(6600)|0;c[1654]=fb;if((fb|0)==0){xl(O);fb=Vh(c[O>>2]|0,6624)|0;ln(d,fb+(c[(c[fb>>2]|0)+ -12>>2]|0)|0);N=ws(d,22144)|0;eb=ch[c[(c[N>>2]|0)+28>>2]&31](N,10)|0;vs(d);go(fb,eb)|0;Tn(fb)|0;zl(O);hb=0}else{hb=gb}gb=Kb(6664)|0;c[1670]=gb;if((gb|0)==0){xl(P);gb=Vh(c[P>>2]|0,6688)|0;ln(d,gb+(c[(c[gb>>2]|0)+ -12>>2]|0)|0);O=ws(d,22144)|0;fb=ch[c[(c[O>>2]|0)+28>>2]&31](O,10)|0;vs(d);go(gb,fb)|0;Tn(gb)|0;zl(P);ib=0}else{ib=hb}hb=Kb(6736)|0;c[1688]=hb;if((hb|0)==0){xl(Q);hb=Vh(c[Q>>2]|0,6760)|0;ln(d,hb+(c[(c[hb>>2]|0)+ -12>>2]|0)|0);P=ws(d,22144)|0;gb=ch[c[(c[P>>2]|0)+28>>2]&31](P,10)|0;vs(d);go(hb,gb)|0;Tn(hb)|0;zl(Q);jb=0}else{jb=ib}ib=Kb(6808)|0;c[1706]=ib;if((ib|0)==0){xl(R);ib=Vh(c[R>>2]|0,6832)|0;ln(d,ib+(c[(c[ib>>2]|0)+ -12>>2]|0)|0);Q=ws(d,22144)|0;hb=ch[c[(c[Q>>2]|0)+28>>2]&31](Q,10)|0;vs(d);go(ib,hb)|0;Tn(ib)|0;zl(R);kb=0}else{kb=jb}jb=Kb(6880)|0;c[1724]=jb;if((jb|0)==0){xl(S);jb=Vh(c[S>>2]|0,6904)|0;ln(d,jb+(c[(c[jb>>2]|0)+ -12>>2]|0)|0);R=ws(d,22144)|0;ib=ch[c[(c[R>>2]|0)+28>>2]&31](R,10)|0;vs(d);go(jb,ib)|0;Tn(jb)|0;zl(S);lb=0}else{lb=kb}kb=Kb(6944)|0;c[1740]=kb;if((kb|0)==0){xl(T);kb=Vh(c[T>>2]|0,6968)|0;ln(d,kb+(c[(c[kb>>2]|0)+ -12>>2]|0)|0);S=ws(d,22144)|0;jb=ch[c[(c[S>>2]|0)+28>>2]&31](S,10)|0;vs(d);go(kb,jb)|0;Tn(kb)|0;zl(T);mb=0}else{mb=lb}lb=Kb(7008)|0;c[1756]=lb;if((lb|0)==0){xl(U);lb=Vh(c[U>>2]|0,7032)|0;ln(d,lb+(c[(c[lb>>2]|0)+ -12>>2]|0)|0);T=ws(d,22144)|0;kb=ch[c[(c[T>>2]|0)+28>>2]&31](T,10)|0;vs(d);go(lb,kb)|0;Tn(lb)|0;zl(U);nb=0}else{nb=mb}mb=Kb(7072)|0;c[1772]=mb;if((mb|0)==0){xl(V);mb=Vh(c[V>>2]|0,7096)|0;ln(d,mb+(c[(c[mb>>2]|0)+ -12>>2]|0)|0);U=ws(d,22144)|0;lb=ch[c[(c[U>>2]|0)+28>>2]&31](U,10)|0;vs(d);go(mb,lb)|0;Tn(mb)|0;zl(V);ob=0}else{ob=nb}nb=Kb(7136)|0;c[1788]=nb;if((nb|0)==0){xl(W);nb=Vh(c[W>>2]|0,7160)|0;ln(d,nb+(c[(c[nb>>2]|0)+ -12>>2]|0)|0);V=ws(d,22144)|0;mb=ch[c[(c[V>>2]|0)+28>>2]&31](V,10)|0;vs(d);go(nb,mb)|0;Tn(nb)|0;zl(W);pb=0}else{pb=ob}ob=Kb(7200)|0;c[1804]=ob;if((ob|0)==0){xl(X);ob=Vh(c[X>>2]|0,7224)|0;ln(d,ob+(c[(c[ob>>2]|0)+ -12>>2]|0)|0);W=ws(d,22144)|0;nb=ch[c[(c[W>>2]|0)+28>>2]&31](W,10)|0;vs(d);go(ob,nb)|0;Tn(ob)|0;zl(X);qb=0}else{qb=pb}pb=Kb(7264)|0;c[1820]=pb;if((pb|0)==0){xl(Y);pb=Vh(c[Y>>2]|0,7288)|0;ln(d,pb+(c[(c[pb>>2]|0)+ -12>>2]|0)|0);X=ws(d,22144)|0;ob=ch[c[(c[X>>2]|0)+28>>2]&31](X,10)|0;vs(d);go(pb,ob)|0;Tn(pb)|0;zl(Y);rb=0}else{rb=qb}qb=Kb(7328)|0;c[1836]=qb;if((qb|0)==0){xl(Z);qb=Vh(c[Z>>2]|0,7352)|0;ln(d,qb+(c[(c[qb>>2]|0)+ -12>>2]|0)|0);Y=ws(d,22144)|0;pb=ch[c[(c[Y>>2]|0)+28>>2]&31](Y,10)|0;vs(d);go(qb,pb)|0;Tn(qb)|0;zl(Z);sb=0}else{sb=rb}rb=Kb(7392)|0;c[1852]=rb;if((rb|0)==0){xl(_);rb=Vh(c[_>>2]|0,7416)|0;ln(d,rb+(c[(c[rb>>2]|0)+ -12>>2]|0)|0);Z=ws(d,22144)|0;qb=ch[c[(c[Z>>2]|0)+28>>2]&31](Z,10)|0;vs(d);go(rb,qb)|0;Tn(rb)|0;zl(_);tb=0}else{tb=sb}sb=Kb(7464)|0;c[1870]=sb;if((sb|0)==0){xl($);sb=Vh(c[$>>2]|0,7488)|0;ln(d,sb+(c[(c[sb>>2]|0)+ -12>>2]|0)|0);_=ws(d,22144)|0;rb=ch[c[(c[_>>2]|0)+28>>2]&31](_,10)|0;vs(d);go(sb,rb)|0;Tn(sb)|0;zl($);ub=0}else{ub=tb}tb=Kb(7536)|0;c[1888]=tb;if((tb|0)==0){xl(aa);tb=Vh(c[aa>>2]|0,7560)|0;ln(d,tb+(c[(c[tb>>2]|0)+ -12>>2]|0)|0);$=ws(d,22144)|0;sb=ch[c[(c[$>>2]|0)+28>>2]&31]($,10)|0;vs(d);go(tb,sb)|0;Tn(tb)|0;zl(aa);vb=0}else{vb=ub}ub=Kb(7608)|0;c[1906]=ub;if((ub|0)==0){xl(ba);ub=Vh(c[ba>>2]|0,7632)|0;ln(d,ub+(c[(c[ub>>2]|0)+ -12>>2]|0)|0);aa=ws(d,22144)|0;tb=ch[c[(c[aa>>2]|0)+28>>2]&31](aa,10)|0;vs(d);go(ub,tb)|0;Tn(ub)|0;zl(ba);wb=0}else{wb=vb}vb=Kb(7680)|0;c[1926]=vb;if((vb|0)==0){xl(ca);vb=Vh(c[ca>>2]|0,7712)|0;ln(d,vb+(c[(c[vb>>2]|0)+ -12>>2]|0)|0);ba=ws(d,22144)|0;ub=ch[c[(c[ba>>2]|0)+28>>2]&31](ba,10)|0;vs(d);go(vb,ub)|0;Tn(vb)|0;zl(ca);xb=0}else{xb=wb}wb=Kb(7760)|0;c[1946]=wb;if((wb|0)==0){xl(da);wb=Vh(c[da>>2]|0,7792)|0;ln(d,wb+(c[(c[wb>>2]|0)+ -12>>2]|0)|0);ca=ws(d,22144)|0;vb=ch[c[(c[ca>>2]|0)+28>>2]&31](ca,10)|0;vs(d);go(wb,vb)|0;Tn(wb)|0;zl(da);yb=0}else{yb=xb}xb=Kb(7840)|0;c[974]=xb;if((xb|0)==0){xl(ea);xb=Vh(c[ea>>2]|0,7864)|0;ln(d,xb+(c[(c[xb>>2]|0)+ -12>>2]|0)|0);da=ws(d,22144)|0;wb=ch[c[(c[da>>2]|0)+28>>2]&31](da,10)|0;vs(d);go(xb,wb)|0;Tn(xb)|0;zl(ea);zb=0}else{zb=yb}yb=Kb(7912)|0;c[1984]=yb;if((yb|0)==0){xl(fa);yb=Vh(c[fa>>2]|0,7944)|0;ln(d,yb+(c[(c[yb>>2]|0)+ -12>>2]|0)|0);ea=ws(d,22144)|0;xb=ch[c[(c[ea>>2]|0)+28>>2]&31](ea,10)|0;vs(d);go(yb,xb)|0;Tn(yb)|0;zl(fa);Ab=0}else{Ab=zb}zb=Kb(7992)|0;c[2004]=zb;if((zb|0)==0){xl(ga);zb=Vh(c[ga>>2]|0,8024)|0;ln(d,zb+(c[(c[zb>>2]|0)+ -12>>2]|0)|0);fa=ws(d,22144)|0;yb=ch[c[(c[fa>>2]|0)+28>>2]&31](fa,10)|0;vs(d);go(zb,yb)|0;Tn(zb)|0;zl(ga);Bb=0}else{Bb=Ab}Ab=Kb(8072)|0;c[2024]=Ab;if((Ab|0)==0){xl(ha);Ab=Vh(c[ha>>2]|0,8104)|0;ln(d,Ab+(c[(c[Ab>>2]|0)+ -12>>2]|0)|0);ga=ws(d,22144)|0;zb=ch[c[(c[ga>>2]|0)+28>>2]&31](ga,10)|0;vs(d);go(Ab,zb)|0;Tn(Ab)|0;zl(ha);Cb=0}else{Cb=Bb}Bb=Kb(8152)|0;c[2044]=Bb;if((Bb|0)==0){xl(ia);Bb=Vh(c[ia>>2]|0,8184)|0;ln(d,Bb+(c[(c[Bb>>2]|0)+ -12>>2]|0)|0);ha=ws(d,22144)|0;Ab=ch[c[(c[ha>>2]|0)+28>>2]&31](ha,10)|0;vs(d);go(Bb,Ab)|0;Tn(Bb)|0;zl(ia);Db=0}else{Db=Cb}Cb=Kb(8232)|0;c[2064]=Cb;if((Cb|0)==0){xl(ja);Cb=Vh(c[ja>>2]|0,8264)|0;ln(d,Cb+(c[(c[Cb>>2]|0)+ -12>>2]|0)|0);ia=ws(d,22144)|0;Bb=ch[c[(c[ia>>2]|0)+28>>2]&31](ia,10)|0;vs(d);go(Cb,Bb)|0;Tn(Cb)|0;zl(ja);Eb=0}else{Eb=Db}Db=Kb(8312)|0;c[2084]=Db;if((Db|0)==0){xl(ka);Db=Vh(c[ka>>2]|0,8344)|0;ln(d,Db+(c[(c[Db>>2]|0)+ -12>>2]|0)|0);ja=ws(d,22144)|0;Cb=ch[c[(c[ja>>2]|0)+28>>2]&31](ja,10)|0;vs(d);go(Db,Cb)|0;Tn(Db)|0;zl(ka);Fb=0}else{Fb=Eb}Eb=Kb(8392)|0;c[2104]=Eb;if((Eb|0)==0){xl(la);Eb=Vh(c[la>>2]|0,8424)|0;ln(d,Eb+(c[(c[Eb>>2]|0)+ -12>>2]|0)|0);ka=ws(d,22144)|0;Db=ch[c[(c[ka>>2]|0)+28>>2]&31](ka,10)|0;vs(d);go(Eb,Db)|0;Tn(Eb)|0;zl(la);Gb=0}else{Gb=Fb}Fb=Kb(8472)|0;c[2124]=Fb;if((Fb|0)==0){xl(ma);Fb=Vh(c[ma>>2]|0,8504)|0;ln(d,Fb+(c[(c[Fb>>2]|0)+ -12>>2]|0)|0);la=ws(d,22144)|0;Eb=ch[c[(c[la>>2]|0)+28>>2]&31](la,10)|0;vs(d);go(Fb,Eb)|0;Tn(Fb)|0;zl(ma);Hb=0}else{Hb=Gb}Gb=Kb(8552)|0;c[2144]=Gb;if((Gb|0)==0){xl(na);Gb=Vh(c[na>>2]|0,8584)|0;ln(d,Gb+(c[(c[Gb>>2]|0)+ -12>>2]|0)|0);ma=ws(d,22144)|0;Fb=ch[c[(c[ma>>2]|0)+28>>2]&31](ma,10)|0;vs(d);go(Gb,Fb)|0;Tn(Gb)|0;zl(na);Ib=0}else{Ib=Hb}Hb=Kb(8632)|0;c[980]=Hb;if((Hb|0)!=0){if(Ib){if(!Ha){xl(qa);Ha=Vh(c[qa>>2]|0,8768)|0;ln(d,Ha+(c[(c[Ha>>2]|0)+ -12>>2]|0)|0);Ib=ws(d,22144)|0;Hb=ch[c[(c[Ib>>2]|0)+28>>2]&31](Ib,10)|0;vs(d);go(Ha,Hb)|0;Tn(Ha)|0;zl(qa)}qa=(fg(8824)|0)!=0;a[3944]=qa&1;if(!qa){vl(wa);qa=Vh(c[wa>>2]|0,9240)|0;ln(d,qa+(c[(c[qa>>2]|0)+ -12>>2]|0)|0);Ha=ws(d,22144)|0;Hb=ch[c[(c[Ha>>2]|0)+28>>2]&31](Ha,10)|0;vs(d);go(qa,Hb)|0;Tn(qa)|0;zl(wa);Jb=1;i=b;return Jb|0}vl(ra);wa=Vh(c[ra>>2]|0,8848)|0;ln(d,wa+(c[(c[wa>>2]|0)+ -12>>2]|0)|0);qa=ws(d,22144)|0;Hb=ch[c[(c[qa>>2]|0)+28>>2]&31](qa,10)|0;vs(d);go(wa,Hb)|0;Tn(wa)|0;zl(ra);ra=Kb(8904)|0;c[978]=ra;if((ra|0)==0){xl(sa);ra=Vh(c[sa>>2]|0,8936)|0;ln(d,ra+(c[(c[ra>>2]|0)+ -12>>2]|0)|0);wa=ws(d,22144)|0;Hb=ch[c[(c[wa>>2]|0)+28>>2]&31](wa,10)|0;vs(d);go(ra,Hb)|0;Tn(ra)|0;zl(sa);Lb=0}else{Lb=1}sa=Kb(8992)|0;c[982]=sa;if((sa|0)==0){xl(ta);sa=Vh(c[ta>>2]|0,9024)|0;ln(d,sa+(c[(c[sa>>2]|0)+ -12>>2]|0)|0);ra=ws(d,22144)|0;Hb=ch[c[(c[ra>>2]|0)+28>>2]&31](ra,10)|0;vs(d);go(sa,Hb)|0;Tn(sa)|0;zl(ta);Mb=0}else{Mb=Lb}Lb=Kb(9080)|0;c[2278]=Lb;if((Lb|0)!=0){if(Mb){Jb=1;i=b;return Jb|0}}else{xl(ua);Mb=Vh(c[ua>>2]|0,9120)|0;ln(d,Mb+(c[(c[Mb>>2]|0)+ -12>>2]|0)|0);Lb=ws(d,22144)|0;ta=ch[c[(c[Lb>>2]|0)+28>>2]&31](Lb,10)|0;vs(d);go(Mb,ta)|0;Tn(Mb)|0;zl(ua)}xl(va);ua=Vh(c[va>>2]|0,9176)|0;ln(d,ua+(c[(c[ua>>2]|0)+ -12>>2]|0)|0);Mb=ws(d,22144)|0;ta=ch[c[(c[Mb>>2]|0)+28>>2]&31](Mb,10)|0;vs(d);go(ua,ta)|0;Tn(ua)|0;zl(va);a[3944]=0;Jb=1;i=b;return Jb|0}}else{xl(oa);va=Vh(c[oa>>2]|0,8656)|0;ln(d,va+(c[(c[va>>2]|0)+ -12>>2]|0)|0);ua=ws(d,22144)|0;ta=ch[c[(c[ua>>2]|0)+28>>2]&31](ua,10)|0;vs(d);go(va,ta)|0;Tn(va)|0;zl(oa)}xl(pa);oa=Vh(c[pa>>2]|0,8712)|0;ln(d,oa+(c[(c[oa>>2]|0)+ -12>>2]|0)|0);va=ws(d,22144)|0;ta=ch[c[(c[va>>2]|0)+28>>2]&31](va,10)|0;vs(d);go(oa,ta)|0;Tn(oa)|0;zl(pa);Jb=0;i=b;return Jb|0}function Ui(a){a=a|0;var b=0,d=0,e=0,f=0.0,h=0.0,j=0.0,k=0,l=0,m=0,n=0,o=0;b=i;i=i+1904|0;d=b;g[d>>2]=1.0;g[d+4>>2]=0.0;g[d+8>>2]=0.0;g[d+12>>2]=.12403473258018494;g[d+16>>2]=.9922778606414795;g[d+20>>2]=0.0;c[d+24>>2]=-1;g[d+28>>2]=.20000000298023224;g[d+32>>2]=.10000000149011612;g[d+36>>2]=-.10000000149011612;g[d+40>>2]=.12403473258018494;g[d+44>>2]=.9922778606414795;g[d+48>>2]=0.0;c[d+52>>2]=-1;g[d+56>>2]=.20000000298023224;g[d+60>>2]=.10000000149011612;g[d+64>>2]=.10000000149011612;g[d+68>>2]=.12403473258018494;g[d+72>>2]=.9922778606414795;g[d+76>>2]=0.0;c[d+80>>2]=-1;g[d+84>>2]=0.0;g[d+88>>2]=0.0;g[d+92>>2]=0.0;g[d+96>>2]=-.4472135603427887;g[d+100>>2]=.8944271206855774;g[d+104>>2]=0.0;c[d+108>>2]=-1;g[d+112>>2]=.20000000298023224;g[d+116>>2]=.10000000149011612;g[d+120>>2]=.10000000149011612;g[d+124>>2]=-.4472135603427887;g[d+128>>2]=.8944271206855774;g[d+132>>2]=0.0;c[d+136>>2]=-1;g[d+140>>2]=.20000000298023224;g[d+144>>2]=.10000000149011612;g[d+148>>2]=-.10000000149011612;g[d+152>>2]=-.4472135603427887;g[d+156>>2]=.8944271206855774;g[d+160>>2]=0.0;c[d+164>>2]=-1;g[d+168>>2]=1.0;g[d+172>>2]=0.0;g[d+176>>2]=0.0;g[d+180>>2]=.12403473258018494;g[d+184>>2]=0.0;g[d+188>>2]=-.9922778606414795;c[d+192>>2]=-1;g[d+196>>2]=.20000000298023224;g[d+200>>2]=-.10000000149011612;g[d+204>>2]=-.10000000149011612;g[d+208>>2]=.12403473258018494;g[d+212>>2]=0.0;g[d+216>>2]=-.9922778606414795;c[d+220>>2]=-1;g[d+224>>2]=.20000000298023224;g[d+228>>2]=.10000000149011612;g[d+232>>2]=-.10000000149011612;g[d+236>>2]=.12403473258018494;g[d+240>>2]=0.0;g[d+244>>2]=-.9922778606414795;c[d+248>>2]=-1;g[d+252>>2]=0.0;g[d+256>>2]=0.0;g[d+260>>2]=0.0;g[d+264>>2]=-.4472135603427887;g[d+268>>2]=0.0;g[d+272>>2]=-.8944271206855774;c[d+276>>2]=-1;g[d+280>>2]=.20000000298023224;g[d+284>>2]=.10000000149011612;g[d+288>>2]=-.10000000149011612;g[d+292>>2]=-.4472135603427887;g[d+296>>2]=0.0;g[d+300>>2]=-.8944271206855774;c[d+304>>2]=-1;g[d+308>>2]=.20000000298023224;g[d+312>>2]=-.10000000149011612;g[d+316>>2]=-.10000000149011612;g[d+320>>2]=-.4472135603427887;g[d+324>>2]=0.0;g[d+328>>2]=-.8944271206855774;c[d+332>>2]=-1;g[d+336>>2]=1.0;g[d+340>>2]=0.0;g[d+344>>2]=0.0;g[d+348>>2]=.12403473258018494;g[d+352>>2]=-.9922778606414795;g[d+356>>2]=0.0;c[d+360>>2]=-1;g[d+364>>2]=.20000000298023224;g[d+368>>2]=-.10000000149011612;g[d+372>>2]=.10000000149011612;g[d+376>>2]=.12403473258018494;g[d+380>>2]=-.9922778606414795;g[d+384>>2]=0.0;c[d+388>>2]=-1;g[d+392>>2]=.20000000298023224;g[d+396>>2]=-.10000000149011612;g[d+400>>2]=-.10000000149011612;g[d+404>>2]=.12403473258018494;g[d+408>>2]=-.9922778606414795;g[d+412>>2]=0.0;c[d+416>>2]=-1;g[d+420>>2]=0.0;g[d+424>>2]=0.0;g[d+428>>2]=0.0;g[d+432>>2]=-.4472135603427887;g[d+436>>2]=-.8944271206855774;g[d+440>>2]=-0.0;c[d+444>>2]=-1;g[d+448>>2]=.20000000298023224;g[d+452>>2]=-.10000000149011612;g[d+456>>2]=-.10000000149011612;g[d+460>>2]=-.4472135603427887;g[d+464>>2]=-.8944271206855774;g[d+468>>2]=-0.0;c[d+472>>2]=-1;g[d+476>>2]=.20000000298023224;g[d+480>>2]=-.10000000149011612;g[d+484>>2]=.10000000149011612;g[d+488>>2]=-.4472135603427887;g[d+492>>2]=-.8944271206855774;g[d+496>>2]=-0.0;c[d+500>>2]=-1;g[d+504>>2]=1.0;g[d+508>>2]=0.0;g[d+512>>2]=0.0;g[d+516>>2]=.12403473258018494;g[d+520>>2]=-0.0;g[d+524>>2]=.9922778606414795;c[d+528>>2]=-1;g[d+532>>2]=.20000000298023224;g[d+536>>2]=.10000000149011612;g[d+540>>2]=.10000000149011612;g[d+544>>2]=.12403473258018494;g[d+548>>2]=-0.0;g[d+552>>2]=.9922778606414795;c[d+556>>2]=-1;g[d+560>>2]=.20000000298023224;g[d+564>>2]=-.10000000149011612;g[d+568>>2]=.10000000149011612;g[d+572>>2]=.12403473258018494;g[d+576>>2]=-0.0;g[d+580>>2]=.9922778606414795;c[d+584>>2]=-1;g[d+588>>2]=0.0;g[d+592>>2]=0.0;g[d+596>>2]=0.0;g[d+600>>2]=-.4472135603427887;g[d+604>>2]=0.0;g[d+608>>2]=.8944271206855774;c[d+612>>2]=-1;g[d+616>>2]=.20000000298023224;g[d+620>>2]=-.10000000149011612;g[d+624>>2]=.10000000149011612;g[d+628>>2]=-.4472135603427887;g[d+632>>2]=0.0;g[d+636>>2]=.8944271206855774;c[d+640>>2]=-1;g[d+644>>2]=.20000000298023224;g[d+648>>2]=.10000000149011612;g[d+652>>2]=.10000000149011612;g[d+656>>2]=-.4472135603427887;g[d+660>>2]=0.0;g[d+664>>2]=.8944271206855774;c[d+668>>2]=-1;c[a+28>>2]=4;c[a+32>>2]=24;e=a+24|0;Lg[c[968]&127](1,e);Lg[c[970]&127](34962,c[e>>2]|0);lh[c[972]&63](34962,672,d,35044);Lg[c[970]&127](34962,0);e=oj()|0;c[a+36>>2]=e;if((e|0)==0){i=b;return 0}e=0;while(1){f=+(e|0)*6.2831854820251465/20.0;h=+X(+f);j=+W(+f);k=e+1|0;g[d+(e*28|0)>>2]=0.0;g[d+(e*28|0)+4>>2]=j*.20000000298023224;g[d+(e*28|0)+8>>2]=h*.20000000298023224;g[d+(e*28|0)+12>>2]=0.0;g[d+(e*28|0)+16>>2]=j;g[d+(e*28|0)+20>>2]=h;c[d+(e*28|0)+24>>2]=-4144897;if((k|0)==21){l=21;m=0;break}else{e=k}}while(1){h=+(m|0)*6.2831854820251465/20.0;j=+X(+h);f=+W(+h);g[d+(l*28|0)>>2]=j*.20000000298023224;g[d+(l*28|0)+4>>2]=f*.20000000298023224;g[d+(l*28|0)+8>>2]=0.0;g[d+(l*28|0)+12>>2]=j;g[d+(l*28|0)+16>>2]=f;g[d+(l*28|0)+20>>2]=0.0;c[d+(l*28|0)+24>>2]=-16192;e=m+1|0;if((e|0)==26){n=47;o=0;break}else{l=l+1|0;m=e}}while(1){f=+(o|0)*6.2831854820251465/20.0;j=+X(+f);h=+W(+f);g[d+(n*28|0)>>2]=h*.20000000298023224;g[d+(n*28|0)+4>>2]=0.0;g[d+(n*28|0)+8>>2]=j*-.20000000298023224;g[d+(n*28|0)+12>>2]=h;g[d+(n*28|0)+16>>2]=0.0;g[d+(n*28|0)+20>>2]=-j;c[d+(n*28|0)+24>>2]=-4128832;o=o+1|0;if((o|0)==21){break}else{n=n+1|0}}c[a+44>>2]=3;c[a+48>>2]=68;n=a+40|0;Lg[c[968]&127](1,n);Lg[c[970]&127](34962,c[n>>2]|0);lh[c[972]&63](34962,1904,d,35044);Lg[c[970]&127](34962,0);d=nj()|0;c[a+52>>2]=d;i=b;return(d|0)!=0|0}function Vi(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0;e=i;i=i+80|0;f=e;h=c[b+64>>2]|0;b=f+0|0;j=d+0|0;d=b+64|0;do{c[b>>2]=c[j>>2];b=b+4|0;j=j+4|0}while((b|0)<(d|0));j=f+64|0;c[j>>2]=h;h=f+68|0;c[h>>2]=1;b=c[j>>2]|0;d=b+12|0;k=c[d>>2]|0;l=k+16|0;m=b+8|0;n=c[m>>2]|0;if(l>>>0>n>>>0){c[m>>2]=n<<1;n=Hl()|0;o=b+4|0;p=fh[c[(c[n>>2]|0)+16>>2]&15](n,c[o>>2]|0,c[m>>2]|0,1)|0;c[o>>2]=p;q=p;r=c[d>>2]|0}else{q=c[b+4>>2]|0;r=k}g[q+r>>2]=0.0;g[q+(r+4)>>2]=0.0;g[q+(r+8)>>2]=0.0;a[q+(r+12)|0]=-1;a[q+(r+13)|0]=0;a[q+(r+14)|0]=0;a[q+(r+15)|0]=-1;c[d>>2]=l;l=c[j>>2]|0;d=l+12|0;r=c[d>>2]|0;q=r+16|0;k=l+8|0;b=c[k>>2]|0;if(q>>>0>b>>>0){c[k>>2]=b<<1;b=Hl()|0;p=l+4|0;o=fh[c[(c[b>>2]|0)+16>>2]&15](b,c[p>>2]|0,c[k>>2]|0,1)|0;c[p>>2]=o;s=o;t=c[d>>2]|0}else{s=c[l+4>>2]|0;t=r}g[s+t>>2]=1.0;g[s+(t+4)>>2]=0.0;g[s+(t+8)>>2]=0.0;a[s+(t+12)|0]=-1;a[s+(t+13)|0]=0;a[s+(t+14)|0]=0;a[s+(t+15)|0]=-1;c[d>>2]=q;q=c[j>>2]|0;d=q+12|0;t=c[d>>2]|0;s=t+16|0;r=q+8|0;l=c[r>>2]|0;if(s>>>0>l>>>0){c[r>>2]=l<<1;l=Hl()|0;o=q+4|0;p=fh[c[(c[l>>2]|0)+16>>2]&15](l,c[o>>2]|0,c[r>>2]|0,1)|0;c[o>>2]=p;u=p;v=c[d>>2]|0}else{u=c[q+4>>2]|0;v=t}g[u+v>>2]=0.0;g[u+(v+4)>>2]=0.0;g[u+(v+8)>>2]=0.0;a[u+(v+12)|0]=0;a[u+(v+13)|0]=-1;a[u+(v+14)|0]=0;a[u+(v+15)|0]=-1;c[d>>2]=s;s=c[j>>2]|0;d=s+12|0;v=c[d>>2]|0;u=v+16|0;t=s+8|0;q=c[t>>2]|0;if(u>>>0>q>>>0){c[t>>2]=q<<1;q=Hl()|0;p=s+4|0;o=fh[c[(c[q>>2]|0)+16>>2]&15](q,c[p>>2]|0,c[t>>2]|0,1)|0;c[p>>2]=o;w=o;x=c[d>>2]|0}else{w=c[s+4>>2]|0;x=v}g[w+x>>2]=0.0;g[w+(x+4)>>2]=1.0;g[w+(x+8)>>2]=0.0;a[w+(x+12)|0]=0;a[w+(x+13)|0]=-1;a[w+(x+14)|0]=0;a[w+(x+15)|0]=-1;c[d>>2]=u;u=c[j>>2]|0;d=u+12|0;x=c[d>>2]|0;w=x+16|0;v=u+8|0;s=c[v>>2]|0;if(w>>>0>s>>>0){c[v>>2]=s<<1;s=Hl()|0;o=u+4|0;p=fh[c[(c[s>>2]|0)+16>>2]&15](s,c[o>>2]|0,c[v>>2]|0,1)|0;c[o>>2]=p;y=p;z=c[d>>2]|0}else{y=c[u+4>>2]|0;z=x}g[y+z>>2]=0.0;g[y+(z+4)>>2]=0.0;g[y+(z+8)>>2]=0.0;a[y+(z+12)|0]=0;a[y+(z+13)|0]=0;a[y+(z+14)|0]=-1;a[y+(z+15)|0]=-1;c[d>>2]=w;w=c[j>>2]|0;d=w+12|0;z=c[d>>2]|0;y=z+16|0;x=w+8|0;u=c[x>>2]|0;if(y>>>0>u>>>0){c[x>>2]=u<<1;u=Hl()|0;p=w+4|0;o=fh[c[(c[u>>2]|0)+16>>2]&15](u,c[p>>2]|0,c[x>>2]|0,1)|0;c[p>>2]=o;A=o;B=c[d>>2]|0;C=A+B|0;g[C>>2]=0.0;D=B+4|0;E=A+D|0;g[E>>2]=0.0;F=B+8|0;G=A+F|0;g[G>>2]=1.0;H=B+12|0;I=A+H|0;a[I]=0;J=B+13|0;K=A+J|0;a[K]=0;L=B+14|0;M=A+L|0;a[M]=-1;N=B+15|0;O=A+N|0;a[O]=-1;c[d>>2]=y;P=c[j>>2]|0;Q=c[h>>2]|0;Ni(P,Q,f);i=e;return}else{A=c[w+4>>2]|0;B=z;C=A+B|0;g[C>>2]=0.0;D=B+4|0;E=A+D|0;g[E>>2]=0.0;F=B+8|0;G=A+F|0;g[G>>2]=1.0;H=B+12|0;I=A+H|0;a[I]=0;J=B+13|0;K=A+J|0;a[K]=0;L=B+14|0;M=A+L|0;a[M]=-1;N=B+15|0;O=A+N|0;a[O]=-1;c[d>>2]=y;P=c[j>>2]|0;Q=c[h>>2]|0;Ni(P,Q,f);i=e;return}}function Wi(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0.0,B=0,C=0,D=0,E=0,F=0,G=0,H=0.0,I=0.0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0.0,S=0.0,T=0,U=0,V=0,W=0,X=0;e=i;i=i+176|0;f=e;h=e+160|0;j=e+80|0;k=e+128|0;l=e+112|0;m=e+96|0;n=e+144|0;o=+(b|0)*d;p=o*.5;q=-p;cd(3042);pb(770,771);ug(2884);r=a+64|0;a=c[r>>2]|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;c[k+0>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;g[f>>2]=1.0;s=f+4|0;c[s+0>>2]=c[h+0>>2];c[s+4>>2]=c[h+4>>2];c[s+8>>2]=c[h+8>>2];c[s+12>>2]=c[h+12>>2];g[f+20>>2]=1.0;h=f+24|0;c[h+0>>2]=c[j+0>>2];c[h+4>>2]=c[j+4>>2];c[h+8>>2]=c[j+8>>2];c[h+12>>2]=c[j+12>>2];g[f+40>>2]=1.0;j=f+44|0;c[j+0>>2]=c[k+0>>2];c[j+4>>2]=c[k+4>>2];c[j+8>>2]=c[k+8>>2];c[j+12>>2]=c[k+12>>2];g[f+60>>2]=1.0;k=f+64|0;c[k>>2]=a;a=f+68|0;c[a>>2]=5;j=c[k>>2]|0;h=j+12|0;s=c[h>>2]|0;t=s+16|0;u=j+8|0;v=c[u>>2]|0;if(t>>>0>v>>>0){c[u>>2]=v<<1;v=Hl()|0;w=j+4|0;x=fh[c[(c[v>>2]|0)+16>>2]&15](v,c[w>>2]|0,c[u>>2]|0,1)|0;c[w>>2]=x;y=x;z=c[h>>2]|0}else{y=c[j+4>>2]|0;z=s}g[y+z>>2]=q;g[y+(z+4)>>2]=0.0;g[y+(z+8)>>2]=q;c[y+(z+12)>>2]=-1328496512;c[h>>2]=t;A=o-p;t=c[k>>2]|0;h=t+12|0;z=c[h>>2]|0;y=z+16|0;s=t+8|0;j=c[s>>2]|0;if(y>>>0>j>>>0){c[s>>2]=j<<1;j=Hl()|0;x=t+4|0;w=fh[c[(c[j>>2]|0)+16>>2]&15](j,c[x>>2]|0,c[s>>2]|0,1)|0;c[x>>2]=w;B=w;C=c[h>>2]|0}else{B=c[t+4>>2]|0;C=z}g[B+C>>2]=q;g[B+(C+4)>>2]=0.0;g[B+(C+8)>>2]=A;c[B+(C+12)>>2]=-1328496512;c[h>>2]=y;y=c[k>>2]|0;h=y+12|0;C=c[h>>2]|0;B=C+16|0;z=y+8|0;t=c[z>>2]|0;if(B>>>0>t>>>0){c[z>>2]=t<<1;t=Hl()|0;w=y+4|0;x=fh[c[(c[t>>2]|0)+16>>2]&15](t,c[w>>2]|0,c[z>>2]|0,1)|0;c[w>>2]=x;D=x;E=c[h>>2]|0}else{D=c[y+4>>2]|0;E=C}g[D+E>>2]=A;g[D+(E+4)>>2]=0.0;g[D+(E+8)>>2]=q;c[D+(E+12)>>2]=-1328496512;c[h>>2]=B;B=c[k>>2]|0;h=B+12|0;E=c[h>>2]|0;D=E+16|0;C=B+8|0;y=c[C>>2]|0;if(D>>>0>y>>>0){c[C>>2]=y<<1;y=Hl()|0;x=B+4|0;w=fh[c[(c[y>>2]|0)+16>>2]&15](y,c[x>>2]|0,c[C>>2]|0,1)|0;c[x>>2]=w;F=w;G=c[h>>2]|0}else{F=c[B+4>>2]|0;G=E}g[F+G>>2]=A;g[F+(G+4)>>2]=0.0;g[F+(G+8)>>2]=A;c[F+(G+12)>>2]=-1328496512;c[h>>2]=D;Ni(c[k>>2]|0,c[a>>2]|0,f);ug(3042);cd(2884);a=c[r>>2]|0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;g[f>>2]=1.0;r=f+4|0;c[r+0>>2]=c[l+0>>2];c[r+4>>2]=c[l+4>>2];c[r+8>>2]=c[l+8>>2];c[r+12>>2]=c[l+12>>2];g[f+20>>2]=1.0;l=f+24|0;c[l+0>>2]=c[m+0>>2];c[l+4>>2]=c[m+4>>2];c[l+8>>2]=c[m+8>>2];c[l+12>>2]=c[m+12>>2];g[f+40>>2]=1.0;m=f+44|0;c[m+0>>2]=c[n+0>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];c[m+12>>2]=c[n+12>>2];g[f+60>>2]=1.0;n=f+64|0;c[n>>2]=a;a=f+68|0;c[a>>2]=1;m=b+1|0;l=(b|0)>-1;if(l){H=q;I=q;J=0}else{K=c[n>>2]|0;L=c[a>>2]|0;Ni(K,L,f);i=e;return}while(1){b=c[n>>2]|0;r=b+12|0;k=c[r>>2]|0;D=k+16|0;h=b+8|0;G=c[h>>2]|0;if(D>>>0>G>>>0){c[h>>2]=G<<1;G=Hl()|0;F=b+4|0;E=fh[c[(c[G>>2]|0)+16>>2]&15](G,c[F>>2]|0,c[h>>2]|0,1)|0;c[F>>2]=E;M=E;N=c[r>>2]|0}else{M=c[b+4>>2]|0;N=k}g[M+N>>2]=q;g[M+(N+4)>>2]=0.0;g[M+(N+8)>>2]=H;c[M+(N+12)>>2]=-5197648;c[r>>2]=D;D=c[n>>2]|0;r=D+12|0;k=c[r>>2]|0;b=k+16|0;E=D+8|0;F=c[E>>2]|0;if(b>>>0>F>>>0){c[E>>2]=F<<1;F=Hl()|0;h=D+4|0;G=fh[c[(c[F>>2]|0)+16>>2]&15](F,c[h>>2]|0,c[E>>2]|0,1)|0;c[h>>2]=G;O=G;P=c[r>>2]|0}else{O=c[D+4>>2]|0;P=k}g[O+P>>2]=A;g[O+(P+4)>>2]=0.0;g[O+(P+8)>>2]=I;c[O+(P+12)>>2]=-5197648;c[r>>2]=b;J=J+1|0;if((J|0)>=(m|0)){break}else{H=H+d;I=I+d}}J=c[n>>2]|0;if(l){Q=J;R=q;S=q;T=0}else{K=J;L=c[a>>2]|0;Ni(K,L,f);i=e;return}while(1){J=Q+12|0;l=c[J>>2]|0;P=l+16|0;O=Q+8|0;N=c[O>>2]|0;if(P>>>0>N>>>0){c[O>>2]=N<<1;N=Hl()|0;M=Q+4|0;b=fh[c[(c[N>>2]|0)+16>>2]&15](N,c[M>>2]|0,c[O>>2]|0,1)|0;c[M>>2]=b;U=b;V=c[J>>2]|0}else{U=c[Q+4>>2]|0;V=l}g[U+V>>2]=R;g[U+(V+4)>>2]=0.0;g[U+(V+8)>>2]=q;c[U+(V+12)>>2]=-5197648;c[J>>2]=P;P=c[n>>2]|0;J=P+12|0;l=c[J>>2]|0;b=l+16|0;M=P+8|0;O=c[M>>2]|0;if(b>>>0>O>>>0){c[M>>2]=O<<1;O=Hl()|0;N=P+4|0;r=fh[c[(c[O>>2]|0)+16>>2]&15](O,c[N>>2]|0,c[M>>2]|0,1)|0;c[N>>2]=r;W=r;X=c[J>>2]|0}else{W=c[P+4>>2]|0;X=l}g[W+X>>2]=S;g[W+(X+4)>>2]=0.0;g[W+(X+8)>>2]=A;c[W+(X+12)>>2]=-5197648;c[J>>2]=b;b=T+1|0;J=c[n>>2]|0;if((b|0)<(m|0)){Q=J;R=R+d;S=S+d;T=b}else{K=J;break}}L=c[a>>2]|0;Ni(K,L,f);i=e;return}function Xi(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;f=i;i=i+48|0;g=f+40|0;h=f+8|0;j=f;k=f+32|0;l=b+12|0;m=c[l>>2]|0;if((m|0)==0){n=1;i=f;return n|0}o=a+4|0;p=a+8|0;q=c[o>>2]|0;r=(c[p>>2]|0)-q|0;if(((r|0)>0?r:0)>>>0<m<<6>>>0){m=Hl()|0;r=c[l>>2]|0;l=Sg[c[(c[m>>2]|0)+8>>2]&31](m,r<<6,64)|0;m=o;c[m>>2]=l;c[m+4>>2]=l+(((l|0)!=0?r:0)<<6);s=l}else{s=q}if((s|0)==0){n=0;i=f;return n|0}c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[h+16>>2]=0;hk(j,b);s=j;j=c[s+4>>2]|0;q=h+4|0;c[q>>2]=c[s>>2];c[q+4>>2]=j;j=o;q=c[j+4>>2]|0;s=h+12|0;c[s>>2]=c[j>>2];c[s+4>>2]=q;c[h>>2]=b;if(!(ak(h)|0)){n=0;i=f;return n|0}h=c[(c[a>>2]|0)+24>>2]|0;q=c[p>>2]|0;c[k>>2]=c[o>>2];c[k+4>>2]=q;c[g+0>>2]=c[k+0>>2];c[g+4>>2]=c[k+4>>2];n=Pg[h&15](a,b,g,d,e)|0;i=f;return n|0}function Yi(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;g=e?2:1;e=a+12|0;h=a+20|0;if((d|0)>0){j=0}else{k=0;do{Lg[c[970]&127](34962,c[a+(k<<4)+24>>2]|0);l=a+(k<<4)+36|0;lj(c[l>>2]|0,b,(c[e>>2]|0)+192|0,28,0,28,12,28,24);Lg[c[970]&127](34962,0);mj(c[l>>2]|0);k=k+1|0}while((k|0)<(g|0));i=f;return}do{Lg[c[970]&127](34962,c[a+(j<<4)+24>>2]|0);k=a+(j<<4)+36|0;lj(c[k>>2]|0,b,(c[e>>2]|0)+192|0,28,0,28,12,28,24);Lg[c[970]&127](34962,0);l=c[(c[(c[k>>2]|0)+16>>2]|0)+4>>2]|0;m=a+(j<<4)+28|0;n=a+(j<<4)+32|0;o=0;do{lh[c[974]&63](l,1,0,(c[h>>2]|0)+(o<<4<<2)|0);qf(c[m>>2]|0,0,c[n>>2]|0);o=o+1|0}while((o|0)!=(d|0));mj(c[k>>2]|0);j=j+1|0}while((j|0)<(g|0));i=f;return}function Zi(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;g=a+56|0;Lg[c[970]&127](34962,c[g>>2]|0);lh[c[972]&63](34962,d<<6,c[a+20>>2]|0,35040);Lg[c[970]&127](34962,0);h=e?2:1;e=a+12|0;j=0;do{Lg[c[970]&127](34962,c[a+(j<<4)+24>>2]|0);k=a+(j<<4)+36|0;lj(c[k>>2]|0,b,(c[e>>2]|0)+192|0,28,0,28,12,28,24);Lg[c[970]&127](34962,0);l=c[(c[(c[k>>2]|0)+28>>2]|0)+12>>2]|0;Lg[c[970]&127](34962,c[g>>2]|0);Kg[c[976]&255](l);m=l+1|0;Kg[c[976]&255](m);n=l+2|0;Kg[c[976]&255](n);o=l+3|0;Kg[c[976]&255](o);Lg[c[978]&127](l,1);Lg[c[978]&127](m,1);Lg[c[978]&127](n,1);Lg[c[978]&127](o,1);Wg[c[980]&31](l,4,5126,0,64,0);Wg[c[980]&31](m,4,5126,0,64,16);Wg[c[980]&31](n,4,5126,0,64,32);Wg[c[980]&31](o,4,5126,0,64,48);Lg[c[970]&127](34962,0);lh[c[982]&63](c[a+(j<<4)+28>>2]|0,0,c[a+(j<<4)+32>>2]|0,d);Kg[c[984]&255](l);Kg[c[984]&255](m);Kg[c[984]&255](n);Kg[c[984]&255](o);Lg[c[978]&127](l,0);Lg[c[978]&127](m,0);Lg[c[978]&127](n,0);Lg[c[978]&127](o,0);mj(c[k>>2]|0);j=j+1|0}while((j|0)<(h|0));i=f;return}



function ck(f){f=f|0;var h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0.0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0.0,pa=0.0,qa=0.0,ra=0.0,sa=0.0,ta=0.0;h=i;j=f+4|0;l=c[j>>2]|0;if((l|0)==0){m=0;i=h;return m|0}n=f+8|0;o=c[n>>2]|0;if((o|0)==0){m=0;i=h;return m|0}p=f+12|0;q=c[p>>2]|0;r=c[l+28>>2]|0;s=(r+3|0)/4|0;if(!((q|0)!=0&(((c[f+16>>2]|0)-q|0)/160|0|0)>=(s|0)&(c[o+8>>2]|0)>=(s|0))){m=0;i=h;return m|0}if((r+6|0)>>>0<7){m=1;i=h;return m|0}t=+g[f>>2];u=+g[l+24>>2];v=t<u?t:u;u=v<0.0?0.0:v;f=o+4|0;if((c[o>>2]|0)==(l|0)?!(+g[f>>2]>u):0){w=l;x=o}else{c[o>>2]=l;c[o+36>>2]=0;c[o+40>>2]=0;c[o+44>>2]=0;w=c[j>>2]|0;x=c[n>>2]|0}g[f>>2]=u;f=c[w>>2]|0;o=c[w+4>>2]|0;w=x+36|0;l=c[x+24>>2]|0;q=c[x+48>>2]|0;x=s<<2;y=c[w>>2]|0;if((y|0)==0){if((r|0)>0){z=0;do{A=z<<2;B=A+x|0;C=z<<3;c[l+(C<<2)>>2]=A;c[l+((C|1)<<2)>>2]=B;c[l+((C|2)<<2)>>2]=A|1;c[l+((C|3)<<2)>>2]=B|1;c[l+((C|4)<<2)>>2]=A|2;c[l+((C|5)<<2)>>2]=B|2;c[l+((C|6)<<2)>>2]=A|3;c[l+((C|7)<<2)>>2]=B|3;z=z+1|0}while((z|0)!=(s|0))}z=(s+7|0)/8|0;B=z+ -1|0;if((B|0)>0){Ov(q|0,-1,B|0)|0}a[q+B|0]=255>>>((z<<3)-s|0);D=s<<3}else{D=y}y=f+(D*12|0)|0;D=f;a:do{if(y>>>0<o>>>0){z=y;while(1){B=z+4|0;C=e[B>>1]|0;if(!(+g[f+((c[l+((C<<1|1)<<2)>>2]|0)*12|0)>>2]<=u)){E=z;break a}A=q+(C>>>5)|0;a[A]=d[A]|1<<(C>>>2&7);C=e[B>>1]<<1;B=l+((C|1)<<2)|0;c[l+(C<<2)>>2]=c[B>>2];c[B>>2]=(z-D|0)/12|0;B=z+12|0;if(B>>>0<o>>>0){z=B}else{E=B;break}}}else{E=y}}while(0);c[w>>2]=(E-D|0)/12|0;D=c[j>>2]|0;E=c[D>>2]|0;w=c[n>>2]|0;y=c[w+24>>2]|0;o=c[w+48>>2]|0;l=c[w+12>>2]|0;q=(s+7|0)/8|0;f=(r|0)>0;if(f){r=0;do{z=o+r|0;B=a[z]|0;a[z]=0;if(!(B<<24>>24==0)){z=r<<3;C=B;while(1){if(!((C&1)==0)){B=z<<3;A=c[y+(B<<2)>>2]|0;F=c[y+((B|2)<<2)>>2]|0;G=c[y+((B|4)<<2)>>2]|0;H=c[y+((B|6)<<2)>>2]|0;v=+g[E+(F*12|0)>>2];t=+g[E+(G*12|0)>>2];I=+g[E+(H*12|0)>>2];g[l+(z<<7)>>2]=+g[E+(A*12|0)>>2];g[l+(z<<7)+4>>2]=v;g[l+(z<<7)+8>>2]=t;g[l+(z<<7)+12>>2]=I;J=e[E+(A*12|0)+6>>1]|0;K=e[E+(F*12|0)+6>>1]|0;L=e[E+(G*12|0)+6>>1]|0;M=e[E+(H*12|0)+6>>1]|0;I=(c[k>>2]=J<<13&268427264,+g[k>>2])*5.192296858534828e+33;N=(g[k>>2]=I,c[k>>2]|0);O=(I>=65536.0?N|2139095040:N)|J<<16&-2147483648|0;I=(c[k>>2]=K<<13&268427264,+g[k>>2])*5.192296858534828e+33;J=(g[k>>2]=I,c[k>>2]|0);N=(I>=65536.0?J|2139095040:J)|K<<16&-2147483648|0;I=(c[k>>2]=L<<13&268427264,+g[k>>2])*5.192296858534828e+33;K=(g[k>>2]=I,c[k>>2]|0);J=(I>=65536.0?K|2139095040:K)|L<<16&-2147483648|0;I=(c[k>>2]=M<<13&268427264,+g[k>>2])*5.192296858534828e+33;L=(g[k>>2]=I,c[k>>2]|0);K=(I>=65536.0?L|2139095040:L)|M<<16&-2147483648|0;c[l+(z<<7)+32>>2]=O;c[l+(z<<7)+36>>2]=N;c[l+(z<<7)+40>>2]=J;c[l+(z<<7)+44>>2]=K;K=e[E+(A*12|0)+8>>1]|0;J=e[E+(F*12|0)+8>>1]|0;N=e[E+(G*12|0)+8>>1]|0;O=e[E+(H*12|0)+8>>1]|0;I=(c[k>>2]=K<<13&268427264,+g[k>>2])*5.192296858534828e+33;M=(g[k>>2]=I,c[k>>2]|0);L=(I>=65536.0?M|2139095040:M)|K<<16&-2147483648|0;I=(c[k>>2]=J<<13&268427264,+g[k>>2])*5.192296858534828e+33;K=(g[k>>2]=I,c[k>>2]|0);M=(I>=65536.0?K|2139095040:K)|J<<16&-2147483648|0;I=(c[k>>2]=N<<13&268427264,+g[k>>2])*5.192296858534828e+33;J=(g[k>>2]=I,c[k>>2]|0);K=(I>=65536.0?J|2139095040:J)|N<<16&-2147483648|0;I=(c[k>>2]=O<<13&268427264,+g[k>>2])*5.192296858534828e+33;N=(g[k>>2]=I,c[k>>2]|0);J=(I>=65536.0?N|2139095040:N)|O<<16&-2147483648|0;c[l+(z<<7)+48>>2]=L;c[l+(z<<7)+52>>2]=M;c[l+(z<<7)+56>>2]=K;c[l+(z<<7)+60>>2]=J;J=e[E+(A*12|0)+10>>1]|0;A=e[E+(F*12|0)+10>>1]|0;F=e[E+(G*12|0)+10>>1]|0;G=e[E+(H*12|0)+10>>1]|0;I=(c[k>>2]=J<<13&268427264,+g[k>>2])*5.192296858534828e+33;H=(g[k>>2]=I,c[k>>2]|0);K=(I>=65536.0?H|2139095040:H)|J<<16&-2147483648|0;I=(c[k>>2]=A<<13&268427264,+g[k>>2])*5.192296858534828e+33;J=(g[k>>2]=I,c[k>>2]|0);H=(I>=65536.0?J|2139095040:J)|A<<16&-2147483648|0;I=(c[k>>2]=F<<13&268427264,+g[k>>2])*5.192296858534828e+33;A=(g[k>>2]=I,c[k>>2]|0);J=(I>=65536.0?A|2139095040:A)|F<<16&-2147483648|0;I=(c[k>>2]=G<<13&268427264,+g[k>>2])*5.192296858534828e+33;F=(g[k>>2]=I,c[k>>2]|0);A=(I>=65536.0?F|2139095040:F)|G<<16&-2147483648|0;c[l+(z<<7)+64>>2]=K;c[l+(z<<7)+68>>2]=H;c[l+(z<<7)+72>>2]=J;c[l+(z<<7)+76>>2]=A;A=c[y+((B|1)<<2)>>2]|0;J=c[y+((B|3)<<2)>>2]|0;H=c[y+((B|5)<<2)>>2]|0;K=c[y+((B|7)<<2)>>2]|0;I=+g[E+(J*12|0)>>2];t=+g[E+(H*12|0)>>2];v=+g[E+(K*12|0)>>2];g[l+(z<<7)+16>>2]=+g[E+(A*12|0)>>2];g[l+(z<<7)+20>>2]=I;g[l+(z<<7)+24>>2]=t;g[l+(z<<7)+28>>2]=v;B=e[E+(A*12|0)+6>>1]|0;G=e[E+(J*12|0)+6>>1]|0;F=e[E+(H*12|0)+6>>1]|0;M=e[E+(K*12|0)+6>>1]|0;v=(c[k>>2]=B<<13&268427264,+g[k>>2])*5.192296858534828e+33;L=(g[k>>2]=v,c[k>>2]|0);O=(v>=65536.0?L|2139095040:L)|B<<16&-2147483648|0;v=(c[k>>2]=G<<13&268427264,+g[k>>2])*5.192296858534828e+33;B=(g[k>>2]=v,c[k>>2]|0);L=(v>=65536.0?B|2139095040:B)|G<<16&-2147483648|0;v=(c[k>>2]=F<<13&268427264,+g[k>>2])*5.192296858534828e+33;G=(g[k>>2]=v,c[k>>2]|0);B=(v>=65536.0?G|2139095040:G)|F<<16&-2147483648|0;v=(c[k>>2]=M<<13&268427264,+g[k>>2])*5.192296858534828e+33;F=(g[k>>2]=v,c[k>>2]|0);G=(v>=65536.0?F|2139095040:F)|M<<16&-2147483648|0;c[l+(z<<7)+80>>2]=O;c[l+(z<<7)+84>>2]=L;c[l+(z<<7)+88>>2]=B;c[l+(z<<7)+92>>2]=G;G=e[E+(A*12|0)+8>>1]|0;B=e[E+(J*12|0)+8>>1]|0;L=e[E+(H*12|0)+8>>1]|0;O=e[E+(K*12|0)+8>>1]|0;v=(c[k>>2]=G<<13&268427264,+g[k>>2])*5.192296858534828e+33;M=(g[k>>2]=v,c[k>>2]|0);F=(v>=65536.0?M|2139095040:M)|G<<16&-2147483648|0;v=(c[k>>2]=B<<13&268427264,+g[k>>2])*5.192296858534828e+33;G=(g[k>>2]=v,c[k>>2]|0);M=(v>=65536.0?G|2139095040:G)|B<<16&-2147483648|0;v=(c[k>>2]=L<<13&268427264,+g[k>>2])*5.192296858534828e+33;B=(g[k>>2]=v,c[k>>2]|0);G=(v>=65536.0?B|2139095040:B)|L<<16&-2147483648|0;v=(c[k>>2]=O<<13&268427264,+g[k>>2])*5.192296858534828e+33;L=(g[k>>2]=v,c[k>>2]|0);B=(v>=65536.0?L|2139095040:L)|O<<16&-2147483648|0;c[l+(z<<7)+96>>2]=F;c[l+(z<<7)+100>>2]=M;c[l+(z<<7)+104>>2]=G;c[l+(z<<7)+108>>2]=B;B=e[E+(A*12|0)+10>>1]|0;A=e[E+(J*12|0)+10>>1]|0;J=e[E+(H*12|0)+10>>1]|0;H=e[E+(K*12|0)+10>>1]|0;v=(c[k>>2]=B<<13&268427264,+g[k>>2])*5.192296858534828e+33;K=(g[k>>2]=v,c[k>>2]|0);G=(v>=65536.0?K|2139095040:K)|B<<16&-2147483648|0;v=(c[k>>2]=A<<13&268427264,+g[k>>2])*5.192296858534828e+33;B=(g[k>>2]=v,c[k>>2]|0);K=(v>=65536.0?B|2139095040:B)|A<<16&-2147483648|0;v=(c[k>>2]=J<<13&268427264,+g[k>>2])*5.192296858534828e+33;A=(g[k>>2]=v,c[k>>2]|0);B=(v>=65536.0?A|2139095040:A)|J<<16&-2147483648|0;v=(c[k>>2]=H<<13&268427264,+g[k>>2])*5.192296858534828e+33;J=(g[k>>2]=v,c[k>>2]|0);A=(v>=65536.0?J|2139095040:J)|H<<16&-2147483648|0;c[l+(z<<7)+112>>2]=G;c[l+(z<<7)+116>>2]=K;c[l+(z<<7)+120>>2]=B;c[l+(z<<7)+124>>2]=A}C=(C&255)>>>1;if(C<<24>>24==0){break}else{z=z+1|0}}}r=r+1|0}while((r|0)<(q|0));P=c[j>>2]|0;Q=c[n>>2]|0}else{P=D;Q=w}w=c[P+8>>2]|0;D=c[P+12>>2]|0;P=Q+40|0;r=c[Q+28>>2]|0;l=c[Q+52>>2]|0;Q=c[P>>2]|0;if((Q|0)==0){if(f){E=0;do{y=E<<2;o=y+x|0;z=E<<3;c[r+(z<<2)>>2]=y;c[r+((z|1)<<2)>>2]=o;c[r+((z|2)<<2)>>2]=y|1;c[r+((z|3)<<2)>>2]=o|1;c[r+((z|4)<<2)>>2]=y|2;c[r+((z|5)<<2)>>2]=o|2;c[r+((z|6)<<2)>>2]=y|3;c[r+((z|7)<<2)>>2]=o|3;E=E+1|0}while((E|0)!=(s|0))}E=q+ -1|0;if((E|0)>0){Ov(l|0,-1,E|0)|0}a[l+E|0]=255>>>((q<<3)-s|0);R=s<<3}else{R=Q}Q=w+(R*12|0)|0;R=w;b:do{if(Q>>>0<D>>>0){E=Q;while(1){o=E+4|0;z=b[o>>1]&32767;if(!(+g[w+((c[r+((z<<1|1)<<2)>>2]|0)*12|0)>>2]<=u)){S=E;break b}y=l+(z>>>5)|0;a[y]=d[y]|1<<(z>>>2&7);z=(b[o>>1]&32767)<<1;o=r+((z|1)<<2)|0;c[r+(z<<2)>>2]=c[o>>2];c[o>>2]=(E-R|0)/12|0;o=E+12|0;if(o>>>0<D>>>0){E=o}else{S=o;break}}}else{S=Q}}while(0);c[P>>2]=(S-R|0)/12|0;R=c[j>>2]|0;S=c[R+8>>2]|0;P=c[n>>2]|0;Q=c[P+28>>2]|0;D=c[P+52>>2]|0;r=c[P+16>>2]|0;if(f){l=0;do{w=D+l|0;E=a[w]|0;a[w]=0;if(!(E<<24>>24==0)){w=l<<3;o=E;while(1){if(!((o&1)==0)){E=w<<3;z=c[Q+(E<<2)>>2]|0;y=c[Q+((E|2)<<2)>>2]|0;C=c[Q+((E|4)<<2)>>2]|0;A=c[Q+((E|6)<<2)>>2]|0;v=+g[S+(y*12|0)>>2];t=+g[S+(C*12|0)>>2];I=+g[S+(A*12|0)>>2];g[r+(w*160|0)>>2]=+g[S+(z*12|0)>>2];g[r+(w*160|0)+4>>2]=v;g[r+(w*160|0)+8>>2]=t;g[r+(w*160|0)+12>>2]=I;I=+(b[S+(z*12|0)+6>>1]|0)*30518509447574615.0e-21;t=+(b[S+(y*12|0)+6>>1]|0)*30518509447574615.0e-21;v=+(b[S+(C*12|0)+6>>1]|0)*30518509447574615.0e-21;T=+(b[S+(A*12|0)+6>>1]|0)*30518509447574615.0e-21;g[r+(w*160|0)+32>>2]=I;g[r+(w*160|0)+36>>2]=t;g[r+(w*160|0)+40>>2]=v;g[r+(w*160|0)+44>>2]=T;U=+(b[S+(z*12|0)+8>>1]|0)*30518509447574615.0e-21;V=+(b[S+(y*12|0)+8>>1]|0)*30518509447574615.0e-21;W=+(b[S+(C*12|0)+8>>1]|0)*30518509447574615.0e-21;X=+(b[S+(A*12|0)+8>>1]|0)*30518509447574615.0e-21;g[r+(w*160|0)+48>>2]=U;g[r+(w*160|0)+52>>2]=V;g[r+(w*160|0)+56>>2]=W;g[r+(w*160|0)+60>>2]=X;Y=+(b[S+(z*12|0)+10>>1]|0)*30518509447574615.0e-21;Z=+(b[S+(y*12|0)+10>>1]|0)*30518509447574615.0e-21;_=+(b[S+(C*12|0)+10>>1]|0)*30518509447574615.0e-21;$=+(b[S+(A*12|0)+10>>1]|0)*30518509447574615.0e-21;g[r+(w*160|0)+64>>2]=Y;g[r+(w*160|0)+68>>2]=Z;g[r+(w*160|0)+72>>2]=_;g[r+(w*160|0)+76>>2]=$;aa=1.0-(I*I+U*U+Y*Y);Y=1.0-(t*t+V*V+Z*Z);Z=1.0-(v*v+W*W+_*_);_=1.0-(T*T+X*X+$*$);$=aa<1.0000000168623835e-16?1.0000000168623835e-16:aa;aa=Y<1.0000000168623835e-16?1.0000000168623835e-16:Y;Y=Z<1.0000000168623835e-16?1.0000000168623835e-16:Z;Z=_<1.0000000168623835e-16?1.0000000168623835e-16:_;_=(c[k>>2]=1597463007-(((g[k>>2]=$,c[k>>2]|0)|0)/2|0),+g[k>>2]);X=$*.5;T=_*(1.5-_*X*_);_=(c[k>>2]=1597463007-(((g[k>>2]=aa,c[k>>2]|0)|0)/2|0),+g[k>>2]);W=aa*.5;v=_*(1.5-_*W*_);_=(c[k>>2]=1597463007-(((g[k>>2]=Y,c[k>>2]|0)|0)/2|0),+g[k>>2]);V=Y*.5;t=_*(1.5-_*V*_);_=(c[k>>2]=1597463007-(((g[k>>2]=Z,c[k>>2]|0)|0)/2|0),+g[k>>2]);U=Z*.5;I=_*(1.5-_*U*_);_=$*T*(1.5-T*X*T);B=(g[k>>2]=_,c[k>>2]|0);T=aa*v*(1.5-v*W*v);K=(g[k>>2]=T,c[k>>2]|0);v=Y*t*(1.5-t*V*t);G=(g[k>>2]=v,c[k>>2]|0);t=Z*I*(1.5-I*U*I);H=(g[k>>2]=t,c[k>>2]|0);J=(g[k>>2]=-_,c[k>>2]|0);M=(g[k>>2]=-T,c[k>>2]|0);F=(g[k>>2]=-v,c[k>>2]|0);O=(g[k>>2]=-t,c[k>>2]|0);L=(M^K)&b[S+(y*12|0)+4>>1]>>15<<16>>16^M;M=(F^G)&b[S+(C*12|0)+4>>1]>>15<<16>>16^F;F=(O^H)&b[S+(A*12|0)+4>>1]>>15<<16>>16^O;c[r+(w*160|0)+80>>2]=(J^B)&b[S+(z*12|0)+4>>1]>>15<<16>>16^J;c[r+(w*160|0)+84>>2]=L;c[r+(w*160|0)+88>>2]=M;c[r+(w*160|0)+92>>2]=F;F=c[Q+((E|1)<<2)>>2]|0;M=c[Q+((E|3)<<2)>>2]|0;L=c[Q+((E|5)<<2)>>2]|0;J=c[Q+((E|7)<<2)>>2]|0;t=+g[S+(M*12|0)>>2];v=+g[S+(L*12|0)>>2];T=+g[S+(J*12|0)>>2];g[r+(w*160|0)+16>>2]=+g[S+(F*12|0)>>2];g[r+(w*160|0)+20>>2]=t;g[r+(w*160|0)+24>>2]=v;g[r+(w*160|0)+28>>2]=T;T=+(b[S+(F*12|0)+6>>1]|0)*30518509447574615.0e-21;v=+(b[S+(M*12|0)+6>>1]|0)*30518509447574615.0e-21;t=+(b[S+(L*12|0)+6>>1]|0)*30518509447574615.0e-21;_=+(b[S+(J*12|0)+6>>1]|0)*30518509447574615.0e-21;g[r+(w*160|0)+96>>2]=T;g[r+(w*160|0)+100>>2]=v;g[r+(w*160|0)+104>>2]=t;g[r+(w*160|0)+108>>2]=_;I=+(b[S+(F*12|0)+8>>1]|0)*30518509447574615.0e-21;U=+(b[S+(M*12|0)+8>>1]|0)*30518509447574615.0e-21;Z=+(b[S+(L*12|0)+8>>1]|0)*30518509447574615.0e-21;V=+(b[S+(J*12|0)+8>>1]|0)*30518509447574615.0e-21;g[r+(w*160|0)+112>>2]=I;g[r+(w*160|0)+116>>2]=U;g[r+(w*160|0)+120>>2]=Z;g[r+(w*160|0)+124>>2]=V;Y=+(b[S+(F*12|0)+10>>1]|0)*30518509447574615.0e-21;W=+(b[S+(M*12|0)+10>>1]|0)*30518509447574615.0e-21;aa=+(b[S+(L*12|0)+10>>1]|0)*30518509447574615.0e-21;X=+(b[S+(J*12|0)+10>>1]|0)*30518509447574615.0e-21;g[r+(w*160|0)+128>>2]=Y;g[r+(w*160|0)+132>>2]=W;g[r+(w*160|0)+136>>2]=aa;g[r+(w*160|0)+140>>2]=X;$=1.0-(T*T+I*I+Y*Y);Y=1.0-(v*v+U*U+W*W);W=1.0-(t*t+Z*Z+aa*aa);aa=1.0-(_*_+V*V+X*X);X=$<1.0000000168623835e-16?1.0000000168623835e-16:$;$=Y<1.0000000168623835e-16?1.0000000168623835e-16:Y;Y=W<1.0000000168623835e-16?1.0000000168623835e-16:W;W=aa<1.0000000168623835e-16?1.0000000168623835e-16:aa;aa=(c[k>>2]=1597463007-(((g[k>>2]=X,c[k>>2]|0)|0)/2|0),+g[k>>2]);V=X*.5;_=aa*(1.5-aa*V*aa);aa=(c[k>>2]=1597463007-(((g[k>>2]=$,c[k>>2]|0)|0)/2|0),+g[k>>2]);Z=$*.5;t=aa*(1.5-aa*Z*aa);aa=(c[k>>2]=1597463007-(((g[k>>2]=Y,c[k>>2]|0)|0)/2|0),+g[k>>2]);U=Y*.5;v=aa*(1.5-aa*U*aa);aa=(c[k>>2]=1597463007-(((g[k>>2]=W,c[k>>2]|0)|0)/2|0),+g[k>>2]);I=W*.5;T=aa*(1.5-aa*I*aa);aa=X*_*(1.5-_*V*_);E=(g[k>>2]=aa,c[k>>2]|0);_=$*t*(1.5-t*Z*t);z=(g[k>>2]=_,c[k>>2]|0);t=Y*v*(1.5-v*U*v);B=(g[k>>2]=t,c[k>>2]|0);v=W*T*(1.5-T*I*T);O=(g[k>>2]=v,c[k>>2]|0);A=(g[k>>2]=-aa,c[k>>2]|0);H=(g[k>>2]=-_,c[k>>2]|0);C=(g[k>>2]=-t,c[k>>2]|0);G=(g[k>>2]=-v,c[k>>2]|0);y=(H^z)&b[S+(M*12|0)+4>>1]>>15<<16>>16^H;H=(C^B)&b[S+(L*12|0)+4>>1]>>15<<16>>16^C;C=(G^O)&b[S+(J*12|0)+4>>1]>>15<<16>>16^G;c[r+(w*160|0)+144>>2]=(A^E)&b[S+(F*12|0)+4>>1]>>15<<16>>16^A;c[r+(w*160|0)+148>>2]=y;c[r+(w*160|0)+152>>2]=H;c[r+(w*160|0)+156>>2]=C}o=(o&255)>>>1;if(o<<24>>24==0){break}else{w=w+1|0}}}l=l+1|0}while((l|0)<(q|0));ba=c[j>>2]|0;ca=c[n>>2]|0}else{ba=R;ca=P}P=c[ba+16>>2]|0;R=c[ba+20>>2]|0;ba=ca+44|0;l=c[ca+32>>2]|0;r=c[ca+56>>2]|0;ca=c[ba>>2]|0;if((ca|0)==0){if(f){S=0;do{Q=S<<2;D=Q+x|0;w=S<<3;c[l+(w<<2)>>2]=Q;c[l+((w|1)<<2)>>2]=D;c[l+((w|2)<<2)>>2]=Q|1;c[l+((w|3)<<2)>>2]=D|1;c[l+((w|4)<<2)>>2]=Q|2;c[l+((w|5)<<2)>>2]=D|2;c[l+((w|6)<<2)>>2]=Q|3;c[l+((w|7)<<2)>>2]=D|3;S=S+1|0}while((S|0)!=(s|0))}S=q+ -1|0;if((S|0)>0){Ov(r|0,-1,S|0)|0}a[r+S|0]=255>>>((q<<3)-s|0);da=s<<3}else{da=ca}ca=P+(da*12|0)|0;da=P;c:do{if(ca>>>0<R>>>0){S=ca;while(1){x=S+4|0;D=e[x>>1]|0;if(!(+g[P+((c[l+((D<<1|1)<<2)>>2]|0)*12|0)>>2]<=u)){ea=S;break c}w=r+(D>>>5)|0;a[w]=d[w]|1<<(D>>>2&7);D=e[x>>1]<<1;x=l+((D|1)<<2)|0;c[l+(D<<2)>>2]=c[x>>2];c[x>>2]=(S-da|0)/12|0;x=S+12|0;if(x>>>0<R>>>0){S=x}else{ea=x;break}}}else{ea=ca}}while(0);c[ba>>2]=(ea-da|0)/12|0;da=c[(c[j>>2]|0)+16>>2]|0;j=c[n>>2]|0;ea=c[j+32>>2]|0;ba=c[j+56>>2]|0;ca=c[j+20>>2]|0;if(f){fa=0}else{m=1;i=h;return m|0}do{j=ba+fa|0;R=a[j]|0;a[j]=0;if(!(R<<24>>24==0)){j=fa<<3;l=R;while(1){if(!((l&1)==0)){R=j<<3;r=c[ea+(R<<2)>>2]|0;P=c[ea+((R|2)<<2)>>2]|0;S=c[ea+((R|4)<<2)>>2]|0;x=c[ea+((R|6)<<2)>>2]|0;v=+g[da+(P*12|0)>>2];t=+g[da+(S*12|0)>>2];_=+g[da+(x*12|0)>>2];g[ca+(j<<7)>>2]=+g[da+(r*12|0)>>2];g[ca+(j<<7)+4>>2]=v;g[ca+(j<<7)+8>>2]=t;g[ca+(j<<7)+12>>2]=_;D=e[da+(r*12|0)+6>>1]|0;w=e[da+(P*12|0)+6>>1]|0;Q=e[da+(S*12|0)+6>>1]|0;o=e[da+(x*12|0)+6>>1]|0;_=(c[k>>2]=D<<13&268427264,+g[k>>2])*5.192296858534828e+33;C=(g[k>>2]=_,c[k>>2]|0);H=(_>=65536.0?C|2139095040:C)|D<<16&-2147483648|0;_=(c[k>>2]=w<<13&268427264,+g[k>>2])*5.192296858534828e+33;D=(g[k>>2]=_,c[k>>2]|0);C=(_>=65536.0?D|2139095040:D)|w<<16&-2147483648|0;_=(c[k>>2]=Q<<13&268427264,+g[k>>2])*5.192296858534828e+33;w=(g[k>>2]=_,c[k>>2]|0);D=(_>=65536.0?w|2139095040:w)|Q<<16&-2147483648|0;_=(c[k>>2]=o<<13&268427264,+g[k>>2])*5.192296858534828e+33;Q=(g[k>>2]=_,c[k>>2]|0);w=(_>=65536.0?Q|2139095040:Q)|o<<16&-2147483648|0;c[ca+(j<<7)+32>>2]=H;c[ca+(j<<7)+36>>2]=C;c[ca+(j<<7)+40>>2]=D;c[ca+(j<<7)+44>>2]=w;w=e[da+(r*12|0)+8>>1]|0;D=e[da+(P*12|0)+8>>1]|0;C=e[da+(S*12|0)+8>>1]|0;H=e[da+(x*12|0)+8>>1]|0;_=(c[k>>2]=w<<13&268427264,+g[k>>2])*5.192296858534828e+33;o=(g[k>>2]=_,c[k>>2]|0);Q=(_>=65536.0?o|2139095040:o)|w<<16&-2147483648|0;_=(c[k>>2]=D<<13&268427264,+g[k>>2])*5.192296858534828e+33;w=(g[k>>2]=_,c[k>>2]|0);o=(_>=65536.0?w|2139095040:w)|D<<16&-2147483648|0;_=(c[k>>2]=C<<13&268427264,+g[k>>2])*5.192296858534828e+33;D=(g[k>>2]=_,c[k>>2]|0);w=(_>=65536.0?D|2139095040:D)|C<<16&-2147483648|0;_=(c[k>>2]=H<<13&268427264,+g[k>>2])*5.192296858534828e+33;C=(g[k>>2]=_,c[k>>2]|0);D=(_>=65536.0?C|2139095040:C)|H<<16&-2147483648|0;c[ca+(j<<7)+48>>2]=Q;c[ca+(j<<7)+52>>2]=o;c[ca+(j<<7)+56>>2]=w;c[ca+(j<<7)+60>>2]=D;D=e[da+(r*12|0)+10>>1]|0;r=e[da+(P*12|0)+10>>1]|0;P=e[da+(S*12|0)+10>>1]|0;S=e[da+(x*12|0)+10>>1]|0;_=(c[k>>2]=D<<13&268427264,+g[k>>2])*5.192296858534828e+33;x=(g[k>>2]=_,c[k>>2]|0);w=(_>=65536.0?x|2139095040:x)|D<<16&-2147483648|0;_=(c[k>>2]=r<<13&268427264,+g[k>>2])*5.192296858534828e+33;D=(g[k>>2]=_,c[k>>2]|0);x=(_>=65536.0?D|2139095040:D)|r<<16&-2147483648|0;_=(c[k>>2]=P<<13&268427264,+g[k>>2])*5.192296858534828e+33;r=(g[k>>2]=_,c[k>>2]|0);D=(_>=65536.0?r|2139095040:r)|P<<16&-2147483648|0;_=(c[k>>2]=S<<13&268427264,+g[k>>2])*5.192296858534828e+33;P=(g[k>>2]=_,c[k>>2]|0);r=(_>=65536.0?P|2139095040:P)|S<<16&-2147483648|0;c[ca+(j<<7)+64>>2]=w;c[ca+(j<<7)+68>>2]=x;c[ca+(j<<7)+72>>2]=D;c[ca+(j<<7)+76>>2]=r;r=c[ea+((R|1)<<2)>>2]|0;D=c[ea+((R|3)<<2)>>2]|0;x=c[ea+((R|5)<<2)>>2]|0;w=c[ea+((R|7)<<2)>>2]|0;_=+g[da+(D*12|0)>>2];t=+g[da+(x*12|0)>>2];v=+g[da+(w*12|0)>>2];g[ca+(j<<7)+16>>2]=+g[da+(r*12|0)>>2];g[ca+(j<<7)+20>>2]=_;g[ca+(j<<7)+24>>2]=t;g[ca+(j<<7)+28>>2]=v;R=e[da+(r*12|0)+6>>1]|0;S=e[da+(D*12|0)+6>>1]|0;P=e[da+(x*12|0)+6>>1]|0;o=e[da+(w*12|0)+6>>1]|0;v=(c[k>>2]=R<<13&268427264,+g[k>>2])*5.192296858534828e+33;Q=(g[k>>2]=v,c[k>>2]|0);H=(v>=65536.0?Q|2139095040:Q)|R<<16&-2147483648|0;v=(c[k>>2]=S<<13&268427264,+g[k>>2])*5.192296858534828e+33;R=(g[k>>2]=v,c[k>>2]|0);Q=(v>=65536.0?R|2139095040:R)|S<<16&-2147483648|0;v=(c[k>>2]=P<<13&268427264,+g[k>>2])*5.192296858534828e+33;S=(g[k>>2]=v,c[k>>2]|0);R=(v>=65536.0?S|2139095040:S)|P<<16&-2147483648|0;v=(c[k>>2]=o<<13&268427264,+g[k>>2])*5.192296858534828e+33;P=(g[k>>2]=v,c[k>>2]|0);S=(v>=65536.0?P|2139095040:P)|o<<16&-2147483648|0;c[ca+(j<<7)+80>>2]=H;c[ca+(j<<7)+84>>2]=Q;c[ca+(j<<7)+88>>2]=R;c[ca+(j<<7)+92>>2]=S;S=e[da+(r*12|0)+8>>1]|0;R=e[da+(D*12|0)+8>>1]|0;Q=e[da+(x*12|0)+8>>1]|0;H=e[da+(w*12|0)+8>>1]|0;v=(c[k>>2]=S<<13&268427264,+g[k>>2])*5.192296858534828e+33;o=(g[k>>2]=v,c[k>>2]|0);P=(v>=65536.0?o|2139095040:o)|S<<16&-2147483648|0;v=(c[k>>2]=R<<13&268427264,+g[k>>2])*5.192296858534828e+33;S=(g[k>>2]=v,c[k>>2]|0);o=(v>=65536.0?S|2139095040:S)|R<<16&-2147483648|0;v=(c[k>>2]=Q<<13&268427264,+g[k>>2])*5.192296858534828e+33;R=(g[k>>2]=v,c[k>>2]|0);S=(v>=65536.0?R|2139095040:R)|Q<<16&-2147483648|0;v=(c[k>>2]=H<<13&268427264,+g[k>>2])*5.192296858534828e+33;Q=(g[k>>2]=v,c[k>>2]|0);R=(v>=65536.0?Q|2139095040:Q)|H<<16&-2147483648|0;c[ca+(j<<7)+96>>2]=P;c[ca+(j<<7)+100>>2]=o;c[ca+(j<<7)+104>>2]=S;c[ca+(j<<7)+108>>2]=R;R=e[da+(r*12|0)+10>>1]|0;r=e[da+(D*12|0)+10>>1]|0;D=e[da+(x*12|0)+10>>1]|0;x=e[da+(w*12|0)+10>>1]|0;v=(c[k>>2]=R<<13&268427264,+g[k>>2])*5.192296858534828e+33;w=(g[k>>2]=v,c[k>>2]|0);S=(v>=65536.0?w|2139095040:w)|R<<16&-2147483648|0;v=(c[k>>2]=r<<13&268427264,+g[k>>2])*5.192296858534828e+33;R=(g[k>>2]=v,c[k>>2]|0);w=(v>=65536.0?R|2139095040:R)|r<<16&-2147483648|0;v=(c[k>>2]=D<<13&268427264,+g[k>>2])*5.192296858534828e+33;r=(g[k>>2]=v,c[k>>2]|0);R=(v>=65536.0?r|2139095040:r)|D<<16&-2147483648|0;v=(c[k>>2]=x<<13&268427264,+g[k>>2])*5.192296858534828e+33;D=(g[k>>2]=v,c[k>>2]|0);r=(v>=65536.0?D|2139095040:D)|x<<16&-2147483648|0;c[ca+(j<<7)+112>>2]=S;c[ca+(j<<7)+116>>2]=w;c[ca+(j<<7)+120>>2]=R;c[ca+(j<<7)+124>>2]=r}l=(l&255)>>>1;if(l<<24>>24==0){break}else{j=j+1|0}}}fa=fa+1|0}while((fa|0)<(q|0));q=c[n>>2]|0;n=c[q+20>>2]|0;fa=c[q+12>>2]|0;ca=c[q+16>>2]|0;q=c[p>>2]|0;if(f){ga=0}else{m=1;i=h;return m|0}while(1){v=+g[fa+(ga<<7)>>2];t=+g[fa+(ga<<7)+4>>2];_=+g[fa+(ga<<7)+8>>2];aa=+g[fa+(ga<<7)+12>>2];T=+g[fa+(ga<<7)+16>>2]-v;I=+g[fa+(ga<<7)+20>>2]-t;W=+g[fa+(ga<<7)+24>>2]-_;U=+g[fa+(ga<<7)+28>>2]-aa;Y=(c[k>>2]=2130706432-(g[k>>2]=T,c[k>>2]|0),+g[k>>2]);Z=Y*(2.0-T*Y);Y=(c[k>>2]=2130706432-(g[k>>2]=I,c[k>>2]|0),+g[k>>2]);$=Y*(2.0-I*Y);Y=(c[k>>2]=2130706432-(g[k>>2]=W,c[k>>2]|0),+g[k>>2]);V=Y*(2.0-W*Y);Y=(c[k>>2]=2130706432-(g[k>>2]=U,c[k>>2]|0),+g[k>>2]);X=Y*(2.0-U*Y);Y=(u-v)*Z*(2.0-T*Z);Z=(u-t)*$*(2.0-I*$);$=(u-_)*V*(2.0-W*V);V=(u-aa)*X*(2.0-U*X);X=+g[ca+(ga*160|0)>>2];U=+g[ca+(ga*160|0)+4>>2];aa=+g[ca+(ga*160|0)+8>>2];W=+g[ca+(ga*160|0)+12>>2];_=+g[ca+(ga*160|0)+16>>2]-X;I=+g[ca+(ga*160|0)+20>>2]-U;t=+g[ca+(ga*160|0)+24>>2]-aa;T=+g[ca+(ga*160|0)+28>>2]-W;v=(c[k>>2]=2130706432-(g[k>>2]=_,c[k>>2]|0),+g[k>>2]);ha=v*(2.0-_*v);v=(c[k>>2]=2130706432-(g[k>>2]=I,c[k>>2]|0),+g[k>>2]);ia=v*(2.0-I*v);v=(c[k>>2]=2130706432-(g[k>>2]=t,c[k>>2]|0),+g[k>>2]);ja=v*(2.0-t*v);v=(c[k>>2]=2130706432-(g[k>>2]=T,c[k>>2]|0),+g[k>>2]);ka=v*(2.0-T*v);v=(u-X)*ha*(2.0-_*ha);ha=(u-U)*ia*(2.0-I*ia);ia=(u-aa)*ja*(2.0-t*ja);ja=(u-W)*ka*(2.0-T*ka);ka=+g[n+(ga<<7)>>2];T=+g[n+(ga<<7)+4>>2];W=+g[n+(ga<<7)+8>>2];t=+g[n+(ga<<7)+12>>2];aa=+g[n+(ga<<7)+16>>2]-ka;I=+g[n+(ga<<7)+20>>2]-T;U=+g[n+(ga<<7)+24>>2]-W;_=+g[n+(ga<<7)+28>>2]-t;X=(c[k>>2]=2130706432-(g[k>>2]=aa,c[k>>2]|0),+g[k>>2]);la=X*(2.0-aa*X);X=(c[k>>2]=2130706432-(g[k>>2]=I,c[k>>2]|0),+g[k>>2]);ma=X*(2.0-I*X);X=(c[k>>2]=2130706432-(g[k>>2]=U,c[k>>2]|0),+g[k>>2]);na=X*(2.0-U*X);X=(c[k>>2]=2130706432-(g[k>>2]=_,c[k>>2]|0),+g[k>>2]);oa=X*(2.0-_*X);X=(u-ka)*la*(2.0-aa*la);la=(u-T)*ma*(2.0-I*ma);ma=(u-W)*na*(2.0-U*na);na=(u-t)*oa*(2.0-_*oa);oa=+g[fa+(ga<<7)+32>>2];_=+g[fa+(ga<<7)+36>>2];t=+g[fa+(ga<<7)+40>>2];U=+g[fa+(ga<<7)+44>>2];W=_+Z*(+g[fa+(ga<<7)+84>>2]-_);_=t+$*(+g[fa+(ga<<7)+88>>2]-t);t=U+V*(+g[fa+(ga<<7)+92>>2]-U);U=+g[fa+(ga<<7)+48>>2];I=+g[fa+(ga<<7)+52>>2];T=+g[fa+(ga<<7)+56>>2];aa=+g[fa+(ga<<7)+60>>2];ka=U+Y*(+g[fa+(ga<<7)+96>>2]-U);U=I+Z*(+g[fa+(ga<<7)+100>>2]-I);I=T+$*(+g[fa+(ga<<7)+104>>2]-T);T=aa+V*(+g[fa+(ga<<7)+108>>2]-aa);aa=+g[fa+(ga<<7)+64>>2];pa=+g[fa+(ga<<7)+68>>2];qa=+g[fa+(ga<<7)+72>>2];ra=+g[fa+(ga<<7)+76>>2];sa=aa+Y*(+g[fa+(ga<<7)+112>>2]-aa);aa=pa+Z*(+g[fa+(ga<<7)+116>>2]-pa);pa=qa+$*(+g[fa+(ga<<7)+120>>2]-qa);qa=ra+V*(+g[fa+(ga<<7)+124>>2]-ra);g[q+(ga*160|0)>>2]=oa+Y*(+g[fa+(ga<<7)+80>>2]-oa);g[q+(ga*160|0)+4>>2]=W;g[q+(ga*160|0)+8>>2]=_;g[q+(ga*160|0)+12>>2]=t;g[q+(ga*160|0)+16>>2]=ka;g[q+(ga*160|0)+20>>2]=U;g[q+(ga*160|0)+24>>2]=I;g[q+(ga*160|0)+28>>2]=T;g[q+(ga*160|0)+32>>2]=sa;g[q+(ga*160|0)+36>>2]=aa;g[q+(ga*160|0)+40>>2]=pa;g[q+(ga*160|0)+44>>2]=qa;qa=+g[ca+(ga*160|0)+32>>2];pa=+g[ca+(ga*160|0)+36>>2];aa=+g[ca+(ga*160|0)+40>>2];sa=+g[ca+(ga*160|0)+44>>2];T=qa+v*(+g[ca+(ga*160|0)+96>>2]-qa);qa=pa+ha*(+g[ca+(ga*160|0)+100>>2]-pa);pa=aa+ia*(+g[ca+(ga*160|0)+104>>2]-aa);aa=sa+ja*(+g[ca+(ga*160|0)+108>>2]-sa);sa=+g[ca+(ga*160|0)+48>>2];I=+g[ca+(ga*160|0)+52>>2];U=+g[ca+(ga*160|0)+56>>2];ka=+g[ca+(ga*160|0)+60>>2];t=sa+v*(+g[ca+(ga*160|0)+112>>2]-sa);sa=I+ha*(+g[ca+(ga*160|0)+116>>2]-I);I=U+ia*(+g[ca+(ga*160|0)+120>>2]-U);U=ka+ja*(+g[ca+(ga*160|0)+124>>2]-ka);ka=+g[ca+(ga*160|0)+64>>2];_=+g[ca+(ga*160|0)+68>>2];W=+g[ca+(ga*160|0)+72>>2];oa=+g[ca+(ga*160|0)+76>>2];Y=ka+v*(+g[ca+(ga*160|0)+128>>2]-ka);ka=_+ha*(+g[ca+(ga*160|0)+132>>2]-_);_=W+ia*(+g[ca+(ga*160|0)+136>>2]-W);W=oa+ja*(+g[ca+(ga*160|0)+140>>2]-oa);oa=+g[ca+(ga*160|0)+80>>2];ra=+g[ca+(ga*160|0)+84>>2];V=+g[ca+(ga*160|0)+88>>2];$=+g[ca+(ga*160|0)+92>>2];Z=oa+v*(+g[ca+(ga*160|0)+144>>2]-oa);oa=ra+ha*(+g[ca+(ga*160|0)+148>>2]-ra);ra=V+ia*(+g[ca+(ga*160|0)+152>>2]-V);V=$+ja*(+g[ca+(ga*160|0)+156>>2]-$);$=T*T+t*t+Y*Y+Z*Z;ja=qa*qa+sa*sa+ka*ka+oa*oa;ia=pa*pa+I*I+_*_+ra*ra;ha=aa*aa+U*U+W*W+V*V;v=(c[k>>2]=1597463007-(((g[k>>2]=$,c[k>>2]|0)|0)/2|0),+g[k>>2]);ta=$*.5;$=v*(1.5-v*ta*v);v=$*(1.5-$*ta*$);$=(c[k>>2]=1597463007-(((g[k>>2]=ja,c[k>>2]|0)|0)/2|0),+g[k>>2]);ta=ja*.5;ja=$*(1.5-$*ta*$);$=ja*(1.5-ja*ta*ja);ja=(c[k>>2]=1597463007-(((g[k>>2]=ia,c[k>>2]|0)|0)/2|0),+g[k>>2]);ta=ia*.5;ia=ja*(1.5-ja*ta*ja);ja=ia*(1.5-ia*ta*ia);ia=(c[k>>2]=1597463007-(((g[k>>2]=ha,c[k>>2]|0)|0)/2|0),+g[k>>2]);ta=ha*.5;ha=ia*(1.5-ia*ta*ia);ia=ha*(1.5-ha*ta*ha);g[q+(ga*160|0)+48>>2]=T*v;g[q+(ga*160|0)+52>>2]=qa*$;g[q+(ga*160|0)+56>>2]=pa*ja;g[q+(ga*160|0)+60>>2]=aa*ia;g[q+(ga*160|0)+64>>2]=t*v;g[q+(ga*160|0)+68>>2]=sa*$;g[q+(ga*160|0)+72>>2]=I*ja;g[q+(ga*160|0)+76>>2]=U*ia;g[q+(ga*160|0)+80>>2]=Y*v;g[q+(ga*160|0)+84>>2]=ka*$;g[q+(ga*160|0)+88>>2]=_*ja;g[q+(ga*160|0)+92>>2]=W*ia;g[q+(ga*160|0)+96>>2]=Z*v;g[q+(ga*160|0)+100>>2]=oa*$;g[q+(ga*160|0)+104>>2]=ra*ja;g[q+(ga*160|0)+108>>2]=V*ia;ia=+g[n+(ga<<7)+32>>2];V=+g[n+(ga<<7)+36>>2];ja=+g[n+(ga<<7)+40>>2];ra=+g[n+(ga<<7)+44>>2];$=V+la*(+g[n+(ga<<7)+84>>2]-V);V=ja+ma*(+g[n+(ga<<7)+88>>2]-ja);ja=ra+na*(+g[n+(ga<<7)+92>>2]-ra);ra=+g[n+(ga<<7)+48>>2];oa=+g[n+(ga<<7)+52>>2];v=+g[n+(ga<<7)+56>>2];Z=+g[n+(ga<<7)+60>>2];W=ra+X*(+g[n+(ga<<7)+96>>2]-ra);ra=oa+la*(+g[n+(ga<<7)+100>>2]-oa);oa=v+ma*(+g[n+(ga<<7)+104>>2]-v);v=Z+na*(+g[n+(ga<<7)+108>>2]-Z);Z=+g[n+(ga<<7)+64>>2];_=+g[n+(ga<<7)+68>>2];ka=+g[n+(ga<<7)+72>>2];Y=+g[n+(ga<<7)+76>>2];U=Z+X*(+g[n+(ga<<7)+112>>2]-Z);Z=_+la*(+g[n+(ga<<7)+116>>2]-_);_=ka+ma*(+g[n+(ga<<7)+120>>2]-ka);ka=Y+na*(+g[n+(ga<<7)+124>>2]-Y);g[q+(ga*160|0)+112>>2]=ia+X*(+g[n+(ga<<7)+80>>2]-ia);g[q+(ga*160|0)+116>>2]=$;g[q+(ga*160|0)+120>>2]=V;g[q+(ga*160|0)+124>>2]=ja;g[q+(ga*160|0)+128>>2]=W;g[q+(ga*160|0)+132>>2]=ra;g[q+(ga*160|0)+136>>2]=oa;g[q+(ga*160|0)+140>>2]=v;g[q+(ga*160|0)+144>>2]=U;g[q+(ga*160|0)+148>>2]=Z;g[q+(ga*160|0)+152>>2]=_;g[q+(ga*160|0)+156>>2]=ka;f=ga+1|0;if((f|0)==(s|0)){m=1;break}else{ga=f}}i=h;return m|0}function dk(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;d=i;c[a>>2]=0;g[a+4>>2]=0.0;e=a+8|0;f=(b+3|0)/4|0;c[e>>2]=f;b=a+12|0;h=a+16|0;j=a+20|0;k=a+24|0;l=a+28|0;m=a+32|0;n=a+48|0;o=a+52|0;p=a+56|0;a=(f+7|0)/8|0;q=f<<5;r=f<<8;f=r+(a*3|0)+r|0;r=b+0|0;s=r+48|0;do{c[r>>2]=0;r=r+4|0}while((r|0)<(s|0));r=Hl()|0;s=Sg[c[(c[r>>2]|0)+8>>2]&31](r,f,128)|0;c[b>>2]=s;b=c[e>>2]|0;e=b<<7;c[h>>2]=s+e;h=(b*160|0)+e|0;c[j>>2]=s+h;j=h+e|0;c[k>>2]=s+j;k=j+q|0;c[l>>2]=s+k;l=k+q|0;c[m>>2]=s+l;m=l+q|0;c[n>>2]=s+m;n=m+a|0;c[o>>2]=s+n;c[p>>2]=s+(n+a);i=d;return}function ek(a){a=a|0;var b=0,d=0;b=i;d=Hl()|0;Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[a+12>>2]|0);i=b;return}function fk(a){a=a|0;var b=0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;i=b;return}function gk(a){a=a|0;var b=0,d=0,e=0;b=i;d=Hl()|0;Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[a>>2]|0);c[a>>2]=0;e=a+4|0;Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[e>>2]|0);c[e>>2]=0;e=a+8|0;Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[e>>2]|0);c[e>>2]=0;c[a+12>>2]=0;i=b;return}function hk(a,b){a=a|0;b=b|0;var d=0,e=0;d=c[b+4>>2]|0;e=d+((((c[b+12>>2]|0)+3|0)/4|0)*160|0)|0;c[a>>2]=d;c[a+4>>2]=e;return}function ik(e,f,g){e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;g=i;i=i+16|0;h=g;j=Hl()|0;Lg[c[(c[j>>2]|0)+12>>2]&127](j,c[e>>2]|0);c[e>>2]=0;k=e+4|0;Lg[c[(c[j>>2]|0)+12>>2]&127](j,c[k>>2]|0);c[k>>2]=0;l=e+8|0;Lg[c[(c[j>>2]|0)+12>>2]&127](j,c[l>>2]|0);c[l>>2]=0;j=e+12|0;c[j>>2]=0;m=c[f>>2]|0;Sg[c[(c[m>>2]|0)+4>>2]&31](m,h,4)|0;m=f+4|0;n=c[h>>2]|0;if((a[m]|0)==0){o=n}else{o=od(n|0)|0}c[j>>2]=o;if((o|0)==0){i=g;return}o=c[f>>2]|0;Sg[c[(c[o>>2]|0)+4>>2]&31](o,h,4)|0;o=c[h>>2]|0;if((a[m]|0)==0){p=o}else{p=od(o|0)|0}o=(c[j>>2]<<2)+p|0;n=Hl()|0;q=Sg[c[(c[n>>2]|0)+8>>2]&31](n,o<<2,4)|0;c[l>>2]=q;o=q+(c[j>>2]<<2)|0;q=c[f>>2]|0;Sg[c[(c[q>>2]|0)+4>>2]&31](q,o,p)|0;p=c[j>>2]|0;if((p|0)>0){q=c[l>>2]|0;n=o;o=0;do{c[q+(o<<2)>>2]=n;q=c[l>>2]|0;n=n+((Rv(c[q+(o<<2)>>2]|0)|0)+1)|0;o=o+1|0}while((o|0)<(p|0))}p=Hl()|0;o=Sg[c[(c[p>>2]|0)+8>>2]&31](p,c[j>>2]<<1,2)|0;c[e>>2]=o;e=c[j>>2]|0;p=c[f>>2]|0;Sg[c[(c[p>>2]|0)+4>>2]&31](p,h,4)|0;if((e|0)!=0){p=0;do{q=c[f>>2]|0;Sg[c[(c[q>>2]|0)+4>>2]&31](q,h,2)|0;q=b[h>>1]|0;if((a[m]|0)==0){r=q}else{r=De(q|0)|0}q=o+(p<<1)|0;b[q>>1]=b[q>>1]&-1024|r&1023;n=c[f>>2]|0;Sg[c[(c[n>>2]|0)+4>>2]&31](n,h,1)|0;b[q>>1]=b[q>>1]&-1025|d[h]<<10&65535;p=p+1|0}while((p|0)!=(e|0))}e=Hl()|0;p=Sg[c[(c[e>>2]|0)+8>>2]&31](e,(((c[j>>2]|0)+3|0)/4|0)*160|0,32)|0;c[k>>2]=p;Fl(f,p,((c[j>>2]|0)+3|0)/4|0,0);i=g;return}function jk(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;f=i;i=i+2048|0;g=f;h=c[a+12>>2]|0;j=c[a>>2]|0;a=e+2048|0;c[a>>2]=0;if((h|0)==0|(d|0)<0){i=f;return}if((h|0)<=(d|0)&(d|0)!=1023){i=f;return}if((d|0)==1023){if((h|0)>1){k=(((b[j+2>>1]^b[j>>1])&1023)==0)<<15&65535}else{k=0}}else{k=d&32767}b[g>>1]=k;k=0;d=1;a:while(1){l=b[g+(d+ -1<<1)>>1]&32767;c[a>>2]=k+1;b[e+(k<<1)>>1]=l;m=l&65535;b:do{if((b[j+(m<<1)>>1]&1024)==0?(n=m+1|0,o=n&65535,(o|0)<(h|0)):0){p=o;o=n&65535;while(1){q=b[j+(p<<1)>>1]|0;n=o+1<<16>>16;if(l<<16>>16==(q&1023)){break}r=n&65535;if((r|0)<(h|0)){p=r;o=n}else{s=d;t=18;break b}}n=p+1|0;if((n|0)<(h|0)){u=(((b[j+(n<<1)>>1]^q)&1023)==0)<<15&65535}else{u=0}b[g+(d<<1)>>1]=u|o&32767;v=d+1|0}else{s=d;t=18}}while(0);if((t|0)==18){while(1){t=0;if((s|0)==0){t=23;break a}l=s+ -1|0;w=g+(l<<1)|0;x=b[w>>1]|0;if(x<<16>>16>-1){s=l;t=18}else{break}}l=x+1<<16>>16&32767;b[w>>1]=l|x&-32768;m=l&65535;n=m+1|0;if((n|0)<(h|0)){y=(((b[j+(n<<1)>>1]^b[j+(m<<1)>>1])&1023)==0)<<15&65535}else{y=0}b[w>>1]=l|y;v=s}if((v|0)==0){t=23;break}k=c[a>>2]|0;d=v}if((t|0)==23){i=f;return}}function kk(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;lk(a,b,c,d,e,f);i=g;return}function lk(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0;j=i;i=i+16|0;k=j;c[b+4>>2]=(d|0)!=0?d:14560;c[b+8>>2]=(e|0)!=0?e:14568;a[b+12|0]=g&1;a[b+13|0]=0;c[b+16>>2]=h;h=f&1;a[b+20|0]=h;a[b+21|0]=h;c[b>>2]=14392;h=c[4172]|0;if((h|0)==0){c[16824>>2]=0;c[16828>>2]=0;c[16832>>2]=14560;c[16836>>2]=14561;c[16840>>2]=14560;c[16856>>2]=14576;c[16860>>2]=14584;a[16864|0]=0;a[16865|0]=0;c[16868>>2]=23;c[16852>>2]=14528;a[16872|0]=0;a[16873|0]=0;c[16880>>2]=14616;c[16884>>2]=14624;a[16888|0]=0;a[16889|0]=0;c[16892>>2]=23;c[16876>>2]=14528;a[16896|0]=0;a[16897|0]=0;c[16844>>2]=15648;c[16848>>2]=15624;mk(16696,16852|0)|0;mk(16696,16876|0)|0;c[16828>>2]=c[16824>>2];c[4172]=16696;l=16696}else{l=h}if(mk(l,b)|0){i=j;return}b=Vh(Vh(17504,14424)|0,d)|0;ln(k,b+(c[(c[b>>2]|0)+ -12>>2]|0)|0);d=ws(k,22144)|0;l=ch[c[(c[d>>2]|0)+28>>2]&31](d,10)|0;vs(k);go(b,l)|0;Tn(b)|0;i=j;return}function mk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;e=i;i=i+16|0;f=e;if((d|0)==0){g=0;i=e;return g|0}h=b+128|0;j=c[h>>2]|0;if((j|0)==32){g=0;i=e;return g|0}k=b+(j<<2)|0;if((j|0)!=0){l=b;m=0;do{m=((c[l>>2]|0)==(d|0))+m|0;l=l+4|0}while((l|0)!=(k|0));if((m|0)!=0){g=0;i=e;return g|0}}m=d+4|0;k=c[m>>2]|0;if((a[k]|0)==0){l=Vh(17504,15544)|0;ln(f,l+(c[(c[l>>2]|0)+ -12>>2]|0)|0);n=ws(f,22144)|0;o=ch[c[(c[n>>2]|0)+28>>2]&31](n,10)|0;vs(f);go(l,o)|0;Tn(l)|0;g=0;i=e;return g|0}a:do{if((j|0)>0){l=k;o=0;while(1){n=c[(c[b+(o<<2)>>2]|0)+4>>2]|0;p=l;while(1){q=(Tv(a[n]|0)|0)&255;r=(Tv(a[p]|0)|0)&255;if((q|0)==0){s=0;break}if((q|0)==(r|0)){n=n+1|0;p=p+1|0}else{s=q;break}}p=o+1|0;if((s|0)==(r|0)){break}n=c[h>>2]|0;if((p|0)>=(n|0)){t=n;break a}l=c[m>>2]|0;o=p}o=Vh(17504,15584)|0;l=Vh(Vh(o,c[m>>2]|0)|0,15600)|0;ln(f,l+(c[(c[l>>2]|0)+ -12>>2]|0)|0);o=ws(f,22144)|0;p=ch[c[(c[o>>2]|0)+28>>2]&31](o,10)|0;vs(f);go(l,p)|0;Tn(l)|0;g=0;i=e;return g|0}else{t=j}}while(0);c[h>>2]=t+1;c[b+(t<<2)>>2]=d;d=c[h>>2]|0;h=b+(d<<2)|0;t=d+ -1|0;d=b+(t<<2)|0;c[f>>2]=24;j=t<<2>>2;t=(j|0)>1?1:j;b:do{if((t|0)>8){m=t;while(1){r=tv(m<<2,34416)|0;if((r|0)!=0){u=m;v=r;break b}if((m|0)>1){m=(m|0)/2|0}else{u=0;v=r;break}}}else{u=0;v=0}}while(0);Uk(b,d,h,f,j,1,v,u);if((v|0)==0){g=1;i=e;return g|0}vv(v);g=1;i=e;return g|0}function nk(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;b=i;c[a>>2]=14392;d=c[4172]|0;a:do{if((d|0)!=0){e=d+128|0;f=c[e>>2]|0;g=d+(f<<2)|0;b:do{if((f|0)==0){h=d}else{j=d;while(1){k=j+4|0;if((c[j>>2]|0)==(a|0)){h=j;break b}if((k|0)==(g|0)){break a}else{j=k}}}}while(0);if((h|0)!=(g|0)){j=h;k=h;c:while(1){l=k;do{l=l+4|0;if((l|0)==(g|0)){break c}m=c[l>>2]|0}while((m|0)==(a|0));c[j>>2]=m;j=j+4|0;k=l}if((j|0)!=(g|0)){c[e>>2]=f+ -1}}}}while(0);vv(a);i=b;return}function ok(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;b=i;c[a>>2]=14392;d=c[4172]|0;if((d|0)==0){i=b;return}e=d+128|0;f=c[e>>2]|0;g=d+(f<<2)|0;a:do{if((f|0)==0){h=d}else{j=d;while(1){k=j+4|0;if((c[j>>2]|0)==(a|0)){h=j;break a}if((k|0)==(g|0)){break}else{j=k}}i=b;return}}while(0);if((h|0)==(g|0)){i=b;return}else{l=h;m=h}b:while(1){h=m;do{h=h+4|0;if((h|0)==(g|0)){break b}n=c[h>>2]|0}while((n|0)==(a|0));c[l>>2]=n;l=l+4|0;m=h}if((l|0)==(g|0)){i=b;return}c[e>>2]=f+ -1;i=b;return}function pk(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;qk(a,b,c,d,e,f);i=g;return}function qk(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0;j=i;i=i+16|0;k=j;c[b+4>>2]=(d|0)!=0?d:14560;c[b+8>>2]=(e|0)!=0?e:14568;a[b+12|0]=g&1;a[b+13|0]=0;c[b+16>>2]=h;c[b+20>>2]=f;c[b+24>>2]=f;c[b>>2]=14464;f=c[4172]|0;if((f|0)==0){c[16824>>2]=0;c[16828>>2]=0;c[16832>>2]=14560;c[16836>>2]=14561;c[16840>>2]=14560;c[16856>>2]=14576;c[16860>>2]=14584;a[16864|0]=0;a[16865|0]=0;c[16868>>2]=23;c[16852>>2]=14528;a[16872|0]=0;a[16873|0]=0;c[16880>>2]=14616;c[16884>>2]=14624;a[16888|0]=0;a[16889|0]=0;c[16892>>2]=23;c[16876>>2]=14528;a[16896|0]=0;a[16897|0]=0;c[16844>>2]=15648;c[16848>>2]=15624;mk(16696,16852|0)|0;mk(16696,16876|0)|0;c[16828>>2]=c[16824>>2];c[4172]=16696;l=16696}else{l=f}if(mk(l,b)|0){i=j;return}b=Vh(Vh(17504,14424)|0,d)|0;ln(k,b+(c[(c[b>>2]|0)+ -12>>2]|0)|0);d=ws(k,22144)|0;l=ch[c[(c[d>>2]|0)+28>>2]&31](d,10)|0;vs(k);go(b,l)|0;Tn(b)|0;i=j;return}function rk(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;b=i;c[a>>2]=14464;d=c[4172]|0;a:do{if((d|0)!=0){e=d+128|0;f=c[e>>2]|0;g=d+(f<<2)|0;b:do{if((f|0)==0){h=d}else{j=d;while(1){k=j+4|0;if((c[j>>2]|0)==(a|0)){h=j;break b}if((k|0)==(g|0)){break a}else{j=k}}}}while(0);if((h|0)!=(g|0)){j=h;k=h;c:while(1){l=k;do{l=l+4|0;if((l|0)==(g|0)){break c}m=c[l>>2]|0}while((m|0)==(a|0));c[j>>2]=m;j=j+4|0;k=l}if((j|0)!=(g|0)){c[e>>2]=f+ -1}}}}while(0);vv(a);i=b;return}function sk(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;b=i;c[a>>2]=14464;d=c[4172]|0;if((d|0)==0){i=b;return}e=d+128|0;f=c[e>>2]|0;g=d+(f<<2)|0;a:do{if((f|0)==0){h=d}else{j=d;while(1){k=j+4|0;if((c[j>>2]|0)==(a|0)){h=j;break a}if((k|0)==(g|0)){break}else{j=k}}i=b;return}}while(0);if((h|0)==(g|0)){i=b;return}else{l=h;m=h}b:while(1){h=m;do{h=h+4|0;if((h|0)==(g|0)){break b}n=c[h>>2]|0}while((n|0)==(a|0));c[l>>2]=n;l=l+4|0;m=h}if((l|0)==(g|0)){i=b;return}c[e>>2]=f+ -1;i=b;return}function tk(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;uk(a,b,c,d,e,f);i=g;return}function uk(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0;j=i;i=i+16|0;k=j;c[b+4>>2]=(d|0)!=0?d:14560;c[b+8>>2]=(e|0)!=0?e:14568;a[b+12|0]=g&1;a[b+13|0]=0;c[b+16>>2]=h;c[b+20>>2]=f;c[b+24>>2]=f;c[b>>2]=14496;f=c[4172]|0;if((f|0)==0){c[16824>>2]=0;c[16828>>2]=0;c[16832>>2]=14560;c[16836>>2]=14561;c[16840>>2]=14560;c[16856>>2]=14576;c[16860>>2]=14584;a[16864|0]=0;a[16865|0]=0;c[16868>>2]=23;c[16852>>2]=14528;a[16872|0]=0;a[16873|0]=0;c[16880>>2]=14616;c[16884>>2]=14624;a[16888|0]=0;a[16889|0]=0;c[16892>>2]=23;c[16876>>2]=14528;a[16896|0]=0;a[16897|0]=0;c[16844>>2]=15648;c[16848>>2]=15624;mk(16696,16852|0)|0;mk(16696,16876|0)|0;c[16828>>2]=c[16824>>2];c[4172]=16696;l=16696}else{l=f}if(mk(l,b)|0){i=j;return}b=Vh(Vh(17504,14424)|0,d)|0;ln(k,b+(c[(c[b>>2]|0)+ -12>>2]|0)|0);d=ws(k,22144)|0;l=ch[c[(c[d>>2]|0)+28>>2]&31](d,10)|0;vs(k);go(b,l)|0;Tn(b)|0;i=j;return}function vk(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;b=i;c[a>>2]=14496;d=c[4172]|0;a:do{if((d|0)!=0){e=d+128|0;f=c[e>>2]|0;g=d+(f<<2)|0;b:do{if((f|0)==0){h=d}else{j=d;while(1){k=j+4|0;if((c[j>>2]|0)==(a|0)){h=j;break b}if((k|0)==(g|0)){break a}else{j=k}}}}while(0);if((h|0)!=(g|0)){j=h;k=h;c:while(1){l=k;do{l=l+4|0;if((l|0)==(g|0)){break c}m=c[l>>2]|0}while((m|0)==(a|0));c[j>>2]=m;j=j+4|0;k=l}if((j|0)!=(g|0)){c[e>>2]=f+ -1}}}}while(0);vv(a);i=b;return}function wk(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;b=i;c[a>>2]=14496;d=c[4172]|0;if((d|0)==0){i=b;return}e=d+128|0;f=c[e>>2]|0;g=d+(f<<2)|0;a:do{if((f|0)==0){h=d}else{j=d;while(1){k=j+4|0;if((c[j>>2]|0)==(a|0)){h=j;break a}if((k|0)==(g|0)){break}else{j=k}}i=b;return}}while(0);if((h|0)==(g|0)){i=b;return}else{l=h;m=h}b:while(1){h=m;do{h=h+4|0;if((h|0)==(g|0)){break b}n=c[h>>2]|0}while((n|0)==(a|0));c[l>>2]=n;l=l+4|0;m=h}if((l|0)==(g|0)){i=b;return}c[e>>2]=f+ -1;i=b;return}function xk(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function yk(a){a=a|0;return}function zk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;e=i;f=c[b+4>>2]|0;g=Rv(f|0)|0;h=d;j=2;k=14640;while(1){l=(Tv(a[h]|0)|0)&255;j=j+ -1|0;m=(l|0)==((Tv(a[k]|0)|0)&255|0);if(!((l|0)!=0&(j|0)!=0&m)){break}else{h=h+1|0;k=k+1|0}}k=b+21|0;do{if(m){if((g|0)!=0){b=d+2|0;h=g;j=f;while(1){l=(Tv(a[b]|0)|0)&255;h=h+ -1|0;n=(l|0)==((Tv(a[j]|0)|0)&255|0);if(!((l|0)!=0&(h|0)!=0&n)){break}else{b=b+1|0;j=j+1|0}}if(!n){break}}j=d+(g+2)|0;if((j|0)!=0){b=a[j]|0;if(b<<24>>24==61){h=j;while(1){o=h+1|0;if((ad(a[o]|0)|0)==0){p=0;break}else{h=o}}while(1){h=o;j=c[16600+(p<<2)>>2]|0;while(1){l=(Tv(a[h]|0)|0)&255;q=(Tv(a[j]|0)|0)&255;if((l|0)==0){r=0;break}if((l|0)==(q|0)){h=h+1|0;j=j+1|0}else{r=l;break}}j=p+1|0;if((r|0)==(q|0)){s=27;break}if(j>>>0<5){p=j}else{t=0;break}}if((s|0)==27){a[k]=1;u=1;i=e;return u|0}while(1){j=o;h=c[16664+(t<<2)>>2]|0;while(1){l=(Tv(a[j]|0)|0)&255;v=(Tv(a[h]|0)|0)&255;if((l|0)==0){w=0;break}if((l|0)==(v|0)){j=j+1|0;h=h+1|0}else{w=l;break}}h=t+1|0;if((w|0)==(v|0)){break}if(h>>>0<5){t=h}else{u=0;s=34;break}}if((s|0)==34){i=e;return u|0}a[k]=0;u=1;i=e;return u|0}else if(b<<24>>24==0){a[k]=1;u=1;i=e;return u|0}else{u=0;i=e;return u|0}}}}while(0);s=Rv(f|0)|0;t=d;v=4;w=16552;while(1){o=(Tv(a[t]|0)|0)&255;v=v+ -1|0;x=(o|0)==((Tv(a[w]|0)|0)&255|0);if(!((o|0)!=0&(v|0)!=0&x)){break}else{t=t+1|0;w=w+1|0}}if(!x){u=0;i=e;return u|0}if((s|0)!=0){x=d+4|0;w=s;t=f;while(1){f=(Tv(a[x]|0)|0)&255;w=w+ -1|0;y=(f|0)==((Tv(a[t]|0)|0)&255|0);if(!((f|0)!=0&(w|0)!=0&y)){break}else{x=x+1|0;t=t+1|0}}if(!y){u=0;i=e;return u|0}}y=d+(s+4)|0;if((y|0)==0){u=0;i=e;return u|0}if((a[y]|0)!=0){u=0;i=e;return u|0}a[k]=0;u=1;i=e;return u|0}function Ak(b){b=b|0;a[b+21|0]=a[b+20|0]|0;return}function Bk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;i=i+160|0;f=e+144|0;g=e;h=g+64|0;j=g+8|0;c[j>>2]=16128;k=g+12|0;c[g>>2]=16260;c[h>>2]=16280;c[g+4>>2]=0;l=g+64|0;mn(l,k);c[g+136>>2]=0;c[g+140>>2]=-1;c[g>>2]=16108;c[h>>2]=16148;c[j>>2]=16128;c[k>>2]=19336;h=g+16|0;ts(h);m=g+20|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[m+16>>2]=0;c[m+20>>2]=0;c[k>>2]=16296;m=g+44|0;n=g+60|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[n>>2]=24;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;il(k,f);if(!((a[f]&1)==0)){vv(c[f+8>>2]|0)}f=Vh(g+8|0,14552)|0;n=f+((c[(c[f>>2]|0)+ -12>>2]|0)+4)|0;c[n>>2]=c[n>>2]|1;Vh(eo(f,(a[d+20|0]|0)!=0)|0,14552)|0;Xk(b,k);c[g>>2]=16108;c[g+64>>2]=16148;c[j>>2]=16128;j=g+12|0;c[j>>2]=16296;if((a[m]&1)==0){c[j>>2]=19336;vs(h);kn(l);i=e;return}vv(c[g+52>>2]|0);c[j>>2]=19336;vs(h);kn(l);i=e;return}function Ck(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=16108;c[b+64>>2]=16148;c[b+8>>2]=16128;e=b+12|0;c[e>>2]=16296;if(!((a[b+44|0]&1)==0)){vv(c[b+52>>2]|0)}c[e>>2]=19336;vs(b+16|0);kn(b+64|0);i=d;return}function Dk(a){a=a|0;return 16544}function Ek(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;i=i+16|0;f=e;g=c[b+4>>2]|0;h=Rv(g|0)|0;j=d;k=2;l=14640;while(1){m=(Tv(a[j]|0)|0)&255;k=k+ -1|0;n=(m|0)==((Tv(a[l]|0)|0)&255|0);if(!((m|0)!=0&(k|0)!=0&n)){break}else{j=j+1|0;l=l+1|0}}l=b+24|0;if(!n){o=0;i=e;return o|0}if((h|0)!=0){n=d+2|0;b=h;j=g;while(1){g=(Tv(a[n]|0)|0)&255;b=b+ -1|0;p=(g|0)==((Tv(a[j]|0)|0)&255|0);if(!((g|0)!=0&(b|0)!=0&p)){break}else{n=n+1|0;j=j+1|0}}if(!p){o=0;i=e;return o|0}}p=d+(h+2)|0;if((p|0)==0){o=0;i=e;return o|0}if((a[p]|0)==61){q=p}else{o=0;i=e;return o|0}do{q=q+1|0}while((ad(a[q]|0)|0)!=0);p=Ec(q|0,f|0,10)|0;h=c[f>>2]|0;if((h|0)==(q|0)){o=0;i=e;return o|0}if((a[h]|0)!=0){o=0;i=e;return o|0}c[l>>2]=p;o=1;i=e;return o|0}function Fk(a){a=a|0;c[a+24>>2]=c[a+20>>2];return}function Gk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;i=i+160|0;f=e+144|0;g=e;h=g+64|0;j=g+8|0;c[j>>2]=16128;k=g+12|0;c[g>>2]=16260;c[h>>2]=16280;c[g+4>>2]=0;l=g+64|0;mn(l,k);c[g+136>>2]=0;c[g+140>>2]=-1;c[g>>2]=16108;c[h>>2]=16148;c[j>>2]=16128;c[k>>2]=19336;h=g+16|0;ts(h);m=g+20|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[m+16>>2]=0;c[m+20>>2]=0;c[k>>2]=16296;m=g+44|0;n=g+60|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[n>>2]=24;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;il(k,f);if(!((a[f]&1)==0)){vv(c[f+8>>2]|0)}f=Vh(g+8|0,14552)|0;n=f+((c[(c[f>>2]|0)+ -12>>2]|0)+4)|0;c[n>>2]=c[n>>2]|1;Vh(fo(f,c[d+20>>2]|0)|0,14552)|0;Xk(b,k);c[g>>2]=16108;c[g+64>>2]=16148;c[j>>2]=16128;j=g+12|0;c[j>>2]=16296;if((a[m]&1)==0){c[j>>2]=19336;vs(h);kn(l);i=e;return}vv(c[g+52>>2]|0);c[j>>2]=19336;vs(h);kn(l);i=e;return}function Hk(a){a=a|0;return 16536}function Ik(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;e=i;f=c[b+4>>2]|0;g=Rv(f|0)|0;h=d;j=2;k=14640;while(1){l=(Tv(a[h]|0)|0)&255;j=j+ -1|0;m=(l|0)==((Tv(a[k]|0)|0)&255|0);if(!((l|0)!=0&(j|0)!=0&m)){break}else{h=h+1|0;k=k+1|0}}k=b+24|0;if(!m){n=0;i=e;return n|0}if((g|0)!=0){m=d+2|0;b=g;h=f;while(1){f=(Tv(a[m]|0)|0)&255;b=b+ -1|0;o=(f|0)==((Tv(a[h]|0)|0)&255|0);if(!((f|0)!=0&(b|0)!=0&o)){break}else{m=m+1|0;h=h+1|0}}if(!o){n=0;i=e;return n|0}}o=d+(g+2)|0;if((o|0)==0){n=0;i=e;return n|0}if((a[o]|0)==61){p=o}else{n=0;i=e;return n|0}do{p=p+1|0}while((ad(a[p]|0)|0)!=0);c[k>>2]=p;n=1;i=e;return n|0}function Jk(a){a=a|0;c[a+24>>2]=c[a+20>>2];return}function Kk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;i=i+160|0;f=e+144|0;g=e;h=g+64|0;j=g+8|0;c[j>>2]=16128;k=g+12|0;c[g>>2]=16260;c[h>>2]=16280;c[g+4>>2]=0;l=g+64|0;mn(l,k);c[g+136>>2]=0;c[g+140>>2]=-1;c[g>>2]=16108;c[h>>2]=16148;c[j>>2]=16128;c[k>>2]=19336;h=g+16|0;ts(h);m=g+20|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[m+16>>2]=0;c[m+20>>2]=0;c[k>>2]=16296;m=g+44|0;n=g+60|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[n>>2]=24;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;il(k,f);if(!((a[f]&1)==0)){vv(c[f+8>>2]|0)}f=Vh(g+8|0,14552)|0;n=f+((c[(c[f>>2]|0)+ -12>>2]|0)+4)|0;c[n>>2]=c[n>>2]|1;Vh(Vh(f,c[d+20>>2]|0)|0,14552)|0;Xk(b,k);c[g>>2]=16108;c[g+64>>2]=16148;c[j>>2]=16128;j=g+12|0;c[j>>2]=16296;if((a[m]&1)==0){c[j>>2]=19336;vs(h);kn(l);i=e;return}vv(c[g+52>>2]|0);c[j>>2]=19336;vs(h);kn(l);i=e;return}function Lk(a){a=a|0;return 16528}function Mk(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;g=i;h=c[4172]|0;if((h|0)!=0){j=h;k=(f|0)!=0;l=k?f:15624;m=j+152|0;c[m>>2]=l;n=(e|0)!=0;o=n?e:15648;p=j+148|0;c[p>>2]=o;q=Nk(j,b,d)|0;i=g;return q|0}c[16824>>2]=0;c[16828>>2]=0;c[16832>>2]=14560;c[16836>>2]=14561;c[16840>>2]=14560;c[16856>>2]=14576;c[16860>>2]=14584;a[16864|0]=0;a[16865|0]=0;c[16868>>2]=23;c[16852>>2]=14528;a[16872|0]=0;a[16873|0]=0;c[16880>>2]=14616;c[16884>>2]=14624;a[16888|0]=0;a[16889|0]=0;c[16892>>2]=23;c[16876>>2]=14528;a[16896|0]=0;a[16897|0]=0;c[16844>>2]=15648;c[16848>>2]=15624;mk(16696,16852|0)|0;mk(16696,16876|0)|0;c[16828>>2]=c[16824>>2];c[4172]=16696;j=16696;k=(f|0)!=0;l=k?f:15624;m=j+152|0;c[m>>2]=l;n=(e|0)!=0;o=n?e:15648;p=j+148|0;c[p>>2]=o;q=Nk(j,b,d)|0;i=g;return q|0}function Nk(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;f=i;i=i+16|0;g=f;if((d|0)<1|(e|0)==0){h=2;i=f;return h|0}j=c[e>>2]|0;k=Mu(j,47)|0;l=Mu(j,92)|0;m=k>>>0<l>>>0?l:k;if((m|0)==0){c[b+136>>2]=14560;c[b+140>>2]=14561;c[b+144>>2]=c[e>>2]}else{k=m+1|0;c[b+136>>2]=j;c[b+140>>2]=k;c[b+144>>2]=k}k=d+ -1|0;a:do{if((k|0)>0){d=0;while(1){j=d+1|0;if((Lv(c[e+(j<<2)>>2]|0,14640)|0)==0){n=d;break a}if((j|0)<(k|0)){d=j}else{n=j;break}}}else{n=0}}while(0);k=b+128|0;d=c[k>>2]|0;if((d|0)>0){j=0;while(1){m=c[b+(j<<2)>>2]|0;a[m+13|0]=0;Kg[c[(c[m>>2]|0)+20>>2]&255](m);m=j+1|0;l=c[k>>2]|0;if((m|0)<(l|0)){j=m}else{o=l;break}}}else{o=d}b:do{if((n|0)>0){d=o;j=0;while(1){l=j+1|0;p=c[e+(l<<2)>>2]|0;c:do{if((d|0)>0){m=0;while(1){q=c[b+(m<<2)>>2]|0;if(ch[c[(c[q>>2]|0)+16>>2]&31](q,p)|0?(r=q+13|0,(a[r]|0)==0):0){break}q=m+1|0;s=c[k>>2]|0;if((q|0)<(s|0)){m=q}else{t=s;u=q;break c}}a[r]=1;t=c[k>>2]|0;u=m}else{t=d;u=0}}while(0);if((u|0)==(t|0)){break}if((l|0)<(n|0)){d=t;j=l}else{v=t;w=0;break b}}j=Vh(Vh(Vh(17416,14648)|0,p)|0,14680)|0;ln(g,j+(c[(c[j>>2]|0)+ -12>>2]|0)|0);d=ws(g,22144)|0;q=ch[c[(c[d>>2]|0)+28>>2]&31](d,10)|0;vs(g);go(j,q)|0;Tn(j)|0;v=c[k>>2]|0;w=2}else{v=o;w=0}}while(0);d:do{if((v|0)>0){o=0;while(1){x=b+(o<<2)|0;p=c[x>>2]|0;if((a[p+13|0]|0)==0?(a[p+12|0]|0)!=0:0){y=22;break}p=o+1|0;if((p|0)<(v|0)){o=p}else{z=v;A=w;break}}if((y|0)==22){o=Vh(17416,14688)|0;p=Vh(Vh(o,c[(c[x>>2]|0)+4>>2]|0)|0,14712)|0;ln(g,p+(c[(c[p>>2]|0)+ -12>>2]|0)|0);o=ws(g,22144)|0;t=ch[c[(c[o>>2]|0)+28>>2]&31](o,10)|0;vs(g);go(p,t)|0;Tn(p)|0;z=c[k>>2]|0;A=2}if((z|0)>0){p=z;t=0;while(1){o=c[b+(t<<2)>>2]|0;u=c[o+16>>2]|0;if((u|0)==0){B=p}else{if(!(ch[u&31](o,n)|0)){break d}B=c[k>>2]|0}o=t+1|0;if((o|0)<(B|0)){p=B;t=o}else{C=A;y=29;break}}}else{C=A;y=29}}else{C=w;y=29}}while(0);do{if((y|0)==29){if((C|0)==2){break}else if((C|0)!=0){h=C;i=f;return h|0}if((a[b+201|0]|0)!=0){Pk(b);h=1;i=f;return h|0}if((a[b+177|0]|0)==0){h=0;i=f;return h|0}w=Vh(17416,14736)|0;A=Vh(w,c[b+148>>2]|0)|0;ln(g,A+(c[(c[A>>2]|0)+ -12>>2]|0)|0);w=ws(g,22144)|0;B=ch[c[(c[w>>2]|0)+28>>2]&31](w,10)|0;vs(g);go(A,B)|0;Tn(A)|0;h=1;i=f;return h|0}}while(0);Pk(b);h=2;i=f;return h|0}function Ok(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;i=i+16|0;f=e;if((a[b+21|0]|0)==0|(d|0)==1){g=1;i=e;return g|0}d=Vh(17416,16440)|0;h=Vh(Vh(d,c[b+4>>2]|0)|0,16456)|0;ln(f,h+(c[(c[h>>2]|0)+ -12>>2]|0)|0);b=ws(f,22144)|0;d=ch[c[(c[b>>2]|0)+28>>2]&31](b,10)|0;vs(f);go(h,d)|0;Tn(h)|0;g=0;i=e;return g|0}function Pk(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;d=i;i=i+80|0;e=d+72|0;f=d;g=d+12|0;h=d+24|0;j=d+36|0;k=d+48|0;l=d+60|0;ln(e,17416+(c[(c[4354]|0)+ -12>>2]|0)|0);m=ws(e,22144)|0;n=ch[c[(c[m>>2]|0)+28>>2]&31](m,10)|0;vs(e);go(17416,n)|0;Tn(17416)|0;n=b+144|0;m=Vh(Vh(17416,c[n>>2]|0)|0,14752)|0;o=Vh(m,c[b+148>>2]|0)|0;ln(e,o+(c[(c[o>>2]|0)+ -12>>2]|0)|0);m=ws(e,22144)|0;p=ch[c[(c[m>>2]|0)+28>>2]&31](m,10)|0;vs(e);go(o,p)|0;Tn(o)|0;o=Vh(17416,c[b+152>>2]|0)|0;ln(e,o+(c[(c[o>>2]|0)+ -12>>2]|0)|0);p=ws(e,22144)|0;m=ch[c[(c[p>>2]|0)+28>>2]&31](p,10)|0;vs(e);go(o,m)|0;Tn(o)|0;ln(e,17416+(c[(c[4354]|0)+ -12>>2]|0)|0);o=ws(e,22144)|0;m=ch[c[(c[o>>2]|0)+28>>2]&31](o,10)|0;vs(e);go(17416,m)|0;Tn(17416)|0;m=Vh(17416,14768)|0;ln(e,m+(c[(c[m>>2]|0)+ -12>>2]|0)|0);o=ws(e,22144)|0;p=ch[c[(c[o>>2]|0)+28>>2]&31](o,10)|0;vs(e);go(m,p)|0;Tn(m)|0;Vh(17416,c[n>>2]|0)|0;n=b+128|0;if((c[n>>2]|0)>0){m=0;do{p=c[b+(m<<2)>>2]|0;Qk(17416,32)|0;o=p+12|0;if((a[o]|0)!=0){Qk(17416,91)|0}q=Vh(17416,14640)|0;Vh(q,c[p+4>>2]|0)|0;if((a[o]|0)!=0){Qk(17416,93)|0}m=m+1|0}while((m|0)<(c[n>>2]|0))}ln(e,17416+(c[(c[4354]|0)+ -12>>2]|0)|0);m=ws(e,22144)|0;o=ch[c[(c[m>>2]|0)+28>>2]&31](m,10)|0;vs(e);go(17416,o)|0;Tn(17416)|0;o=Vh(17416,14776)|0;ln(e,o+(c[(c[o>>2]|0)+ -12>>2]|0)|0);m=ws(e,22144)|0;p=ch[c[(c[m>>2]|0)+28>>2]&31](m,10)|0;vs(e);go(o,p)|0;Tn(o)|0;if((c[n>>2]|0)<=0){r=Vh(17416,14832)|0;s=c[r>>2]|0;t=s+ -12|0;u=c[t>>2]|0;v=r+u|0;ln(e,v);w=ws(e,22144)|0;x=c[w>>2]|0;y=x+28|0;z=c[y>>2]|0;A=ch[z&31](w,10)|0;vs(e);go(r,A)|0;Tn(r)|0;i=d;return}o=k+1|0;p=k+4|0;m=f+8|0;q=l+8|0;B=k+8|0;C=j+8|0;D=h+8|0;E=g+8|0;F=0;do{G=c[b+(F<<2)>>2]|0;a[k]=6;a[o+0|0]=a[14784|0]|0;a[o+1|0]=a[14785|0]|0;a[o+2|0]=a[14786|0]|0;a[p]=0;Rk(j,k,c[G+4>>2]|0);Rk(h,j,14792);Rk(g,h,Mg[c[(c[G>>2]|0)+4>>2]&127](G)|0);Rk(f,g,14800);if(!((a[g]&1)==0)){vv(c[E>>2]|0)}if(!((a[h]&1)==0)){vv(c[D>>2]|0)}if(!((a[j]&1)==0)){vv(c[C>>2]|0)}if(!((a[k]&1)==0)){vv(c[B>>2]|0)}H=(c[(c[4354]|0)+ -12>>2]|0)+17420|0;c[H>>2]=c[H>>2]|32;c[(c[(c[4354]|0)+ -12>>2]|0)+17428>>2]=28;H=Sk(17416,f)|0;I=H+((c[(c[H>>2]|0)+ -12>>2]|0)+4)|0;c[I>>2]=c[I>>2]&-33;I=Vh(Vh(H,c[G+8>>2]|0)|0,14808)|0;Lg[c[c[G>>2]>>2]&127](l,G);G=Vh(Sk(I,l)|0,14824)|0;ln(e,G+(c[(c[G>>2]|0)+ -12>>2]|0)|0);I=ws(e,22144)|0;H=ch[c[(c[I>>2]|0)+28>>2]&31](I,10)|0;vs(e);go(G,H)|0;Tn(G)|0;if(!((a[l]&1)==0)){vv(c[q>>2]|0)}if(!((a[f]&1)==0)){vv(c[m>>2]|0)}F=F+1|0}while((F|0)<(c[n>>2]|0));r=Vh(17416,14832)|0;s=c[r>>2]|0;t=s+ -12|0;u=c[t>>2]|0;v=r+u|0;ln(e,v);w=ws(e,22144)|0;x=c[w>>2]|0;y=x+28|0;z=c[y>>2]|0;A=ch[z&31](w,10)|0;vs(e);go(r,A)|0;Tn(r)|0;i=d;return}function Qk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;i=i+32|0;f=e+20|0;g=e+24|0;h=e+8|0;j=e+16|0;k=e;a[g]=d;a[h]=0;c[h+4>>2]=b;d=c[(c[b>>2]|0)+ -12>>2]|0;if((c[b+(d+16)>>2]|0)!=0){co(h);i=e;return b|0}l=c[b+(d+72)>>2]|0;if((l|0)==0){m=d}else{Tn(l)|0;m=c[(c[b>>2]|0)+ -12>>2]|0}a[h]=1;c[j>>2]=c[b+(m+24)>>2];l=b+m|0;d=c[b+(m+4)>>2]|0;n=g+1|0;o=b+(m+76)|0;m=c[o>>2]|0;if((m|0)==-1){ln(f,l);p=ws(f,22144)|0;q=ch[c[(c[p>>2]|0)+28>>2]&31](p,32)|0;vs(f);p=q<<24>>24;c[o>>2]=p;r=p}else{r=m}m=r&255;r=(d&176|0)==32?n:g;c[f+0>>2]=c[j+0>>2];gi(k,f,g,r,n,l,m);if((c[k>>2]|0)!=0){co(h);i=e;return b|0}k=c[(c[b>>2]|0)+ -12>>2]|0;jn(b+k|0,c[b+(k+16)>>2]|5);co(h);i=e;return b|0}function Rk(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;g=a[d]|0;if((g&1)==0){h=Rv(e|0)|0;j=(g&255)>>>1;k=d+1|0}else{g=c[d+4>>2]|0;l=Rv(e|0)|0;h=l;j=g;k=c[d+8>>2]|0}d=h+j|0;if(d>>>0>4294967279){Nm(0)}if(d>>>0<11){a[b]=j<<1;m=b+1|0}else{g=d+16&-16;d=sv(g)|0;c[b+8>>2]=d;c[b>>2]=g|1;c[b+4>>2]=j;m=d}Nv(m|0,k|0,j|0)|0;a[m+j|0]=0;Ym(b,e,h)|0;i=f;return}function Sk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;e=i;i=i+32|0;f=e+16|0;g=e;h=e+8|0;j=e+12|0;a[g]=0;c[g+4>>2]=b;k=c[(c[b>>2]|0)+ -12>>2]|0;if((c[b+(k+16)>>2]|0)!=0){co(g);i=e;return b|0}l=c[b+(k+72)>>2]|0;if((l|0)!=0){Tn(l)|0}a[g]=1;l=a[d]|0;k=(l&1)==0;if(k){m=(l&255)>>>1}else{m=c[d+4>>2]|0}l=c[(c[b>>2]|0)+ -12>>2]|0;c[h>>2]=c[b+(l+24)>>2];if(k){if((c[b+(l+4)>>2]&176|0)==32){n=d+m+1|0}else{n=d+1|0}o=d+1|0;p=d+1|0;q=n}else{n=c[d+8>>2]|0;if((c[b+(l+4)>>2]&176|0)==32){r=n+m|0}else{r=n}o=c[d+8>>2]|0;p=c[d+8>>2]|0;q=r}r=b+l|0;d=b+(l+76)|0;l=c[d>>2]|0;if((l|0)==-1){ln(f,r);n=ws(f,22144)|0;k=ch[c[(c[n>>2]|0)+28>>2]&31](n,32)|0;vs(f);n=k<<24>>24;c[d>>2]=n;s=r;t=n}else{s=r;t=l}l=t&255;t=o+m|0;c[f+0>>2]=c[h+0>>2];gi(j,f,p,q,t,s,l);if((c[j>>2]|0)!=0){co(g);i=e;return b|0}j=c[(c[b>>2]|0)+ -12>>2]|0;jn(b+j|0,c[b+(j+16)>>2]|5);co(g);i=e;return b|0}function Tk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;e=i;f=(a[d+12|0]|0)==0;if((a[b+12|0]|0)==0){if(!f){g=0;i=e;return g|0}}else{if(f){g=1;i=e;return g|0}}g=(Lv(c[b+4>>2]|0,c[d+4>>2]|0)|0)<0;i=e;return g|0}function Uk(a,b,d,e,f,g,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0;k=i;if((g|0)==0){i=k;return}else{l=a;m=b;n=d;o=f;p=g}a:while(1){g=n;q=m;f=o;d=l;r=p;while(1){if((f|0)==0){s=44;break a}else{t=d;u=f}while(1){if(ch[c[e>>2]&31](c[q>>2]|0,c[t>>2]|0)|0){break}b=u+ -1|0;if((b|0)==0){s=44;break a}else{t=t+4|0;u=b}}if(!((u|0)>(j|0)&(r|0)>(j|0))){s=7;break a}if((u|0)<(r|0)){b=(r|0)/2|0;a=q+(b<<2)|0;v=t;w=t;x=q-v>>2;b:while(1){y=x;while(1){if((y|0)==0){break b}z=(y|0)/2|0;if(ch[c[e>>2]&31](c[a>>2]|0,c[w+(z<<2)>>2]|0)|0){y=z}else{break}}w=w+(z+1<<2)|0;x=y+ -1-z|0}A=w;B=a;C=w-v>>2;D=b}else{if((u|0)==1){s=16;break a}x=(u|0)/2|0;E=t+(x<<2)|0;F=q;G=q;H=g-F>>2;c:while(1){I=H;while(1){if((I|0)==0){break c}J=(I|0)/2|0;if(ch[c[e>>2]&31](c[G+(J<<2)>>2]|0,c[E>>2]|0)|0){break}else{I=J}}G=G+(J+1<<2)|0;H=I+ -1-J|0}A=E;B=G;C=x;D=G-F>>2}K=u-C|0;L=r-D|0;d:do{if((A|0)!=(q|0)){if((q|0)==(B|0)){M=A}else{if((A+4|0)==(q|0)){H=c[A>>2]|0;b=B-q|0;Sv(A|0,q|0,b|0)|0;v=A+(b>>2<<2)|0;c[v>>2]=H;M=v;break}if((q+4|0)==(B|0)){v=B+ -4|0;H=c[v>>2]|0;b=v-A|0;v=B+(0-(b>>2)<<2)|0;Sv(v|0,A|0,b|0)|0;c[A>>2]=H;M=v;break}v=q;H=v-A>>2;b=B;w=b-v>>2;if((H|0)==(w|0)){v=A;a=q;while(1){y=c[v>>2]|0;c[v>>2]=c[a>>2];c[a>>2]=y;y=v+4|0;if((y|0)==(q|0)){M=q;break d}else{v=y;a=a+4|0}}}else{N=H;O=w}while(1){a=(N|0)%(O|0)|0;if((a|0)==0){break}else{v=O;O=a;N=v}}if((O|0)!=0){v=H+ -1|0;a=A+(O<<2)|0;while(1){I=a+ -4|0;y=c[I>>2]|0;P=I;Q=a+(v<<2)|0;while(1){c[P>>2]=c[Q>>2];R=b-Q>>2;if((H|0)<(R|0)){S=Q+(H<<2)|0}else{S=A+(H-R<<2)|0}if((S|0)==(I|0)){break}else{R=Q;Q=S;P=R}}c[Q>>2]=y;if((I|0)==(A|0)){break}else{a=I}}}M=A+(w<<2)|0}}else{M=B}}while(0);if((D+C|0)>=(L+K|0)){break}Uk(t,A,M,e,C,D,h,j);if((r|0)==(D|0)){s=44;break a}else{q=B;f=K;d=M;r=L}}Uk(M,B,n,e,K,L,h,j);if((D|0)==0){s=44;break}else{l=t;m=A;n=M;o=C;p=D}}if((s|0)==7){Vk(t,q,n,e,u,r,h);i=k;return}else if((s|0)==16){h=c[t>>2]|0;c[t>>2]=c[q>>2];c[q>>2]=h;i=k;return}else if((s|0)==44){i=k;return}}function Vk(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;j=i;i=i+112|0;k=j+96|0;l=j+88|0;m=j+80|0;n=j+72|0;o=j+64|0;p=j+56|0;q=a;r=b;s=j+24|0;t=j;u=j+8|0;v=j+16|0;w=j+32|0;x=j+40|0;y=j+48|0;if((f|0)>(g|0)){if((b|0)==(d|0)){z=h}else{g=((d+ -4+(0-r)|0)>>>2)+1|0;f=b;A=h;while(1){if((A|0)!=0){c[A>>2]=c[f>>2]}f=f+4|0;if((f|0)==(d|0)){break}else{A=A+4|0}}z=h+(g<<2)|0}g=s;c[g>>2]=r;c[g+4>>2]=r;r=t;c[r>>2]=q;c[r+4>>2]=q;r=z;z=u;c[z>>2]=r;c[z+4>>2]=r;r=h;z=v;c[z>>2]=r;c[z+4>>2]=r;c[w>>2]=d;c[w+4>>2]=d;c[x>>2]=e;c[p+0>>2]=c[s+0>>2];c[p+4>>2]=c[s+4>>2];c[o+0>>2]=c[t+0>>2];c[o+4>>2]=c[t+4>>2];c[n+0>>2]=c[u+0>>2];c[n+4>>2]=c[u+4>>2];c[m+0>>2]=c[v+0>>2];c[m+4>>2]=c[v+4>>2];c[l+0>>2]=c[w+0>>2];c[l+4>>2]=c[w+4>>2];c[k+0>>2]=c[x+0>>2];Wk(y,p,o,n,m,l,k);i=j;return}a:do{if((a|0)!=(b|0)){k=((b+ -4+(0-q)|0)>>>2)+1|0;l=a;m=h;while(1){if((m|0)!=0){c[m>>2]=c[l>>2]}l=l+4|0;if((l|0)==(b|0)){break}else{m=m+4|0}}m=h+(k<<2)|0;if((m|0)!=(h|0)){l=a;n=h;o=b;while(1){if((o|0)==(d|0)){break}if(ch[c[e>>2]&31](c[o>>2]|0,c[n>>2]|0)|0){c[l>>2]=c[o>>2];B=n;C=o+4|0}else{c[l>>2]=c[n>>2];B=n+4|0;C=o}p=l+4|0;if((B|0)==(m|0)){D=p;E=C;break a}else{l=p;n=B;o=C}}Sv(l|0,n|0,m-n|0)|0;i=j;return}else{D=a;E=b}}else{D=a;E=b}}while(0);Sv(D|0,E|0,d-E|0)|0;i=j;return}function Wk(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;j=i;k=c[b+4>>2]|0;l=c[d+4>>2]|0;d=l;m=c[e+4>>2]|0;a:do{if((k|0)==(d|0)){n=m;o=c[f+4>>2]|0}else{p=e+4|0;q=b+4|0;r=c[h>>2]|0;s=g+4|0;t=c[f+4>>2]|0;u=m;v=k;while(1){if((u|0)==(t|0)){break}w=(c[p>>2]|0)+ -4|0;c[e>>2]=w;x=(c[q>>2]|0)+ -4|0;c[b>>2]=x;if(ch[c[r>>2]&31](c[w>>2]|0,c[x>>2]|0)|0){c[b>>2]=x;y=c[x>>2]|0;z=c[s>>2]|0;A=z+ -4|0;c[g>>2]=A;c[A>>2]=y;c[q>>2]=x;B=z}else{c[e>>2]=w;z=c[w>>2]|0;x=c[s>>2]|0;y=x+ -4|0;c[g>>2]=y;c[y>>2]=z;c[p>>2]=w;B=x}c[s>>2]=B+ -4;x=c[b+4>>2]|0;w=c[e+4>>2]|0;if((x|0)==(d|0)){n=w;o=t;break a}else{u=w;v=x}}u=g;t=c[u+4>>2]|0;if((v|0)==(d|0)){C=c[u>>2]|0;D=t}else{u=(v+ -4+(0-l)|0)>>>2;s=v;p=t;do{s=s+ -4|0;p=p+ -4|0;c[p>>2]=c[s>>2]}while((s|0)!=(d|0));s=t+(~u<<2)|0;C=s;D=s}s=a;c[s>>2]=C;c[s+4>>2]=D;i=j;return}}while(0);D=g;g=c[D+4>>2]|0;C=n;n=o;if((C|0)==(n|0)){E=c[D>>2]|0;F=g}else{D=(C+ -4+(0-o)|0)>>>2;o=C;C=g;do{o=o+ -4|0;C=C+ -4|0;c[C>>2]=c[o>>2]}while((o|0)!=(n|0));n=g+(~D<<2)|0;E=n;F=n}n=a;c[n>>2]=E;c[n+4>>2]=F;i=j;return}function Xk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;f=c[d+48>>2]|0;if((f&16|0)!=0){g=d+44|0;h=c[g>>2]|0;j=c[d+24>>2]|0;if(h>>>0<j>>>0){c[g>>2]=j;k=j}else{k=h}h=c[d+20>>2]|0;j=h;g=k-j|0;if(g>>>0>4294967279){Nm(0)}if(g>>>0<11){a[b]=g<<1;l=b+1|0}else{m=g+16&-16;n=sv(m)|0;c[b+8>>2]=n;c[b>>2]=m|1;c[b+4>>2]=g;l=n}if((h|0)==(k|0)){o=l}else{n=h;h=l;while(1){a[h]=a[n]|0;n=n+1|0;if((n|0)==(k|0)){break}else{h=h+1|0}}o=l+(k+(0-j))|0}a[o]=0;i=e;return}if((f&8|0)==0){c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;i=e;return}f=c[d+8>>2]|0;o=c[d+16>>2]|0;d=f;j=o-d|0;if(j>>>0>4294967279){Nm(0)}if(j>>>0<11){a[b]=j<<1;p=b+1|0}else{k=j+16&-16;l=sv(k)|0;c[b+8>>2]=l;c[b>>2]=k|1;c[b+4>>2]=j;p=l}if((f|0)==(o|0)){q=p}else{l=f;f=p;while(1){a[f]=a[l]|0;l=l+1|0;if((l|0)==(o|0)){break}else{f=f+1|0}}q=p+(o+(0-d))|0}a[q]=0;i=e;return}function Yk(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=16108;c[b+64>>2]=16148;c[b+8>>2]=16128;e=b+12|0;c[e>>2]=16296;if(!((a[b+44|0]&1)==0)){vv(c[b+52>>2]|0)}c[e>>2]=19336;vs(b+16|0);kn(b+64|0);vv(b);i=d;return}function Zk(b){b=b|0;var d=0,e=0,f=0;d=i;e=b+ -8|0;c[e>>2]=16108;b=e+64|0;c[b>>2]=16148;c[e+8>>2]=16128;f=e+12|0;c[f>>2]=16296;if(!((a[e+44|0]&1)==0)){vv(c[e+52>>2]|0)}c[f>>2]=19336;vs(e+16|0);kn(b);i=d;return}function _k(b){b=b|0;var d=0,e=0,f=0;d=i;e=b+ -8|0;c[e>>2]=16108;b=e+64|0;c[b>>2]=16148;c[e+8>>2]=16128;f=e+12|0;c[f>>2]=16296;if(!((a[e+44|0]&1)==0)){vv(c[e+52>>2]|0)}c[f>>2]=19336;vs(e+16|0);kn(b);vv(e);i=d;return}function $k(b){b=b|0;var d=0,e=0,f=0,g=0;d=i;e=c[(c[b>>2]|0)+ -12>>2]|0;c[b+e>>2]=16108;f=b+(e+64)|0;c[f>>2]=16148;c[b+(e+8)>>2]=16128;g=b+(e+12)|0;c[g>>2]=16296;if(!((a[b+(e+44)|0]&1)==0)){vv(c[b+(e+52)>>2]|0)}c[g>>2]=19336;vs(b+(e+16)|0);kn(f);i=d;return}function al(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=c[(c[b>>2]|0)+ -12>>2]|0;f=b+e|0;c[f>>2]=16108;g=b+(e+64)|0;c[g>>2]=16148;c[b+(e+8)>>2]=16128;h=b+(e+12)|0;c[h>>2]=16296;if(!((a[b+(e+44)|0]&1)==0)){vv(c[b+(e+52)>>2]|0)}c[h>>2]=19336;vs(b+(e+16)|0);kn(g);vv(f);i=d;return}function bl(b){b=b|0;var d=0;d=i;c[b>>2]=16296;if(!((a[b+32|0]&1)==0)){vv(c[b+40>>2]|0)}c[b>>2]=19336;vs(b+4|0);i=d;return}function cl(b){b=b|0;var d=0;d=i;c[b>>2]=16296;if(!((a[b+32|0]&1)==0)){vv(c[b+40>>2]|0)}c[b>>2]=19336;vs(b+4|0);vv(b);i=d;return}function dl(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;j=i;k=d+44|0;l=c[k>>2]|0;m=d+24|0;n=c[m>>2]|0;if(l>>>0<n>>>0){c[k>>2]=n;o=n}else{o=l}l=h&24;do{if((l|0)==24){if((g|0)==0){p=0;q=0;break}else if((g|0)==2){r=11;break}else if((g|0)!=1){r=15;break}k=b;c[k>>2]=0;c[k+4>>2]=0;k=b+8|0;c[k>>2]=-1;c[k+4>>2]=-1;i=j;return}else if((l|0)!=0){if((g|0)==0){p=0;q=0;break}else if((g|0)==2){r=11;break}else if((g|0)!=1){r=15;break}if((h&8|0)==0){k=n-(c[d+20>>2]|0)|0;p=k;q=((k|0)<0)<<31>>31;break}else{k=(c[d+12>>2]|0)-(c[d+8>>2]|0)|0;p=k;q=((k|0)<0)<<31>>31;break}}else{k=b;c[k>>2]=0;c[k+4>>2]=0;k=b+8|0;c[k>>2]=-1;c[k+4>>2]=-1;i=j;return}}while(0);if((r|0)==15){g=b;c[g>>2]=0;c[g+4>>2]=0;g=b+8|0;c[g>>2]=-1;c[g+4>>2]=-1;i=j;return}if((r|0)==11){r=d+32|0;if((a[r]&1)==0){s=r+1|0}else{s=c[d+40>>2]|0}r=o-s|0;p=r;q=((r|0)<0)<<31>>31}r=Qv(p|0,q|0,e|0,f|0)|0;f=I;if((f|0)>=0){e=d+32|0;if((a[e]&1)==0){t=e+1|0}else{t=c[d+40>>2]|0}e=o-t|0;t=((e|0)<0)<<31>>31;if(!((t|0)<(f|0)|(t|0)==(f|0)&e>>>0<r>>>0)){e=h&8;if(!((r|0)==0&(f|0)==0)){if((e|0)!=0?(c[d+12>>2]|0)==0:0){t=b;c[t>>2]=0;c[t+4>>2]=0;t=b+8|0;c[t>>2]=-1;c[t+4>>2]=-1;i=j;return}if((h&16|0)!=0&(n|0)==0){n=b;c[n>>2]=0;c[n+4>>2]=0;n=b+8|0;c[n>>2]=-1;c[n+4>>2]=-1;i=j;return}}if((e|0)!=0){c[d+12>>2]=(c[d+8>>2]|0)+r;c[d+16>>2]=o}if((h&16|0)!=0){c[m>>2]=(c[d+20>>2]|0)+r}d=b;c[d>>2]=0;c[d+4>>2]=0;d=b+8|0;c[d>>2]=r;c[d+4>>2]=f;i=j;return}}f=b;c[f>>2]=0;c[f+4>>2]=0;f=b+8|0;c[f>>2]=-1;c[f+4>>2]=-1;i=j;return}function el(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;g=d+8|0;Wg[c[(c[b>>2]|0)+16>>2]&31](a,b,c[g>>2]|0,c[g+4>>2]|0,0,e);i=f;return}function fl(a){a=a|0;var b=0,e=0,f=0,g=0,h=0,j=0,k=0;b=i;e=a+44|0;f=c[e>>2]|0;g=c[a+24>>2]|0;if(f>>>0<g>>>0){c[e>>2]=g;h=g}else{h=f}if((c[a+48>>2]&8|0)==0){j=-1;i=b;return j|0}f=a+16|0;g=c[f>>2]|0;e=c[a+12>>2]|0;if(g>>>0<h>>>0){c[f>>2]=h;k=h}else{k=g}if(!(e>>>0<k>>>0)){j=-1;i=b;return j|0}j=d[e]|0;i=b;return j|0}function gl(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;e=i;f=b+44|0;g=c[f>>2]|0;h=c[b+24>>2]|0;if(g>>>0<h>>>0){c[f>>2]=h;j=h}else{j=g}g=b+8|0;h=c[g>>2]|0;f=b+12|0;k=c[f>>2]|0;if(!(h>>>0<k>>>0)){l=-1;i=e;return l|0}if((d|0)==-1){c[g>>2]=h;c[f>>2]=k+ -1;c[b+16>>2]=j;l=0;i=e;return l|0}if((c[b+48>>2]&16|0)==0){m=d&255;n=k+ -1|0;if(m<<24>>24==(a[n]|0)){o=m;p=n}else{l=-1;i=e;return l|0}}else{o=d&255;p=k+ -1|0}c[g>>2]=h;c[f>>2]=p;c[b+16>>2]=j;a[p]=o;l=d;i=e;return l|0}function hl(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;e=i;if((d|0)==-1){f=0;i=e;return f|0}g=b+12|0;h=b+8|0;j=(c[g>>2]|0)-(c[h>>2]|0)|0;k=b+24|0;l=c[k>>2]|0;m=b+28|0;n=c[m>>2]|0;if((l|0)==(n|0)){o=b+48|0;if((c[o>>2]&16|0)==0){f=-1;i=e;return f|0}p=b+20|0;q=c[p>>2]|0;r=l-q|0;s=b+44|0;t=(c[s>>2]|0)-q|0;q=b+32|0;u=a[q]|0;v=(u&1)!=0;if(v){w=(c[q>>2]&-2)+ -1|0;x=c[b+36>>2]|0}else{w=10;x=(u&255)>>>1}if((x|0)==(w|0)){_m(q,w,1,w,w,0,0);if((a[q]&1)==0){y=11}else{y=12}}else{if(v){y=12}else{y=11}}if((y|0)==11){a[q]=(x<<1)+2;z=q+1|0;A=x+1|0}else if((y|0)==12){y=c[b+40>>2]|0;v=x+1|0;c[b+36>>2]=v;z=y;A=v}a[z+x|0]=0;a[z+A|0]=0;A=a[q]|0;if((A&1)==0){B=A;C=10}else{A=c[q>>2]|0;B=A&255;C=(A&-2)+ -1|0}A=(B&1)==0;if(A){D=(B&255)>>>1}else{D=c[b+36>>2]|0}do{if(!(D>>>0<C>>>0)){if(A){a[q+C+1|0]=0;a[q]=C<<1;break}else{a[(c[b+40>>2]|0)+C|0]=0;c[b+36>>2]=C;break}}else{Vm(q,C-D|0,0)|0}}while(0);D=a[q]|0;if((D&1)==0){E=q+1|0;F=(D&255)>>>1}else{E=c[b+40>>2]|0;F=c[b+36>>2]|0}D=E+F|0;c[p>>2]=E;c[m>>2]=D;m=E+r|0;c[k>>2]=m;r=E+t|0;c[s>>2]=r;G=o;H=D;I=m;J=r}else{G=b+48|0;H=n;I=l;J=c[b+44>>2]|0}l=I+1|0;n=l>>>0<J>>>0?J:l;c[b+44>>2]=n;if((c[G>>2]&8|0)!=0){G=b+32|0;if((a[G]&1)==0){K=G+1|0}else{K=c[b+40>>2]|0}c[h>>2]=K;c[g>>2]=K+j;c[b+16>>2]=n}if((I|0)==(H|0)){f=ch[c[(c[b>>2]|0)+52>>2]&31](b,d&255)|0;i=e;return f|0}else{c[k>>2]=l;a[I]=d;f=d&255;i=e;return f|0}return 0}function il(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;e=i;f=b+32|0;Sm(f,d)|0;d=b+44|0;c[d>>2]=0;g=b+48|0;h=c[g>>2]|0;if((h&8|0)!=0){j=a[f]|0;if((j&1)==0){k=f+((j&255)>>>1)+1|0;c[d>>2]=k;l=f+1|0;m=f+1|0;n=k}else{k=(c[b+40>>2]|0)+(c[b+36>>2]|0)|0;c[d>>2]=k;j=c[b+40>>2]|0;l=j;m=j;n=k}c[b+8>>2]=l;c[b+12>>2]=m;c[b+16>>2]=n}if((h&16|0)==0){i=e;return}h=a[f]|0;if((h&1)==0){n=(h&255)>>>1;c[d>>2]=f+n+1;o=h;p=10;q=n}else{n=c[b+36>>2]|0;c[d>>2]=(c[b+40>>2]|0)+n;d=c[f>>2]|0;o=d&255;p=(d&-2)+ -1|0;q=n}n=(o&1)==0;if(n){r=(o&255)>>>1}else{r=c[b+36>>2]|0}do{if(!(r>>>0<p>>>0)){if(n){a[f+p+1|0]=0;a[f]=p<<1;break}else{a[(c[b+40>>2]|0)+p|0]=0;c[b+36>>2]=p;break}}else{Vm(f,p-r|0,0)|0}}while(0);r=a[f]|0;if((r&1)==0){s=f+1|0;t=(r&255)>>>1;u=f+1|0}else{f=c[b+40>>2]|0;s=f;t=c[b+36>>2]|0;u=f}f=b+24|0;c[f>>2]=u;c[b+20>>2]=u;c[b+28>>2]=s+t;if((c[g>>2]&3|0)==0){i=e;return}c[f>>2]=u+q;i=e;return}function jl(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;a=i;b=c[4172]|0;if((b|0)==0){i=a;return}d=b+156|0;e=b+128|0;f=c[e>>2]|0;g=b+(f<<2)|0;a:do{if((f|0)==0){h=b;j=5}else{k=b;while(1){l=k+4|0;if((c[k>>2]|0)==(d|0)){h=k;j=5;break a}if((l|0)==(g|0)){m=f;break}else{k=l}}}}while(0);if((j|0)==5){if((h|0)!=(g|0)){k=h;l=h;b:while(1){h=l;do{h=h+4|0;if((h|0)==(g|0)){break b}n=c[h>>2]|0}while((n|0)==(d|0));c[k>>2]=n;k=k+4|0;l=h}if((k|0)!=(g|0)){g=f+ -1|0;c[e>>2]=g;m=g}else{m=f}}else{m=f}}f=b+180|0;g=b+(m<<2)|0;c:do{if((m|0)==0){o=b;j=15}else{k=b;while(1){l=k+4|0;if((c[k>>2]|0)==(f|0)){o=k;j=15;break c}if((l|0)==(g|0)){break}else{k=l}}}}while(0);if((j|0)==15?(o|0)!=(g|0):0){j=o;b=o;d:while(1){o=b;do{o=o+4|0;if((o|0)==(g|0)){break d}p=c[o>>2]|0}while((p|0)==(f|0));c[j>>2]=p;j=j+4|0;b=o}if((j|0)!=(g|0)){c[e>>2]=m+ -1}}c[4172]=0;i=a;return}function kl(){var a=0;a=i;Ag(163,14416,p|0)|0;i=a;return}function ll(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;e=i;i=i+16|0;f=e;c[b>>2]=d;g=b+4|0;a[g]=0;Sg[c[(c[d>>2]|0)+4>>2]&31](d,f,1)|0;a[g]=(a[f]|0)!=1|0;i=e;return}function ml(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;c[a>>2]=16912;c[a+4>>2]=af(b|0,d|0)|0;i=e;return}function nl(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=16912;d=c[a+4>>2]|0;if((d|0)!=0){Fe(d|0)|0}vv(a);i=b;return}function ol(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=16912;d=a+4|0;a=c[d>>2]|0;if((a|0)==0){i=b;return}Fe(a|0)|0;c[d>>2]=0;i=b;return}function pl(a){a=a|0;return(c[a+4>>2]|0)!=0|0}function ql(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;f=Gb(b|0,1,d|0,c[a+4>>2]|0)|0;i=e;return f|0}function rl(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;f=wf(b|0,1,d|0,c[a+4>>2]|0)|0;i=e;return f|0}function sl(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;if((d|0)>2){f=-1;i=e;return f|0}f=ye(c[a+4>>2]|0,b|0,c[16944+(d<<2)>>2]|0)|0;i=e;return f|0}function tl(a){a=a|0;var b=0,d=0;b=i;d=mb(c[a+4>>2]|0)|0;i=b;return d|0}function ul(b){b=b|0;var d=0,e=0;d=i;if((c[4256]|0)<2){e=yl(Hl()|0)|0}else{e=17592}c[b>>2]=e;a[b+4|0]=(e|0)!=17592|0;i=d;return}function vl(b){b=b|0;var d=0,e=0;d=i;if((c[4256]|0)<1){e=yl(Hl()|0)|0}else{e=17592}c[b>>2]=e;a[b+4|0]=(e|0)!=17592|0;i=d;return}function wl(b){b=b|0;var d=0,e=0;d=i;if((c[4256]|0)<1){e=yl(Hl()|0)|0}else{e=17416}c[b>>2]=e;a[b+4|0]=(e|0)!=17416|0;i=d;return}function xl(b){b=b|0;var d=0,e=0;d=i;if((c[4256]|0)<1){e=yl(Hl()|0)|0}else{e=17504}c[b>>2]=e;a[b+4|0]=(e|0)!=17504|0;i=d;return}function yl(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;i=i+16|0;e=d;f=Sg[c[(c[b>>2]|0)+8>>2]&31](b,136,8)|0;if((f|0)==0){g=0;i=d;return g|0}b=f+56|0;h=f+4|0;c[f>>2]=17172;c[b>>2]=17192;mn(b,h);c[f+128>>2]=0;c[f+132>>2]=-1;c[f>>2]=17044;c[b>>2]=17064;c[h>>2]=19336;ts(f+8|0);b=f+12|0;c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;c[b+20>>2]=0;c[h>>2]=16296;b=f+36|0;j=f+52|0;c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;c[j>>2]=16;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;il(h,e);if((a[e]&1)==0){g=f;i=d;return g|0}vv(c[e+8>>2]|0);g=f;i=d;return g|0}function zl(b){b=b|0;var d=0,e=0,f=0;d=i;if((a[b+4|0]|0)==0){i=d;return}e=Hl()|0;f=c[b>>2]|0;if((f|0)==0){i=d;return}Kg[c[c[f>>2]>>2]&255](f);Lg[c[(c[e>>2]|0)+12>>2]&127](e,f);i=d;return}function Al(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=17044;c[b+56>>2]=17064;e=b+4|0;c[e>>2]=16296;if(!((a[b+36|0]&1)==0)){vv(c[b+44>>2]|0)}c[e>>2]=19336;vs(b+8|0);kn(b+56|0);i=d;return}function Bl(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=17044;c[b+56>>2]=17064;e=b+4|0;c[e>>2]=16296;if(!((a[b+36|0]&1)==0)){vv(c[b+44>>2]|0)}c[e>>2]=19336;vs(b+8|0);kn(b+56|0);vv(b);i=d;return}function Cl(b){b=b|0;var d=0,e=0,f=0,g=0;d=i;e=c[(c[b>>2]|0)+ -12>>2]|0;c[b+e>>2]=17044;f=b+(e+56)|0;c[f>>2]=17064;g=b+(e+4)|0;c[g>>2]=16296;if(!((a[b+(e+36)|0]&1)==0)){vv(c[b+(e+44)>>2]|0)}c[g>>2]=19336;vs(b+(e+8)|0);kn(f);i=d;return}function Dl(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=c[(c[b>>2]|0)+ -12>>2]|0;f=b+e|0;c[f>>2]=17044;g=b+(e+56)|0;c[g>>2]=17064;h=b+(e+4)|0;c[h>>2]=16296;if(!((a[b+(e+36)|0]&1)==0)){vv(c[b+(e+44)>>2]|0)}c[h>>2]=19336;vs(b+(e+8)|0);kn(g);vv(f);i=d;return}function El(a){a=a|0;g[a>>2]=3.4028234663852886e+38;g[a+4>>2]=3.4028234663852886e+38;g[a+8>>2]=3.4028234663852886e+38;g[a+12>>2]=-3.4028234663852886e+38;g[a+16>>2]=-3.4028234663852886e+38;g[a+20>>2]=-3.4028234663852886e+38;return}function Fl(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;f=i;g=e*160|0;e=c[b>>2]|0;Sg[c[(c[e>>2]|0)+4>>2]&31](e,d,g)|0;if((a[b+4|0]|0)==0|(g|0)==0){i=f;return}else{h=0}do{b=d+h|0;e=a[b]|0;j=d+(h|3)|0;a[b]=a[j]|0;a[j]=e;e=d+(h|1)|0;j=a[e]|0;b=d+(h|2)|0;a[e]=a[b]|0;a[b]=j;h=h+4|0}while(h>>>0<g>>>0);i=f;return}function Gl(a){a=a|0;c[a>>2]=17224;return}function Hl(){return c[4302]|0}function Il(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function Jl(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;f=nv(b+7+d|0)|0;if((f|0)==0){g=0;i=e;return g|0}h=d+ -1+(f+8)&0-d;c[h+ -8>>2]=f;c[h+ -4>>2]=b;b=a+4|0;c[b>>2]=(c[b>>2]|0)+1;g=h;i=e;return g|0}function Kl(a,b){a=a|0;b=b|0;var d=0;d=i;if((b|0)==0){i=d;return}ov(c[b+ -8>>2]|0);b=a+4|0;c[b>>2]=(c[b>>2]|0)+ -1;i=d;return}function Ll(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;g=Sg[c[(c[a>>2]|0)+8>>2]&31](a,d,e)|0;if((b|0)==0){i=f;return g|0}Nv(g|0,b|0,c[b+ -4>>2]|0)|0;ov(c[b+ -8>>2]|0);b=a+4|0;c[b>>2]=(c[b>>2]|0)+ -1;i=f;return g|0}function Ml(){var a=0;a=i;c[4300]=17224;c[17204>>2]=0;Ag(58,17200,p|0)|0;i=a;return}function Nl(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;b=i;i=i+16|0;d=b;e=c[r>>2]|0;hm(18040,e,18096);c[4332]=19468;c[17336>>2]=19488;c[17332>>2]=0;mn(17336|0,18040);c[17408>>2]=0;c[17412>>2]=-1;f=c[s>>2]|0;c[4536]=19336;ts(18148|0);c[18152>>2]=0;c[18156>>2]=0;c[18160>>2]=0;c[18164>>2]=0;c[18168>>2]=0;c[18172>>2]=0;c[4536]=18656;c[18176>>2]=f;us(d,18148|0);g=ws(d,22208)|0;vs(d);c[18180>>2]=g;c[18184>>2]=18104;a[18188|0]=(Mg[c[(c[g>>2]|0)+28>>2]&127](g)|0)&1;c[4354]=19548;c[17420>>2]=19568;mn(17420|0,18144);c[17492>>2]=0;c[17496>>2]=-1;g=c[q>>2]|0;c[4548]=19336;ts(18196|0);c[18200>>2]=0;c[18204>>2]=0;c[18208>>2]=0;c[18212>>2]=0;c[18216>>2]=0;c[18220>>2]=0;c[4548]=18656;c[18224>>2]=g;us(d,18196|0);h=ws(d,22208)|0;vs(d);c[18228>>2]=h;c[18232>>2]=18112;a[18236|0]=(Mg[c[(c[h>>2]|0)+28>>2]&127](h)|0)&1;c[4376]=19548;c[17508>>2]=19568;mn(17508|0,18192);c[17580>>2]=0;c[17584>>2]=-1;h=c[(c[(c[4376]|0)+ -12>>2]|0)+17528>>2]|0;c[4398]=19548;c[17596>>2]=19568;mn(17596|0,h);c[17668>>2]=0;c[17672>>2]=-1;c[(c[(c[4332]|0)+ -12>>2]|0)+17400>>2]=17416;h=(c[(c[4376]|0)+ -12>>2]|0)+17508|0;c[h>>2]=c[h>>2]|8192;c[(c[(c[4376]|0)+ -12>>2]|0)+17576>>2]=17416;Vl(18240,e,18120|0);c[4420]=19508;c[17688>>2]=19528;c[17684>>2]=0;mn(17688|0,18240);c[17760>>2]=0;c[17764>>2]=-1;c[4574]=19400;ts(18300|0);c[18304>>2]=0;c[18308>>2]=0;c[18312>>2]=0;c[18316>>2]=0;c[18320>>2]=0;c[18324>>2]=0;c[4574]=18400;c[18328>>2]=f;us(d,18300|0);f=ws(d,22216)|0;vs(d);c[18332>>2]=f;c[18336>>2]=18128;a[18340|0]=(Mg[c[(c[f>>2]|0)+28>>2]&127](f)|0)&1;c[4442]=19588;c[17772>>2]=19608;mn(17772|0,18296);c[17844>>2]=0;c[17848>>2]=-1;c[4586]=19400;ts(18348|0);c[18352>>2]=0;c[18356>>2]=0;c[18360>>2]=0;c[18364>>2]=0;c[18368>>2]=0;c[18372>>2]=0;c[4586]=18400;c[18376>>2]=g;us(d,18348|0);g=ws(d,22216)|0;vs(d);c[18380>>2]=g;c[18384>>2]=18136;a[18388|0]=(Mg[c[(c[g>>2]|0)+28>>2]&127](g)|0)&1;c[4464]=19588;c[17860>>2]=19608;mn(17860|0,18344);c[17932>>2]=0;c[17936>>2]=-1;g=c[(c[(c[4464]|0)+ -12>>2]|0)+17880>>2]|0;c[4486]=19588;c[17948>>2]=19608;mn(17948|0,g);c[18020>>2]=0;c[18024>>2]=-1;c[(c[(c[4420]|0)+ -12>>2]|0)+17752>>2]=17768;g=(c[(c[4464]|0)+ -12>>2]|0)+17860|0;c[g>>2]=c[g>>2]|8192;c[(c[(c[4464]|0)+ -12>>2]|0)+17928>>2]=17768;i=b;return}function Ol(a){a=a|0;a=i;Tn(17416)|0;Tn(17592)|0;Zn(17768)|0;Zn(17944)|0;i=a;return}function Pl(a){a=a|0;var b=0;b=i;c[a>>2]=19400;vs(a+4|0);i=b;return}function Ql(a){a=a|0;var b=0;b=i;c[a>>2]=19400;vs(a+4|0);vv(a);i=b;return}function Rl(b,d){b=b|0;d=d|0;var e=0,f=0;e=i;Mg[c[(c[b>>2]|0)+24>>2]&127](b)|0;f=ws(d,22216)|0;c[b+36>>2]=f;a[b+44|0]=(Mg[c[(c[f>>2]|0)+28>>2]&127](f)|0)&1;i=e;return}function Sl(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;b=i;i=i+16|0;d=b+8|0;e=b;f=a+36|0;g=a+40|0;h=d+8|0;j=d;k=a+32|0;while(1){a=c[f>>2]|0;l=Pg[c[(c[a>>2]|0)+20>>2]&15](a,c[g>>2]|0,d,h,e)|0;a=(c[e>>2]|0)-j|0;if((wf(d|0,1,a|0,c[k>>2]|0)|0)!=(a|0)){m=-1;n=5;break}if((l|0)==2){m=-1;n=5;break}else if((l|0)!=1){n=4;break}}if((n|0)==4){m=((gg(c[k>>2]|0)|0)!=0)<<31>>31;i=b;return m|0}else if((n|0)==5){i=b;return m|0}return 0}function Tl(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;f=i;a:do{if((a[b+44|0]|0)==0){if((e|0)>0){g=d;h=0;while(1){if((ch[c[(c[b>>2]|0)+52>>2]&31](b,c[g>>2]|0)|0)==-1){j=h;break a}k=h+1|0;if((k|0)<(e|0)){g=g+4|0;h=k}else{j=k;break}}}else{j=0}}else{j=wf(d|0,4,e|0,c[b+32>>2]|0)|0}}while(0);i=f;return j|0}function Ul(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;e=i;i=i+32|0;f=e+16|0;g=e;h=e+4|0;j=e+8|0;k=(d|0)==-1;a:do{if(!k){c[g>>2]=d;if((a[b+44|0]|0)!=0){if((wf(g|0,4,1,c[b+32>>2]|0)|0)==1){break}else{l=-1}i=e;return l|0}c[h>>2]=f;m=g+4|0;n=b+36|0;o=b+40|0;p=f+8|0;q=f;r=b+32|0;s=g;while(1){t=c[n>>2]|0;u=dh[c[(c[t>>2]|0)+12>>2]&15](t,c[o>>2]|0,s,m,j,f,p,h)|0;if((c[j>>2]|0)==(s|0)){l=-1;v=12;break}if((u|0)==3){v=7;break}t=(u|0)==1;if(!(u>>>0<2)){l=-1;v=12;break}u=(c[h>>2]|0)-q|0;if((wf(f|0,1,u|0,c[r>>2]|0)|0)!=(u|0)){l=-1;v=12;break}if(t){s=t?c[j>>2]|0:s}else{break a}}if((v|0)==7){if((wf(s|0,1,1,c[r>>2]|0)|0)==1){break}else{l=-1}i=e;return l|0}else if((v|0)==12){i=e;return l|0}}}while(0);l=k?0:d;i=e;return l|0}function Vl(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;i=i+16|0;g=f;c[b>>2]=19400;h=b+4|0;ts(h);j=b+8|0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;c[j+16>>2]=0;c[j+20>>2]=0;c[b>>2]=18512;c[b+32>>2]=d;c[b+40>>2]=e;c[b+48>>2]=-1;a[b+52|0]=0;us(g,h);h=ws(g,22216)|0;e=b+36|0;c[e>>2]=h;d=b+44|0;c[d>>2]=Mg[c[(c[h>>2]|0)+24>>2]&127](h)|0;h=c[e>>2]|0;a[b+53|0]=(Mg[c[(c[h>>2]|0)+28>>2]&127](h)|0)&1;if((c[d>>2]|0)>8){Gr(18608)}else{vs(g);i=f;return}}function Wl(a){a=a|0;var b=0;b=i;c[a>>2]=19400;vs(a+4|0);i=b;return}function Xl(a){a=a|0;var b=0;b=i;c[a>>2]=19400;vs(a+4|0);vv(a);i=b;return}function Yl(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;e=i;f=ws(d,22216)|0;d=b+36|0;c[d>>2]=f;g=b+44|0;c[g>>2]=Mg[c[(c[f>>2]|0)+24>>2]&127](f)|0;f=c[d>>2]|0;a[b+53|0]=(Mg[c[(c[f>>2]|0)+28>>2]&127](f)|0)&1;if((c[g>>2]|0)>8){Gr(18608)}else{i=e;return}}function Zl(a){a=a|0;var b=0,c=0;b=i;c=am(a,0)|0;i=b;return c|0}function _l(a){a=a|0;var b=0,c=0;b=i;c=am(a,1)|0;i=b;return c|0}function $l(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;i=i+32|0;f=e+16|0;g=e;h=e+4|0;j=e+8|0;k=b+52|0;l=(a[k]|0)!=0;if((d|0)==-1){if(l){m=-1;i=e;return m|0}n=c[b+48>>2]|0;a[k]=(n|0)!=-1|0;m=n;i=e;return m|0}n=b+48|0;a:do{if(l){c[h>>2]=c[n>>2];o=c[b+36>>2]|0;p=dh[c[(c[o>>2]|0)+12>>2]&15](o,c[b+40>>2]|0,h,h+4|0,j,f,f+8|0,g)|0;if((p|0)==1|(p|0)==2){m=-1;i=e;return m|0}else if((p|0)==3){a[f]=c[n>>2];c[g>>2]=f+1}p=b+32|0;while(1){o=c[g>>2]|0;if(!(o>>>0>f>>>0)){break a}q=o+ -1|0;c[g>>2]=q;if((vf(a[q]|0,c[p>>2]|0)|0)==-1){m=-1;break}}i=e;return m|0}}while(0);c[n>>2]=d;a[k]=1;m=d;i=e;return m|0}function am(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;e=i;i=i+32|0;f=e+16|0;g=e;h=e+4|0;j=e+8|0;k=b+52|0;if((a[k]|0)!=0){l=b+48|0;m=c[l>>2]|0;if(!d){n=m;i=e;return n|0}c[l>>2]=-1;a[k]=0;n=m;i=e;return n|0}m=c[b+44>>2]|0;k=(m|0)>1?m:1;a:do{if((k|0)>0){m=b+32|0;l=0;while(1){o=pg(c[m>>2]|0)|0;if((o|0)==-1){n=-1;break}a[f+l|0]=o;l=l+1|0;if((l|0)>=(k|0)){break a}}i=e;return n|0}}while(0);b:do{if((a[b+53|0]|0)==0){l=b+40|0;m=b+36|0;o=g+4|0;p=b+32|0;q=k;while(1){r=c[l>>2]|0;s=r;t=c[s>>2]|0;u=c[s+4>>2]|0;s=c[m>>2]|0;v=f+q|0;w=dh[c[(c[s>>2]|0)+16>>2]&15](s,r,f,v,h,g,o,j)|0;if((w|0)==2){n=-1;x=22;break}else if((w|0)==3){x=14;break}else if((w|0)!=1){y=q;break b}w=c[l>>2]|0;c[w>>2]=t;c[w+4>>2]=u;if((q|0)==8){n=-1;x=22;break}u=pg(c[p>>2]|0)|0;if((u|0)==-1){n=-1;x=22;break}a[v]=u;q=q+1|0}if((x|0)==14){c[g>>2]=a[f]|0;y=q;break}else if((x|0)==22){i=e;return n|0}}else{c[g>>2]=a[f]|0;y=k}}while(0);if(d){d=c[g>>2]|0;c[b+48>>2]=d;n=d;i=e;return n|0}d=b+32|0;b=y;while(1){if((b|0)<=0){break}y=b+ -1|0;if((vf(a[f+y|0]|0,c[d>>2]|0)|0)==-1){n=-1;x=22;break}else{b=y}}if((x|0)==22){i=e;return n|0}n=c[g>>2]|0;i=e;return n|0}function bm(a){a=a|0;var b=0;b=i;c[a>>2]=19336;vs(a+4|0);i=b;return}function cm(a){a=a|0;var b=0;b=i;c[a>>2]=19336;vs(a+4|0);vv(a);i=b;return}function dm(b,d){b=b|0;d=d|0;var e=0,f=0;e=i;Mg[c[(c[b>>2]|0)+24>>2]&127](b)|0;f=ws(d,22208)|0;c[b+36>>2]=f;a[b+44|0]=(Mg[c[(c[f>>2]|0)+28>>2]&127](f)|0)&1;i=e;return}function em(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;b=i;i=i+16|0;d=b+8|0;e=b;f=a+36|0;g=a+40|0;h=d+8|0;j=d;k=a+32|0;while(1){a=c[f>>2]|0;l=Pg[c[(c[a>>2]|0)+20>>2]&15](a,c[g>>2]|0,d,h,e)|0;a=(c[e>>2]|0)-j|0;if((wf(d|0,1,a|0,c[k>>2]|0)|0)!=(a|0)){m=-1;n=5;break}if((l|0)==2){m=-1;n=5;break}else if((l|0)!=1){n=4;break}}if((n|0)==4){m=((gg(c[k>>2]|0)|0)!=0)<<31>>31;i=b;return m|0}else if((n|0)==5){i=b;return m|0}return 0}function fm(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0;g=i;if((a[b+44|0]|0)!=0){h=wf(e|0,1,f|0,c[b+32>>2]|0)|0;i=g;return h|0}if((f|0)>0){j=e;k=0}else{h=0;i=g;return h|0}while(1){if((ch[c[(c[b>>2]|0)+52>>2]&31](b,d[j]|0)|0)==-1){h=k;l=6;break}e=k+1|0;if((e|0)<(f|0)){j=j+1|0;k=e}else{h=e;l=6;break}}if((l|0)==6){i=g;return h|0}return 0}function gm(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;e=i;i=i+32|0;f=e+16|0;g=e+8|0;h=e;j=e+4|0;k=(d|0)==-1;a:do{if(!k){a[g]=d;if((a[b+44|0]|0)!=0){if((wf(g|0,1,1,c[b+32>>2]|0)|0)==1){break}else{l=-1}i=e;return l|0}c[h>>2]=f;m=g+1|0;n=b+36|0;o=b+40|0;p=f+8|0;q=f;r=b+32|0;s=g;while(1){t=c[n>>2]|0;u=dh[c[(c[t>>2]|0)+12>>2]&15](t,c[o>>2]|0,s,m,j,f,p,h)|0;if((c[j>>2]|0)==(s|0)){l=-1;v=12;break}if((u|0)==3){v=7;break}t=(u|0)==1;if(!(u>>>0<2)){l=-1;v=12;break}u=(c[h>>2]|0)-q|0;if((wf(f|0,1,u|0,c[r>>2]|0)|0)!=(u|0)){l=-1;v=12;break}if(t){s=t?c[j>>2]|0:s}else{break a}}if((v|0)==7){if((wf(s|0,1,1,c[r>>2]|0)|0)==1){break}else{l=-1}i=e;return l|0}else if((v|0)==12){i=e;return l|0}}}while(0);l=k?0:d;i=e;return l|0}function hm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;i=i+16|0;g=f;c[b>>2]=19336;h=b+4|0;ts(h);j=b+8|0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;c[j+16>>2]=0;c[j+20>>2]=0;c[b>>2]=18768;c[b+32>>2]=d;c[b+40>>2]=e;c[b+48>>2]=-1;a[b+52|0]=0;us(g,h);h=ws(g,22208)|0;e=b+36|0;c[e>>2]=h;d=b+44|0;c[d>>2]=Mg[c[(c[h>>2]|0)+24>>2]&127](h)|0;h=c[e>>2]|0;a[b+53|0]=(Mg[c[(c[h>>2]|0)+28>>2]&127](h)|0)&1;if((c[d>>2]|0)>8){Gr(18608)}else{vs(g);i=f;return}}function im(a){a=a|0;var b=0;b=i;c[a>>2]=19336;vs(a+4|0);i=b;return}function jm(a){a=a|0;var b=0;b=i;c[a>>2]=19336;vs(a+4|0);vv(a);i=b;return}function km(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;e=i;f=ws(d,22208)|0;d=b+36|0;c[d>>2]=f;g=b+44|0;c[g>>2]=Mg[c[(c[f>>2]|0)+24>>2]&127](f)|0;f=c[d>>2]|0;a[b+53|0]=(Mg[c[(c[f>>2]|0)+28>>2]&127](f)|0)&1;if((c[g>>2]|0)>8){Gr(18608)}else{i=e;return}}function lm(a){a=a|0;var b=0,c=0;b=i;c=om(a,0)|0;i=b;return c|0}function mm(a){a=a|0;var b=0,c=0;b=i;c=om(a,1)|0;i=b;return c|0}function nm(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;i=i+32|0;f=e+16|0;g=e;h=e+8|0;j=e+4|0;k=b+52|0;l=(a[k]|0)!=0;if((d|0)==-1){if(l){m=-1;i=e;return m|0}n=c[b+48>>2]|0;a[k]=(n|0)!=-1|0;m=n;i=e;return m|0}n=b+48|0;a:do{if(l){a[h]=c[n>>2];o=c[b+36>>2]|0;p=dh[c[(c[o>>2]|0)+12>>2]&15](o,c[b+40>>2]|0,h,h+1|0,j,f,f+8|0,g)|0;if((p|0)==1|(p|0)==2){m=-1;i=e;return m|0}else if((p|0)==3){a[f]=c[n>>2];c[g>>2]=f+1}p=b+32|0;while(1){o=c[g>>2]|0;if(!(o>>>0>f>>>0)){break a}q=o+ -1|0;c[g>>2]=q;if((vf(a[q]|0,c[p>>2]|0)|0)==-1){m=-1;break}}i=e;return m|0}}while(0);c[n>>2]=d;a[k]=1;m=d;i=e;return m|0}function om(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;f=i;i=i+32|0;g=f+16|0;h=f+8|0;j=f;k=f+4|0;l=b+52|0;if((a[l]|0)!=0){m=b+48|0;n=c[m>>2]|0;if(!e){o=n;i=f;return o|0}c[m>>2]=-1;a[l]=0;o=n;i=f;return o|0}n=c[b+44>>2]|0;l=(n|0)>1?n:1;a:do{if((l|0)>0){n=b+32|0;m=0;while(1){p=pg(c[n>>2]|0)|0;if((p|0)==-1){o=-1;break}a[g+m|0]=p;m=m+1|0;if((m|0)>=(l|0)){break a}}i=f;return o|0}}while(0);b:do{if((a[b+53|0]|0)==0){m=b+40|0;n=b+36|0;p=h+1|0;q=b+32|0;r=l;while(1){s=c[m>>2]|0;t=s;u=c[t>>2]|0;v=c[t+4>>2]|0;t=c[n>>2]|0;w=g+r|0;x=dh[c[(c[t>>2]|0)+16>>2]&15](t,s,g,w,j,h,p,k)|0;if((x|0)==3){y=14;break}else if((x|0)==2){o=-1;y=23;break}else if((x|0)!=1){z=r;break b}x=c[m>>2]|0;c[x>>2]=u;c[x+4>>2]=v;if((r|0)==8){o=-1;y=23;break}v=pg(c[q>>2]|0)|0;if((v|0)==-1){o=-1;y=23;break}a[w]=v;r=r+1|0}if((y|0)==14){a[h]=a[g]|0;z=r;break}else if((y|0)==23){i=f;return o|0}}else{a[h]=a[g]|0;z=l}}while(0);do{if(!e){l=b+32|0;k=z;while(1){if((k|0)<=0){y=21;break}j=k+ -1|0;if((vf(d[g+j|0]|0,c[l>>2]|0)|0)==-1){o=-1;y=23;break}else{k=j}}if((y|0)==21){A=a[h]|0;break}else if((y|0)==23){i=f;return o|0}}else{k=a[h]|0;c[b+48>>2]=k&255;A=k}}while(0);o=A&255;i=f;return o|0}function pm(){var a=0;a=i;Nl(0);Ag(164,18032,p|0)|0;i=a;return}function qm(a){a=a|0;return}function rm(a){a=a|0;var b=0;b=a+4|0;c[b>>2]=(c[b>>2]|0)+1;return}function sm(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;d=a+4|0;e=c[d>>2]|0;c[d>>2]=e+ -1;if((e|0)!=0){f=0;i=b;return f|0}Kg[c[(c[a>>2]|0)+8>>2]&255](a);f=1;i=b;return f|0}function tm(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;c[a>>2]=18912;e=Rv(b|0)|0;f=uv(e+13|0)|0;c[f+4>>2]=e;c[f>>2]=e;g=f+12|0;c[a+4>>2]=g;c[f+8>>2]=0;Nv(g|0,b|0,e+1|0)|0;i=d;return}function um(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;c[a>>2]=18912;d=a+4|0;e=(c[d>>2]|0)+ -4|0;f=c[e>>2]|0;c[e>>2]=f+ -1;if((f+ -1|0)<0){wv((c[d>>2]|0)+ -12|0)}Tb(a|0);vv(a);i=b;return}function vm(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;c[a>>2]=18912;d=a+4|0;e=(c[d>>2]|0)+ -4|0;f=c[e>>2]|0;c[e>>2]=f+ -1;if((f+ -1|0)>=0){Tb(a|0);i=b;return}wv((c[d>>2]|0)+ -12|0);Tb(a|0);i=b;return}function wm(a){a=a|0;return c[a+4>>2]|0}function xm(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;c[b>>2]=18936;if((a[d]&1)==0){f=d+1|0}else{f=c[d+8>>2]|0}d=Rv(f|0)|0;g=uv(d+13|0)|0;c[g+4>>2]=d;c[g>>2]=d;h=g+12|0;c[b+4>>2]=h;c[g+8>>2]=0;Nv(h|0,f|0,d+1|0)|0;i=e;return}function ym(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;c[a>>2]=18936;e=Rv(b|0)|0;f=uv(e+13|0)|0;c[f+4>>2]=e;c[f>>2]=e;g=f+12|0;c[a+4>>2]=g;c[f+8>>2]=0;Nv(g|0,b|0,e+1|0)|0;i=d;return}function zm(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;c[a>>2]=18936;d=a+4|0;e=(c[d>>2]|0)+ -4|0;f=c[e>>2]|0;c[e>>2]=f+ -1;if((f+ -1|0)<0){wv((c[d>>2]|0)+ -12|0)}Tb(a|0);vv(a);i=b;return}function Am(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;c[a>>2]=18936;d=a+4|0;e=(c[d>>2]|0)+ -4|0;f=c[e>>2]|0;c[e>>2]=f+ -1;if((f+ -1|0)>=0){Tb(a|0);i=b;return}wv((c[d>>2]|0)+ -12|0);Tb(a|0);i=b;return}function Bm(a){a=a|0;return c[a+4>>2]|0}function Cm(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;c[a>>2]=18912;d=a+4|0;e=(c[d>>2]|0)+ -4|0;f=c[e>>2]|0;c[e>>2]=f+ -1;if((f+ -1|0)<0){wv((c[d>>2]|0)+ -12|0)}Tb(a|0);vv(a);i=b;return}function Dm(a){a=a|0;return}function Em(a,b,d){a=a|0;b=b|0;d=d|0;c[a>>2]=d;c[a+4>>2]=b;return}function Fm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;i=i+16|0;f=e;Xg[c[(c[a>>2]|0)+12>>2]&31](f,a,b);if((c[f+4>>2]|0)!=(c[d+4>>2]|0)){g=0;i=e;return g|0}g=(c[f>>2]|0)==(c[d>>2]|0);i=e;return g|0}function Gm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;if((c[b+4>>2]|0)!=(a|0)){f=0;i=e;return f|0}f=(c[b>>2]|0)==(d|0);i=e;return f|0}function Hm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;d=i;f=xg(e|0)|0;e=Rv(f|0)|0;if(e>>>0>4294967279){Nm(0)}if(e>>>0<11){a[b]=e<<1;g=b+1|0;Nv(g|0,f|0,e|0)|0;h=g+e|0;a[h]=0;i=d;return}else{j=e+16&-16;k=sv(j)|0;c[b+8>>2]=k;c[b>>2]=j|1;c[b+4>>2]=e;g=k;Nv(g|0,f|0,e|0)|0;h=g+e|0;a[h]=0;i=d;return}}function Im(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;f=i;i=i+16|0;g=f;h=c[d>>2]|0;if((h|0)!=0){j=a[e]|0;if((j&1)==0){k=(j&255)>>>1}else{k=c[e+4>>2]|0}if((k|0)==0){l=h}else{Ym(e,19088,2)|0;l=c[d>>2]|0}h=c[d+4>>2]|0;Xg[c[(c[h>>2]|0)+24>>2]&31](g,h,l);l=a[g]|0;if((l&1)==0){m=g+1|0;n=(l&255)>>>1}else{m=c[g+8>>2]|0;n=c[g+4>>2]|0}Ym(e,m,n)|0;if(!((a[g]&1)==0)){vv(c[g+8>>2]|0)}}c[b+0>>2]=c[e+0>>2];c[b+4>>2]=c[e+4>>2];c[b+8>>2]=c[e+8>>2];c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;i=f;return}function Jm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;i=i+32|0;g=f+12|0;h=f;j=Rv(e|0)|0;if(j>>>0>4294967279){Nm(0)}if(j>>>0<11){a[h]=j<<1;k=h+1|0}else{l=j+16&-16;m=sv(l)|0;c[h+8>>2]=m;c[h>>2]=l|1;c[h+4>>2]=j;k=m}Nv(k|0,e|0,j|0)|0;a[k+j|0]=0;Im(g,d,h);xm(b,g);if(!((a[g]&1)==0)){vv(c[g+8>>2]|0)}if(!((a[h]&1)==0)){vv(c[h+8>>2]|0)}c[b>>2]=19104;h=d;d=c[h+4>>2]|0;g=b+8|0;c[g>>2]=c[h>>2];c[g+4>>2]=d;i=f;return}function Km(a){a=a|0;var b=0;b=i;Am(a);vv(a);i=b;return}function Lm(a){a=a|0;var b=0;b=i;Am(a);i=b;return}function Mm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;Cd(19240)|0;if((c[a>>2]|0)==1){do{ff(19264,19240)|0}while((c[a>>2]|0)==1)}if((c[a>>2]|0)==0){c[a>>2]=1;_f(19240)|0;Kg[d&255](b);Cd(19240)|0;c[a>>2]=-1;_f(19240)|0;Hb(19264)|0;i=e;return}else{_f(19240)|0;i=e;return}}function Nm(a){a=a|0;a=Wd(8)|0;tm(a,19312);c[a>>2]=18992;qg(a|0,19032,68)}function Om(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;if((a[d]&1)==0){c[b+0>>2]=c[d+0>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2];i=e;return}f=c[d+8>>2]|0;g=c[d+4>>2]|0;if(g>>>0>4294967279){Nm(0)}if(g>>>0<11){a[b]=g<<1;h=b+1|0}else{d=g+16&-16;j=sv(d)|0;c[b+8>>2]=j;c[b>>2]=d|1;c[b+4>>2]=g;h=j}Nv(h|0,f|0,g|0)|0;a[h+g|0]=0;i=e;return}function Pm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;if(e>>>0>4294967279){Nm(0)}if(e>>>0<11){a[b]=e<<1;g=b+1|0}else{h=e+16&-16;j=sv(h)|0;c[b+8>>2]=j;c[b>>2]=h|1;c[b+4>>2]=e;g=j}Nv(g|0,d|0,e|0)|0;a[g+e|0]=0;i=f;return}function Qm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;if(d>>>0>4294967279){Nm(0)}if(d>>>0<11){a[b]=d<<1;g=b+1|0}else{h=d+16&-16;j=sv(h)|0;c[b+8>>2]=j;c[b>>2]=h|1;c[b+4>>2]=d;g=j}Ov(g|0,e|0,d|0)|0;a[g+d|0]=0;i=f;return}function Rm(b){b=b|0;var d=0;d=i;if((a[b]&1)==0){i=d;return}vv(c[b+8>>2]|0);i=d;return}function Sm(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;if((b|0)==(d|0)){i=e;return b|0}f=a[d]|0;if((f&1)==0){g=(f&255)>>>1;h=d+1|0}else{g=c[d+4>>2]|0;h=c[d+8>>2]|0}d=a[b]|0;if((d&1)==0){j=10;k=d}else{d=c[b>>2]|0;j=(d&-2)+ -1|0;k=d&255}d=(k&1)==0;if(j>>>0<g>>>0){if(d){l=(k&255)>>>1}else{l=c[b+4>>2]|0}Zm(b,j,g-j|0,l,0,l,g,h);i=e;return b|0}if(d){m=b+1|0}else{m=c[b+8>>2]|0}Sv(m|0,h|0,g|0)|0;a[m+g|0]=0;if((a[b]&1)==0){a[b]=g<<1;i=e;return b|0}else{c[b+4>>2]=g;i=e;return b|0}return 0}function Tm(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;f=Rv(d|0)|0;g=a[b]|0;if((g&1)==0){h=g;j=10}else{g=c[b>>2]|0;h=g&255;j=(g&-2)+ -1|0}g=(h&1)==0;if(j>>>0<f>>>0){if(g){k=(h&255)>>>1}else{k=c[b+4>>2]|0}Zm(b,j,f-j|0,k,0,k,f,d);i=e;return b|0}if(g){l=b+1|0}else{l=c[b+8>>2]|0}Sv(l|0,d|0,f|0)|0;a[l+f|0]=0;if((a[b]&1)==0){a[b]=f<<1;i=e;return b|0}else{c[b+4>>2]=f;i=e;return b|0}return 0}function Um(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;g=a[b]|0;h=(g&1)==0;if(h){j=(g&255)>>>1}else{j=c[b+4>>2]|0}if(j>>>0<d>>>0){Vm(b,d-j|0,e)|0;i=f;return}if(h){a[b+d+1|0]=0;a[b]=d<<1;i=f;return}else{a[(c[b+8>>2]|0)+d|0]=0;c[b+4>>2]=d;i=f;return}}function Vm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;if((d|0)==0){i=f;return b|0}g=a[b]|0;if((g&1)==0){h=10;j=g}else{g=c[b>>2]|0;h=(g&-2)+ -1|0;j=g&255}if((j&1)==0){k=(j&255)>>>1}else{k=c[b+4>>2]|0}if((h-k|0)>>>0<d>>>0){_m(b,h,d-h+k|0,k,k,0,0);l=a[b]|0}else{l=j}if((l&1)==0){m=b+1|0}else{m=c[b+8>>2]|0}Ov(m+k|0,e|0,d|0)|0;e=k+d|0;if((a[b]&1)==0){a[b]=e<<1}else{c[b+4>>2]=e}a[m+e|0]=0;i=f;return b|0}function Wm(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;if(d>>>0>4294967279){Nm(0)}f=a[b]|0;if((f&1)==0){g=10;h=f}else{f=c[b>>2]|0;g=(f&-2)+ -1|0;h=f&255}if((h&1)==0){j=(h&255)>>>1}else{j=c[b+4>>2]|0}f=j>>>0>d>>>0?j:d;if(f>>>0<11){k=10}else{k=(f+16&-16)+ -1|0}if((k|0)==(g|0)){i=e;return}do{if((k|0)!=10){f=k+1|0;if(k>>>0>g>>>0){l=sv(f)|0}else{l=sv(f)|0}if((h&1)==0){m=l;n=1;o=b+1|0;p=0;break}else{m=l;n=1;o=c[b+8>>2]|0;p=1;break}}else{m=b+1|0;n=0;o=c[b+8>>2]|0;p=1}}while(0);if((h&1)==0){q=(h&255)>>>1}else{q=c[b+4>>2]|0}Nv(m|0,o|0,q+1|0)|0;if(p){vv(o)}if(n){c[b>>2]=k+1|1;c[b+4>>2]=j;c[b+8>>2]=m;i=e;return}else{a[b]=j<<1;i=e;return}}function Xm(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;f=a[b]|0;g=(f&1)!=0;if(g){h=(c[b>>2]&-2)+ -1|0;j=c[b+4>>2]|0}else{h=10;j=(f&255)>>>1}if((j|0)==(h|0)){_m(b,h,1,h,h,0,0);if((a[b]&1)==0){k=7}else{k=8}}else{if(g){k=8}else{k=7}}if((k|0)==7){a[b]=(j<<1)+2;l=b+1|0;m=j+1|0;n=l+j|0;a[n]=d;o=l+m|0;a[o]=0;i=e;return}else if((k|0)==8){k=c[b+8>>2]|0;g=j+1|0;c[b+4>>2]=g;l=k;m=g;n=l+j|0;a[n]=d;o=l+m|0;a[o]=0;i=e;return}}function Ym(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;g=a[b]|0;if((g&1)==0){h=10;j=g}else{g=c[b>>2]|0;h=(g&-2)+ -1|0;j=g&255}if((j&1)==0){k=(j&255)>>>1}else{k=c[b+4>>2]|0}if((h-k|0)>>>0<e>>>0){Zm(b,h,e-h+k|0,k,k,0,e,d);i=f;return b|0}if((e|0)==0){i=f;return b|0}if((j&1)==0){l=b+1|0}else{l=c[b+8>>2]|0}Nv(l+k|0,d|0,e|0)|0;d=k+e|0;if((a[b]&1)==0){a[b]=d<<1}else{c[b+4>>2]=d}a[l+d|0]=0;i=f;return b|0}function Zm(b,d,e,f,g,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;l=i;if((-18-d|0)>>>0<e>>>0){Nm(0)}if((a[b]&1)==0){m=b+1|0}else{m=c[b+8>>2]|0}if(d>>>0<2147483623){n=e+d|0;e=d<<1;o=n>>>0<e>>>0?e:n;if(o>>>0<11){p=11}else{p=o+16&-16}}else{p=-17}o=sv(p)|0;if((g|0)!=0){Nv(o|0,m|0,g|0)|0}if((j|0)!=0){Nv(o+g|0,k|0,j|0)|0}k=f-h|0;if((k|0)!=(g|0)){Nv(o+(j+g)|0,m+(h+g)|0,k-g|0)|0}if((d|0)==10){q=b+8|0;c[q>>2]=o;r=p|1;c[b>>2]=r;s=k+j|0;t=b+4|0;c[t>>2]=s;u=o+s|0;a[u]=0;i=l;return}vv(m);q=b+8|0;c[q>>2]=o;r=p|1;c[b>>2]=r;s=k+j|0;t=b+4|0;c[t>>2]=s;u=o+s|0;a[u]=0;i=l;return}function _m(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0;k=i;if((-17-d|0)>>>0<e>>>0){Nm(0)}if((a[b]&1)==0){l=b+1|0}else{l=c[b+8>>2]|0}if(d>>>0<2147483623){m=e+d|0;e=d<<1;n=m>>>0<e>>>0?e:m;if(n>>>0<11){o=11}else{o=n+16&-16}}else{o=-17}n=sv(o)|0;if((g|0)!=0){Nv(n|0,l|0,g|0)|0}m=f-h|0;if((m|0)!=(g|0)){Nv(n+(j+g)|0,l+(h+g)|0,m-g|0)|0}if((d|0)==10){p=b+8|0;c[p>>2]=n;q=o|1;c[b>>2]=q;i=k;return}vv(l);p=b+8|0;c[p>>2]=n;q=o|1;c[b>>2]=q;i=k;return}function $m(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;if(e>>>0>1073741807){Nm(0)}if(e>>>0<2){a[b]=e<<1;g=b+4|0}else{h=e+4&-4;j=sv(h<<2)|0;c[b+8>>2]=j;c[b>>2]=h|1;c[b+4>>2]=e;g=j}Pu(g,d,e)|0;c[g+(e<<2)>>2]=0;i=f;return}function an(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;if(d>>>0>1073741807){Nm(0)}if(d>>>0<2){a[b]=d<<1;g=b+4|0}else{h=d+4&-4;j=sv(h<<2)|0;c[b+8>>2]=j;c[b>>2]=h|1;c[b+4>>2]=d;g=j}Ru(g,e,d)|0;c[g+(d<<2)>>2]=0;i=f;return}function bn(b){b=b|0;var d=0;d=i;if((a[b]&1)==0){i=d;return}vv(c[b+8>>2]|0);i=d;return}function cn(a,b){a=a|0;b=b|0;var c=0,d=0;c=i;d=dn(a,b,Ou(b)|0)|0;i=c;return d|0}function dn(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;g=a[b]|0;if((g&1)==0){h=1;j=g}else{g=c[b>>2]|0;h=(g&-2)+ -1|0;j=g&255}g=(j&1)==0;if(h>>>0<e>>>0){if(g){k=(j&255)>>>1}else{k=c[b+4>>2]|0}gn(b,h,e-h|0,k,0,k,e,d);i=f;return b|0}if(g){l=b+4|0}else{l=c[b+8>>2]|0}Qu(l,d,e)|0;c[l+(e<<2)>>2]=0;if((a[b]&1)==0){a[b]=e<<1;i=f;return b|0}else{c[b+4>>2]=e;i=f;return b|0}return 0}function en(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;if(d>>>0>1073741807){Nm(0)}f=a[b]|0;if((f&1)==0){g=1;h=f}else{f=c[b>>2]|0;g=(f&-2)+ -1|0;h=f&255}if((h&1)==0){j=(h&255)>>>1}else{j=c[b+4>>2]|0}f=j>>>0>d>>>0?j:d;if(f>>>0<2){k=1}else{k=(f+4&-4)+ -1|0}if((k|0)==(g|0)){i=e;return}do{if((k|0)!=1){f=(k<<2)+4|0;if(k>>>0>g>>>0){l=sv(f)|0}else{l=sv(f)|0}if((h&1)==0){m=l;n=1;o=b+4|0;p=0;break}else{m=l;n=1;o=c[b+8>>2]|0;p=1;break}}else{m=b+4|0;n=0;o=c[b+8>>2]|0;p=1}}while(0);if((h&1)==0){q=(h&255)>>>1}else{q=c[b+4>>2]|0}Pu(m,o,q+1|0)|0;if(p){vv(o)}if(n){c[b>>2]=k+1|1;c[b+4>>2]=j;c[b+8>>2]=m;i=e;return}else{a[b]=j<<1;i=e;return}}function fn(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;f=a[b]|0;g=(f&1)!=0;if(g){h=(c[b>>2]&-2)+ -1|0;j=c[b+4>>2]|0}else{h=1;j=(f&255)>>>1}if((j|0)==(h|0)){hn(b,h,1,h,h,0,0);if((a[b]&1)==0){k=7}else{k=8}}else{if(g){k=8}else{k=7}}if((k|0)==7){a[b]=(j<<1)+2;l=b+4|0;m=j+1|0;n=l+(j<<2)|0;c[n>>2]=d;o=l+(m<<2)|0;c[o>>2]=0;i=e;return}else if((k|0)==8){k=c[b+8>>2]|0;g=j+1|0;c[b+4>>2]=g;l=k;m=g;n=l+(j<<2)|0;c[n>>2]=d;o=l+(m<<2)|0;c[o>>2]=0;i=e;return}}function gn(b,d,e,f,g,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;l=i;if((1073741806-d|0)>>>0<e>>>0){Nm(0)}if((a[b]&1)==0){m=b+4|0}else{m=c[b+8>>2]|0}if(d>>>0<536870887){n=e+d|0;e=d<<1;o=n>>>0<e>>>0?e:n;if(o>>>0<2){p=2}else{p=o+4&-4}}else{p=1073741807}o=sv(p<<2)|0;if((g|0)!=0){Pu(o,m,g)|0}if((j|0)!=0){Pu(o+(g<<2)|0,k,j)|0}k=f-h|0;if((k|0)!=(g|0)){Pu(o+(j+g<<2)|0,m+(h+g<<2)|0,k-g|0)|0}if((d|0)==1){q=b+8|0;c[q>>2]=o;r=p|1;c[b>>2]=r;s=k+j|0;t=b+4|0;c[t>>2]=s;u=o+(s<<2)|0;c[u>>2]=0;i=l;return}vv(m);q=b+8|0;c[q>>2]=o;r=p|1;c[b>>2]=r;s=k+j|0;t=b+4|0;c[t>>2]=s;u=o+(s<<2)|0;c[u>>2]=0;i=l;return}function hn(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0;k=i;if((1073741807-d|0)>>>0<e>>>0){Nm(0)}if((a[b]&1)==0){l=b+4|0}else{l=c[b+8>>2]|0}if(d>>>0<536870887){m=e+d|0;e=d<<1;n=m>>>0<e>>>0?e:m;if(n>>>0<2){o=2}else{o=n+4&-4}}else{o=1073741807}n=sv(o<<2)|0;if((g|0)!=0){Pu(n,l,g)|0}m=f-h|0;if((m|0)!=(g|0)){Pu(n+(j+g<<2)|0,l+(h+g<<2)|0,m-g|0)|0}if((d|0)==1){p=b+8|0;c[p>>2]=n;q=o|1;c[b>>2]=q;i=k;return}vv(l);p=b+8|0;c[p>>2]=n;q=o|1;c[b>>2]=q;i=k;return}function jn(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;i=i+16|0;f=e+8|0;g=e;h=(c[b+24>>2]|0)==0;if(h){c[b+16>>2]=d|1}else{c[b+16>>2]=d}if(((h&1|d)&c[b+20>>2]|0)==0){i=e;return}e=Wd(16)|0;if((a[19680]|0)==0?(ab(19680)|0)!=0:0){c[4918]=20456;Ag(91,19672,p|0)|0;Bc(19680)}b=g;c[b>>2]=1;c[b+4>>2]=19672;c[f+0>>2]=c[g+0>>2];c[f+4>>2]=c[g+4>>2];Jm(e,f,19728);c[e>>2]=19696;qg(e|0,19776,87)}function kn(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;c[a>>2]=19720;d=c[a+40>>2]|0;e=a+32|0;f=a+36|0;if((d|0)!=0){g=d;do{g=g+ -1|0;Xg[c[(c[e>>2]|0)+(g<<2)>>2]&31](0,a,c[(c[f>>2]|0)+(g<<2)>>2]|0)}while((g|0)!=0)}vs(a+28|0);ov(c[e>>2]|0);ov(c[f>>2]|0);ov(c[a+48>>2]|0);ov(c[a+60>>2]|0);i=b;return}function ln(a,b){a=a|0;b=b|0;var c=0;c=i;us(a,b+28|0);i=c;return}function mn(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;c[a+24>>2]=b;c[a+16>>2]=(b|0)==0;c[a+20>>2]=0;c[a+4>>2]=4098;c[a+12>>2]=0;c[a+8>>2]=6;b=a+28|0;e=a+32|0;a=e+40|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(a|0));ts(b);i=d;return}function nn(a){a=a|0;var b=0;b=i;c[a>>2]=19336;vs(a+4|0);vv(a);i=b;return}function on(a){a=a|0;var b=0;b=i;c[a>>2]=19336;vs(a+4|0);i=b;return}function pn(a,b){a=a|0;b=b|0;return}function qn(a,b,c){a=a|0;b=b|0;c=c|0;return a|0}function rn(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;g=a;c[g>>2]=0;c[g+4>>2]=0;g=a+8|0;c[g>>2]=-1;c[g+4>>2]=-1;return}function sn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;e=a;c[e>>2]=0;c[e+4>>2]=0;e=a+8|0;c[e>>2]=-1;c[e+4>>2]=-1;return}function tn(a){a=a|0;return 0}function un(a){a=a|0;return 0}function vn(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;f=i;if((e|0)<=0){g=0;i=f;return g|0}h=b+12|0;j=b+16|0;k=d;d=0;while(1){l=c[h>>2]|0;if(l>>>0<(c[j>>2]|0)>>>0){c[h>>2]=l+1;m=a[l]|0}else{l=Mg[c[(c[b>>2]|0)+40>>2]&127](b)|0;if((l|0)==-1){g=d;n=8;break}m=l&255}a[k]=m;l=d+1|0;if((l|0)<(e|0)){k=k+1|0;d=l}else{g=l;n=8;break}}if((n|0)==8){i=f;return g|0}return 0}function wn(a){a=a|0;return-1}function xn(a){a=a|0;var b=0,e=0,f=0;b=i;if((Mg[c[(c[a>>2]|0)+36>>2]&127](a)|0)==-1){e=-1;i=b;return e|0}f=a+12|0;a=c[f>>2]|0;c[f>>2]=a+1;e=d[a]|0;i=b;return e|0}function yn(a,b){a=a|0;b=b|0;return-1}function zn(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;g=i;if((f|0)<=0){h=0;i=g;return h|0}j=b+24|0;k=b+28|0;l=e;e=0;while(1){m=c[j>>2]|0;if(!(m>>>0<(c[k>>2]|0)>>>0)){if((ch[c[(c[b>>2]|0)+52>>2]&31](b,d[l]|0)|0)==-1){h=e;n=7;break}}else{o=a[l]|0;c[j>>2]=m+1;a[m]=o}o=e+1|0;if((o|0)<(f|0)){l=l+1|0;e=o}else{h=o;n=7;break}}if((n|0)==7){i=g;return h|0}return 0}function An(a,b){a=a|0;b=b|0;return-1}function Bn(a){a=a|0;var b=0;b=i;c[a>>2]=19400;vs(a+4|0);vv(a);i=b;return}function Cn(a){a=a|0;var b=0;b=i;c[a>>2]=19400;vs(a+4|0);i=b;return}function Dn(a,b){a=a|0;b=b|0;return}function En(a,b,c){a=a|0;b=b|0;c=c|0;return a|0}function Fn(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;g=a;c[g>>2]=0;c[g+4>>2]=0;g=a+8|0;c[g>>2]=-1;c[g+4>>2]=-1;return}function Gn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;e=a;c[e>>2]=0;c[e+4>>2]=0;e=a+8|0;c[e>>2]=-1;c[e+4>>2]=-1;return}function Hn(a){a=a|0;return 0}function In(a){a=a|0;return 0}function Jn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;if((d|0)<=0){f=0;i=e;return f|0}g=a+12|0;h=a+16|0;j=b;b=0;while(1){k=c[g>>2]|0;if(!(k>>>0<(c[h>>2]|0)>>>0)){l=Mg[c[(c[a>>2]|0)+40>>2]&127](a)|0;if((l|0)==-1){f=b;m=8;break}else{n=l}}else{c[g>>2]=k+4;n=c[k>>2]|0}c[j>>2]=n;k=b+1|0;if((k|0)>=(d|0)){f=k;m=8;break}j=j+4|0;b=k}if((m|0)==8){i=e;return f|0}return 0}function Kn(a){a=a|0;return-1}function Ln(a){a=a|0;var b=0,d=0,e=0;b=i;if((Mg[c[(c[a>>2]|0)+36>>2]&127](a)|0)==-1){d=-1;i=b;return d|0}e=a+12|0;a=c[e>>2]|0;c[e>>2]=a+4;d=c[a>>2]|0;i=b;return d|0}function Mn(a,b){a=a|0;b=b|0;return-1}function Nn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;if((d|0)<=0){f=0;i=e;return f|0}g=a+24|0;h=a+28|0;j=b;b=0;while(1){k=c[g>>2]|0;if(!(k>>>0<(c[h>>2]|0)>>>0)){if((ch[c[(c[a>>2]|0)+52>>2]&31](a,c[j>>2]|0)|0)==-1){f=b;l=8;break}}else{m=c[j>>2]|0;c[g>>2]=k+4;c[k>>2]=m}m=b+1|0;if((m|0)>=(d|0)){f=m;l=8;break}j=j+4|0;b=m}if((l|0)==8){i=e;return f|0}return 0}function On(a,b){a=a|0;b=b|0;return-1}function Pn(a){a=a|0;var b=0;b=i;kn(a+8|0);vv(a);i=b;return}function Qn(a){a=a|0;var b=0;b=i;kn(a+8|0);i=b;return}function Rn(a){a=a|0;var b=0,d=0;b=i;d=c[(c[a>>2]|0)+ -12>>2]|0;kn(a+(d+8)|0);vv(a+d|0);i=b;return}function Sn(a){a=a|0;var b=0;b=i;kn(a+((c[(c[a>>2]|0)+ -12>>2]|0)+8)|0);i=b;return}function Tn(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;i=i+16|0;e=d;f=c[(c[b>>2]|0)+ -12>>2]|0;if((c[b+(f+24)>>2]|0)==0){i=d;return b|0}a[e]=0;c[e+4>>2]=b;if((c[b+(f+16)>>2]|0)==0){g=c[b+(f+72)>>2]|0;if((g|0)==0){h=f}else{Tn(g)|0;h=c[(c[b>>2]|0)+ -12>>2]|0}a[e]=1;g=c[b+(h+24)>>2]|0;if((Mg[c[(c[g>>2]|0)+24>>2]&127](g)|0)==-1){g=c[(c[b>>2]|0)+ -12>>2]|0;jn(b+g|0,c[b+(g+16)>>2]|1)}}co(e);i=d;return b|0}function Un(a){a=a|0;var b=0;b=a+16|0;c[b>>2]=c[b>>2]|1;if((c[a+20>>2]&1|0)==0){return}else{_b()}}function Vn(a){a=a|0;var b=0;b=i;kn(a+8|0);vv(a);i=b;return}function Wn(a){a=a|0;var b=0;b=i;kn(a+8|0);i=b;return}function Xn(a){a=a|0;var b=0,d=0;b=i;d=c[(c[a>>2]|0)+ -12>>2]|0;kn(a+(d+8)|0);vv(a+d|0);i=b;return}function Yn(a){a=a|0;var b=0;b=i;kn(a+((c[(c[a>>2]|0)+ -12>>2]|0)+8)|0);i=b;return}function Zn(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;i=i+16|0;e=d;f=c[(c[b>>2]|0)+ -12>>2]|0;if((c[b+(f+24)>>2]|0)==0){i=d;return b|0}a[e]=0;c[e+4>>2]=b;if((c[b+(f+16)>>2]|0)==0){g=c[b+(f+72)>>2]|0;if((g|0)==0){h=f}else{Zn(g)|0;h=c[(c[b>>2]|0)+ -12>>2]|0}a[e]=1;g=c[b+(h+24)>>2]|0;if((Mg[c[(c[g>>2]|0)+24>>2]&127](g)|0)==-1){g=c[(c[b>>2]|0)+ -12>>2]|0;jn(b+g|0,c[b+(g+16)>>2]|1)}}lo(e);i=d;return b|0}function _n(a){a=a|0;var b=0;b=i;kn(a+4|0);vv(a);i=b;return}function $n(a){a=a|0;var b=0;b=i;kn(a+4|0);i=b;return}function ao(a){a=a|0;var b=0,d=0;b=i;d=c[(c[a>>2]|0)+ -12>>2]|0;kn(a+(d+4)|0);vv(a+d|0);i=b;return}function bo(a){a=a|0;var b=0;b=i;kn(a+((c[(c[a>>2]|0)+ -12>>2]|0)+4)|0);i=b;return}function co(a){a=a|0;var b=0,d=0,e=0;b=i;d=a+4|0;a=c[d>>2]|0;e=c[(c[a>>2]|0)+ -12>>2]|0;if((c[a+(e+24)>>2]|0)==0){i=b;return}if((c[a+(e+16)>>2]|0)!=0){i=b;return}if((c[a+(e+4)>>2]&8192|0)==0){i=b;return}if(gb()|0){i=b;return}e=c[d>>2]|0;a=c[e+((c[(c[e>>2]|0)+ -12>>2]|0)+24)>>2]|0;if(!((Mg[c[(c[a>>2]|0)+24>>2]&127](a)|0)==-1)){i=b;return}a=c[d>>2]|0;d=c[(c[a>>2]|0)+ -12>>2]|0;jn(a+d|0,c[a+(d+16)>>2]|1);i=b;return}function eo(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;i=i+32|0;f=e+24|0;g=e;h=e+8|0;j=e+16|0;k=e+20|0;a[h]=0;c[h+4>>2]=b;l=c[(c[b>>2]|0)+ -12>>2]|0;if((c[b+(l+16)>>2]|0)!=0){co(h);i=e;return b|0}m=c[b+(l+72)>>2]|0;if((m|0)==0){n=l}else{Tn(m)|0;n=c[(c[b>>2]|0)+ -12>>2]|0}a[h]=1;us(j,b+(n+28)|0);n=ws(j,20864)|0;vs(j);j=c[(c[b>>2]|0)+ -12>>2]|0;m=c[b+(j+24)>>2]|0;l=b+j|0;o=b+(j+76)|0;p=c[o>>2]|0;if((p|0)==-1){us(f,b+(j+28)|0);j=ws(f,22144)|0;q=ch[c[(c[j>>2]|0)+28>>2]&31](j,32)|0;vs(f);j=q<<24>>24;c[o>>2]=j;r=j}else{r=p}p=r&255;r=c[(c[n>>2]|0)+12>>2]|0;c[g>>2]=m;c[f+0>>2]=c[g+0>>2];Wg[r&31](k,n,f,l,p,d);if((c[k>>2]|0)!=0){co(h);i=e;return b|0}k=c[(c[b>>2]|0)+ -12>>2]|0;jn(b+k|0,c[b+(k+16)>>2]|5);co(h);i=e;return b|0}function fo(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;i=i+32|0;f=e+24|0;g=e;h=e+8|0;j=e+16|0;k=e+20|0;a[h]=0;c[h+4>>2]=b;l=c[(c[b>>2]|0)+ -12>>2]|0;if((c[b+(l+16)>>2]|0)!=0){co(h);i=e;return b|0}m=c[b+(l+72)>>2]|0;if((m|0)==0){n=l}else{Tn(m)|0;n=c[(c[b>>2]|0)+ -12>>2]|0}a[h]=1;us(j,b+(n+28)|0);n=ws(j,20864)|0;vs(j);j=c[(c[b>>2]|0)+ -12>>2]|0;m=c[b+(j+24)>>2]|0;l=b+j|0;o=b+(j+76)|0;p=c[o>>2]|0;if((p|0)==-1){us(f,b+(j+28)|0);j=ws(f,22144)|0;q=ch[c[(c[j>>2]|0)+28>>2]&31](j,32)|0;vs(f);j=q<<24>>24;c[o>>2]=j;r=j}else{r=p}p=r&255;r=c[(c[n>>2]|0)+16>>2]|0;c[g>>2]=m;c[f+0>>2]=c[g+0>>2];Wg[r&31](k,n,f,l,p,d);if((c[k>>2]|0)!=0){co(h);i=e;return b|0}k=c[(c[b>>2]|0)+ -12>>2]|0;jn(b+k|0,c[b+(k+16)>>2]|5);co(h);i=e;return b|0}function go(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;i=i+16|0;f=e;a[f]=0;c[f+4>>2]=b;g=c[b>>2]|0;h=c[g+ -12>>2]|0;do{if((c[b+(h+16)>>2]|0)==0){j=c[b+(h+72)>>2]|0;if((j|0)==0){k=g;l=h}else{Tn(j)|0;j=c[b>>2]|0;k=j;l=c[j+ -12>>2]|0}a[f]=1;j=c[b+(l+24)>>2]|0;if((j|0)==0){m=k}else{n=j+24|0;o=c[n>>2]|0;if((o|0)!=(c[j+28>>2]|0)){c[n>>2]=o+1;a[o]=d;break}if(!((ch[c[(c[j>>2]|0)+52>>2]&31](j,d&255)|0)==-1)){break}m=c[b>>2]|0}j=c[m+ -12>>2]|0;jn(b+j|0,c[b+(j+16)>>2]|1)}}while(0);co(f);i=e;return b|0}function ho(a){a=a|0;var b=0;b=i;kn(a+4|0);vv(a);i=b;return}function io(a){a=a|0;var b=0;b=i;kn(a+4|0);i=b;return}function jo(a){a=a|0;var b=0,d=0;b=i;d=c[(c[a>>2]|0)+ -12>>2]|0;kn(a+(d+4)|0);vv(a+d|0);i=b;return}function ko(a){a=a|0;var b=0;b=i;kn(a+((c[(c[a>>2]|0)+ -12>>2]|0)+4)|0);i=b;return}function lo(a){a=a|0;var b=0,d=0,e=0;b=i;d=a+4|0;a=c[d>>2]|0;e=c[(c[a>>2]|0)+ -12>>2]|0;if((c[a+(e+24)>>2]|0)==0){i=b;return}if((c[a+(e+16)>>2]|0)!=0){i=b;return}if((c[a+(e+4)>>2]&8192|0)==0){i=b;return}if(gb()|0){i=b;return}e=c[d>>2]|0;a=c[e+((c[(c[e>>2]|0)+ -12>>2]|0)+24)>>2]|0;if(!((Mg[c[(c[a>>2]|0)+24>>2]&127](a)|0)==-1)){i=b;return}a=c[d>>2]|0;d=c[(c[a>>2]|0)+ -12>>2]|0;jn(a+d|0,c[a+(d+16)>>2]|1);i=b;return}function mo(a){a=a|0;return 19616}function no(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;if((c|0)==1){Pm(a,19632,35);i=d;return}else{Hm(a,b,c);i=d;return}}function oo(a){a=a|0;return}function po(a){a=a|0;var b=0;b=i;Lm(a);vv(a);i=b;return}function qo(a){a=a|0;var b=0;b=i;Lm(a);i=b;return}function ro(a){a=a|0;var b=0;b=i;kn(a);vv(a);i=b;return}function so(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function to(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function uo(a){a=a|0;return}function vo(a){a=a|0;return}function wo(b,c,d,e,f){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;b=i;a:do{if((e|0)==(f|0)){g=c;h=6}else{j=e;k=c;while(1){if((k|0)==(d|0)){l=-1;break a}m=a[k]|0;n=a[j]|0;if(m<<24>>24<n<<24>>24){l=-1;break a}if(n<<24>>24<m<<24>>24){l=1;break a}m=k+1|0;n=j+1|0;if((n|0)==(f|0)){g=m;h=6;break}else{j=n;k=m}}}}while(0);if((h|0)==6){l=(g|0)!=(d|0)|0}i=b;return l|0}function xo(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;d=i;g=e;h=f-g|0;if(h>>>0>4294967279){Nm(b)}if(h>>>0<11){a[b]=h<<1;j=b+1|0}else{k=h+16&-16;l=sv(k)|0;c[b+8>>2]=l;c[b>>2]=k|1;c[b+4>>2]=h;j=l}if((e|0)==(f|0)){m=j;a[m]=0;i=d;return}else{n=e;o=j}while(1){a[o]=a[n]|0;n=n+1|0;if((n|0)==(f|0)){break}else{o=o+1|0}}m=j+(f+(0-g))|0;a[m]=0;i=d;return}function yo(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;b=i;if((c|0)==(d|0)){e=0;i=b;return e|0}else{f=0;g=c}while(1){c=(a[g]|0)+(f<<4)|0;h=c&-268435456;j=(h>>>24|h)^c;c=g+1|0;if((c|0)==(d|0)){e=j;break}else{f=j;g=c}}i=b;return e|0}function zo(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function Ao(a){a=a|0;return}function Bo(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;a=i;a:do{if((e|0)==(f|0)){g=b;h=6}else{j=e;k=b;while(1){if((k|0)==(d|0)){l=-1;break a}m=c[k>>2]|0;n=c[j>>2]|0;if((m|0)<(n|0)){l=-1;break a}if((n|0)<(m|0)){l=1;break a}m=k+4|0;n=j+4|0;if((n|0)==(f|0)){g=m;h=6;break}else{j=n;k=m}}}}while(0);if((h|0)==6){l=(g|0)!=(d|0)|0}i=a;return l|0}function Co(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;d=i;g=e;h=f-g|0;j=h>>2;if(j>>>0>1073741807){Nm(b)}if(j>>>0<2){a[b]=h>>>1;k=b+4|0}else{h=j+4&-4;l=sv(h<<2)|0;c[b+8>>2]=l;c[b>>2]=h|1;c[b+4>>2]=j;k=l}if((e|0)==(f|0)){m=k;c[m>>2]=0;i=d;return}l=f+ -4+(0-g)|0;g=e;e=k;while(1){c[e>>2]=c[g>>2];g=g+4|0;if((g|0)==(f|0)){break}else{e=e+4|0}}m=k+((l>>>2)+1<<2)|0;c[m>>2]=0;i=d;return}function Do(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;a=i;if((b|0)==(d|0)){e=0;i=a;return e|0}else{f=0;g=b}while(1){b=(c[g>>2]|0)+(f<<4)|0;h=b&-268435456;j=(h>>>24|h)^b;b=g+4|0;if((b|0)==(d|0)){e=j;break}else{f=j;g=b}}i=a;return e|0}function Eo(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function Fo(a){a=a|0;return}function Go(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;k=i;i=i+80|0;l=k;m=k+64|0;n=k+60|0;o=k+56|0;p=k+52|0;q=k+68|0;r=k+16|0;s=k+12|0;t=k+24|0;u=k+48|0;if((c[g+4>>2]&1|0)==0){c[n>>2]=-1;v=c[(c[d>>2]|0)+16>>2]|0;c[p>>2]=c[e>>2];c[q>>2]=c[f>>2];c[m+0>>2]=c[p+0>>2];c[l+0>>2]=c[q+0>>2];$g[v&63](o,d,m,l,g,h,n);m=c[o>>2]|0;c[e>>2]=m;o=c[n>>2]|0;if((o|0)==0){a[j]=0}else if((o|0)==1){a[j]=1}else{a[j]=1;c[h>>2]=4}c[b>>2]=m;i=k;return}ln(r,g);m=c[r>>2]|0;if(!((c[5536]|0)==-1)){c[l>>2]=22144;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22144,l,166)}o=(c[22148>>2]|0)+ -1|0;n=c[m+8>>2]|0;if(!((c[m+12>>2]|0)-n>>2>>>0>o>>>0)){w=Wd(4)|0;Tu(w);qg(w|0,30104,152)}m=c[n+(o<<2)>>2]|0;if((m|0)==0){w=Wd(4)|0;Tu(w);qg(w|0,30104,152)}sm(c[r>>2]|0)|0;ln(s,g);g=c[s>>2]|0;if(!((c[5572]|0)==-1)){c[l>>2]=22288;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22288,l,166)}r=(c[22292>>2]|0)+ -1|0;w=c[g+8>>2]|0;if(!((c[g+12>>2]|0)-w>>2>>>0>r>>>0)){x=Wd(4)|0;Tu(x);qg(x|0,30104,152)}g=c[w+(r<<2)>>2]|0;if((g|0)==0){x=Wd(4)|0;Tu(x);qg(x|0,30104,152)}sm(c[s>>2]|0)|0;Lg[c[(c[g>>2]|0)+24>>2]&127](t,g);Lg[c[(c[g>>2]|0)+28>>2]&127](t+12|0,g);c[u>>2]=c[f>>2];f=t+24|0;c[l+0>>2]=c[u+0>>2];a[j]=(Ho(e,l,t,f,m,h,1)|0)==(t|0)|0;c[b>>2]=c[e>>2];Rm(t+12|0);Rm(t);i=k;return}function Ho(b,e,f,g,h,j,k){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0;l=i;i=i+112|0;m=l;n=(g-f|0)/12|0;if(n>>>0>100){o=nv(n)|0;if((o|0)==0){Av()}else{p=o;q=o}}else{p=0;q=m}m=(f|0)==(g|0);if(m){r=0;s=n}else{o=f;t=0;u=n;n=q;while(1){v=a[o]|0;if((v&1)==0){w=(v&255)>>>1}else{w=c[o+4>>2]|0}if((w|0)==0){a[n]=2;x=t+1|0;y=u+ -1|0}else{a[n]=1;x=t;y=u}v=o+12|0;if((v|0)==(g|0)){r=x;s=y;break}else{o=v;t=x;u=y;n=n+1|0}}}n=0;y=r;r=s;a:while(1){s=c[b>>2]|0;do{if((s|0)!=0){if((c[s+12>>2]|0)==(c[s+16>>2]|0)){if((Mg[c[(c[s>>2]|0)+36>>2]&127](s)|0)==-1){c[b>>2]=0;z=0;break}else{z=c[b>>2]|0;break}}else{z=s}}else{z=0}}while(0);s=(z|0)==0;u=c[e>>2]|0;if((u|0)!=0){if((c[u+12>>2]|0)==(c[u+16>>2]|0)?(Mg[c[(c[u>>2]|0)+36>>2]&127](u)|0)==-1:0){c[e>>2]=0;A=0}else{A=u}}else{A=0}B=(A|0)==0;C=c[b>>2]|0;if(!((s^B)&(r|0)!=0)){break}s=c[C+12>>2]|0;if((s|0)==(c[C+16>>2]|0)){D=Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0}else{D=d[s]|0}s=D&255;if(k){E=s}else{E=ch[c[(c[h>>2]|0)+12>>2]&31](h,s)|0}s=n+1|0;if(m){n=s;continue}b:do{if(k){u=0;x=f;t=y;o=r;w=q;while(1){do{if((a[w]|0)==1){v=a[x]|0;F=(v&1)==0;if(F){G=x+1|0}else{G=c[x+8>>2]|0}if(!(E<<24>>24==(a[G+n|0]|0))){a[w]=0;H=u;I=t;J=o+ -1|0;break}if(F){K=(v&255)>>>1}else{K=c[x+4>>2]|0}if((K|0)==(s|0)){a[w]=2;H=1;I=t+1|0;J=o+ -1|0}else{H=1;I=t;J=o}}else{H=u;I=t;J=o}}while(0);v=x+12|0;if((v|0)==(g|0)){L=H;M=I;N=J;break b}u=H;x=v;t=I;o=J;w=w+1|0}}else{w=0;o=f;t=y;x=r;u=q;while(1){do{if((a[u]|0)==1){if((a[o]&1)==0){O=o+1|0}else{O=c[o+8>>2]|0}if(!(E<<24>>24==(ch[c[(c[h>>2]|0)+12>>2]&31](h,a[O+n|0]|0)|0)<<24>>24)){a[u]=0;P=w;Q=t;R=x+ -1|0;break}v=a[o]|0;if((v&1)==0){S=(v&255)>>>1}else{S=c[o+4>>2]|0}if((S|0)==(s|0)){a[u]=2;P=1;Q=t+1|0;R=x+ -1|0}else{P=1;Q=t;R=x}}else{P=w;Q=t;R=x}}while(0);v=o+12|0;if((v|0)==(g|0)){L=P;M=Q;N=R;break b}w=P;o=v;t=Q;x=R;u=u+1|0}}}while(0);if(!L){n=s;y=M;r=N;continue}u=c[b>>2]|0;x=u+12|0;t=c[x>>2]|0;if((t|0)==(c[u+16>>2]|0)){Mg[c[(c[u>>2]|0)+40>>2]&127](u)|0}else{c[x>>2]=t+1}if((N+M|0)>>>0<2){n=s;y=M;r=N;continue}else{T=f;U=M;V=q}while(1){if((a[V]|0)==2){t=a[T]|0;if((t&1)==0){W=(t&255)>>>1}else{W=c[T+4>>2]|0}if((W|0)!=(s|0)){a[V]=0;X=U+ -1|0}else{X=U}}else{X=U}t=T+12|0;if((t|0)==(g|0)){n=s;y=X;r=N;continue a}else{T=t;U=X;V=V+1|0}}}do{if((C|0)!=0){if((c[C+12>>2]|0)==(c[C+16>>2]|0)){if((Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0)==-1){c[b>>2]=0;Y=0;break}else{Y=c[b>>2]|0;break}}else{Y=C}}else{Y=0}}while(0);C=(Y|0)==0;do{if(!B){if((c[A+12>>2]|0)!=(c[A+16>>2]|0)){if(C){break}else{Z=80;break}}if(!((Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0)==-1)){if(C){break}else{Z=80;break}}else{c[e>>2]=0;Z=78;break}}else{Z=78}}while(0);if((Z|0)==78?C:0){Z=80}if((Z|0)==80){c[j>>2]=c[j>>2]|2}c:do{if(!m){if((a[q]|0)==2){_=f}else{C=f;e=q;while(1){A=C+12|0;B=e+1|0;if((A|0)==(g|0)){Z=85;break c}if((a[B]|0)==2){_=A;break}else{C=A;e=B}}}}else{Z=85}}while(0);if((Z|0)==85){c[j>>2]=c[j>>2]|4;_=g}if((p|0)==0){i=l;return _|0}ov(p);i=l;return _|0}function Io(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];Jo(a,0,k,j,f,g,h);i=b;return}function Jo(b,e,f,g,h,j,k){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0;e=i;i=i+224|0;l=e+198|0;m=e+196|0;n=e+4|0;o=e+16|0;p=e+28|0;q=e+32|0;r=e;s=e+192|0;t=c[h+4>>2]&74;if((t|0)==64){u=8}else if((t|0)==0){u=0}else if((t|0)==8){u=16}else{u=10}zp(n,h,l,m);c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Um(o,10,0);if((a[o]&1)==0){h=o+1|0;v=h;w=o+8|0;x=h}else{h=o+8|0;v=o+1|0;w=h;x=c[h>>2]|0}c[p>>2]=x;c[r>>2]=q;c[s>>2]=0;h=o+4|0;t=a[m]|0;m=c[f>>2]|0;y=x;a:while(1){if((m|0)!=0){if((c[m+12>>2]|0)==(c[m+16>>2]|0)?(Mg[c[(c[m>>2]|0)+36>>2]&127](m)|0)==-1:0){c[f>>2]=0;z=0}else{z=m}}else{z=0}x=(z|0)==0;A=c[g>>2]|0;do{if((A|0)!=0){if((c[A+12>>2]|0)!=(c[A+16>>2]|0)){if(x){B=A;break}else{C=A;D=y;break a}}if(!((Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0)==-1)){if(x){B=A;break}else{C=A;D=y;break a}}else{c[g>>2]=0;E=18;break}}else{E=18}}while(0);if((E|0)==18){E=0;if(x){C=0;D=y;break}else{B=0}}A=a[o]|0;F=(A&1)==0;if(F){G=(A&255)>>>1}else{G=c[h>>2]|0}if(((c[p>>2]|0)-y|0)==(G|0)){if(F){H=(A&255)>>>1;I=(A&255)>>>1}else{A=c[h>>2]|0;H=A;I=A}Um(o,H<<1,0);if((a[o]&1)==0){J=10}else{J=(c[o>>2]&-2)+ -1|0}Um(o,J,0);if((a[o]&1)==0){K=v}else{K=c[w>>2]|0}c[p>>2]=K+I;L=K}else{L=y}A=z+12|0;F=c[A>>2]|0;M=z+16|0;if((F|0)==(c[M>>2]|0)){N=Mg[c[(c[z>>2]|0)+36>>2]&127](z)|0}else{N=d[F]|0}if(($o(N&255,u,L,p,s,t,n,q,r,l)|0)!=0){C=B;D=L;break}F=c[A>>2]|0;if((F|0)==(c[M>>2]|0)){Mg[c[(c[z>>2]|0)+40>>2]&127](z)|0;m=z;y=L;continue}else{c[A>>2]=F+1;m=z;y=L;continue}}L=a[n]|0;if((L&1)==0){O=(L&255)>>>1}else{O=c[n+4>>2]|0}if((O|0)!=0?(O=c[r>>2]|0,(O-q|0)<160):0){L=c[s>>2]|0;c[r>>2]=O+4;c[O>>2]=L}c[k>>2]=ru(D,c[p>>2]|0,j,u)|0;Kr(n,q,c[r>>2]|0,j);if((z|0)!=0){if((c[z+12>>2]|0)==(c[z+16>>2]|0)?(Mg[c[(c[z>>2]|0)+36>>2]&127](z)|0)==-1:0){c[f>>2]=0;P=0}else{P=z}}else{P=0}z=(P|0)==0;do{if((C|0)!=0){if((c[C+12>>2]|0)!=(c[C+16>>2]|0)){if(!z){break}c[b>>2]=P;Rm(o);Rm(n);i=e;return}if((Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0)==-1){c[g>>2]=0;E=54;break}if(z^(C|0)==0){c[b>>2]=P;Rm(o);Rm(n);i=e;return}}else{E=54}}while(0);if((E|0)==54?!z:0){c[b>>2]=P;Rm(o);Rm(n);i=e;return}c[j>>2]=c[j>>2]|2;c[b>>2]=P;Rm(o);Rm(n);i=e;return}function Ko(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];Lo(a,0,k,j,f,g,h);i=b;return}function Lo(b,e,f,g,h,j,k){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0;e=i;i=i+224|0;l=e+198|0;m=e+196|0;n=e+4|0;o=e+16|0;p=e+28|0;q=e+32|0;r=e;s=e+192|0;t=c[h+4>>2]&74;if((t|0)==0){u=0}else if((t|0)==64){u=8}else if((t|0)==8){u=16}else{u=10}zp(n,h,l,m);c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Um(o,10,0);if((a[o]&1)==0){h=o+1|0;v=h;w=o+8|0;x=h}else{h=o+8|0;v=o+1|0;w=h;x=c[h>>2]|0}c[p>>2]=x;c[r>>2]=q;c[s>>2]=0;h=o+4|0;t=a[m]|0;m=c[f>>2]|0;y=x;a:while(1){if((m|0)!=0){if((c[m+12>>2]|0)==(c[m+16>>2]|0)?(Mg[c[(c[m>>2]|0)+36>>2]&127](m)|0)==-1:0){c[f>>2]=0;z=0}else{z=m}}else{z=0}x=(z|0)==0;A=c[g>>2]|0;do{if((A|0)!=0){if((c[A+12>>2]|0)!=(c[A+16>>2]|0)){if(x){B=A;break}else{C=A;D=y;break a}}if(!((Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0)==-1)){if(x){B=A;break}else{C=A;D=y;break a}}else{c[g>>2]=0;E=18;break}}else{E=18}}while(0);if((E|0)==18){E=0;if(x){C=0;D=y;break}else{B=0}}A=a[o]|0;F=(A&1)==0;if(F){G=(A&255)>>>1}else{G=c[h>>2]|0}if(((c[p>>2]|0)-y|0)==(G|0)){if(F){H=(A&255)>>>1;J=(A&255)>>>1}else{A=c[h>>2]|0;H=A;J=A}Um(o,H<<1,0);if((a[o]&1)==0){K=10}else{K=(c[o>>2]&-2)+ -1|0}Um(o,K,0);if((a[o]&1)==0){L=v}else{L=c[w>>2]|0}c[p>>2]=L+J;M=L}else{M=y}A=z+12|0;F=c[A>>2]|0;N=z+16|0;if((F|0)==(c[N>>2]|0)){O=Mg[c[(c[z>>2]|0)+36>>2]&127](z)|0}else{O=d[F]|0}if(($o(O&255,u,M,p,s,t,n,q,r,l)|0)!=0){C=B;D=M;break}F=c[A>>2]|0;if((F|0)==(c[N>>2]|0)){Mg[c[(c[z>>2]|0)+40>>2]&127](z)|0;m=z;y=M;continue}else{c[A>>2]=F+1;m=z;y=M;continue}}M=a[n]|0;if((M&1)==0){P=(M&255)>>>1}else{P=c[n+4>>2]|0}if((P|0)!=0?(P=c[r>>2]|0,(P-q|0)<160):0){M=c[s>>2]|0;c[r>>2]=P+4;c[P>>2]=M}M=qu(D,c[p>>2]|0,j,u)|0;u=k;c[u>>2]=M;c[u+4>>2]=I;Kr(n,q,c[r>>2]|0,j);if((z|0)!=0){if((c[z+12>>2]|0)==(c[z+16>>2]|0)?(Mg[c[(c[z>>2]|0)+36>>2]&127](z)|0)==-1:0){c[f>>2]=0;Q=0}else{Q=z}}else{Q=0}z=(Q|0)==0;do{if((C|0)!=0){if((c[C+12>>2]|0)!=(c[C+16>>2]|0)){if(!z){break}c[b>>2]=Q;Rm(o);Rm(n);i=e;return}if((Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0)==-1){c[g>>2]=0;E=54;break}if(z^(C|0)==0){c[b>>2]=Q;Rm(o);Rm(n);i=e;return}}else{E=54}}while(0);if((E|0)==54?!z:0){c[b>>2]=Q;Rm(o);Rm(n);i=e;return}c[j>>2]=c[j>>2]|2;c[b>>2]=Q;Rm(o);Rm(n);i=e;return}function Mo(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];No(a,0,k,j,f,g,h);i=b;return}function No(e,f,g,h,j,k,l){e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0;f=i;i=i+224|0;m=f+198|0;n=f+196|0;o=f+4|0;p=f+16|0;q=f+28|0;r=f+32|0;s=f;t=f+192|0;u=c[j+4>>2]&74;if((u|0)==64){v=8}else if((u|0)==0){v=0}else if((u|0)==8){v=16}else{v=10}zp(o,j,m,n);c[p+0>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;Um(p,10,0);if((a[p]&1)==0){j=p+1|0;w=j;x=p+8|0;y=j}else{j=p+8|0;w=p+1|0;x=j;y=c[j>>2]|0}c[q>>2]=y;c[s>>2]=r;c[t>>2]=0;j=p+4|0;u=a[n]|0;n=c[g>>2]|0;z=y;a:while(1){if((n|0)!=0){if((c[n+12>>2]|0)==(c[n+16>>2]|0)?(Mg[c[(c[n>>2]|0)+36>>2]&127](n)|0)==-1:0){c[g>>2]=0;A=0}else{A=n}}else{A=0}y=(A|0)==0;B=c[h>>2]|0;do{if((B|0)!=0){if((c[B+12>>2]|0)!=(c[B+16>>2]|0)){if(y){C=B;break}else{D=B;E=z;break a}}if(!((Mg[c[(c[B>>2]|0)+36>>2]&127](B)|0)==-1)){if(y){C=B;break}else{D=B;E=z;break a}}else{c[h>>2]=0;F=18;break}}else{F=18}}while(0);if((F|0)==18){F=0;if(y){D=0;E=z;break}else{C=0}}B=a[p]|0;G=(B&1)==0;if(G){H=(B&255)>>>1}else{H=c[j>>2]|0}if(((c[q>>2]|0)-z|0)==(H|0)){if(G){I=(B&255)>>>1;J=(B&255)>>>1}else{B=c[j>>2]|0;I=B;J=B}Um(p,I<<1,0);if((a[p]&1)==0){K=10}else{K=(c[p>>2]&-2)+ -1|0}Um(p,K,0);if((a[p]&1)==0){L=w}else{L=c[x>>2]|0}c[q>>2]=L+J;M=L}else{M=z}B=A+12|0;G=c[B>>2]|0;N=A+16|0;if((G|0)==(c[N>>2]|0)){O=Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0}else{O=d[G]|0}if(($o(O&255,v,M,q,t,u,o,r,s,m)|0)!=0){D=C;E=M;break}G=c[B>>2]|0;if((G|0)==(c[N>>2]|0)){Mg[c[(c[A>>2]|0)+40>>2]&127](A)|0;n=A;z=M;continue}else{c[B>>2]=G+1;n=A;z=M;continue}}M=a[o]|0;if((M&1)==0){P=(M&255)>>>1}else{P=c[o+4>>2]|0}if((P|0)!=0?(P=c[s>>2]|0,(P-r|0)<160):0){M=c[t>>2]|0;c[s>>2]=P+4;c[P>>2]=M}b[l>>1]=pu(E,c[q>>2]|0,k,v)|0;Kr(o,r,c[s>>2]|0,k);if((A|0)!=0){if((c[A+12>>2]|0)==(c[A+16>>2]|0)?(Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0)==-1:0){c[g>>2]=0;Q=0}else{Q=A}}else{Q=0}A=(Q|0)==0;do{if((D|0)!=0){if((c[D+12>>2]|0)!=(c[D+16>>2]|0)){if(!A){break}c[e>>2]=Q;Rm(p);Rm(o);i=f;return}if((Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0)==-1){c[h>>2]=0;F=54;break}if(A^(D|0)==0){c[e>>2]=Q;Rm(p);Rm(o);i=f;return}}else{F=54}}while(0);if((F|0)==54?!A:0){c[e>>2]=Q;Rm(p);Rm(o);i=f;return}c[k>>2]=c[k>>2]|2;c[e>>2]=Q;Rm(p);Rm(o);i=f;return}function Oo(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];Po(a,0,k,j,f,g,h);i=b;return}function Po(b,e,f,g,h,j,k){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0;e=i;i=i+224|0;l=e+198|0;m=e+196|0;n=e+4|0;o=e+16|0;p=e+28|0;q=e+32|0;r=e;s=e+192|0;t=c[h+4>>2]&74;if((t|0)==0){u=0}else if((t|0)==64){u=8}else if((t|0)==8){u=16}else{u=10}zp(n,h,l,m);c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Um(o,10,0);if((a[o]&1)==0){h=o+1|0;v=h;w=o+8|0;x=h}else{h=o+8|0;v=o+1|0;w=h;x=c[h>>2]|0}c[p>>2]=x;c[r>>2]=q;c[s>>2]=0;h=o+4|0;t=a[m]|0;m=c[f>>2]|0;y=x;a:while(1){if((m|0)!=0){if((c[m+12>>2]|0)==(c[m+16>>2]|0)?(Mg[c[(c[m>>2]|0)+36>>2]&127](m)|0)==-1:0){c[f>>2]=0;z=0}else{z=m}}else{z=0}x=(z|0)==0;A=c[g>>2]|0;do{if((A|0)!=0){if((c[A+12>>2]|0)!=(c[A+16>>2]|0)){if(x){B=A;break}else{C=A;D=y;break a}}if(!((Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0)==-1)){if(x){B=A;break}else{C=A;D=y;break a}}else{c[g>>2]=0;E=18;break}}else{E=18}}while(0);if((E|0)==18){E=0;if(x){C=0;D=y;break}else{B=0}}A=a[o]|0;F=(A&1)==0;if(F){G=(A&255)>>>1}else{G=c[h>>2]|0}if(((c[p>>2]|0)-y|0)==(G|0)){if(F){H=(A&255)>>>1;I=(A&255)>>>1}else{A=c[h>>2]|0;H=A;I=A}Um(o,H<<1,0);if((a[o]&1)==0){J=10}else{J=(c[o>>2]&-2)+ -1|0}Um(o,J,0);if((a[o]&1)==0){K=v}else{K=c[w>>2]|0}c[p>>2]=K+I;L=K}else{L=y}A=z+12|0;F=c[A>>2]|0;M=z+16|0;if((F|0)==(c[M>>2]|0)){N=Mg[c[(c[z>>2]|0)+36>>2]&127](z)|0}else{N=d[F]|0}if(($o(N&255,u,L,p,s,t,n,q,r,l)|0)!=0){C=B;D=L;break}F=c[A>>2]|0;if((F|0)==(c[M>>2]|0)){Mg[c[(c[z>>2]|0)+40>>2]&127](z)|0;m=z;y=L;continue}else{c[A>>2]=F+1;m=z;y=L;continue}}L=a[n]|0;if((L&1)==0){O=(L&255)>>>1}else{O=c[n+4>>2]|0}if((O|0)!=0?(O=c[r>>2]|0,(O-q|0)<160):0){L=c[s>>2]|0;c[r>>2]=O+4;c[O>>2]=L}c[k>>2]=ou(D,c[p>>2]|0,j,u)|0;Kr(n,q,c[r>>2]|0,j);if((z|0)!=0){if((c[z+12>>2]|0)==(c[z+16>>2]|0)?(Mg[c[(c[z>>2]|0)+36>>2]&127](z)|0)==-1:0){c[f>>2]=0;P=0}else{P=z}}else{P=0}z=(P|0)==0;do{if((C|0)!=0){if((c[C+12>>2]|0)!=(c[C+16>>2]|0)){if(!z){break}c[b>>2]=P;Rm(o);Rm(n);i=e;return}if((Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0)==-1){c[g>>2]=0;E=54;break}if(z^(C|0)==0){c[b>>2]=P;Rm(o);Rm(n);i=e;return}}else{E=54}}while(0);if((E|0)==54?!z:0){c[b>>2]=P;Rm(o);Rm(n);i=e;return}c[j>>2]=c[j>>2]|2;c[b>>2]=P;Rm(o);Rm(n);i=e;return}function Qo(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];Ro(a,0,k,j,f,g,h);i=b;return}function Ro(b,e,f,g,h,j,k){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0;e=i;i=i+224|0;l=e+198|0;m=e+196|0;n=e+4|0;o=e+16|0;p=e+28|0;q=e+32|0;r=e;s=e+192|0;t=c[h+4>>2]&74;if((t|0)==64){u=8}else if((t|0)==0){u=0}else if((t|0)==8){u=16}else{u=10}zp(n,h,l,m);c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Um(o,10,0);if((a[o]&1)==0){h=o+1|0;v=h;w=o+8|0;x=h}else{h=o+8|0;v=o+1|0;w=h;x=c[h>>2]|0}c[p>>2]=x;c[r>>2]=q;c[s>>2]=0;h=o+4|0;t=a[m]|0;m=c[f>>2]|0;y=x;a:while(1){if((m|0)!=0){if((c[m+12>>2]|0)==(c[m+16>>2]|0)?(Mg[c[(c[m>>2]|0)+36>>2]&127](m)|0)==-1:0){c[f>>2]=0;z=0}else{z=m}}else{z=0}x=(z|0)==0;A=c[g>>2]|0;do{if((A|0)!=0){if((c[A+12>>2]|0)!=(c[A+16>>2]|0)){if(x){B=A;break}else{C=A;D=y;break a}}if(!((Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0)==-1)){if(x){B=A;break}else{C=A;D=y;break a}}else{c[g>>2]=0;E=18;break}}else{E=18}}while(0);if((E|0)==18){E=0;if(x){C=0;D=y;break}else{B=0}}A=a[o]|0;F=(A&1)==0;if(F){G=(A&255)>>>1}else{G=c[h>>2]|0}if(((c[p>>2]|0)-y|0)==(G|0)){if(F){H=(A&255)>>>1;I=(A&255)>>>1}else{A=c[h>>2]|0;H=A;I=A}Um(o,H<<1,0);if((a[o]&1)==0){J=10}else{J=(c[o>>2]&-2)+ -1|0}Um(o,J,0);if((a[o]&1)==0){K=v}else{K=c[w>>2]|0}c[p>>2]=K+I;L=K}else{L=y}A=z+12|0;F=c[A>>2]|0;M=z+16|0;if((F|0)==(c[M>>2]|0)){N=Mg[c[(c[z>>2]|0)+36>>2]&127](z)|0}else{N=d[F]|0}if(($o(N&255,u,L,p,s,t,n,q,r,l)|0)!=0){C=B;D=L;break}F=c[A>>2]|0;if((F|0)==(c[M>>2]|0)){Mg[c[(c[z>>2]|0)+40>>2]&127](z)|0;m=z;y=L;continue}else{c[A>>2]=F+1;m=z;y=L;continue}}L=a[n]|0;if((L&1)==0){O=(L&255)>>>1}else{O=c[n+4>>2]|0}if((O|0)!=0?(O=c[r>>2]|0,(O-q|0)<160):0){L=c[s>>2]|0;c[r>>2]=O+4;c[O>>2]=L}c[k>>2]=nu(D,c[p>>2]|0,j,u)|0;Kr(n,q,c[r>>2]|0,j);if((z|0)!=0){if((c[z+12>>2]|0)==(c[z+16>>2]|0)?(Mg[c[(c[z>>2]|0)+36>>2]&127](z)|0)==-1:0){c[f>>2]=0;P=0}else{P=z}}else{P=0}z=(P|0)==0;do{if((C|0)!=0){if((c[C+12>>2]|0)!=(c[C+16>>2]|0)){if(!z){break}c[b>>2]=P;Rm(o);Rm(n);i=e;return}if((Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0)==-1){c[g>>2]=0;E=54;break}if(z^(C|0)==0){c[b>>2]=P;Rm(o);Rm(n);i=e;return}}else{E=54}}while(0);if((E|0)==54?!z:0){c[b>>2]=P;Rm(o);Rm(n);i=e;return}c[j>>2]=c[j>>2]|2;c[b>>2]=P;Rm(o);Rm(n);i=e;return}function So(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];To(a,0,k,j,f,g,h);i=b;return}function To(b,e,f,g,h,j,k){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0;e=i;i=i+224|0;l=e+198|0;m=e+196|0;n=e+4|0;o=e+16|0;p=e+28|0;q=e+32|0;r=e;s=e+192|0;t=c[h+4>>2]&74;if((t|0)==0){u=0}else if((t|0)==64){u=8}else if((t|0)==8){u=16}else{u=10}zp(n,h,l,m);c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Um(o,10,0);if((a[o]&1)==0){h=o+1|0;v=h;w=o+8|0;x=h}else{h=o+8|0;v=o+1|0;w=h;x=c[h>>2]|0}c[p>>2]=x;c[r>>2]=q;c[s>>2]=0;h=o+4|0;t=a[m]|0;m=c[f>>2]|0;y=x;a:while(1){if((m|0)!=0){if((c[m+12>>2]|0)==(c[m+16>>2]|0)?(Mg[c[(c[m>>2]|0)+36>>2]&127](m)|0)==-1:0){c[f>>2]=0;z=0}else{z=m}}else{z=0}x=(z|0)==0;A=c[g>>2]|0;do{if((A|0)!=0){if((c[A+12>>2]|0)!=(c[A+16>>2]|0)){if(x){B=A;break}else{C=A;D=y;break a}}if(!((Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0)==-1)){if(x){B=A;break}else{C=A;D=y;break a}}else{c[g>>2]=0;E=18;break}}else{E=18}}while(0);if((E|0)==18){E=0;if(x){C=0;D=y;break}else{B=0}}A=a[o]|0;F=(A&1)==0;if(F){G=(A&255)>>>1}else{G=c[h>>2]|0}if(((c[p>>2]|0)-y|0)==(G|0)){if(F){H=(A&255)>>>1;J=(A&255)>>>1}else{A=c[h>>2]|0;H=A;J=A}Um(o,H<<1,0);if((a[o]&1)==0){K=10}else{K=(c[o>>2]&-2)+ -1|0}Um(o,K,0);if((a[o]&1)==0){L=v}else{L=c[w>>2]|0}c[p>>2]=L+J;M=L}else{M=y}A=z+12|0;F=c[A>>2]|0;N=z+16|0;if((F|0)==(c[N>>2]|0)){O=Mg[c[(c[z>>2]|0)+36>>2]&127](z)|0}else{O=d[F]|0}if(($o(O&255,u,M,p,s,t,n,q,r,l)|0)!=0){C=B;D=M;break}F=c[A>>2]|0;if((F|0)==(c[N>>2]|0)){Mg[c[(c[z>>2]|0)+40>>2]&127](z)|0;m=z;y=M;continue}else{c[A>>2]=F+1;m=z;y=M;continue}}M=a[n]|0;if((M&1)==0){P=(M&255)>>>1}else{P=c[n+4>>2]|0}if((P|0)!=0?(P=c[r>>2]|0,(P-q|0)<160):0){M=c[s>>2]|0;c[r>>2]=P+4;c[P>>2]=M}M=mu(D,c[p>>2]|0,j,u)|0;u=k;c[u>>2]=M;c[u+4>>2]=I;Kr(n,q,c[r>>2]|0,j);if((z|0)!=0){if((c[z+12>>2]|0)==(c[z+16>>2]|0)?(Mg[c[(c[z>>2]|0)+36>>2]&127](z)|0)==-1:0){c[f>>2]=0;Q=0}else{Q=z}}else{Q=0}z=(Q|0)==0;do{if((C|0)!=0){if((c[C+12>>2]|0)!=(c[C+16>>2]|0)){if(!z){break}c[b>>2]=Q;Rm(o);Rm(n);i=e;return}if((Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0)==-1){c[g>>2]=0;E=54;break}if(z^(C|0)==0){c[b>>2]=Q;Rm(o);Rm(n);i=e;return}}else{E=54}}while(0);if((E|0)==54?!z:0){c[b>>2]=Q;Rm(o);Rm(n);i=e;return}c[j>>2]=c[j>>2]|2;c[b>>2]=Q;Rm(o);Rm(n);i=e;return}function Uo(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];Vo(a,0,k,j,f,g,h);i=b;return}



function Vo(b,e,f,h,j,k,l){b=b|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0;e=i;i=i+240|0;m=e+200|0;n=e+199|0;o=e+198|0;p=e+8|0;q=e+20|0;r=e+192|0;s=e+32|0;t=e;u=e+4|0;v=e+197|0;w=e+196|0;Ap(p,j,m,n,o);c[q+0>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;Um(q,10,0);if((a[q]&1)==0){j=q+1|0;x=j;y=q+8|0;z=j}else{j=q+8|0;x=q+1|0;y=j;z=c[j>>2]|0}c[r>>2]=z;c[t>>2]=s;c[u>>2]=0;a[v]=1;a[w]=69;j=q+4|0;A=a[n]|0;n=a[o]|0;o=c[f>>2]|0;B=z;a:while(1){if((o|0)!=0){if((c[o+12>>2]|0)==(c[o+16>>2]|0)?(Mg[c[(c[o>>2]|0)+36>>2]&127](o)|0)==-1:0){c[f>>2]=0;C=0}else{C=o}}else{C=0}z=(C|0)==0;D=c[h>>2]|0;do{if((D|0)!=0){if((c[D+12>>2]|0)!=(c[D+16>>2]|0)){if(z){E=D;break}else{F=D;G=B;break a}}if(!((Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0)==-1)){if(z){E=D;break}else{F=D;G=B;break a}}else{c[h>>2]=0;H=14;break}}else{H=14}}while(0);if((H|0)==14){H=0;if(z){F=0;G=B;break}else{E=0}}D=a[q]|0;I=(D&1)==0;if(I){J=(D&255)>>>1}else{J=c[j>>2]|0}if(((c[r>>2]|0)-B|0)==(J|0)){if(I){K=(D&255)>>>1;L=(D&255)>>>1}else{D=c[j>>2]|0;K=D;L=D}Um(q,K<<1,0);if((a[q]&1)==0){M=10}else{M=(c[q>>2]&-2)+ -1|0}Um(q,M,0);if((a[q]&1)==0){N=x}else{N=c[y>>2]|0}c[r>>2]=N+L;O=N}else{O=B}D=C+12|0;I=c[D>>2]|0;P=C+16|0;if((I|0)==(c[P>>2]|0)){Q=Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0}else{Q=d[I]|0}if((Bp(Q&255,v,w,O,r,A,n,p,s,t,u,m)|0)!=0){F=E;G=O;break}I=c[D>>2]|0;if((I|0)==(c[P>>2]|0)){Mg[c[(c[C>>2]|0)+40>>2]&127](C)|0;o=C;B=O;continue}else{c[D>>2]=I+1;o=C;B=O;continue}}O=a[p]|0;if((O&1)==0){R=(O&255)>>>1}else{R=c[p+4>>2]|0}if(((R|0)!=0?(a[v]|0)!=0:0)?(v=c[t>>2]|0,(v-s|0)<160):0){R=c[u>>2]|0;c[t>>2]=v+4;c[v>>2]=R}g[l>>2]=+lu(G,c[r>>2]|0,k);Kr(p,s,c[t>>2]|0,k);if((C|0)!=0){if((c[C+12>>2]|0)==(c[C+16>>2]|0)?(Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0)==-1:0){c[f>>2]=0;S=0}else{S=C}}else{S=0}C=(S|0)==0;do{if((F|0)!=0){if((c[F+12>>2]|0)!=(c[F+16>>2]|0)){if(!C){break}c[b>>2]=S;Rm(q);Rm(p);i=e;return}if((Mg[c[(c[F>>2]|0)+36>>2]&127](F)|0)==-1){c[h>>2]=0;H=51;break}if(C^(F|0)==0){c[b>>2]=S;Rm(q);Rm(p);i=e;return}}else{H=51}}while(0);if((H|0)==51?!C:0){c[b>>2]=S;Rm(q);Rm(p);i=e;return}c[k>>2]=c[k>>2]|2;c[b>>2]=S;Rm(q);Rm(p);i=e;return}function Wo(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];Xo(a,0,k,j,f,g,h);i=b;return}function Xo(b,e,f,g,j,k,l){b=b|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0;e=i;i=i+240|0;m=e+200|0;n=e+199|0;o=e+198|0;p=e+8|0;q=e+20|0;r=e+192|0;s=e+32|0;t=e;u=e+4|0;v=e+197|0;w=e+196|0;Ap(p,j,m,n,o);c[q+0>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;Um(q,10,0);if((a[q]&1)==0){j=q+1|0;x=j;y=q+8|0;z=j}else{j=q+8|0;x=q+1|0;y=j;z=c[j>>2]|0}c[r>>2]=z;c[t>>2]=s;c[u>>2]=0;a[v]=1;a[w]=69;j=q+4|0;A=a[n]|0;n=a[o]|0;o=c[f>>2]|0;B=z;a:while(1){if((o|0)!=0){if((c[o+12>>2]|0)==(c[o+16>>2]|0)?(Mg[c[(c[o>>2]|0)+36>>2]&127](o)|0)==-1:0){c[f>>2]=0;C=0}else{C=o}}else{C=0}z=(C|0)==0;D=c[g>>2]|0;do{if((D|0)!=0){if((c[D+12>>2]|0)!=(c[D+16>>2]|0)){if(z){E=D;break}else{F=D;G=B;break a}}if(!((Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0)==-1)){if(z){E=D;break}else{F=D;G=B;break a}}else{c[g>>2]=0;H=14;break}}else{H=14}}while(0);if((H|0)==14){H=0;if(z){F=0;G=B;break}else{E=0}}D=a[q]|0;I=(D&1)==0;if(I){J=(D&255)>>>1}else{J=c[j>>2]|0}if(((c[r>>2]|0)-B|0)==(J|0)){if(I){K=(D&255)>>>1;L=(D&255)>>>1}else{D=c[j>>2]|0;K=D;L=D}Um(q,K<<1,0);if((a[q]&1)==0){M=10}else{M=(c[q>>2]&-2)+ -1|0}Um(q,M,0);if((a[q]&1)==0){N=x}else{N=c[y>>2]|0}c[r>>2]=N+L;O=N}else{O=B}D=C+12|0;I=c[D>>2]|0;P=C+16|0;if((I|0)==(c[P>>2]|0)){Q=Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0}else{Q=d[I]|0}if((Bp(Q&255,v,w,O,r,A,n,p,s,t,u,m)|0)!=0){F=E;G=O;break}I=c[D>>2]|0;if((I|0)==(c[P>>2]|0)){Mg[c[(c[C>>2]|0)+40>>2]&127](C)|0;o=C;B=O;continue}else{c[D>>2]=I+1;o=C;B=O;continue}}O=a[p]|0;if((O&1)==0){R=(O&255)>>>1}else{R=c[p+4>>2]|0}if(((R|0)!=0?(a[v]|0)!=0:0)?(v=c[t>>2]|0,(v-s|0)<160):0){R=c[u>>2]|0;c[t>>2]=v+4;c[v>>2]=R}h[l>>3]=+ku(G,c[r>>2]|0,k);Kr(p,s,c[t>>2]|0,k);if((C|0)!=0){if((c[C+12>>2]|0)==(c[C+16>>2]|0)?(Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0)==-1:0){c[f>>2]=0;S=0}else{S=C}}else{S=0}C=(S|0)==0;do{if((F|0)!=0){if((c[F+12>>2]|0)!=(c[F+16>>2]|0)){if(!C){break}c[b>>2]=S;Rm(q);Rm(p);i=e;return}if((Mg[c[(c[F>>2]|0)+36>>2]&127](F)|0)==-1){c[g>>2]=0;H=51;break}if(C^(F|0)==0){c[b>>2]=S;Rm(q);Rm(p);i=e;return}}else{H=51}}while(0);if((H|0)==51?!C:0){c[b>>2]=S;Rm(q);Rm(p);i=e;return}c[k>>2]=c[k>>2]|2;c[b>>2]=S;Rm(q);Rm(p);i=e;return}function Yo(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];Zo(a,0,k,j,f,g,h);i=b;return}function Zo(b,e,f,g,j,k,l){b=b|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0;e=i;i=i+240|0;m=e+200|0;n=e+199|0;o=e+198|0;p=e+8|0;q=e+20|0;r=e+192|0;s=e+32|0;t=e;u=e+4|0;v=e+197|0;w=e+196|0;Ap(p,j,m,n,o);c[q+0>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;Um(q,10,0);if((a[q]&1)==0){j=q+1|0;x=j;y=q+8|0;z=j}else{j=q+8|0;x=q+1|0;y=j;z=c[j>>2]|0}c[r>>2]=z;c[t>>2]=s;c[u>>2]=0;a[v]=1;a[w]=69;j=q+4|0;A=a[n]|0;n=a[o]|0;o=c[f>>2]|0;B=z;a:while(1){if((o|0)!=0){if((c[o+12>>2]|0)==(c[o+16>>2]|0)?(Mg[c[(c[o>>2]|0)+36>>2]&127](o)|0)==-1:0){c[f>>2]=0;C=0}else{C=o}}else{C=0}z=(C|0)==0;D=c[g>>2]|0;do{if((D|0)!=0){if((c[D+12>>2]|0)!=(c[D+16>>2]|0)){if(z){E=D;break}else{F=D;G=B;break a}}if(!((Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0)==-1)){if(z){E=D;break}else{F=D;G=B;break a}}else{c[g>>2]=0;H=14;break}}else{H=14}}while(0);if((H|0)==14){H=0;if(z){F=0;G=B;break}else{E=0}}D=a[q]|0;I=(D&1)==0;if(I){J=(D&255)>>>1}else{J=c[j>>2]|0}if(((c[r>>2]|0)-B|0)==(J|0)){if(I){K=(D&255)>>>1;L=(D&255)>>>1}else{D=c[j>>2]|0;K=D;L=D}Um(q,K<<1,0);if((a[q]&1)==0){M=10}else{M=(c[q>>2]&-2)+ -1|0}Um(q,M,0);if((a[q]&1)==0){N=x}else{N=c[y>>2]|0}c[r>>2]=N+L;O=N}else{O=B}D=C+12|0;I=c[D>>2]|0;P=C+16|0;if((I|0)==(c[P>>2]|0)){Q=Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0}else{Q=d[I]|0}if((Bp(Q&255,v,w,O,r,A,n,p,s,t,u,m)|0)!=0){F=E;G=O;break}I=c[D>>2]|0;if((I|0)==(c[P>>2]|0)){Mg[c[(c[C>>2]|0)+40>>2]&127](C)|0;o=C;B=O;continue}else{c[D>>2]=I+1;o=C;B=O;continue}}O=a[p]|0;if((O&1)==0){R=(O&255)>>>1}else{R=c[p+4>>2]|0}if(((R|0)!=0?(a[v]|0)!=0:0)?(v=c[t>>2]|0,(v-s|0)<160):0){R=c[u>>2]|0;c[t>>2]=v+4;c[v>>2]=R}h[l>>3]=+ju(G,c[r>>2]|0,k);Kr(p,s,c[t>>2]|0,k);if((C|0)!=0){if((c[C+12>>2]|0)==(c[C+16>>2]|0)?(Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0)==-1:0){c[f>>2]=0;S=0}else{S=C}}else{S=0}C=(S|0)==0;do{if((F|0)!=0){if((c[F+12>>2]|0)!=(c[F+16>>2]|0)){if(!C){break}c[b>>2]=S;Rm(q);Rm(p);i=e;return}if((Mg[c[(c[F>>2]|0)+36>>2]&127](F)|0)==-1){c[g>>2]=0;H=51;break}if(C^(F|0)==0){c[b>>2]=S;Rm(q);Rm(p);i=e;return}}else{H=51}}while(0);if((H|0)==51?!C:0){c[b>>2]=S;Rm(q);Rm(p);i=e;return}c[k>>2]=c[k>>2]|2;c[b>>2]=S;Rm(q);Rm(p);i=e;return}function _o(b,e,f,g,h,j,k){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;e=i;i=i+240|0;l=e;m=e+200|0;n=e+12|0;o=e+24|0;p=e+28|0;q=e+40|0;c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;ln(o,h);h=c[o>>2]|0;if(!((c[5536]|0)==-1)){c[l>>2]=22144;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22144,l,166)}r=(c[22148>>2]|0)+ -1|0;s=c[h+8>>2]|0;if(!((c[h+12>>2]|0)-s>>2>>>0>r>>>0)){t=Wd(4)|0;Tu(t);qg(t|0,30104,152)}h=c[s+(r<<2)>>2]|0;if((h|0)==0){t=Wd(4)|0;Tu(t);qg(t|0,30104,152)}fh[c[(c[h>>2]|0)+32>>2]&15](h,20688,20714|0,m)|0;sm(c[o>>2]|0)|0;c[p+0>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;Um(p,10,0);if((a[p]&1)==0){o=p+1|0;u=o;v=p+8|0;w=o}else{o=p+8|0;u=p+1|0;v=o;w=c[o>>2]|0}o=p+4|0;h=m+24|0;t=m+25|0;r=q;s=m+26|0;x=m;y=n+4|0;z=c[f>>2]|0;A=q;q=0;B=w;C=w;a:while(1){if((z|0)!=0){if((c[z+12>>2]|0)==(c[z+16>>2]|0)?(Mg[c[(c[z>>2]|0)+36>>2]&127](z)|0)==-1:0){c[f>>2]=0;D=0}else{D=z}}else{D=0}w=(D|0)==0;E=c[g>>2]|0;do{if((E|0)!=0){if((c[E+12>>2]|0)!=(c[E+16>>2]|0)){if(w){break}else{F=C;break a}}if(!((Mg[c[(c[E>>2]|0)+36>>2]&127](E)|0)==-1)){if(w){break}else{F=C;break a}}else{c[g>>2]=0;G=19;break}}else{G=19}}while(0);if((G|0)==19?(G=0,w):0){F=C;break}E=a[p]|0;H=(E&1)==0;if(H){I=(E&255)>>>1}else{I=c[o>>2]|0}if((B-C|0)==(I|0)){if(H){J=(E&255)>>>1;K=(E&255)>>>1}else{E=c[o>>2]|0;J=E;K=E}Um(p,J<<1,0);if((a[p]&1)==0){L=10}else{L=(c[p>>2]&-2)+ -1|0}Um(p,L,0);if((a[p]&1)==0){M=u}else{M=c[v>>2]|0}N=M+K|0;O=M}else{N=B;O=C}E=c[D+12>>2]|0;if((E|0)==(c[D+16>>2]|0)){P=Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0}else{P=d[E]|0}E=P&255;H=(N|0)==(O|0);do{if(H){Q=(a[h]|0)==E<<24>>24;if(!Q?!((a[t]|0)==E<<24>>24):0){G=40;break}a[N]=Q?43:45;R=N+1|0;S=A;T=0}else{G=40}}while(0);do{if((G|0)==40){G=0;w=a[n]|0;if((w&1)==0){U=(w&255)>>>1}else{U=c[y>>2]|0}if((U|0)!=0&E<<24>>24==0){if((A-r|0)>=160){R=N;S=A;T=q;break}c[A>>2]=q;R=N;S=A+4|0;T=0;break}else{V=m}while(1){w=V+1|0;if((a[V]|0)==E<<24>>24){W=V;break}if((w|0)==(s|0)){W=s;break}else{V=w}}w=W-x|0;if((w|0)>23){F=O;break a}if((w|0)<22){a[N]=a[20688+w|0]|0;R=N+1|0;S=A;T=q+1|0;break}if(H){F=N;break a}if((N-O|0)>=3){F=O;break a}if((a[N+ -1|0]|0)!=48){F=O;break a}a[N]=a[20688+w|0]|0;R=N+1|0;S=A;T=0}}while(0);H=c[f>>2]|0;E=H+12|0;w=c[E>>2]|0;if((w|0)==(c[H+16>>2]|0)){Mg[c[(c[H>>2]|0)+40>>2]&127](H)|0;z=H;A=S;q=T;B=R;C=O;continue}else{c[E>>2]=w+1;z=H;A=S;q=T;B=R;C=O;continue}}a[F+3|0]=0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}O=c[5508]|0;c[l>>2]=k;if((ap(F,O,20728,l)|0)!=1){c[j>>2]=4}l=c[f>>2]|0;if((l|0)!=0){if((c[l+12>>2]|0)==(c[l+16>>2]|0)?(Mg[c[(c[l>>2]|0)+36>>2]&127](l)|0)==-1:0){c[f>>2]=0;X=0}else{X=l}}else{X=0}l=(X|0)==0;f=c[g>>2]|0;do{if((f|0)!=0){if((c[f+12>>2]|0)!=(c[f+16>>2]|0)){if(!l){break}c[b>>2]=X;Rm(p);Rm(n);i=e;return}if((Mg[c[(c[f>>2]|0)+36>>2]&127](f)|0)==-1){c[g>>2]=0;G=72;break}if(l^(f|0)==0){c[b>>2]=X;Rm(p);Rm(n);i=e;return}}else{G=72}}while(0);if((G|0)==72?!l:0){c[b>>2]=X;Rm(p);Rm(n);i=e;return}c[j>>2]=c[j>>2]|2;c[b>>2]=X;Rm(p);Rm(n);i=e;return}function $o(b,d,e,f,g,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0;n=i;o=c[f>>2]|0;p=(o|0)==(e|0);do{if(p){q=(a[m+24|0]|0)==b<<24>>24;if(!q?!((a[m+25|0]|0)==b<<24>>24):0){break}c[f>>2]=e+1;a[e]=q?43:45;c[g>>2]=0;r=0;i=n;return r|0}}while(0);q=a[j]|0;if((q&1)==0){s=(q&255)>>>1}else{s=c[j+4>>2]|0}if((s|0)!=0&b<<24>>24==h<<24>>24){h=c[l>>2]|0;if((h-k|0)>=160){r=0;i=n;return r|0}k=c[g>>2]|0;c[l>>2]=h+4;c[h>>2]=k;c[g>>2]=0;r=0;i=n;return r|0}k=m+26|0;h=m;while(1){l=h+1|0;if((a[h]|0)==b<<24>>24){t=h;break}if((l|0)==(k|0)){t=k;break}else{h=l}}h=t-m|0;if((h|0)>23){r=-1;i=n;return r|0}if((d|0)==10|(d|0)==8){if((h|0)>=(d|0)){r=-1;i=n;return r|0}}else if((d|0)==16?(h|0)>=22:0){if(p){r=-1;i=n;return r|0}if((o-e|0)>=3){r=-1;i=n;return r|0}if((a[o+ -1|0]|0)!=48){r=-1;i=n;return r|0}c[g>>2]=0;e=a[20688+h|0]|0;c[f>>2]=o+1;a[o]=e;r=0;i=n;return r|0}e=a[20688+h|0]|0;c[f>>2]=o+1;a[o]=e;c[g>>2]=(c[g>>2]|0)+1;r=0;i=n;return r|0}function ap(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;i=i+16|0;g=f;c[g>>2]=e;e=nc(b|0)|0;b=Xa(a|0,d|0,g|0)|0;if((e|0)==0){i=f;return b|0}nc(e|0)|0;i=f;return b|0}function bp(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function cp(a){a=a|0;return}function dp(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;k=i;i=i+80|0;l=k;m=k+64|0;n=k+60|0;o=k+56|0;p=k+52|0;q=k+68|0;r=k+16|0;s=k+12|0;t=k+24|0;u=k+48|0;if((c[g+4>>2]&1|0)==0){c[n>>2]=-1;v=c[(c[d>>2]|0)+16>>2]|0;c[p>>2]=c[e>>2];c[q>>2]=c[f>>2];c[m+0>>2]=c[p+0>>2];c[l+0>>2]=c[q+0>>2];$g[v&63](o,d,m,l,g,h,n);m=c[o>>2]|0;c[e>>2]=m;o=c[n>>2]|0;if((o|0)==1){a[j]=1}else if((o|0)==0){a[j]=0}else{a[j]=1;c[h>>2]=4}c[b>>2]=m;i=k;return}ln(r,g);m=c[r>>2]|0;if(!((c[5534]|0)==-1)){c[l>>2]=22136;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22136,l,166)}o=(c[22140>>2]|0)+ -1|0;n=c[m+8>>2]|0;if(!((c[m+12>>2]|0)-n>>2>>>0>o>>>0)){w=Wd(4)|0;Tu(w);qg(w|0,30104,152)}m=c[n+(o<<2)>>2]|0;if((m|0)==0){w=Wd(4)|0;Tu(w);qg(w|0,30104,152)}sm(c[r>>2]|0)|0;ln(s,g);g=c[s>>2]|0;if(!((c[5574]|0)==-1)){c[l>>2]=22296;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22296,l,166)}r=(c[22300>>2]|0)+ -1|0;w=c[g+8>>2]|0;if(!((c[g+12>>2]|0)-w>>2>>>0>r>>>0)){x=Wd(4)|0;Tu(x);qg(x|0,30104,152)}g=c[w+(r<<2)>>2]|0;if((g|0)==0){x=Wd(4)|0;Tu(x);qg(x|0,30104,152)}sm(c[s>>2]|0)|0;Lg[c[(c[g>>2]|0)+24>>2]&127](t,g);Lg[c[(c[g>>2]|0)+28>>2]&127](t+12|0,g);c[u>>2]=c[f>>2];f=t+24|0;c[l+0>>2]=c[u+0>>2];a[j]=(ep(e,l,t,f,m,h,1)|0)==(t|0)|0;c[b>>2]=c[e>>2];bn(t+12|0);bn(t);i=k;return}function ep(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0;k=i;i=i+112|0;l=k;m=(f-e|0)/12|0;if(m>>>0>100){n=nv(m)|0;if((n|0)==0){Av()}else{o=n;p=n}}else{o=0;p=l}l=(e|0)==(f|0);if(l){q=0;r=m}else{n=e;s=0;t=m;m=p;while(1){u=a[n]|0;if((u&1)==0){v=(u&255)>>>1}else{v=c[n+4>>2]|0}if((v|0)==0){a[m]=2;w=s+1|0;x=t+ -1|0}else{a[m]=1;w=s;x=t}u=n+12|0;if((u|0)==(f|0)){q=w;r=x;break}else{n=u;s=w;t=x;m=m+1|0}}}m=0;x=q;q=r;a:while(1){r=c[b>>2]|0;do{if((r|0)!=0){t=c[r+12>>2]|0;if((t|0)==(c[r+16>>2]|0)){y=Mg[c[(c[r>>2]|0)+36>>2]&127](r)|0}else{y=c[t>>2]|0}if((y|0)==-1){c[b>>2]=0;z=1;break}else{z=(c[b>>2]|0)==0;break}}else{z=1}}while(0);r=c[d>>2]|0;if((r|0)!=0){t=c[r+12>>2]|0;if((t|0)==(c[r+16>>2]|0)){A=Mg[c[(c[r>>2]|0)+36>>2]&127](r)|0}else{A=c[t>>2]|0}if((A|0)==-1){c[d>>2]=0;B=0;C=1}else{B=r;C=0}}else{B=0;C=1}D=c[b>>2]|0;if(!((z^C)&(q|0)!=0)){break}r=c[D+12>>2]|0;if((r|0)==(c[D+16>>2]|0)){E=Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0}else{E=c[r>>2]|0}if(j){F=E}else{F=ch[c[(c[g>>2]|0)+28>>2]&31](g,E)|0}r=m+1|0;if(l){m=r;continue}b:do{if(j){t=0;w=e;s=x;n=q;v=p;while(1){do{if((a[v]|0)==1){u=a[w]|0;G=(u&1)==0;if(G){H=w+4|0}else{H=c[w+8>>2]|0}if((F|0)!=(c[H+(m<<2)>>2]|0)){a[v]=0;I=t;J=s;K=n+ -1|0;break}if(G){L=(u&255)>>>1}else{L=c[w+4>>2]|0}if((L|0)==(r|0)){a[v]=2;I=1;J=s+1|0;K=n+ -1|0}else{I=1;J=s;K=n}}else{I=t;J=s;K=n}}while(0);u=w+12|0;if((u|0)==(f|0)){M=I;N=J;O=K;break b}t=I;w=u;s=J;n=K;v=v+1|0}}else{v=0;n=e;s=x;w=q;t=p;while(1){do{if((a[t]|0)==1){if((a[n]&1)==0){P=n+4|0}else{P=c[n+8>>2]|0}if((F|0)!=(ch[c[(c[g>>2]|0)+28>>2]&31](g,c[P+(m<<2)>>2]|0)|0)){a[t]=0;Q=v;R=s;S=w+ -1|0;break}u=a[n]|0;if((u&1)==0){T=(u&255)>>>1}else{T=c[n+4>>2]|0}if((T|0)==(r|0)){a[t]=2;Q=1;R=s+1|0;S=w+ -1|0}else{Q=1;R=s;S=w}}else{Q=v;R=s;S=w}}while(0);u=n+12|0;if((u|0)==(f|0)){M=Q;N=R;O=S;break b}v=Q;n=u;s=R;w=S;t=t+1|0}}}while(0);if(!M){m=r;x=N;q=O;continue}t=c[b>>2]|0;w=t+12|0;s=c[w>>2]|0;if((s|0)==(c[t+16>>2]|0)){Mg[c[(c[t>>2]|0)+40>>2]&127](t)|0}else{c[w>>2]=s+4}if((O+N|0)>>>0<2){m=r;x=N;q=O;continue}else{U=e;V=N;W=p}while(1){if((a[W]|0)==2){s=a[U]|0;if((s&1)==0){X=(s&255)>>>1}else{X=c[U+4>>2]|0}if((X|0)!=(r|0)){a[W]=0;Y=V+ -1|0}else{Y=V}}else{Y=V}s=U+12|0;if((s|0)==(f|0)){m=r;x=Y;q=O;continue a}else{U=s;V=Y;W=W+1|0}}}do{if((D|0)!=0){W=c[D+12>>2]|0;if((W|0)==(c[D+16>>2]|0)){Z=Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0}else{Z=c[W>>2]|0}if((Z|0)==-1){c[b>>2]=0;_=1;break}else{_=(c[b>>2]|0)==0;break}}else{_=1}}while(0);do{if((B|0)!=0){b=c[B+12>>2]|0;if((b|0)==(c[B+16>>2]|0)){$=Mg[c[(c[B>>2]|0)+36>>2]&127](B)|0}else{$=c[b>>2]|0}if(!(($|0)==-1)){if(_){break}else{aa=87;break}}else{c[d>>2]=0;aa=85;break}}else{aa=85}}while(0);if((aa|0)==85?_:0){aa=87}if((aa|0)==87){c[h>>2]=c[h>>2]|2}c:do{if(!l){if((a[p]|0)==2){ba=e}else{_=e;d=p;while(1){$=_+12|0;B=d+1|0;if(($|0)==(f|0)){aa=92;break c}if((a[B]|0)==2){ba=$;break}else{_=$;d=B}}}}else{aa=92}}while(0);if((aa|0)==92){c[h>>2]=c[h>>2]|4;ba=f}if((o|0)==0){i=k;return ba|0}ov(o);i=k;return ba|0}function fp(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];gp(a,0,k,j,f,g,h);i=b;return}function gp(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0;d=i;i=i+304|0;k=d+200|0;l=d;m=d+4|0;n=d+16|0;o=d+28|0;p=d+32|0;q=d+192|0;r=d+196|0;s=c[g+4>>2]&74;if((s|0)==64){t=8}else if((s|0)==0){t=0}else if((s|0)==8){t=16}else{t=10}Cp(m,g,k,l);c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;Um(n,10,0);if((a[n]&1)==0){g=n+1|0;u=g;v=n+8|0;w=g}else{g=n+8|0;u=n+1|0;v=g;w=c[g>>2]|0}c[o>>2]=w;c[q>>2]=p;c[r>>2]=0;g=n+4|0;s=c[l>>2]|0;l=c[e>>2]|0;x=w;a:while(1){if((l|0)!=0){w=c[l+12>>2]|0;if((w|0)==(c[l+16>>2]|0)){y=Mg[c[(c[l>>2]|0)+36>>2]&127](l)|0}else{y=c[w>>2]|0}if((y|0)==-1){c[e>>2]=0;z=1;A=0}else{z=0;A=l}}else{z=1;A=0}w=c[f>>2]|0;do{if((w|0)!=0){B=c[w+12>>2]|0;if((B|0)==(c[w+16>>2]|0)){C=Mg[c[(c[w>>2]|0)+36>>2]&127](w)|0}else{C=c[B>>2]|0}if(!((C|0)==-1)){if(z){D=w;break}else{E=w;F=x;break a}}else{c[f>>2]=0;G=21;break}}else{G=21}}while(0);if((G|0)==21){G=0;if(z){E=0;F=x;break}else{D=0}}w=a[n]|0;B=(w&1)==0;if(B){H=(w&255)>>>1}else{H=c[g>>2]|0}if(((c[o>>2]|0)-x|0)==(H|0)){if(B){I=(w&255)>>>1;J=(w&255)>>>1}else{w=c[g>>2]|0;I=w;J=w}Um(n,I<<1,0);if((a[n]&1)==0){K=10}else{K=(c[n>>2]&-2)+ -1|0}Um(n,K,0);if((a[n]&1)==0){L=u}else{L=c[v>>2]|0}c[o>>2]=L+J;M=L}else{M=x}w=A+12|0;B=c[w>>2]|0;N=A+16|0;if((B|0)==(c[N>>2]|0)){O=Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0}else{O=c[B>>2]|0}if((yp(O,t,M,o,r,s,m,p,q,k)|0)!=0){E=D;F=M;break}B=c[w>>2]|0;if((B|0)==(c[N>>2]|0)){Mg[c[(c[A>>2]|0)+40>>2]&127](A)|0;l=A;x=M;continue}else{c[w>>2]=B+4;l=A;x=M;continue}}M=a[m]|0;if((M&1)==0){P=(M&255)>>>1}else{P=c[m+4>>2]|0}if((P|0)!=0?(P=c[q>>2]|0,(P-p|0)<160):0){M=c[r>>2]|0;c[q>>2]=P+4;c[P>>2]=M}c[j>>2]=ru(F,c[o>>2]|0,h,t)|0;Kr(m,p,c[q>>2]|0,h);if((A|0)!=0){q=c[A+12>>2]|0;if((q|0)==(c[A+16>>2]|0)){Q=Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0}else{Q=c[q>>2]|0}if((Q|0)==-1){c[e>>2]=0;R=0;S=1}else{R=A;S=0}}else{R=0;S=1}do{if((E|0)!=0){A=c[E+12>>2]|0;if((A|0)==(c[E+16>>2]|0)){T=Mg[c[(c[E>>2]|0)+36>>2]&127](E)|0}else{T=c[A>>2]|0}if((T|0)==-1){c[f>>2]=0;G=60;break}if(S){c[b>>2]=R;Rm(n);Rm(m);i=d;return}}else{G=60}}while(0);if((G|0)==60?!S:0){c[b>>2]=R;Rm(n);Rm(m);i=d;return}c[h>>2]=c[h>>2]|2;c[b>>2]=R;Rm(n);Rm(m);i=d;return}function hp(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];ip(a,0,k,j,f,g,h);i=b;return}function ip(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0;d=i;i=i+304|0;k=d+200|0;l=d;m=d+4|0;n=d+16|0;o=d+28|0;p=d+32|0;q=d+192|0;r=d+196|0;s=c[g+4>>2]&74;if((s|0)==64){t=8}else if((s|0)==0){t=0}else if((s|0)==8){t=16}else{t=10}Cp(m,g,k,l);c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;Um(n,10,0);if((a[n]&1)==0){g=n+1|0;u=g;v=n+8|0;w=g}else{g=n+8|0;u=n+1|0;v=g;w=c[g>>2]|0}c[o>>2]=w;c[q>>2]=p;c[r>>2]=0;g=n+4|0;s=c[l>>2]|0;l=c[e>>2]|0;x=w;a:while(1){if((l|0)!=0){w=c[l+12>>2]|0;if((w|0)==(c[l+16>>2]|0)){y=Mg[c[(c[l>>2]|0)+36>>2]&127](l)|0}else{y=c[w>>2]|0}if((y|0)==-1){c[e>>2]=0;z=1;A=0}else{z=0;A=l}}else{z=1;A=0}w=c[f>>2]|0;do{if((w|0)!=0){B=c[w+12>>2]|0;if((B|0)==(c[w+16>>2]|0)){C=Mg[c[(c[w>>2]|0)+36>>2]&127](w)|0}else{C=c[B>>2]|0}if(!((C|0)==-1)){if(z){D=w;break}else{E=w;F=x;break a}}else{c[f>>2]=0;G=21;break}}else{G=21}}while(0);if((G|0)==21){G=0;if(z){E=0;F=x;break}else{D=0}}w=a[n]|0;B=(w&1)==0;if(B){H=(w&255)>>>1}else{H=c[g>>2]|0}if(((c[o>>2]|0)-x|0)==(H|0)){if(B){J=(w&255)>>>1;K=(w&255)>>>1}else{w=c[g>>2]|0;J=w;K=w}Um(n,J<<1,0);if((a[n]&1)==0){L=10}else{L=(c[n>>2]&-2)+ -1|0}Um(n,L,0);if((a[n]&1)==0){M=u}else{M=c[v>>2]|0}c[o>>2]=M+K;N=M}else{N=x}w=A+12|0;B=c[w>>2]|0;O=A+16|0;if((B|0)==(c[O>>2]|0)){P=Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0}else{P=c[B>>2]|0}if((yp(P,t,N,o,r,s,m,p,q,k)|0)!=0){E=D;F=N;break}B=c[w>>2]|0;if((B|0)==(c[O>>2]|0)){Mg[c[(c[A>>2]|0)+40>>2]&127](A)|0;l=A;x=N;continue}else{c[w>>2]=B+4;l=A;x=N;continue}}N=a[m]|0;if((N&1)==0){Q=(N&255)>>>1}else{Q=c[m+4>>2]|0}if((Q|0)!=0?(Q=c[q>>2]|0,(Q-p|0)<160):0){N=c[r>>2]|0;c[q>>2]=Q+4;c[Q>>2]=N}N=qu(F,c[o>>2]|0,h,t)|0;t=j;c[t>>2]=N;c[t+4>>2]=I;Kr(m,p,c[q>>2]|0,h);if((A|0)!=0){q=c[A+12>>2]|0;if((q|0)==(c[A+16>>2]|0)){R=Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0}else{R=c[q>>2]|0}if((R|0)==-1){c[e>>2]=0;S=0;T=1}else{S=A;T=0}}else{S=0;T=1}do{if((E|0)!=0){A=c[E+12>>2]|0;if((A|0)==(c[E+16>>2]|0)){U=Mg[c[(c[E>>2]|0)+36>>2]&127](E)|0}else{U=c[A>>2]|0}if((U|0)==-1){c[f>>2]=0;G=60;break}if(T){c[b>>2]=S;Rm(n);Rm(m);i=d;return}}else{G=60}}while(0);if((G|0)==60?!T:0){c[b>>2]=S;Rm(n);Rm(m);i=d;return}c[h>>2]=c[h>>2]|2;c[b>>2]=S;Rm(n);Rm(m);i=d;return}function jp(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];kp(a,0,k,j,f,g,h);i=b;return}function kp(d,e,f,g,h,j,k){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0;e=i;i=i+304|0;l=e+200|0;m=e;n=e+4|0;o=e+16|0;p=e+28|0;q=e+32|0;r=e+192|0;s=e+196|0;t=c[h+4>>2]&74;if((t|0)==64){u=8}else if((t|0)==0){u=0}else if((t|0)==8){u=16}else{u=10}Cp(n,h,l,m);c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Um(o,10,0);if((a[o]&1)==0){h=o+1|0;v=h;w=o+8|0;x=h}else{h=o+8|0;v=o+1|0;w=h;x=c[h>>2]|0}c[p>>2]=x;c[r>>2]=q;c[s>>2]=0;h=o+4|0;t=c[m>>2]|0;m=c[f>>2]|0;y=x;a:while(1){if((m|0)!=0){x=c[m+12>>2]|0;if((x|0)==(c[m+16>>2]|0)){z=Mg[c[(c[m>>2]|0)+36>>2]&127](m)|0}else{z=c[x>>2]|0}if((z|0)==-1){c[f>>2]=0;A=1;B=0}else{A=0;B=m}}else{A=1;B=0}x=c[g>>2]|0;do{if((x|0)!=0){C=c[x+12>>2]|0;if((C|0)==(c[x+16>>2]|0)){D=Mg[c[(c[x>>2]|0)+36>>2]&127](x)|0}else{D=c[C>>2]|0}if(!((D|0)==-1)){if(A){E=x;break}else{F=x;G=y;break a}}else{c[g>>2]=0;H=21;break}}else{H=21}}while(0);if((H|0)==21){H=0;if(A){F=0;G=y;break}else{E=0}}x=a[o]|0;C=(x&1)==0;if(C){I=(x&255)>>>1}else{I=c[h>>2]|0}if(((c[p>>2]|0)-y|0)==(I|0)){if(C){J=(x&255)>>>1;K=(x&255)>>>1}else{x=c[h>>2]|0;J=x;K=x}Um(o,J<<1,0);if((a[o]&1)==0){L=10}else{L=(c[o>>2]&-2)+ -1|0}Um(o,L,0);if((a[o]&1)==0){M=v}else{M=c[w>>2]|0}c[p>>2]=M+K;N=M}else{N=y}x=B+12|0;C=c[x>>2]|0;O=B+16|0;if((C|0)==(c[O>>2]|0)){P=Mg[c[(c[B>>2]|0)+36>>2]&127](B)|0}else{P=c[C>>2]|0}if((yp(P,u,N,p,s,t,n,q,r,l)|0)!=0){F=E;G=N;break}C=c[x>>2]|0;if((C|0)==(c[O>>2]|0)){Mg[c[(c[B>>2]|0)+40>>2]&127](B)|0;m=B;y=N;continue}else{c[x>>2]=C+4;m=B;y=N;continue}}N=a[n]|0;if((N&1)==0){Q=(N&255)>>>1}else{Q=c[n+4>>2]|0}if((Q|0)!=0?(Q=c[r>>2]|0,(Q-q|0)<160):0){N=c[s>>2]|0;c[r>>2]=Q+4;c[Q>>2]=N}b[k>>1]=pu(G,c[p>>2]|0,j,u)|0;Kr(n,q,c[r>>2]|0,j);if((B|0)!=0){r=c[B+12>>2]|0;if((r|0)==(c[B+16>>2]|0)){R=Mg[c[(c[B>>2]|0)+36>>2]&127](B)|0}else{R=c[r>>2]|0}if((R|0)==-1){c[f>>2]=0;S=0;T=1}else{S=B;T=0}}else{S=0;T=1}do{if((F|0)!=0){B=c[F+12>>2]|0;if((B|0)==(c[F+16>>2]|0)){U=Mg[c[(c[F>>2]|0)+36>>2]&127](F)|0}else{U=c[B>>2]|0}if((U|0)==-1){c[g>>2]=0;H=60;break}if(T){c[d>>2]=S;Rm(o);Rm(n);i=e;return}}else{H=60}}while(0);if((H|0)==60?!T:0){c[d>>2]=S;Rm(o);Rm(n);i=e;return}c[j>>2]=c[j>>2]|2;c[d>>2]=S;Rm(o);Rm(n);i=e;return}function lp(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];mp(a,0,k,j,f,g,h);i=b;return}function mp(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0;d=i;i=i+304|0;k=d+200|0;l=d;m=d+4|0;n=d+16|0;o=d+28|0;p=d+32|0;q=d+192|0;r=d+196|0;s=c[g+4>>2]&74;if((s|0)==64){t=8}else if((s|0)==0){t=0}else if((s|0)==8){t=16}else{t=10}Cp(m,g,k,l);c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;Um(n,10,0);if((a[n]&1)==0){g=n+1|0;u=g;v=n+8|0;w=g}else{g=n+8|0;u=n+1|0;v=g;w=c[g>>2]|0}c[o>>2]=w;c[q>>2]=p;c[r>>2]=0;g=n+4|0;s=c[l>>2]|0;l=c[e>>2]|0;x=w;a:while(1){if((l|0)!=0){w=c[l+12>>2]|0;if((w|0)==(c[l+16>>2]|0)){y=Mg[c[(c[l>>2]|0)+36>>2]&127](l)|0}else{y=c[w>>2]|0}if((y|0)==-1){c[e>>2]=0;z=1;A=0}else{z=0;A=l}}else{z=1;A=0}w=c[f>>2]|0;do{if((w|0)!=0){B=c[w+12>>2]|0;if((B|0)==(c[w+16>>2]|0)){C=Mg[c[(c[w>>2]|0)+36>>2]&127](w)|0}else{C=c[B>>2]|0}if(!((C|0)==-1)){if(z){D=w;break}else{E=w;F=x;break a}}else{c[f>>2]=0;G=21;break}}else{G=21}}while(0);if((G|0)==21){G=0;if(z){E=0;F=x;break}else{D=0}}w=a[n]|0;B=(w&1)==0;if(B){H=(w&255)>>>1}else{H=c[g>>2]|0}if(((c[o>>2]|0)-x|0)==(H|0)){if(B){I=(w&255)>>>1;J=(w&255)>>>1}else{w=c[g>>2]|0;I=w;J=w}Um(n,I<<1,0);if((a[n]&1)==0){K=10}else{K=(c[n>>2]&-2)+ -1|0}Um(n,K,0);if((a[n]&1)==0){L=u}else{L=c[v>>2]|0}c[o>>2]=L+J;M=L}else{M=x}w=A+12|0;B=c[w>>2]|0;N=A+16|0;if((B|0)==(c[N>>2]|0)){O=Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0}else{O=c[B>>2]|0}if((yp(O,t,M,o,r,s,m,p,q,k)|0)!=0){E=D;F=M;break}B=c[w>>2]|0;if((B|0)==(c[N>>2]|0)){Mg[c[(c[A>>2]|0)+40>>2]&127](A)|0;l=A;x=M;continue}else{c[w>>2]=B+4;l=A;x=M;continue}}M=a[m]|0;if((M&1)==0){P=(M&255)>>>1}else{P=c[m+4>>2]|0}if((P|0)!=0?(P=c[q>>2]|0,(P-p|0)<160):0){M=c[r>>2]|0;c[q>>2]=P+4;c[P>>2]=M}c[j>>2]=ou(F,c[o>>2]|0,h,t)|0;Kr(m,p,c[q>>2]|0,h);if((A|0)!=0){q=c[A+12>>2]|0;if((q|0)==(c[A+16>>2]|0)){Q=Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0}else{Q=c[q>>2]|0}if((Q|0)==-1){c[e>>2]=0;R=0;S=1}else{R=A;S=0}}else{R=0;S=1}do{if((E|0)!=0){A=c[E+12>>2]|0;if((A|0)==(c[E+16>>2]|0)){T=Mg[c[(c[E>>2]|0)+36>>2]&127](E)|0}else{T=c[A>>2]|0}if((T|0)==-1){c[f>>2]=0;G=60;break}if(S){c[b>>2]=R;Rm(n);Rm(m);i=d;return}}else{G=60}}while(0);if((G|0)==60?!S:0){c[b>>2]=R;Rm(n);Rm(m);i=d;return}c[h>>2]=c[h>>2]|2;c[b>>2]=R;Rm(n);Rm(m);i=d;return}function np(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];op(a,0,k,j,f,g,h);i=b;return}function op(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0;d=i;i=i+304|0;k=d+200|0;l=d;m=d+4|0;n=d+16|0;o=d+28|0;p=d+32|0;q=d+192|0;r=d+196|0;s=c[g+4>>2]&74;if((s|0)==64){t=8}else if((s|0)==0){t=0}else if((s|0)==8){t=16}else{t=10}Cp(m,g,k,l);c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;Um(n,10,0);if((a[n]&1)==0){g=n+1|0;u=g;v=n+8|0;w=g}else{g=n+8|0;u=n+1|0;v=g;w=c[g>>2]|0}c[o>>2]=w;c[q>>2]=p;c[r>>2]=0;g=n+4|0;s=c[l>>2]|0;l=c[e>>2]|0;x=w;a:while(1){if((l|0)!=0){w=c[l+12>>2]|0;if((w|0)==(c[l+16>>2]|0)){y=Mg[c[(c[l>>2]|0)+36>>2]&127](l)|0}else{y=c[w>>2]|0}if((y|0)==-1){c[e>>2]=0;z=1;A=0}else{z=0;A=l}}else{z=1;A=0}w=c[f>>2]|0;do{if((w|0)!=0){B=c[w+12>>2]|0;if((B|0)==(c[w+16>>2]|0)){C=Mg[c[(c[w>>2]|0)+36>>2]&127](w)|0}else{C=c[B>>2]|0}if(!((C|0)==-1)){if(z){D=w;break}else{E=w;F=x;break a}}else{c[f>>2]=0;G=21;break}}else{G=21}}while(0);if((G|0)==21){G=0;if(z){E=0;F=x;break}else{D=0}}w=a[n]|0;B=(w&1)==0;if(B){H=(w&255)>>>1}else{H=c[g>>2]|0}if(((c[o>>2]|0)-x|0)==(H|0)){if(B){I=(w&255)>>>1;J=(w&255)>>>1}else{w=c[g>>2]|0;I=w;J=w}Um(n,I<<1,0);if((a[n]&1)==0){K=10}else{K=(c[n>>2]&-2)+ -1|0}Um(n,K,0);if((a[n]&1)==0){L=u}else{L=c[v>>2]|0}c[o>>2]=L+J;M=L}else{M=x}w=A+12|0;B=c[w>>2]|0;N=A+16|0;if((B|0)==(c[N>>2]|0)){O=Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0}else{O=c[B>>2]|0}if((yp(O,t,M,o,r,s,m,p,q,k)|0)!=0){E=D;F=M;break}B=c[w>>2]|0;if((B|0)==(c[N>>2]|0)){Mg[c[(c[A>>2]|0)+40>>2]&127](A)|0;l=A;x=M;continue}else{c[w>>2]=B+4;l=A;x=M;continue}}M=a[m]|0;if((M&1)==0){P=(M&255)>>>1}else{P=c[m+4>>2]|0}if((P|0)!=0?(P=c[q>>2]|0,(P-p|0)<160):0){M=c[r>>2]|0;c[q>>2]=P+4;c[P>>2]=M}c[j>>2]=nu(F,c[o>>2]|0,h,t)|0;Kr(m,p,c[q>>2]|0,h);if((A|0)!=0){q=c[A+12>>2]|0;if((q|0)==(c[A+16>>2]|0)){Q=Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0}else{Q=c[q>>2]|0}if((Q|0)==-1){c[e>>2]=0;R=0;S=1}else{R=A;S=0}}else{R=0;S=1}do{if((E|0)!=0){A=c[E+12>>2]|0;if((A|0)==(c[E+16>>2]|0)){T=Mg[c[(c[E>>2]|0)+36>>2]&127](E)|0}else{T=c[A>>2]|0}if((T|0)==-1){c[f>>2]=0;G=60;break}if(S){c[b>>2]=R;Rm(n);Rm(m);i=d;return}}else{G=60}}while(0);if((G|0)==60?!S:0){c[b>>2]=R;Rm(n);Rm(m);i=d;return}c[h>>2]=c[h>>2]|2;c[b>>2]=R;Rm(n);Rm(m);i=d;return}function pp(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];qp(a,0,k,j,f,g,h);i=b;return}function qp(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0;d=i;i=i+304|0;k=d+200|0;l=d;m=d+4|0;n=d+16|0;o=d+28|0;p=d+32|0;q=d+192|0;r=d+196|0;s=c[g+4>>2]&74;if((s|0)==64){t=8}else if((s|0)==0){t=0}else if((s|0)==8){t=16}else{t=10}Cp(m,g,k,l);c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;Um(n,10,0);if((a[n]&1)==0){g=n+1|0;u=g;v=n+8|0;w=g}else{g=n+8|0;u=n+1|0;v=g;w=c[g>>2]|0}c[o>>2]=w;c[q>>2]=p;c[r>>2]=0;g=n+4|0;s=c[l>>2]|0;l=c[e>>2]|0;x=w;a:while(1){if((l|0)!=0){w=c[l+12>>2]|0;if((w|0)==(c[l+16>>2]|0)){y=Mg[c[(c[l>>2]|0)+36>>2]&127](l)|0}else{y=c[w>>2]|0}if((y|0)==-1){c[e>>2]=0;z=1;A=0}else{z=0;A=l}}else{z=1;A=0}w=c[f>>2]|0;do{if((w|0)!=0){B=c[w+12>>2]|0;if((B|0)==(c[w+16>>2]|0)){C=Mg[c[(c[w>>2]|0)+36>>2]&127](w)|0}else{C=c[B>>2]|0}if(!((C|0)==-1)){if(z){D=w;break}else{E=w;F=x;break a}}else{c[f>>2]=0;G=21;break}}else{G=21}}while(0);if((G|0)==21){G=0;if(z){E=0;F=x;break}else{D=0}}w=a[n]|0;B=(w&1)==0;if(B){H=(w&255)>>>1}else{H=c[g>>2]|0}if(((c[o>>2]|0)-x|0)==(H|0)){if(B){J=(w&255)>>>1;K=(w&255)>>>1}else{w=c[g>>2]|0;J=w;K=w}Um(n,J<<1,0);if((a[n]&1)==0){L=10}else{L=(c[n>>2]&-2)+ -1|0}Um(n,L,0);if((a[n]&1)==0){M=u}else{M=c[v>>2]|0}c[o>>2]=M+K;N=M}else{N=x}w=A+12|0;B=c[w>>2]|0;O=A+16|0;if((B|0)==(c[O>>2]|0)){P=Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0}else{P=c[B>>2]|0}if((yp(P,t,N,o,r,s,m,p,q,k)|0)!=0){E=D;F=N;break}B=c[w>>2]|0;if((B|0)==(c[O>>2]|0)){Mg[c[(c[A>>2]|0)+40>>2]&127](A)|0;l=A;x=N;continue}else{c[w>>2]=B+4;l=A;x=N;continue}}N=a[m]|0;if((N&1)==0){Q=(N&255)>>>1}else{Q=c[m+4>>2]|0}if((Q|0)!=0?(Q=c[q>>2]|0,(Q-p|0)<160):0){N=c[r>>2]|0;c[q>>2]=Q+4;c[Q>>2]=N}N=mu(F,c[o>>2]|0,h,t)|0;t=j;c[t>>2]=N;c[t+4>>2]=I;Kr(m,p,c[q>>2]|0,h);if((A|0)!=0){q=c[A+12>>2]|0;if((q|0)==(c[A+16>>2]|0)){R=Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0}else{R=c[q>>2]|0}if((R|0)==-1){c[e>>2]=0;S=0;T=1}else{S=A;T=0}}else{S=0;T=1}do{if((E|0)!=0){A=c[E+12>>2]|0;if((A|0)==(c[E+16>>2]|0)){U=Mg[c[(c[E>>2]|0)+36>>2]&127](E)|0}else{U=c[A>>2]|0}if((U|0)==-1){c[f>>2]=0;G=60;break}if(T){c[b>>2]=S;Rm(n);Rm(m);i=d;return}}else{G=60}}while(0);if((G|0)==60?!T:0){c[b>>2]=S;Rm(n);Rm(m);i=d;return}c[h>>2]=c[h>>2]|2;c[b>>2]=S;Rm(n);Rm(m);i=d;return}function rp(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];sp(a,0,k,j,f,g,h);i=b;return}function sp(b,d,e,f,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;d=i;i=i+352|0;l=d+176|0;m=d+332|0;n=d+328|0;o=d+316|0;p=d+304|0;q=d+168|0;r=d+8|0;s=d+4|0;t=d;u=d+337|0;v=d+336|0;Dp(o,h,l,m,n);c[p+0>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;Um(p,10,0);if((a[p]&1)==0){h=p+1|0;w=h;x=p+8|0;y=h}else{h=p+8|0;w=p+1|0;x=h;y=c[h>>2]|0}c[q>>2]=y;c[s>>2]=r;c[t>>2]=0;a[u]=1;a[v]=69;h=p+4|0;z=c[m>>2]|0;m=c[n>>2]|0;n=c[e>>2]|0;A=y;a:while(1){if((n|0)!=0){y=c[n+12>>2]|0;if((y|0)==(c[n+16>>2]|0)){B=Mg[c[(c[n>>2]|0)+36>>2]&127](n)|0}else{B=c[y>>2]|0}if((B|0)==-1){c[e>>2]=0;C=1;D=0}else{C=0;D=n}}else{C=1;D=0}y=c[f>>2]|0;do{if((y|0)!=0){E=c[y+12>>2]|0;if((E|0)==(c[y+16>>2]|0)){F=Mg[c[(c[y>>2]|0)+36>>2]&127](y)|0}else{F=c[E>>2]|0}if(!((F|0)==-1)){if(C){G=y;break}else{H=y;I=A;break a}}else{c[f>>2]=0;J=17;break}}else{J=17}}while(0);if((J|0)==17){J=0;if(C){H=0;I=A;break}else{G=0}}y=a[p]|0;E=(y&1)==0;if(E){K=(y&255)>>>1}else{K=c[h>>2]|0}if(((c[q>>2]|0)-A|0)==(K|0)){if(E){L=(y&255)>>>1;M=(y&255)>>>1}else{y=c[h>>2]|0;L=y;M=y}Um(p,L<<1,0);if((a[p]&1)==0){N=10}else{N=(c[p>>2]&-2)+ -1|0}Um(p,N,0);if((a[p]&1)==0){O=w}else{O=c[x>>2]|0}c[q>>2]=O+M;P=O}else{P=A}y=D+12|0;E=c[y>>2]|0;Q=D+16|0;if((E|0)==(c[Q>>2]|0)){R=Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0}else{R=c[E>>2]|0}if((Ep(R,u,v,P,q,z,m,o,r,s,t,l)|0)!=0){H=G;I=P;break}E=c[y>>2]|0;if((E|0)==(c[Q>>2]|0)){Mg[c[(c[D>>2]|0)+40>>2]&127](D)|0;n=D;A=P;continue}else{c[y>>2]=E+4;n=D;A=P;continue}}P=a[o]|0;if((P&1)==0){S=(P&255)>>>1}else{S=c[o+4>>2]|0}if(((S|0)!=0?(a[u]|0)!=0:0)?(u=c[s>>2]|0,(u-r|0)<160):0){S=c[t>>2]|0;c[s>>2]=u+4;c[u>>2]=S}g[k>>2]=+lu(I,c[q>>2]|0,j);Kr(o,r,c[s>>2]|0,j);if((D|0)!=0){s=c[D+12>>2]|0;if((s|0)==(c[D+16>>2]|0)){T=Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0}else{T=c[s>>2]|0}if((T|0)==-1){c[e>>2]=0;U=0;V=1}else{U=D;V=0}}else{U=0;V=1}do{if((H|0)!=0){D=c[H+12>>2]|0;if((D|0)==(c[H+16>>2]|0)){W=Mg[c[(c[H>>2]|0)+36>>2]&127](H)|0}else{W=c[D>>2]|0}if((W|0)==-1){c[f>>2]=0;J=57;break}if(V){c[b>>2]=U;Rm(p);Rm(o);i=d;return}}else{J=57}}while(0);if((J|0)==57?!V:0){c[b>>2]=U;Rm(p);Rm(o);i=d;return}c[j>>2]=c[j>>2]|2;c[b>>2]=U;Rm(p);Rm(o);i=d;return}function tp(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];up(a,0,k,j,f,g,h);i=b;return}function up(b,d,e,f,g,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;d=i;i=i+352|0;l=d+176|0;m=d+332|0;n=d+328|0;o=d+316|0;p=d+304|0;q=d+168|0;r=d+8|0;s=d+4|0;t=d;u=d+337|0;v=d+336|0;Dp(o,g,l,m,n);c[p+0>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;Um(p,10,0);if((a[p]&1)==0){g=p+1|0;w=g;x=p+8|0;y=g}else{g=p+8|0;w=p+1|0;x=g;y=c[g>>2]|0}c[q>>2]=y;c[s>>2]=r;c[t>>2]=0;a[u]=1;a[v]=69;g=p+4|0;z=c[m>>2]|0;m=c[n>>2]|0;n=c[e>>2]|0;A=y;a:while(1){if((n|0)!=0){y=c[n+12>>2]|0;if((y|0)==(c[n+16>>2]|0)){B=Mg[c[(c[n>>2]|0)+36>>2]&127](n)|0}else{B=c[y>>2]|0}if((B|0)==-1){c[e>>2]=0;C=1;D=0}else{C=0;D=n}}else{C=1;D=0}y=c[f>>2]|0;do{if((y|0)!=0){E=c[y+12>>2]|0;if((E|0)==(c[y+16>>2]|0)){F=Mg[c[(c[y>>2]|0)+36>>2]&127](y)|0}else{F=c[E>>2]|0}if(!((F|0)==-1)){if(C){G=y;break}else{H=y;I=A;break a}}else{c[f>>2]=0;J=17;break}}else{J=17}}while(0);if((J|0)==17){J=0;if(C){H=0;I=A;break}else{G=0}}y=a[p]|0;E=(y&1)==0;if(E){K=(y&255)>>>1}else{K=c[g>>2]|0}if(((c[q>>2]|0)-A|0)==(K|0)){if(E){L=(y&255)>>>1;M=(y&255)>>>1}else{y=c[g>>2]|0;L=y;M=y}Um(p,L<<1,0);if((a[p]&1)==0){N=10}else{N=(c[p>>2]&-2)+ -1|0}Um(p,N,0);if((a[p]&1)==0){O=w}else{O=c[x>>2]|0}c[q>>2]=O+M;P=O}else{P=A}y=D+12|0;E=c[y>>2]|0;Q=D+16|0;if((E|0)==(c[Q>>2]|0)){R=Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0}else{R=c[E>>2]|0}if((Ep(R,u,v,P,q,z,m,o,r,s,t,l)|0)!=0){H=G;I=P;break}E=c[y>>2]|0;if((E|0)==(c[Q>>2]|0)){Mg[c[(c[D>>2]|0)+40>>2]&127](D)|0;n=D;A=P;continue}else{c[y>>2]=E+4;n=D;A=P;continue}}P=a[o]|0;if((P&1)==0){S=(P&255)>>>1}else{S=c[o+4>>2]|0}if(((S|0)!=0?(a[u]|0)!=0:0)?(u=c[s>>2]|0,(u-r|0)<160):0){S=c[t>>2]|0;c[s>>2]=u+4;c[u>>2]=S}h[k>>3]=+ku(I,c[q>>2]|0,j);Kr(o,r,c[s>>2]|0,j);if((D|0)!=0){s=c[D+12>>2]|0;if((s|0)==(c[D+16>>2]|0)){T=Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0}else{T=c[s>>2]|0}if((T|0)==-1){c[e>>2]=0;U=0;V=1}else{U=D;V=0}}else{U=0;V=1}do{if((H|0)!=0){D=c[H+12>>2]|0;if((D|0)==(c[H+16>>2]|0)){W=Mg[c[(c[H>>2]|0)+36>>2]&127](H)|0}else{W=c[D>>2]|0}if((W|0)==-1){c[f>>2]=0;J=57;break}if(V){c[b>>2]=U;Rm(p);Rm(o);i=d;return}}else{J=57}}while(0);if((J|0)==57?!V:0){c[b>>2]=U;Rm(p);Rm(o);i=d;return}c[j>>2]=c[j>>2]|2;c[b>>2]=U;Rm(p);Rm(o);i=d;return}function vp(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;b=i;i=i+16|0;j=b+12|0;k=b;l=b+4|0;m=b+8|0;c[l>>2]=c[d>>2];c[m>>2]=c[e>>2];c[k+0>>2]=c[l+0>>2];c[j+0>>2]=c[m+0>>2];wp(a,0,k,j,f,g,h);i=b;return}function wp(b,d,e,f,g,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;d=i;i=i+352|0;l=d+176|0;m=d+332|0;n=d+328|0;o=d+316|0;p=d+304|0;q=d+168|0;r=d+8|0;s=d+4|0;t=d;u=d+337|0;v=d+336|0;Dp(o,g,l,m,n);c[p+0>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;Um(p,10,0);if((a[p]&1)==0){g=p+1|0;w=g;x=p+8|0;y=g}else{g=p+8|0;w=p+1|0;x=g;y=c[g>>2]|0}c[q>>2]=y;c[s>>2]=r;c[t>>2]=0;a[u]=1;a[v]=69;g=p+4|0;z=c[m>>2]|0;m=c[n>>2]|0;n=c[e>>2]|0;A=y;a:while(1){if((n|0)!=0){y=c[n+12>>2]|0;if((y|0)==(c[n+16>>2]|0)){B=Mg[c[(c[n>>2]|0)+36>>2]&127](n)|0}else{B=c[y>>2]|0}if((B|0)==-1){c[e>>2]=0;C=1;D=0}else{C=0;D=n}}else{C=1;D=0}y=c[f>>2]|0;do{if((y|0)!=0){E=c[y+12>>2]|0;if((E|0)==(c[y+16>>2]|0)){F=Mg[c[(c[y>>2]|0)+36>>2]&127](y)|0}else{F=c[E>>2]|0}if(!((F|0)==-1)){if(C){G=y;break}else{H=y;I=A;break a}}else{c[f>>2]=0;J=17;break}}else{J=17}}while(0);if((J|0)==17){J=0;if(C){H=0;I=A;break}else{G=0}}y=a[p]|0;E=(y&1)==0;if(E){K=(y&255)>>>1}else{K=c[g>>2]|0}if(((c[q>>2]|0)-A|0)==(K|0)){if(E){L=(y&255)>>>1;M=(y&255)>>>1}else{y=c[g>>2]|0;L=y;M=y}Um(p,L<<1,0);if((a[p]&1)==0){N=10}else{N=(c[p>>2]&-2)+ -1|0}Um(p,N,0);if((a[p]&1)==0){O=w}else{O=c[x>>2]|0}c[q>>2]=O+M;P=O}else{P=A}y=D+12|0;E=c[y>>2]|0;Q=D+16|0;if((E|0)==(c[Q>>2]|0)){R=Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0}else{R=c[E>>2]|0}if((Ep(R,u,v,P,q,z,m,o,r,s,t,l)|0)!=0){H=G;I=P;break}E=c[y>>2]|0;if((E|0)==(c[Q>>2]|0)){Mg[c[(c[D>>2]|0)+40>>2]&127](D)|0;n=D;A=P;continue}else{c[y>>2]=E+4;n=D;A=P;continue}}P=a[o]|0;if((P&1)==0){S=(P&255)>>>1}else{S=c[o+4>>2]|0}if(((S|0)!=0?(a[u]|0)!=0:0)?(u=c[s>>2]|0,(u-r|0)<160):0){S=c[t>>2]|0;c[s>>2]=u+4;c[u>>2]=S}h[k>>3]=+ju(I,c[q>>2]|0,j);Kr(o,r,c[s>>2]|0,j);if((D|0)!=0){s=c[D+12>>2]|0;if((s|0)==(c[D+16>>2]|0)){T=Mg[c[(c[D>>2]|0)+36>>2]&127](D)|0}else{T=c[s>>2]|0}if((T|0)==-1){c[e>>2]=0;U=0;V=1}else{U=D;V=0}}else{U=0;V=1}do{if((H|0)!=0){D=c[H+12>>2]|0;if((D|0)==(c[H+16>>2]|0)){W=Mg[c[(c[H>>2]|0)+36>>2]&127](H)|0}else{W=c[D>>2]|0}if((W|0)==-1){c[f>>2]=0;J=57;break}if(V){c[b>>2]=U;Rm(p);Rm(o);i=d;return}}else{J=57}}while(0);if((J|0)==57?!V:0){c[b>>2]=U;Rm(p);Rm(o);i=d;return}c[j>>2]=c[j>>2]|2;c[b>>2]=U;Rm(p);Rm(o);i=d;return}function xp(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0;d=i;i=i+304|0;k=d;l=d+200|0;m=d+12|0;n=d+24|0;o=d+28|0;p=d+40|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;ln(n,g);g=c[n>>2]|0;if(!((c[5534]|0)==-1)){c[k>>2]=22136;c[k+4>>2]=165;c[k+8>>2]=0;Mm(22136,k,166)}q=(c[22140>>2]|0)+ -1|0;r=c[g+8>>2]|0;if(!((c[g+12>>2]|0)-r>>2>>>0>q>>>0)){s=Wd(4)|0;Tu(s);qg(s|0,30104,152)}g=c[r+(q<<2)>>2]|0;if((g|0)==0){s=Wd(4)|0;Tu(s);qg(s|0,30104,152)}fh[c[(c[g>>2]|0)+48>>2]&15](g,20688,20714|0,l)|0;sm(c[n>>2]|0)|0;c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Um(o,10,0);if((a[o]&1)==0){n=o+1|0;t=n;u=o+8|0;v=n}else{n=o+8|0;t=o+1|0;u=n;v=c[n>>2]|0}n=o+4|0;g=l+96|0;s=l+100|0;q=p;r=l+104|0;w=l;x=m+4|0;y=c[e>>2]|0;z=p;p=0;A=v;B=v;a:while(1){if((y|0)!=0){v=c[y+12>>2]|0;if((v|0)==(c[y+16>>2]|0)){C=Mg[c[(c[y>>2]|0)+36>>2]&127](y)|0}else{C=c[v>>2]|0}if((C|0)==-1){c[e>>2]=0;D=1;E=0}else{D=0;E=y}}else{D=1;E=0}v=c[f>>2]|0;do{if((v|0)!=0){F=c[v+12>>2]|0;if((F|0)==(c[v+16>>2]|0)){G=Mg[c[(c[v>>2]|0)+36>>2]&127](v)|0}else{G=c[F>>2]|0}if(!((G|0)==-1)){if(D){break}else{H=B;break a}}else{c[f>>2]=0;I=22;break}}else{I=22}}while(0);if((I|0)==22?(I=0,D):0){H=B;break}v=a[o]|0;F=(v&1)==0;if(F){J=(v&255)>>>1}else{J=c[n>>2]|0}if((A-B|0)==(J|0)){if(F){K=(v&255)>>>1;L=(v&255)>>>1}else{v=c[n>>2]|0;K=v;L=v}Um(o,K<<1,0);if((a[o]&1)==0){M=10}else{M=(c[o>>2]&-2)+ -1|0}Um(o,M,0);if((a[o]&1)==0){N=t}else{N=c[u>>2]|0}O=N+L|0;P=N}else{O=A;P=B}v=c[E+12>>2]|0;if((v|0)==(c[E+16>>2]|0)){Q=Mg[c[(c[E>>2]|0)+36>>2]&127](E)|0}else{Q=c[v>>2]|0}v=(O|0)==(P|0);do{if(v){F=(c[g>>2]|0)==(Q|0);if(!F?(c[s>>2]|0)!=(Q|0):0){I=43;break}a[O]=F?43:45;R=O+1|0;S=z;T=0}else{I=43}}while(0);do{if((I|0)==43){I=0;F=a[m]|0;if((F&1)==0){U=(F&255)>>>1}else{U=c[x>>2]|0}if((U|0)!=0&(Q|0)==0){if((z-q|0)>=160){R=O;S=z;T=p;break}c[z>>2]=p;R=O;S=z+4|0;T=0;break}else{V=l}while(1){F=V+4|0;if((c[V>>2]|0)==(Q|0)){W=V;break}if((F|0)==(r|0)){W=r;break}else{V=F}}F=W-w|0;X=F>>2;if((F|0)>92){H=P;break a}if((F|0)<88){a[O]=a[20688+X|0]|0;R=O+1|0;S=z;T=p+1|0;break}if(v){H=O;break a}if((O-P|0)>=3){H=P;break a}if((a[O+ -1|0]|0)!=48){H=P;break a}a[O]=a[20688+X|0]|0;R=O+1|0;S=z;T=0}}while(0);v=c[e>>2]|0;X=v+12|0;F=c[X>>2]|0;if((F|0)==(c[v+16>>2]|0)){Mg[c[(c[v>>2]|0)+40>>2]&127](v)|0;y=v;z=S;p=T;A=R;B=P;continue}else{c[X>>2]=F+4;y=v;z=S;p=T;A=R;B=P;continue}}a[H+3|0]=0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}P=c[5508]|0;c[k>>2]=j;if((ap(H,P,20728,k)|0)!=1){c[h>>2]=4}k=c[e>>2]|0;if((k|0)!=0){P=c[k+12>>2]|0;if((P|0)==(c[k+16>>2]|0)){Y=Mg[c[(c[k>>2]|0)+36>>2]&127](k)|0}else{Y=c[P>>2]|0}if((Y|0)==-1){c[e>>2]=0;Z=0;_=1}else{Z=k;_=0}}else{Z=0;_=1}k=c[f>>2]|0;do{if((k|0)!=0){e=c[k+12>>2]|0;if((e|0)==(c[k+16>>2]|0)){$=Mg[c[(c[k>>2]|0)+36>>2]&127](k)|0}else{$=c[e>>2]|0}if(($|0)==-1){c[f>>2]=0;I=78;break}if(_){c[b>>2]=Z;Rm(o);Rm(m);i=d;return}}else{I=78}}while(0);if((I|0)==78?!_:0){c[b>>2]=Z;Rm(o);Rm(m);i=d;return}c[h>>2]=c[h>>2]|2;c[b>>2]=Z;Rm(o);Rm(m);i=d;return}function yp(b,d,e,f,g,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0;n=i;o=c[f>>2]|0;p=(o|0)==(e|0);do{if(p){q=(c[m+96>>2]|0)==(b|0);if(!q?(c[m+100>>2]|0)!=(b|0):0){break}c[f>>2]=e+1;a[e]=q?43:45;c[g>>2]=0;r=0;i=n;return r|0}}while(0);q=a[j]|0;if((q&1)==0){s=(q&255)>>>1}else{s=c[j+4>>2]|0}if((s|0)!=0&(b|0)==(h|0)){h=c[l>>2]|0;if((h-k|0)>=160){r=0;i=n;return r|0}k=c[g>>2]|0;c[l>>2]=h+4;c[h>>2]=k;c[g>>2]=0;r=0;i=n;return r|0}k=m+104|0;h=m;while(1){l=h+4|0;if((c[h>>2]|0)==(b|0)){t=h;break}if((l|0)==(k|0)){t=k;break}else{h=l}}h=t-m|0;m=h>>2;if((h|0)>92){r=-1;i=n;return r|0}if((d|0)==16){if((h|0)>=88){if(p){r=-1;i=n;return r|0}if((o-e|0)>=3){r=-1;i=n;return r|0}if((a[o+ -1|0]|0)!=48){r=-1;i=n;return r|0}c[g>>2]=0;e=a[20688+m|0]|0;c[f>>2]=o+1;a[o]=e;r=0;i=n;return r|0}}else if((d|0)==10|(d|0)==8?(m|0)>=(d|0):0){r=-1;i=n;return r|0}d=a[20688+m|0]|0;c[f>>2]=o+1;a[o]=d;c[g>>2]=(c[g>>2]|0)+1;r=0;i=n;return r|0}function zp(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;g=i;i=i+16|0;h=g;j=g+12|0;ln(j,d);d=c[j>>2]|0;if(!((c[5536]|0)==-1)){c[h>>2]=22144;c[h+4>>2]=165;c[h+8>>2]=0;Mm(22144,h,166)}k=(c[22148>>2]|0)+ -1|0;l=c[d+8>>2]|0;if(!((c[d+12>>2]|0)-l>>2>>>0>k>>>0)){m=Wd(4)|0;Tu(m);qg(m|0,30104,152)}d=c[l+(k<<2)>>2]|0;if((d|0)==0){m=Wd(4)|0;Tu(m);qg(m|0,30104,152)}fh[c[(c[d>>2]|0)+32>>2]&15](d,20688,20714|0,e)|0;e=c[j>>2]|0;if(!((c[5572]|0)==-1)){c[h>>2]=22288;c[h+4>>2]=165;c[h+8>>2]=0;Mm(22288,h,166)}h=(c[22292>>2]|0)+ -1|0;d=c[e+8>>2]|0;if(!((c[e+12>>2]|0)-d>>2>>>0>h>>>0)){n=Wd(4)|0;Tu(n);qg(n|0,30104,152)}e=c[d+(h<<2)>>2]|0;if((e|0)==0){n=Wd(4)|0;Tu(n);qg(n|0,30104,152)}else{a[f]=Mg[c[(c[e>>2]|0)+16>>2]&127](e)|0;Lg[c[(c[e>>2]|0)+20>>2]&127](b,e);sm(c[j>>2]|0)|0;i=g;return}}function Ap(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0;h=i;i=i+16|0;j=h;k=h+12|0;ln(k,d);d=c[k>>2]|0;if(!((c[5536]|0)==-1)){c[j>>2]=22144;c[j+4>>2]=165;c[j+8>>2]=0;Mm(22144,j,166)}l=(c[22148>>2]|0)+ -1|0;m=c[d+8>>2]|0;if(!((c[d+12>>2]|0)-m>>2>>>0>l>>>0)){n=Wd(4)|0;Tu(n);qg(n|0,30104,152)}d=c[m+(l<<2)>>2]|0;if((d|0)==0){n=Wd(4)|0;Tu(n);qg(n|0,30104,152)}fh[c[(c[d>>2]|0)+32>>2]&15](d,20688,20720|0,e)|0;e=c[k>>2]|0;if(!((c[5572]|0)==-1)){c[j>>2]=22288;c[j+4>>2]=165;c[j+8>>2]=0;Mm(22288,j,166)}j=(c[22292>>2]|0)+ -1|0;d=c[e+8>>2]|0;if(!((c[e+12>>2]|0)-d>>2>>>0>j>>>0)){o=Wd(4)|0;Tu(o);qg(o|0,30104,152)}e=c[d+(j<<2)>>2]|0;if((e|0)==0){o=Wd(4)|0;Tu(o);qg(o|0,30104,152)}else{a[f]=Mg[c[(c[e>>2]|0)+12>>2]&127](e)|0;a[g]=Mg[c[(c[e>>2]|0)+16>>2]&127](e)|0;Lg[c[(c[e>>2]|0)+20>>2]&127](b,e);sm(c[k>>2]|0)|0;i=h;return}}function Bp(b,d,e,f,g,h,j,k,l,m,n,o){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0;p=i;if(b<<24>>24==h<<24>>24){if((a[d]|0)==0){q=-1;i=p;return q|0}a[d]=0;h=c[g>>2]|0;c[g>>2]=h+1;a[h]=46;h=a[k]|0;if((h&1)==0){r=(h&255)>>>1}else{r=c[k+4>>2]|0}if((r|0)==0){q=0;i=p;return q|0}r=c[m>>2]|0;if((r-l|0)>=160){q=0;i=p;return q|0}h=c[n>>2]|0;c[m>>2]=r+4;c[r>>2]=h;q=0;i=p;return q|0}if(b<<24>>24==j<<24>>24){j=a[k]|0;if((j&1)==0){s=(j&255)>>>1}else{s=c[k+4>>2]|0}if((s|0)!=0){if((a[d]|0)==0){q=-1;i=p;return q|0}s=c[m>>2]|0;if((s-l|0)>=160){q=0;i=p;return q|0}j=c[n>>2]|0;c[m>>2]=s+4;c[s>>2]=j;c[n>>2]=0;q=0;i=p;return q|0}}j=o+32|0;s=o;while(1){h=s+1|0;if((a[s]|0)==b<<24>>24){t=s;break}if((h|0)==(j|0)){t=j;break}else{s=h}}s=t-o|0;if((s|0)>31){q=-1;i=p;return q|0}o=a[20688+s|0]|0;if((s|0)==23|(s|0)==22){a[e]=80;t=c[g>>2]|0;c[g>>2]=t+1;a[t]=o;q=0;i=p;return q|0}else if((s|0)==24|(s|0)==25){t=c[g>>2]|0;if((t|0)!=(f|0)?(a[t+ -1|0]&95|0)!=(a[e]&127|0):0){q=-1;i=p;return q|0}c[g>>2]=t+1;a[t]=o;q=0;i=p;return q|0}else{t=o&95;if((t|0)==(a[e]|0)?(a[e]=t|128,(a[d]|0)!=0):0){a[d]=0;d=a[k]|0;if((d&1)==0){u=(d&255)>>>1}else{u=c[k+4>>2]|0}if((u|0)!=0?(u=c[m>>2]|0,(u-l|0)<160):0){l=c[n>>2]|0;c[m>>2]=u+4;c[u>>2]=l}}l=c[g>>2]|0;c[g>>2]=l+1;a[l]=o;if((s|0)>21){q=0;i=p;return q|0}c[n>>2]=(c[n>>2]|0)+1;q=0;i=p;return q|0}return 0}function Cp(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;i=i+16|0;g=f;h=f+12|0;ln(h,b);b=c[h>>2]|0;if(!((c[5534]|0)==-1)){c[g>>2]=22136;c[g+4>>2]=165;c[g+8>>2]=0;Mm(22136,g,166)}j=(c[22140>>2]|0)+ -1|0;k=c[b+8>>2]|0;if(!((c[b+12>>2]|0)-k>>2>>>0>j>>>0)){l=Wd(4)|0;Tu(l);qg(l|0,30104,152)}b=c[k+(j<<2)>>2]|0;if((b|0)==0){l=Wd(4)|0;Tu(l);qg(l|0,30104,152)}fh[c[(c[b>>2]|0)+48>>2]&15](b,20688,20714|0,d)|0;d=c[h>>2]|0;if(!((c[5574]|0)==-1)){c[g>>2]=22296;c[g+4>>2]=165;c[g+8>>2]=0;Mm(22296,g,166)}g=(c[22300>>2]|0)+ -1|0;b=c[d+8>>2]|0;if(!((c[d+12>>2]|0)-b>>2>>>0>g>>>0)){m=Wd(4)|0;Tu(m);qg(m|0,30104,152)}d=c[b+(g<<2)>>2]|0;if((d|0)==0){m=Wd(4)|0;Tu(m);qg(m|0,30104,152)}else{c[e>>2]=Mg[c[(c[d>>2]|0)+16>>2]&127](d)|0;Lg[c[(c[d>>2]|0)+20>>2]&127](a,d);sm(c[h>>2]|0)|0;i=f;return}}function Dp(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;g=i;i=i+16|0;h=g;j=g+12|0;ln(j,b);b=c[j>>2]|0;if(!((c[5534]|0)==-1)){c[h>>2]=22136;c[h+4>>2]=165;c[h+8>>2]=0;Mm(22136,h,166)}k=(c[22140>>2]|0)+ -1|0;l=c[b+8>>2]|0;if(!((c[b+12>>2]|0)-l>>2>>>0>k>>>0)){m=Wd(4)|0;Tu(m);qg(m|0,30104,152)}b=c[l+(k<<2)>>2]|0;if((b|0)==0){m=Wd(4)|0;Tu(m);qg(m|0,30104,152)}fh[c[(c[b>>2]|0)+48>>2]&15](b,20688,20720|0,d)|0;d=c[j>>2]|0;if(!((c[5574]|0)==-1)){c[h>>2]=22296;c[h+4>>2]=165;c[h+8>>2]=0;Mm(22296,h,166)}h=(c[22300>>2]|0)+ -1|0;b=c[d+8>>2]|0;if(!((c[d+12>>2]|0)-b>>2>>>0>h>>>0)){n=Wd(4)|0;Tu(n);qg(n|0,30104,152)}d=c[b+(h<<2)>>2]|0;if((d|0)==0){n=Wd(4)|0;Tu(n);qg(n|0,30104,152)}else{c[e>>2]=Mg[c[(c[d>>2]|0)+12>>2]&127](d)|0;c[f>>2]=Mg[c[(c[d>>2]|0)+16>>2]&127](d)|0;Lg[c[(c[d>>2]|0)+20>>2]&127](a,d);sm(c[j>>2]|0)|0;i=g;return}}function Ep(b,d,e,f,g,h,j,k,l,m,n,o){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0;p=i;if((b|0)==(h|0)){if((a[d]|0)==0){q=-1;i=p;return q|0}a[d]=0;h=c[g>>2]|0;c[g>>2]=h+1;a[h]=46;h=a[k]|0;if((h&1)==0){r=(h&255)>>>1}else{r=c[k+4>>2]|0}if((r|0)==0){q=0;i=p;return q|0}r=c[m>>2]|0;if((r-l|0)>=160){q=0;i=p;return q|0}h=c[n>>2]|0;c[m>>2]=r+4;c[r>>2]=h;q=0;i=p;return q|0}if((b|0)==(j|0)){j=a[k]|0;if((j&1)==0){s=(j&255)>>>1}else{s=c[k+4>>2]|0}if((s|0)!=0){if((a[d]|0)==0){q=-1;i=p;return q|0}s=c[m>>2]|0;if((s-l|0)>=160){q=0;i=p;return q|0}j=c[n>>2]|0;c[m>>2]=s+4;c[s>>2]=j;c[n>>2]=0;q=0;i=p;return q|0}}j=o+128|0;s=o;while(1){h=s+4|0;if((c[s>>2]|0)==(b|0)){t=s;break}if((h|0)==(j|0)){t=j;break}else{s=h}}s=t-o|0;o=s>>2;if((s|0)>124){q=-1;i=p;return q|0}t=a[20688+o|0]|0;if((o|0)==23|(o|0)==22){a[e]=80}else if(!((o|0)==24|(o|0)==25)){o=t&95;if((o|0)==(a[e]|0)?(a[e]=o|128,(a[d]|0)!=0):0){a[d]=0;d=a[k]|0;if((d&1)==0){u=(d&255)>>>1}else{u=c[k+4>>2]|0}if((u|0)!=0?(u=c[m>>2]|0,(u-l|0)<160):0){l=c[n>>2]|0;c[m>>2]=u+4;c[u>>2]=l}}}else{l=c[g>>2]|0;if((l|0)!=(f|0)?(a[l+ -1|0]&95|0)!=(a[e]&127|0):0){q=-1;i=p;return q|0}c[g>>2]=l+1;a[l]=t;q=0;i=p;return q|0}l=c[g>>2]|0;c[g>>2]=l+1;a[l]=t;if((s|0)>84){q=0;i=p;return q|0}c[n>>2]=(c[n>>2]|0)+1;q=0;i=p;return q|0}function Fp(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function Gp(a){a=a|0;return}function Hp(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;j=i;i=i+32|0;k=j;l=j+28|0;m=j+12|0;n=j+16|0;if((c[f+4>>2]&1|0)==0){o=c[(c[d>>2]|0)+24>>2]|0;c[l>>2]=c[e>>2];p=h&1;c[k+0>>2]=c[l+0>>2];Wg[o&31](b,d,k,f,g,p);i=j;return}ln(m,f);f=c[m>>2]|0;if(!((c[5572]|0)==-1)){c[k>>2]=22288;c[k+4>>2]=165;c[k+8>>2]=0;Mm(22288,k,166)}k=(c[22292>>2]|0)+ -1|0;p=c[f+8>>2]|0;if(!((c[f+12>>2]|0)-p>>2>>>0>k>>>0)){q=Wd(4)|0;Tu(q);qg(q|0,30104,152)}f=c[p+(k<<2)>>2]|0;if((f|0)==0){q=Wd(4)|0;Tu(q);qg(q|0,30104,152)}sm(c[m>>2]|0)|0;m=c[f>>2]|0;if(h){Lg[c[m+24>>2]&127](n,f)}else{Lg[c[m+28>>2]&127](n,f)}f=a[n]|0;if((f&1)==0){m=n+1|0;r=m;s=m;t=n+8|0}else{m=n+8|0;r=c[m>>2]|0;s=n+1|0;t=m}m=n+4|0;h=f;f=r;while(1){if((h&1)==0){u=s;v=(h&255)>>>1}else{u=c[t>>2]|0;v=c[m>>2]|0}if((f|0)==(u+v|0)){break}r=a[f]|0;q=c[e>>2]|0;do{if((q|0)!=0){k=q+24|0;p=c[k>>2]|0;if((p|0)!=(c[q+28>>2]|0)){c[k>>2]=p+1;a[p]=r;break}if((ch[c[(c[q>>2]|0)+52>>2]&31](q,r&255)|0)==-1){c[e>>2]=0}}}while(0);h=a[n]|0;f=f+1|0}c[b>>2]=c[e>>2];Rm(n);i=j;return}function Ip(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;d=i;i=i+64|0;j=d;k=d+56|0;l=d+44|0;m=d+20|0;n=d+12|0;o=d+8|0;p=d+4|0;q=d+16|0;a[k+0|0]=a[20936|0]|0;a[k+1|0]=a[20937|0]|0;a[k+2|0]=a[20938|0]|0;a[k+3|0]=a[20939|0]|0;a[k+4|0]=a[20940|0]|0;a[k+5|0]=a[20941|0]|0;r=k+1|0;s=f+4|0;t=c[s>>2]|0;if((t&2048|0)==0){u=r}else{a[r]=43;u=k+2|0}if((t&512|0)==0){v=u}else{a[u]=35;v=u+1|0}a[v]=108;u=v+1|0;v=t&74;do{if((v|0)==64){a[u]=111}else if((v|0)==8){if((t&16384|0)==0){a[u]=120;break}else{a[u]=88;break}}else{a[u]=100}}while(0);if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}u=c[5508]|0;c[j>>2]=h;h=Jp(l,12,u,k,j)|0;k=l+h|0;u=c[s>>2]&176;do{if((u|0)==32){w=k}else if((u|0)==16){s=a[l]|0;if(s<<24>>24==43|s<<24>>24==45){w=l+1|0;break}if((h|0)>1&s<<24>>24==48?(s=a[l+1|0]|0,s<<24>>24==88|s<<24>>24==120):0){w=l+2|0}else{x=20}}else{x=20}}while(0);if((x|0)==20){w=l}ln(p,f);Kp(l,w,k,m,n,o,p);sm(c[p>>2]|0)|0;c[q>>2]=c[e>>2];e=c[n>>2]|0;n=c[o>>2]|0;c[j+0>>2]=c[q+0>>2];gi(b,j,m,e,n,f,g);i=d;return}function Jp(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;i=i+16|0;h=g;c[h>>2]=f;f=nc(d|0)|0;d=Ge(a|0,b|0,e|0,h|0)|0;if((f|0)==0){i=g;return d|0}nc(f|0)|0;i=g;return d|0}function Kp(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;k=i;i=i+32|0;l=k;m=k+12|0;n=c[j>>2]|0;if(!((c[5536]|0)==-1)){c[l>>2]=22144;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22144,l,166)}o=(c[22148>>2]|0)+ -1|0;p=c[n+8>>2]|0;if(!((c[n+12>>2]|0)-p>>2>>>0>o>>>0)){q=Wd(4)|0;Tu(q);qg(q|0,30104,152)}n=c[p+(o<<2)>>2]|0;if((n|0)==0){q=Wd(4)|0;Tu(q);qg(q|0,30104,152)}q=c[j>>2]|0;if(!((c[5572]|0)==-1)){c[l>>2]=22288;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22288,l,166)}l=(c[22292>>2]|0)+ -1|0;j=c[q+8>>2]|0;if(!((c[q+12>>2]|0)-j>>2>>>0>l>>>0)){r=Wd(4)|0;Tu(r);qg(r|0,30104,152)}q=c[j+(l<<2)>>2]|0;if((q|0)==0){r=Wd(4)|0;Tu(r);qg(r|0,30104,152)}Lg[c[(c[q>>2]|0)+20>>2]&127](m,q);r=a[m]|0;if((r&1)==0){s=(r&255)>>>1}else{s=c[m+4>>2]|0}if((s|0)!=0){c[h>>2]=f;s=a[b]|0;if(s<<24>>24==43|s<<24>>24==45){r=ch[c[(c[n>>2]|0)+28>>2]&31](n,s)|0;s=c[h>>2]|0;c[h>>2]=s+1;a[s]=r;t=b+1|0}else{t=b}if(((e-t|0)>1?(a[t]|0)==48:0)?(r=t+1|0,s=a[r]|0,s<<24>>24==88|s<<24>>24==120):0){s=ch[c[(c[n>>2]|0)+28>>2]&31](n,48)|0;l=c[h>>2]|0;c[h>>2]=l+1;a[l]=s;s=ch[c[(c[n>>2]|0)+28>>2]&31](n,a[r]|0)|0;r=c[h>>2]|0;c[h>>2]=r+1;a[r]=s;u=t+2|0}else{u=t}if((u|0)!=(e|0)?(t=e+ -1|0,t>>>0>u>>>0):0){s=u;r=t;do{t=a[s]|0;a[s]=a[r]|0;a[r]=t;s=s+1|0;r=r+ -1|0}while(s>>>0<r>>>0)}r=Mg[c[(c[q>>2]|0)+16>>2]&127](q)|0;if(u>>>0<e>>>0){q=m+1|0;s=m+4|0;t=m+8|0;l=0;j=0;o=u;while(1){p=(a[m]&1)==0;if((a[(p?q:c[t>>2]|0)+j|0]|0)!=0?(l|0)==(a[(p?q:c[t>>2]|0)+j|0]|0):0){p=c[h>>2]|0;c[h>>2]=p+1;a[p]=r;p=a[m]|0;if((p&1)==0){v=(p&255)>>>1}else{v=c[s>>2]|0}w=0;x=(j>>>0<(v+ -1|0)>>>0)+j|0}else{w=l;x=j}p=ch[c[(c[n>>2]|0)+28>>2]&31](n,a[o]|0)|0;y=c[h>>2]|0;c[h>>2]=y+1;a[y]=p;o=o+1|0;if(!(o>>>0<e>>>0)){break}else{l=w+1|0;j=x}}}x=f+(u-b)|0;u=c[h>>2]|0;if((x|0)!=(u|0)?(j=u+ -1|0,j>>>0>x>>>0):0){u=x;x=j;do{j=a[u]|0;a[u]=a[x]|0;a[x]=j;u=u+1|0;x=x+ -1|0}while(u>>>0<x>>>0)}}else{fh[c[(c[n>>2]|0)+32>>2]&15](n,b,e,f)|0;c[h>>2]=f+(e-b)}if((d|0)==(e|0)){z=c[h>>2]|0;c[g>>2]=z;Rm(m);i=k;return}else{z=f+(d-b)|0;c[g>>2]=z;Rm(m);i=k;return}}function Lp(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;d=i;i=i+96|0;k=d+8|0;l=d;m=d+74|0;n=d+32|0;o=d+20|0;p=d+24|0;q=d+16|0;r=d+28|0;s=l;c[s>>2]=37;c[s+4>>2]=0;s=l+1|0;t=f+4|0;u=c[t>>2]|0;if((u&2048|0)==0){v=s}else{a[s]=43;v=l+2|0}if((u&512|0)==0){w=v}else{a[v]=35;w=v+1|0}v=w+2|0;a[w]=108;a[w+1|0]=108;w=u&74;do{if((w|0)==64){a[v]=111}else if((w|0)==8){if((u&16384|0)==0){a[v]=120;break}else{a[v]=88;break}}else{a[v]=100}}while(0);if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}v=c[5508]|0;u=k;c[u>>2]=h;c[u+4>>2]=j;j=Jp(m,22,v,l,k)|0;l=m+j|0;v=c[t>>2]&176;do{if((v|0)==16){t=a[m]|0;if(t<<24>>24==43|t<<24>>24==45){x=m+1|0;break}if((j|0)>1&t<<24>>24==48?(t=a[m+1|0]|0,t<<24>>24==88|t<<24>>24==120):0){x=m+2|0}else{y=20}}else if((v|0)==32){x=l}else{y=20}}while(0);if((y|0)==20){x=m}ln(q,f);Kp(m,x,l,n,o,p,q);sm(c[q>>2]|0)|0;c[r>>2]=c[e>>2];e=c[o>>2]|0;o=c[p>>2]|0;c[k+0>>2]=c[r+0>>2];gi(b,k,n,e,o,f,g);i=d;return}function Mp(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;d=i;i=i+64|0;j=d;k=d+56|0;l=d+44|0;m=d+20|0;n=d+12|0;o=d+8|0;p=d+4|0;q=d+16|0;a[k+0|0]=a[20936|0]|0;a[k+1|0]=a[20937|0]|0;a[k+2|0]=a[20938|0]|0;a[k+3|0]=a[20939|0]|0;a[k+4|0]=a[20940|0]|0;a[k+5|0]=a[20941|0]|0;r=k+1|0;s=f+4|0;t=c[s>>2]|0;if((t&2048|0)==0){u=r}else{a[r]=43;u=k+2|0}if((t&512|0)==0){v=u}else{a[u]=35;v=u+1|0}a[v]=108;u=v+1|0;v=t&74;do{if((v|0)==8){if((t&16384|0)==0){a[u]=120;break}else{a[u]=88;break}}else if((v|0)==64){a[u]=111}else{a[u]=117}}while(0);if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}u=c[5508]|0;c[j>>2]=h;h=Jp(l,12,u,k,j)|0;k=l+h|0;u=c[s>>2]&176;do{if((u|0)==32){w=k}else if((u|0)==16){s=a[l]|0;if(s<<24>>24==43|s<<24>>24==45){w=l+1|0;break}if((h|0)>1&s<<24>>24==48?(s=a[l+1|0]|0,s<<24>>24==88|s<<24>>24==120):0){w=l+2|0}else{x=20}}else{x=20}}while(0);if((x|0)==20){w=l}ln(p,f);Kp(l,w,k,m,n,o,p);sm(c[p>>2]|0)|0;c[q>>2]=c[e>>2];e=c[n>>2]|0;n=c[o>>2]|0;c[j+0>>2]=c[q+0>>2];gi(b,j,m,e,n,f,g);i=d;return}function Np(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;d=i;i=i+112|0;k=d+8|0;l=d;m=d+75|0;n=d+32|0;o=d+20|0;p=d+24|0;q=d+16|0;r=d+28|0;s=l;c[s>>2]=37;c[s+4>>2]=0;s=l+1|0;t=f+4|0;u=c[t>>2]|0;if((u&2048|0)==0){v=s}else{a[s]=43;v=l+2|0}if((u&512|0)==0){w=v}else{a[v]=35;w=v+1|0}v=w+2|0;a[w]=108;a[w+1|0]=108;w=u&74;do{if((w|0)==64){a[v]=111}else if((w|0)==8){if((u&16384|0)==0){a[v]=120;break}else{a[v]=88;break}}else{a[v]=117}}while(0);if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}v=c[5508]|0;u=k;c[u>>2]=h;c[u+4>>2]=j;j=Jp(m,23,v,l,k)|0;l=m+j|0;v=c[t>>2]&176;do{if((v|0)==16){t=a[m]|0;if(t<<24>>24==43|t<<24>>24==45){x=m+1|0;break}if((j|0)>1&t<<24>>24==48?(t=a[m+1|0]|0,t<<24>>24==88|t<<24>>24==120):0){x=m+2|0}else{y=20}}else if((v|0)==32){x=l}else{y=20}}while(0);if((y|0)==20){x=m}ln(q,f);Kp(m,x,l,n,o,p,q);sm(c[q>>2]|0)|0;c[r>>2]=c[e>>2];e=c[o>>2]|0;o=c[p>>2]|0;c[k+0>>2]=c[r+0>>2];gi(b,k,n,e,o,f,g);i=d;return}function Op(b,d,e,f,g,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=+j;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;d=i;i=i+144|0;l=d+8|0;m=d;n=d+44|0;o=d+36|0;p=d+74|0;q=d+40|0;r=d+24|0;s=d+20|0;t=d+28|0;u=d+32|0;v=m;c[v>>2]=37;c[v+4>>2]=0;v=m+1|0;w=f+4|0;x=c[w>>2]|0;if((x&2048|0)==0){y=v}else{a[v]=43;y=m+2|0}if((x&1024|0)==0){z=y}else{a[y]=35;z=y+1|0}y=x&260;v=x>>>14;do{if((y|0)==260){if((v&1|0)==0){a[z]=97;A=0;break}else{a[z]=65;A=0;break}}else{a[z]=46;x=z+2|0;a[z+1|0]=42;if((y|0)==4){if((v&1|0)==0){a[x]=102;A=1;break}else{a[x]=70;A=1;break}}else if((y|0)==256){if((v&1|0)==0){a[x]=101;A=1;break}else{a[x]=69;A=1;break}}else{if((v&1|0)==0){a[x]=103;A=1;break}else{a[x]=71;A=1;break}}}}while(0);c[o>>2]=n;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}v=c[5508]|0;if(A){c[l>>2]=c[f+8>>2];y=l+4|0;h[k>>3]=j;c[y>>2]=c[k>>2];c[y+4>>2]=c[k+4>>2];B=Jp(n,30,v,m,l)|0}else{h[k>>3]=j;c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];B=Jp(n,30,v,m,l)|0}if((B|0)>29){v=(a[22040]|0)==0;if(A){if(v?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}A=c[5508]|0;c[l>>2]=c[f+8>>2];y=l+4|0;h[k>>3]=j;c[y>>2]=c[k>>2];c[y+4>>2]=c[k+4>>2];C=Pp(o,A,m,l)|0}else{if(v?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}v=c[5508]|0;c[l>>2]=c[f+8>>2];A=l+4|0;h[k>>3]=j;c[A>>2]=c[k>>2];c[A+4>>2]=c[k+4>>2];C=Pp(o,v,m,l)|0}m=c[o>>2]|0;if((m|0)==0){Av()}else{D=m;E=m;F=C}}else{D=c[o>>2]|0;E=0;F=B}B=D+F|0;o=c[w>>2]&176;do{if((o|0)==32){G=B}else if((o|0)==16){w=a[D]|0;if(w<<24>>24==43|w<<24>>24==45){G=D+1|0;break}if((F|0)>1&w<<24>>24==48?(w=a[D+1|0]|0,w<<24>>24==88|w<<24>>24==120):0){G=D+2|0}else{H=44}}else{H=44}}while(0);if((H|0)==44){G=D}if((D|0)!=(n|0)){H=nv(F<<1)|0;if((H|0)==0){Av()}else{I=D;J=H;K=H}}else{I=n;J=0;K=p}ln(s,f);Qp(I,G,B,K,q,r,s);sm(c[s>>2]|0)|0;c[u>>2]=c[e>>2];s=c[q>>2]|0;q=c[r>>2]|0;c[l+0>>2]=c[u+0>>2];gi(t,l,K,s,q,f,g);g=c[t>>2]|0;c[e>>2]=g;c[b>>2]=g;if((J|0)!=0){ov(J)}if((E|0)==0){i=d;return}ov(E);i=d;return}function Pp(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;i=i+16|0;g=f;c[g>>2]=e;e=nc(b|0)|0;b=Rd(a|0,d|0,g|0)|0;if((e|0)==0){i=f;return b|0}nc(e|0)|0;i=f;return b|0}function Qp(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;k=i;i=i+32|0;l=k;m=k+12|0;n=c[j>>2]|0;if(!((c[5536]|0)==-1)){c[l>>2]=22144;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22144,l,166)}o=(c[22148>>2]|0)+ -1|0;p=c[n+8>>2]|0;if(!((c[n+12>>2]|0)-p>>2>>>0>o>>>0)){q=Wd(4)|0;Tu(q);qg(q|0,30104,152)}n=c[p+(o<<2)>>2]|0;if((n|0)==0){q=Wd(4)|0;Tu(q);qg(q|0,30104,152)}q=c[j>>2]|0;if(!((c[5572]|0)==-1)){c[l>>2]=22288;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22288,l,166)}l=(c[22292>>2]|0)+ -1|0;j=c[q+8>>2]|0;if(!((c[q+12>>2]|0)-j>>2>>>0>l>>>0)){r=Wd(4)|0;Tu(r);qg(r|0,30104,152)}q=c[j+(l<<2)>>2]|0;if((q|0)==0){r=Wd(4)|0;Tu(r);qg(r|0,30104,152)}Lg[c[(c[q>>2]|0)+20>>2]&127](m,q);c[h>>2]=f;r=a[b]|0;if(r<<24>>24==43|r<<24>>24==45){l=ch[c[(c[n>>2]|0)+28>>2]&31](n,r)|0;r=c[h>>2]|0;c[h>>2]=r+1;a[r]=l;s=b+1|0}else{s=b}l=e;a:do{if(((l-s|0)>1?(a[s]|0)==48:0)?(r=s+1|0,j=a[r]|0,j<<24>>24==88|j<<24>>24==120):0){j=ch[c[(c[n>>2]|0)+28>>2]&31](n,48)|0;o=c[h>>2]|0;c[h>>2]=o+1;a[o]=j;j=s+2|0;o=ch[c[(c[n>>2]|0)+28>>2]&31](n,a[r]|0)|0;r=c[h>>2]|0;c[h>>2]=r+1;a[r]=o;if(j>>>0<e>>>0){o=j;while(1){r=a[o]|0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}p=o+1|0;if((yc(r<<24>>24|0,c[5508]|0)|0)==0){t=j;u=o;break a}if(p>>>0<e>>>0){o=p}else{t=j;u=p;break}}}else{t=j;u=j}}else{v=14}}while(0);b:do{if((v|0)==14){if(s>>>0<e>>>0){o=s;while(1){p=a[o]|0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}r=o+1|0;if((Nc(p<<24>>24|0,c[5508]|0)|0)==0){t=s;u=o;break b}if(r>>>0<e>>>0){o=r}else{t=s;u=r;break}}}else{t=s;u=s}}}while(0);s=a[m]|0;if((s&1)==0){w=(s&255)>>>1}else{w=c[m+4>>2]|0}if((w|0)!=0){if((t|0)!=(u|0)?(w=u+ -1|0,w>>>0>t>>>0):0){s=t;v=w;do{w=a[s]|0;a[s]=a[v]|0;a[v]=w;s=s+1|0;v=v+ -1|0}while(s>>>0<v>>>0)}v=Mg[c[(c[q>>2]|0)+16>>2]&127](q)|0;if(t>>>0<u>>>0){s=m+1|0;w=m+4|0;o=m+8|0;j=0;r=0;p=t;while(1){x=(a[m]&1)==0;if((a[(x?s:c[o>>2]|0)+r|0]|0)>0?(j|0)==(a[(x?s:c[o>>2]|0)+r|0]|0):0){x=c[h>>2]|0;c[h>>2]=x+1;a[x]=v;x=a[m]|0;if((x&1)==0){y=(x&255)>>>1}else{y=c[w>>2]|0}z=0;A=(r>>>0<(y+ -1|0)>>>0)+r|0}else{z=j;A=r}x=ch[c[(c[n>>2]|0)+28>>2]&31](n,a[p]|0)|0;B=c[h>>2]|0;c[h>>2]=B+1;a[B]=x;p=p+1|0;if(!(p>>>0<u>>>0)){break}else{j=z+1|0;r=A}}}A=f+(t-b)|0;r=c[h>>2]|0;if((A|0)!=(r|0)?(z=r+ -1|0,z>>>0>A>>>0):0){r=A;A=z;do{z=a[r]|0;a[r]=a[A]|0;a[A]=z;r=r+1|0;A=A+ -1|0}while(r>>>0<A>>>0)}}else{fh[c[(c[n>>2]|0)+32>>2]&15](n,t,u,c[h>>2]|0)|0;c[h>>2]=(c[h>>2]|0)+(u-t)}c:do{if(u>>>0<e>>>0){t=u;while(1){A=a[t]|0;if(A<<24>>24==46){break}r=ch[c[(c[n>>2]|0)+28>>2]&31](n,A)|0;A=c[h>>2]|0;c[h>>2]=A+1;a[A]=r;r=t+1|0;if(r>>>0<e>>>0){t=r}else{C=r;break c}}r=Mg[c[(c[q>>2]|0)+12>>2]&127](q)|0;A=c[h>>2]|0;c[h>>2]=A+1;a[A]=r;C=t+1|0}else{C=u}}while(0);fh[c[(c[n>>2]|0)+32>>2]&15](n,C,e,c[h>>2]|0)|0;n=(c[h>>2]|0)+(l-C)|0;c[h>>2]=n;if((d|0)==(e|0)){D=n;c[g>>2]=D;Rm(m);i=k;return}D=f+(d-b)|0;c[g>>2]=D;Rm(m);i=k;return}function Rp(b,d,e,f,g,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=+j;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;d=i;i=i+144|0;l=d+8|0;m=d;n=d+44|0;o=d+36|0;p=d+74|0;q=d+40|0;r=d+24|0;s=d+20|0;t=d+28|0;u=d+32|0;v=m;c[v>>2]=37;c[v+4>>2]=0;v=m+1|0;w=f+4|0;x=c[w>>2]|0;if((x&2048|0)==0){y=v}else{a[v]=43;y=m+2|0}if((x&1024|0)==0){z=y}else{a[y]=35;z=y+1|0}y=x&260;v=x>>>14;do{if((y|0)==260){a[z]=76;x=z+1|0;if((v&1|0)==0){a[x]=97;A=0;break}else{a[x]=65;A=0;break}}else{a[z]=46;a[z+1|0]=42;a[z+2|0]=76;x=z+3|0;if((y|0)==4){if((v&1|0)==0){a[x]=102;A=1;break}else{a[x]=70;A=1;break}}else if((y|0)==256){if((v&1|0)==0){a[x]=101;A=1;break}else{a[x]=69;A=1;break}}else{if((v&1|0)==0){a[x]=103;A=1;break}else{a[x]=71;A=1;break}}}}while(0);c[o>>2]=n;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}v=c[5508]|0;if(A){c[l>>2]=c[f+8>>2];y=l+4|0;h[k>>3]=j;c[y>>2]=c[k>>2];c[y+4>>2]=c[k+4>>2];B=Jp(n,30,v,m,l)|0}else{h[k>>3]=j;c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];B=Jp(n,30,v,m,l)|0}if((B|0)>29){v=(a[22040]|0)==0;if(A){if(v?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}A=c[5508]|0;c[l>>2]=c[f+8>>2];y=l+4|0;h[k>>3]=j;c[y>>2]=c[k>>2];c[y+4>>2]=c[k+4>>2];C=Pp(o,A,m,l)|0}else{if(v?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}v=c[5508]|0;h[k>>3]=j;c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];C=Pp(o,v,m,l)|0}m=c[o>>2]|0;if((m|0)==0){Av()}else{D=m;E=m;F=C}}else{D=c[o>>2]|0;E=0;F=B}B=D+F|0;o=c[w>>2]&176;do{if((o|0)==32){G=B}else if((o|0)==16){w=a[D]|0;if(w<<24>>24==43|w<<24>>24==45){G=D+1|0;break}if((F|0)>1&w<<24>>24==48?(w=a[D+1|0]|0,w<<24>>24==88|w<<24>>24==120):0){G=D+2|0}else{H=44}}else{H=44}}while(0);if((H|0)==44){G=D}if((D|0)!=(n|0)){H=nv(F<<1)|0;if((H|0)==0){Av()}else{I=D;J=H;K=H}}else{I=n;J=0;K=p}ln(s,f);Qp(I,G,B,K,q,r,s);sm(c[s>>2]|0)|0;c[u>>2]=c[e>>2];s=c[q>>2]|0;q=c[r>>2]|0;c[l+0>>2]=c[u+0>>2];gi(t,l,K,s,q,f,g);g=c[t>>2]|0;c[e>>2]=g;c[b>>2]=g;if((J|0)!=0){ov(J)}if((E|0)==0){i=d;return}ov(E);i=d;return}function Sp(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;d=i;i=i+96|0;j=d;k=d+80|0;l=d+60|0;m=d+20|0;n=d+12|0;o=d+16|0;a[k+0|0]=a[20944|0]|0;a[k+1|0]=a[20945|0]|0;a[k+2|0]=a[20946|0]|0;a[k+3|0]=a[20947|0]|0;a[k+4|0]=a[20948|0]|0;a[k+5|0]=a[20949|0]|0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}p=c[5508]|0;c[j>>2]=h;h=Jp(l,20,p,k,j)|0;k=l+h|0;p=c[f+4>>2]&176;do{if((p|0)==16){q=a[l]|0;if(q<<24>>24==43|q<<24>>24==45){r=l+1|0;break}if((h|0)>1&q<<24>>24==48?(q=a[l+1|0]|0,q<<24>>24==88|q<<24>>24==120):0){r=l+2|0}else{s=10}}else if((p|0)==32){r=k}else{s=10}}while(0);if((s|0)==10){r=l}ln(n,f);s=c[n>>2]|0;if(!((c[5536]|0)==-1)){c[j>>2]=22144;c[j+4>>2]=165;c[j+8>>2]=0;Mm(22144,j,166)}p=(c[22148>>2]|0)+ -1|0;q=c[s+8>>2]|0;if(!((c[s+12>>2]|0)-q>>2>>>0>p>>>0)){t=Wd(4)|0;Tu(t);qg(t|0,30104,152)}s=c[q+(p<<2)>>2]|0;if((s|0)==0){t=Wd(4)|0;Tu(t);qg(t|0,30104,152)}sm(c[n>>2]|0)|0;fh[c[(c[s>>2]|0)+32>>2]&15](s,l,k,m)|0;s=m+h|0;if((r|0)==(k|0)){u=s;v=c[e>>2]|0;c[o>>2]=v;c[j+0>>2]=c[o+0>>2];gi(b,j,m,u,s,f,g);i=d;return}u=m+(r-l)|0;v=c[e>>2]|0;c[o>>2]=v;c[j+0>>2]=c[o+0>>2];gi(b,j,m,u,s,f,g);i=d;return}function Tp(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function Up(a){a=a|0;return}function Vp(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;j=i;i=i+32|0;k=j;l=j+28|0;m=j+12|0;n=j+16|0;if((c[f+4>>2]&1|0)==0){o=c[(c[d>>2]|0)+24>>2]|0;c[l>>2]=c[e>>2];p=h&1;c[k+0>>2]=c[l+0>>2];Wg[o&31](b,d,k,f,g,p);i=j;return}ln(m,f);f=c[m>>2]|0;if(!((c[5574]|0)==-1)){c[k>>2]=22296;c[k+4>>2]=165;c[k+8>>2]=0;Mm(22296,k,166)}k=(c[22300>>2]|0)+ -1|0;p=c[f+8>>2]|0;if(!((c[f+12>>2]|0)-p>>2>>>0>k>>>0)){q=Wd(4)|0;Tu(q);qg(q|0,30104,152)}f=c[p+(k<<2)>>2]|0;if((f|0)==0){q=Wd(4)|0;Tu(q);qg(q|0,30104,152)}sm(c[m>>2]|0)|0;m=c[f>>2]|0;if(h){Lg[c[m+24>>2]&127](n,f)}else{Lg[c[m+28>>2]&127](n,f)}f=a[n]|0;if((f&1)==0){m=n+4|0;r=m;s=n+8|0;t=m}else{m=n+8|0;r=c[m>>2]|0;s=m;t=n+4|0}m=f;f=r;while(1){if((m&1)==0){u=t;v=(m&255)>>>1}else{u=c[s>>2]|0;v=c[t>>2]|0}if((f|0)==(u+(v<<2)|0)){break}r=c[f>>2]|0;h=c[e>>2]|0;if((h|0)!=0){q=h+24|0;k=c[q>>2]|0;if((k|0)==(c[h+28>>2]|0)){w=ch[c[(c[h>>2]|0)+52>>2]&31](h,r)|0}else{c[q>>2]=k+4;c[k>>2]=r;w=r}if((w|0)==-1){c[e>>2]=0}}m=a[n]|0;f=f+4|0}c[b>>2]=c[e>>2];bn(n);i=j;return}function Wp(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;d=i;i=i+128|0;j=d;k=d+116|0;l=d+104|0;m=d+8|0;n=d+92|0;o=d+96|0;p=d+4|0;q=d+100|0;a[k+0|0]=a[20936|0]|0;a[k+1|0]=a[20937|0]|0;a[k+2|0]=a[20938|0]|0;a[k+3|0]=a[20939|0]|0;a[k+4|0]=a[20940|0]|0;a[k+5|0]=a[20941|0]|0;r=k+1|0;s=f+4|0;t=c[s>>2]|0;if((t&2048|0)==0){u=r}else{a[r]=43;u=k+2|0}if((t&512|0)==0){v=u}else{a[u]=35;v=u+1|0}a[v]=108;u=v+1|0;v=t&74;do{if((v|0)==8){if((t&16384|0)==0){a[u]=120;break}else{a[u]=88;break}}else if((v|0)==64){a[u]=111}else{a[u]=100}}while(0);if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}u=c[5508]|0;c[j>>2]=h;h=Jp(l,12,u,k,j)|0;k=l+h|0;u=c[s>>2]&176;do{if((u|0)==32){w=k}else if((u|0)==16){s=a[l]|0;if(s<<24>>24==43|s<<24>>24==45){w=l+1|0;break}if((h|0)>1&s<<24>>24==48?(s=a[l+1|0]|0,s<<24>>24==88|s<<24>>24==120):0){w=l+2|0}else{x=20}}else{x=20}}while(0);if((x|0)==20){w=l}ln(p,f);Xp(l,w,k,m,n,o,p);sm(c[p>>2]|0)|0;c[q>>2]=c[e>>2];e=c[n>>2]|0;n=c[o>>2]|0;c[j+0>>2]=c[q+0>>2];Yp(b,j,m,e,n,f,g);i=d;return}function Xp(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;k=i;i=i+32|0;l=k;m=k+12|0;n=c[j>>2]|0;if(!((c[5534]|0)==-1)){c[l>>2]=22136;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22136,l,166)}o=(c[22140>>2]|0)+ -1|0;p=c[n+8>>2]|0;if(!((c[n+12>>2]|0)-p>>2>>>0>o>>>0)){q=Wd(4)|0;Tu(q);qg(q|0,30104,152)}n=c[p+(o<<2)>>2]|0;if((n|0)==0){q=Wd(4)|0;Tu(q);qg(q|0,30104,152)}q=c[j>>2]|0;if(!((c[5574]|0)==-1)){c[l>>2]=22296;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22296,l,166)}l=(c[22300>>2]|0)+ -1|0;j=c[q+8>>2]|0;if(!((c[q+12>>2]|0)-j>>2>>>0>l>>>0)){r=Wd(4)|0;Tu(r);qg(r|0,30104,152)}q=c[j+(l<<2)>>2]|0;if((q|0)==0){r=Wd(4)|0;Tu(r);qg(r|0,30104,152)}Lg[c[(c[q>>2]|0)+20>>2]&127](m,q);r=a[m]|0;if((r&1)==0){s=(r&255)>>>1}else{s=c[m+4>>2]|0}if((s|0)!=0){c[h>>2]=f;s=a[b]|0;if(s<<24>>24==43|s<<24>>24==45){r=ch[c[(c[n>>2]|0)+44>>2]&31](n,s)|0;s=c[h>>2]|0;c[h>>2]=s+4;c[s>>2]=r;t=b+1|0}else{t=b}if(((e-t|0)>1?(a[t]|0)==48:0)?(r=t+1|0,s=a[r]|0,s<<24>>24==88|s<<24>>24==120):0){s=ch[c[(c[n>>2]|0)+44>>2]&31](n,48)|0;l=c[h>>2]|0;c[h>>2]=l+4;c[l>>2]=s;s=ch[c[(c[n>>2]|0)+44>>2]&31](n,a[r]|0)|0;r=c[h>>2]|0;c[h>>2]=r+4;c[r>>2]=s;u=t+2|0}else{u=t}if((u|0)!=(e|0)?(t=e+ -1|0,t>>>0>u>>>0):0){s=u;r=t;do{t=a[s]|0;a[s]=a[r]|0;a[r]=t;s=s+1|0;r=r+ -1|0}while(s>>>0<r>>>0)}r=Mg[c[(c[q>>2]|0)+16>>2]&127](q)|0;if(u>>>0<e>>>0){q=m+1|0;s=m+4|0;t=m+8|0;l=0;j=0;o=u;while(1){p=(a[m]&1)==0;if((a[(p?q:c[t>>2]|0)+j|0]|0)!=0?(l|0)==(a[(p?q:c[t>>2]|0)+j|0]|0):0){p=c[h>>2]|0;c[h>>2]=p+4;c[p>>2]=r;p=a[m]|0;if((p&1)==0){v=(p&255)>>>1}else{v=c[s>>2]|0}w=0;x=(j>>>0<(v+ -1|0)>>>0)+j|0}else{w=l;x=j}p=ch[c[(c[n>>2]|0)+44>>2]&31](n,a[o]|0)|0;y=c[h>>2]|0;z=y+4|0;c[h>>2]=z;c[y>>2]=p;p=o+1|0;if(p>>>0<e>>>0){l=w+1|0;j=x;o=p}else{A=z;break}}}else{A=c[h>>2]|0}o=f+(u-b<<2)|0;if((o|0)!=(A|0)?(u=A+ -4|0,u>>>0>o>>>0):0){x=o;o=u;while(1){u=c[x>>2]|0;c[x>>2]=c[o>>2];c[o>>2]=u;u=x+4|0;j=o+ -4|0;if(u>>>0<j>>>0){x=u;o=j}else{B=A;break}}}else{B=A}}else{fh[c[(c[n>>2]|0)+48>>2]&15](n,b,e,f)|0;n=f+(e-b<<2)|0;c[h>>2]=n;B=n}if((d|0)==(e|0)){C=B;c[g>>2]=C;Rm(m);i=k;return}C=f+(d-b<<2)|0;c[g>>2]=C;Rm(m);i=k;return}function Yp(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;k=i;i=i+16|0;l=k;m=c[d>>2]|0;if((m|0)==0){c[b>>2]=0;i=k;return}n=g;g=e;o=n-g>>2;p=h+12|0;h=c[p>>2]|0;q=(h|0)>(o|0)?h-o|0:0;o=f;h=o-g|0;g=h>>2;if((h|0)>0?(Sg[c[(c[m>>2]|0)+48>>2]&31](m,e,g)|0)!=(g|0):0){c[d>>2]=0;c[b>>2]=0;i=k;return}do{if((q|0)>0){an(l,q,j);if((a[l]&1)==0){r=l+4|0}else{r=c[l+8>>2]|0}if((Sg[c[(c[m>>2]|0)+48>>2]&31](m,r,q)|0)==(q|0)){bn(l);break}c[d>>2]=0;c[b>>2]=0;bn(l);i=k;return}}while(0);l=n-o|0;o=l>>2;if((l|0)>0?(Sg[c[(c[m>>2]|0)+48>>2]&31](m,f,o)|0)!=(o|0):0){c[d>>2]=0;c[b>>2]=0;i=k;return}c[p>>2]=0;c[b>>2]=m;i=k;return}function Zp(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;d=i;i=i+224|0;k=d+8|0;l=d;m=d+196|0;n=d+16|0;o=d+180|0;p=d+184|0;q=d+188|0;r=d+192|0;s=l;c[s>>2]=37;c[s+4>>2]=0;s=l+1|0;t=f+4|0;u=c[t>>2]|0;if((u&2048|0)==0){v=s}else{a[s]=43;v=l+2|0}if((u&512|0)==0){w=v}else{a[v]=35;w=v+1|0}v=w+2|0;a[w]=108;a[w+1|0]=108;w=u&74;do{if((w|0)==8){if((u&16384|0)==0){a[v]=120;break}else{a[v]=88;break}}else if((w|0)==64){a[v]=111}else{a[v]=100}}while(0);if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}v=c[5508]|0;w=k;c[w>>2]=h;c[w+4>>2]=j;j=Jp(m,22,v,l,k)|0;l=m+j|0;v=c[t>>2]&176;do{if((v|0)==32){x=l}else if((v|0)==16){t=a[m]|0;if(t<<24>>24==43|t<<24>>24==45){x=m+1|0;break}if((j|0)>1&t<<24>>24==48?(t=a[m+1|0]|0,t<<24>>24==88|t<<24>>24==120):0){x=m+2|0}else{y=20}}else{y=20}}while(0);if((y|0)==20){x=m}ln(q,f);Xp(m,x,l,n,o,p,q);sm(c[q>>2]|0)|0;c[r>>2]=c[e>>2];e=c[o>>2]|0;o=c[p>>2]|0;c[k+0>>2]=c[r+0>>2];Yp(b,k,n,e,o,f,g);i=d;return}function _p(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;d=i;i=i+128|0;j=d;k=d+116|0;l=d+104|0;m=d+8|0;n=d+92|0;o=d+96|0;p=d+4|0;q=d+100|0;a[k+0|0]=a[20936|0]|0;a[k+1|0]=a[20937|0]|0;a[k+2|0]=a[20938|0]|0;a[k+3|0]=a[20939|0]|0;a[k+4|0]=a[20940|0]|0;a[k+5|0]=a[20941|0]|0;r=k+1|0;s=f+4|0;t=c[s>>2]|0;if((t&2048|0)==0){u=r}else{a[r]=43;u=k+2|0}if((t&512|0)==0){v=u}else{a[u]=35;v=u+1|0}a[v]=108;u=v+1|0;v=t&74;do{if((v|0)==64){a[u]=111}else if((v|0)==8){if((t&16384|0)==0){a[u]=120;break}else{a[u]=88;break}}else{a[u]=117}}while(0);if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}u=c[5508]|0;c[j>>2]=h;h=Jp(l,12,u,k,j)|0;k=l+h|0;u=c[s>>2]&176;do{if((u|0)==32){w=k}else if((u|0)==16){s=a[l]|0;if(s<<24>>24==43|s<<24>>24==45){w=l+1|0;break}if((h|0)>1&s<<24>>24==48?(s=a[l+1|0]|0,s<<24>>24==88|s<<24>>24==120):0){w=l+2|0}else{x=20}}else{x=20}}while(0);if((x|0)==20){w=l}ln(p,f);Xp(l,w,k,m,n,o,p);sm(c[p>>2]|0)|0;c[q>>2]=c[e>>2];e=c[n>>2]|0;n=c[o>>2]|0;c[j+0>>2]=c[q+0>>2];Yp(b,j,m,e,n,f,g);i=d;return}function $p(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;d=i;i=i+240|0;k=d+8|0;l=d;m=d+204|0;n=d+16|0;o=d+188|0;p=d+192|0;q=d+196|0;r=d+200|0;s=l;c[s>>2]=37;c[s+4>>2]=0;s=l+1|0;t=f+4|0;u=c[t>>2]|0;if((u&2048|0)==0){v=s}else{a[s]=43;v=l+2|0}if((u&512|0)==0){w=v}else{a[v]=35;w=v+1|0}v=w+2|0;a[w]=108;a[w+1|0]=108;w=u&74;do{if((w|0)==8){if((u&16384|0)==0){a[v]=120;break}else{a[v]=88;break}}else if((w|0)==64){a[v]=111}else{a[v]=117}}while(0);if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}v=c[5508]|0;w=k;c[w>>2]=h;c[w+4>>2]=j;j=Jp(m,23,v,l,k)|0;l=m+j|0;v=c[t>>2]&176;do{if((v|0)==32){x=l}else if((v|0)==16){t=a[m]|0;if(t<<24>>24==43|t<<24>>24==45){x=m+1|0;break}if((j|0)>1&t<<24>>24==48?(t=a[m+1|0]|0,t<<24>>24==88|t<<24>>24==120):0){x=m+2|0}else{y=20}}else{y=20}}while(0);if((y|0)==20){x=m}ln(q,f);Xp(m,x,l,n,o,p,q);sm(c[q>>2]|0)|0;c[r>>2]=c[e>>2];e=c[o>>2]|0;o=c[p>>2]|0;c[k+0>>2]=c[r+0>>2];Yp(b,k,n,e,o,f,g);i=d;return}function aq(b,d,e,f,g,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=+j;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;d=i;i=i+304|0;l=d+8|0;m=d;n=d+272|0;o=d+264|0;p=d+36|0;q=d+268|0;r=d+24|0;s=d+20|0;t=d+28|0;u=d+32|0;v=m;c[v>>2]=37;c[v+4>>2]=0;v=m+1|0;w=f+4|0;x=c[w>>2]|0;if((x&2048|0)==0){y=v}else{a[v]=43;y=m+2|0}if((x&1024|0)==0){z=y}else{a[y]=35;z=y+1|0}y=x&260;v=x>>>14;do{if((y|0)==260){if((v&1|0)==0){a[z]=97;A=0;break}else{a[z]=65;A=0;break}}else{a[z]=46;x=z+2|0;a[z+1|0]=42;if((y|0)==4){if((v&1|0)==0){a[x]=102;A=1;break}else{a[x]=70;A=1;break}}else if((y|0)==256){if((v&1|0)==0){a[x]=101;A=1;break}else{a[x]=69;A=1;break}}else{if((v&1|0)==0){a[x]=103;A=1;break}else{a[x]=71;A=1;break}}}}while(0);c[o>>2]=n;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}v=c[5508]|0;if(A){c[l>>2]=c[f+8>>2];y=l+4|0;h[k>>3]=j;c[y>>2]=c[k>>2];c[y+4>>2]=c[k+4>>2];B=Jp(n,30,v,m,l)|0}else{h[k>>3]=j;c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];B=Jp(n,30,v,m,l)|0}if((B|0)>29){v=(a[22040]|0)==0;if(A){if(v?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}A=c[5508]|0;c[l>>2]=c[f+8>>2];y=l+4|0;h[k>>3]=j;c[y>>2]=c[k>>2];c[y+4>>2]=c[k+4>>2];C=Pp(o,A,m,l)|0}else{if(v?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}v=c[5508]|0;c[l>>2]=c[f+8>>2];A=l+4|0;h[k>>3]=j;c[A>>2]=c[k>>2];c[A+4>>2]=c[k+4>>2];C=Pp(o,v,m,l)|0}m=c[o>>2]|0;if((m|0)==0){Av()}else{D=m;E=m;F=C}}else{D=c[o>>2]|0;E=0;F=B}B=D+F|0;o=c[w>>2]&176;do{if((o|0)==32){G=B}else if((o|0)==16){w=a[D]|0;if(w<<24>>24==43|w<<24>>24==45){G=D+1|0;break}if((F|0)>1&w<<24>>24==48?(w=a[D+1|0]|0,w<<24>>24==88|w<<24>>24==120):0){G=D+2|0}else{H=44}}else{H=44}}while(0);if((H|0)==44){G=D}if((D|0)!=(n|0)){H=nv(F<<3)|0;if((H|0)==0){Av()}else{I=D;J=H;K=H}}else{I=n;J=0;K=p}ln(s,f);bq(I,G,B,K,q,r,s);sm(c[s>>2]|0)|0;c[u>>2]=c[e>>2];s=c[q>>2]|0;q=c[r>>2]|0;c[l+0>>2]=c[u+0>>2];Yp(t,l,K,s,q,f,g);g=c[t>>2]|0;c[e>>2]=g;c[b>>2]=g;if((J|0)!=0){ov(J)}if((E|0)==0){i=d;return}ov(E);i=d;return}function bq(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;k=i;i=i+32|0;l=k;m=k+12|0;n=c[j>>2]|0;if(!((c[5534]|0)==-1)){c[l>>2]=22136;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22136,l,166)}o=(c[22140>>2]|0)+ -1|0;p=c[n+8>>2]|0;if(!((c[n+12>>2]|0)-p>>2>>>0>o>>>0)){q=Wd(4)|0;Tu(q);qg(q|0,30104,152)}n=c[p+(o<<2)>>2]|0;if((n|0)==0){q=Wd(4)|0;Tu(q);qg(q|0,30104,152)}q=c[j>>2]|0;if(!((c[5574]|0)==-1)){c[l>>2]=22296;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22296,l,166)}l=(c[22300>>2]|0)+ -1|0;j=c[q+8>>2]|0;if(!((c[q+12>>2]|0)-j>>2>>>0>l>>>0)){r=Wd(4)|0;Tu(r);qg(r|0,30104,152)}q=c[j+(l<<2)>>2]|0;if((q|0)==0){r=Wd(4)|0;Tu(r);qg(r|0,30104,152)}Lg[c[(c[q>>2]|0)+20>>2]&127](m,q);c[h>>2]=f;r=a[b]|0;if(r<<24>>24==43|r<<24>>24==45){l=ch[c[(c[n>>2]|0)+44>>2]&31](n,r)|0;r=c[h>>2]|0;c[h>>2]=r+4;c[r>>2]=l;s=b+1|0}else{s=b}l=e;a:do{if(((l-s|0)>1?(a[s]|0)==48:0)?(r=s+1|0,j=a[r]|0,j<<24>>24==88|j<<24>>24==120):0){j=ch[c[(c[n>>2]|0)+44>>2]&31](n,48)|0;o=c[h>>2]|0;c[h>>2]=o+4;c[o>>2]=j;j=s+2|0;o=ch[c[(c[n>>2]|0)+44>>2]&31](n,a[r]|0)|0;r=c[h>>2]|0;c[h>>2]=r+4;c[r>>2]=o;if(j>>>0<e>>>0){o=j;while(1){r=a[o]|0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}p=o+1|0;if((yc(r<<24>>24|0,c[5508]|0)|0)==0){t=j;u=o;break a}if(p>>>0<e>>>0){o=p}else{t=j;u=p;break}}}else{t=j;u=j}}else{v=14}}while(0);b:do{if((v|0)==14){if(s>>>0<e>>>0){o=s;while(1){p=a[o]|0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}r=o+1|0;if((Nc(p<<24>>24|0,c[5508]|0)|0)==0){t=s;u=o;break b}if(r>>>0<e>>>0){o=r}else{t=s;u=r;break}}}else{t=s;u=s}}}while(0);s=a[m]|0;if((s&1)==0){w=(s&255)>>>1}else{w=c[m+4>>2]|0}if((w|0)!=0){if((t|0)!=(u|0)?(w=u+ -1|0,w>>>0>t>>>0):0){s=t;v=w;do{w=a[s]|0;a[s]=a[v]|0;a[v]=w;s=s+1|0;v=v+ -1|0}while(s>>>0<v>>>0)}v=Mg[c[(c[q>>2]|0)+16>>2]&127](q)|0;if(t>>>0<u>>>0){s=m+1|0;w=m+4|0;o=m+8|0;j=0;r=0;p=t;while(1){x=(a[m]&1)==0;if((a[(x?s:c[o>>2]|0)+r|0]|0)>0?(j|0)==(a[(x?s:c[o>>2]|0)+r|0]|0):0){x=c[h>>2]|0;c[h>>2]=x+4;c[x>>2]=v;x=a[m]|0;if((x&1)==0){y=(x&255)>>>1}else{y=c[w>>2]|0}z=0;A=(r>>>0<(y+ -1|0)>>>0)+r|0}else{z=j;A=r}x=ch[c[(c[n>>2]|0)+44>>2]&31](n,a[p]|0)|0;B=c[h>>2]|0;C=B+4|0;c[h>>2]=C;c[B>>2]=x;x=p+1|0;if(x>>>0<u>>>0){j=z+1|0;r=A;p=x}else{D=C;break}}}else{D=c[h>>2]|0}p=f+(t-b<<2)|0;if((p|0)!=(D|0)?(A=D+ -4|0,A>>>0>p>>>0):0){r=p;p=A;while(1){A=c[r>>2]|0;c[r>>2]=c[p>>2];c[p>>2]=A;A=r+4|0;z=p+ -4|0;if(A>>>0<z>>>0){r=A;p=z}else{E=D;break}}}else{E=D}}else{fh[c[(c[n>>2]|0)+48>>2]&15](n,t,u,c[h>>2]|0)|0;D=(c[h>>2]|0)+(u-t<<2)|0;c[h>>2]=D;E=D}c:do{if(u>>>0<e>>>0){D=u;while(1){t=a[D]|0;if(t<<24>>24==46){break}p=ch[c[(c[n>>2]|0)+44>>2]&31](n,t)|0;t=c[h>>2]|0;r=t+4|0;c[h>>2]=r;c[t>>2]=p;p=D+1|0;if(p>>>0<e>>>0){D=p}else{F=r;G=p;break c}}p=Mg[c[(c[q>>2]|0)+12>>2]&127](q)|0;r=c[h>>2]|0;t=r+4|0;c[h>>2]=t;c[r>>2]=p;F=t;G=D+1|0}else{F=E;G=u}}while(0);fh[c[(c[n>>2]|0)+48>>2]&15](n,G,e,F)|0;F=(c[h>>2]|0)+(l-G<<2)|0;c[h>>2]=F;if((d|0)==(e|0)){H=F;c[g>>2]=H;Rm(m);i=k;return}H=f+(d-b<<2)|0;c[g>>2]=H;Rm(m);i=k;return}function cq(b,d,e,f,g,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=+j;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;d=i;i=i+304|0;l=d+8|0;m=d;n=d+272|0;o=d+264|0;p=d+36|0;q=d+268|0;r=d+24|0;s=d+20|0;t=d+28|0;u=d+32|0;v=m;c[v>>2]=37;c[v+4>>2]=0;v=m+1|0;w=f+4|0;x=c[w>>2]|0;if((x&2048|0)==0){y=v}else{a[v]=43;y=m+2|0}if((x&1024|0)==0){z=y}else{a[y]=35;z=y+1|0}y=x&260;v=x>>>14;do{if((y|0)==260){a[z]=76;x=z+1|0;if((v&1|0)==0){a[x]=97;A=0;break}else{a[x]=65;A=0;break}}else{a[z]=46;a[z+1|0]=42;a[z+2|0]=76;x=z+3|0;if((y|0)==256){if((v&1|0)==0){a[x]=101;A=1;break}else{a[x]=69;A=1;break}}else if((y|0)==4){if((v&1|0)==0){a[x]=102;A=1;break}else{a[x]=70;A=1;break}}else{if((v&1|0)==0){a[x]=103;A=1;break}else{a[x]=71;A=1;break}}}}while(0);c[o>>2]=n;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}v=c[5508]|0;if(A){c[l>>2]=c[f+8>>2];y=l+4|0;h[k>>3]=j;c[y>>2]=c[k>>2];c[y+4>>2]=c[k+4>>2];B=Jp(n,30,v,m,l)|0}else{h[k>>3]=j;c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];B=Jp(n,30,v,m,l)|0}if((B|0)>29){v=(a[22040]|0)==0;if(A){if(v?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}A=c[5508]|0;c[l>>2]=c[f+8>>2];y=l+4|0;h[k>>3]=j;c[y>>2]=c[k>>2];c[y+4>>2]=c[k+4>>2];C=Pp(o,A,m,l)|0}else{if(v?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}v=c[5508]|0;h[k>>3]=j;c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];C=Pp(o,v,m,l)|0}m=c[o>>2]|0;if((m|0)==0){Av()}else{D=m;E=m;F=C}}else{D=c[o>>2]|0;E=0;F=B}B=D+F|0;o=c[w>>2]&176;do{if((o|0)==32){G=B}else if((o|0)==16){w=a[D]|0;if(w<<24>>24==43|w<<24>>24==45){G=D+1|0;break}if((F|0)>1&w<<24>>24==48?(w=a[D+1|0]|0,w<<24>>24==88|w<<24>>24==120):0){G=D+2|0}else{H=44}}else{H=44}}while(0);if((H|0)==44){G=D}if((D|0)!=(n|0)){H=nv(F<<3)|0;if((H|0)==0){Av()}else{I=D;J=H;K=H}}else{I=n;J=0;K=p}ln(s,f);bq(I,G,B,K,q,r,s);sm(c[s>>2]|0)|0;c[u>>2]=c[e>>2];s=c[q>>2]|0;q=c[r>>2]|0;c[l+0>>2]=c[u+0>>2];Yp(t,l,K,s,q,f,g);g=c[t>>2]|0;c[e>>2]=g;c[b>>2]=g;if((J|0)!=0){ov(J)}if((E|0)==0){i=d;return}ov(E);i=d;return}function dq(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;d=i;i=i+208|0;j=d;k=d+188|0;l=d+168|0;m=d+16|0;n=d+12|0;o=d+164|0;a[k+0|0]=a[20944|0]|0;a[k+1|0]=a[20945|0]|0;a[k+2|0]=a[20946|0]|0;a[k+3|0]=a[20947|0]|0;a[k+4|0]=a[20948|0]|0;a[k+5|0]=a[20949|0]|0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}p=c[5508]|0;c[j>>2]=h;h=Jp(l,20,p,k,j)|0;k=l+h|0;p=c[f+4>>2]&176;do{if((p|0)==32){q=k}else if((p|0)==16){r=a[l]|0;if(r<<24>>24==43|r<<24>>24==45){q=l+1|0;break}if((h|0)>1&r<<24>>24==48?(r=a[l+1|0]|0,r<<24>>24==88|r<<24>>24==120):0){q=l+2|0}else{s=10}}else{s=10}}while(0);if((s|0)==10){q=l}ln(n,f);s=c[n>>2]|0;if(!((c[5534]|0)==-1)){c[j>>2]=22136;c[j+4>>2]=165;c[j+8>>2]=0;Mm(22136,j,166)}p=(c[22140>>2]|0)+ -1|0;r=c[s+8>>2]|0;if(!((c[s+12>>2]|0)-r>>2>>>0>p>>>0)){t=Wd(4)|0;Tu(t);qg(t|0,30104,152)}s=c[r+(p<<2)>>2]|0;if((s|0)==0){t=Wd(4)|0;Tu(t);qg(t|0,30104,152)}sm(c[n>>2]|0)|0;fh[c[(c[s>>2]|0)+48>>2]&15](s,l,k,m)|0;s=m+(h<<2)|0;if((q|0)==(k|0)){u=s;v=c[e>>2]|0;c[o>>2]=v;c[j+0>>2]=c[o+0>>2];Yp(b,j,m,u,s,f,g);i=d;return}u=m+(q-l<<2)|0;v=c[e>>2]|0;c[o>>2]=v;c[j+0>>2]=c[o+0>>2];Yp(b,j,m,u,s,f,g);i=d;return}function eq(e,f,g,h,j,k,l,m,n){e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0;o=i;i=i+32|0;p=o;q=o+28|0;r=o+12|0;s=o+16|0;t=o+20|0;u=o+24|0;ln(r,j);v=c[r>>2]|0;if(!((c[5536]|0)==-1)){c[p>>2]=22144;c[p+4>>2]=165;c[p+8>>2]=0;Mm(22144,p,166)}w=(c[22148>>2]|0)+ -1|0;x=c[v+8>>2]|0;if(!((c[v+12>>2]|0)-x>>2>>>0>w>>>0)){y=Wd(4)|0;Tu(y);qg(y|0,30104,152)}v=c[x+(w<<2)>>2]|0;if((v|0)==0){y=Wd(4)|0;Tu(y);qg(y|0,30104,152)}sm(c[r>>2]|0)|0;c[k>>2]=0;a:do{if((m|0)!=(n|0)){r=v+8|0;y=m;w=0;b:while(1){x=w;while(1){if((x|0)!=0){z=65;break a}A=c[g>>2]|0;if((A|0)!=0){if((c[A+12>>2]|0)==(c[A+16>>2]|0)?(Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0)==-1:0){c[g>>2]=0;B=0}else{B=A}}else{B=0}A=(B|0)==0;C=c[h>>2]|0;do{if((C|0)!=0){if((c[C+12>>2]|0)==(c[C+16>>2]|0)?(Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0)==-1:0){c[h>>2]=0;z=19;break}if(A){D=C}else{z=20;break b}}else{z=19}}while(0);if((z|0)==19){z=0;if(A){z=20;break b}else{D=0}}if((Sg[c[(c[v>>2]|0)+36>>2]&31](v,a[y]|0,0)|0)<<24>>24==37){z=22;break}C=a[y]|0;if(C<<24>>24>-1?(E=c[r>>2]|0,!((b[E+(C<<24>>24<<1)>>1]&8192)==0)):0){F=y;z=33;break}G=B+12|0;C=c[G>>2]|0;H=B+16|0;if((C|0)==(c[H>>2]|0)){I=Mg[c[(c[B>>2]|0)+36>>2]&127](B)|0}else{I=d[C]|0}C=ch[c[(c[v>>2]|0)+12>>2]&31](v,I&255)|0;if(C<<24>>24==(ch[c[(c[v>>2]|0)+12>>2]&31](v,a[y]|0)|0)<<24>>24){z=60;break}c[k>>2]=4;x=4}c:do{if((z|0)==22){z=0;x=y+1|0;if((x|0)==(n|0)){z=23;break b}C=Sg[c[(c[v>>2]|0)+36>>2]&31](v,a[x]|0,0)|0;if(C<<24>>24==48|C<<24>>24==69){J=y+2|0;if((J|0)==(n|0)){z=26;break b}K=J;L=Sg[c[(c[v>>2]|0)+36>>2]&31](v,a[J]|0,0)|0;M=C}else{K=x;L=C;M=0}C=c[(c[f>>2]|0)+36>>2]|0;c[t>>2]=B;c[u>>2]=D;c[q+0>>2]=c[t+0>>2];c[p+0>>2]=c[u+0>>2];Ng[C&7](s,f,q,p,j,k,l,L,M);c[g>>2]=c[s>>2];N=K+1|0}else if((z|0)==33){while(1){z=0;C=F+1|0;if((C|0)==(n|0)){O=n;break}x=a[C]|0;if(!(x<<24>>24>-1)){O=C;break}if((b[E+(x<<24>>24<<1)>>1]&8192)==0){O=C;break}else{F=C;z=33}}A=B;C=D;x=D;while(1){if((A|0)!=0){if((c[A+12>>2]|0)==(c[A+16>>2]|0)?(Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0)==-1:0){c[g>>2]=0;P=0}else{P=A}}else{P=0}J=(P|0)==0;do{if((x|0)!=0){if((c[x+12>>2]|0)!=(c[x+16>>2]|0)){if(J){Q=C;R=x;break}else{N=O;break c}}if(!((Mg[c[(c[x>>2]|0)+36>>2]&127](x)|0)==-1)){if(J^(C|0)==0){Q=C;R=C;break}else{N=O;break c}}else{c[h>>2]=0;S=0;z=46;break}}else{S=C;z=46}}while(0);if((z|0)==46){z=0;if(J){N=O;break c}else{Q=S;R=0}}T=P+12|0;U=c[T>>2]|0;V=P+16|0;if((U|0)==(c[V>>2]|0)){W=Mg[c[(c[P>>2]|0)+36>>2]&127](P)|0}else{W=d[U]|0}if(!((W&255)<<24>>24>-1)){N=O;break c}if((b[(c[r>>2]|0)+(W<<24>>24<<1)>>1]&8192)==0){N=O;break c}U=c[T>>2]|0;if((U|0)==(c[V>>2]|0)){Mg[c[(c[P>>2]|0)+40>>2]&127](P)|0;A=P;C=Q;x=R;continue}else{c[T>>2]=U+1;A=P;C=Q;x=R;continue}}}else if((z|0)==60){z=0;x=c[G>>2]|0;if((x|0)==(c[H>>2]|0)){Mg[c[(c[B>>2]|0)+40>>2]&127](B)|0}else{c[G>>2]=x+1}N=y+1|0}}while(0);if((N|0)==(n|0)){z=65;break a}y=N;w=c[k>>2]|0}if((z|0)==20){c[k>>2]=4;X=B;break}else if((z|0)==23){c[k>>2]=4;X=B;break}else if((z|0)==26){c[k>>2]=4;X=B;break}}else{z=65}}while(0);if((z|0)==65){X=c[g>>2]|0}if((X|0)!=0){if((c[X+12>>2]|0)==(c[X+16>>2]|0)?(Mg[c[(c[X>>2]|0)+36>>2]&127](X)|0)==-1:0){c[g>>2]=0;Y=0}else{Y=X}}else{Y=0}X=(Y|0)==0;g=c[h>>2]|0;do{if((g|0)!=0){if((c[g+12>>2]|0)==(c[g+16>>2]|0)?(Mg[c[(c[g>>2]|0)+36>>2]&127](g)|0)==-1:0){c[h>>2]=0;z=75;break}if(X){c[e>>2]=Y;i=o;return}}else{z=75}}while(0);if((z|0)==75?!X:0){c[e>>2]=Y;i=o;return}c[k>>2]=c[k>>2]|2;c[e>>2]=Y;i=o;return}function fq(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function gq(a){a=a|0;return}function hq(a){a=a|0;return 2}function iq(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0;j=i;i=i+16|0;k=j+12|0;l=j;m=j+4|0;n=j+8|0;c[m>>2]=c[d>>2];c[n>>2]=c[e>>2];c[l+0>>2]=c[m+0>>2];c[k+0>>2]=c[n+0>>2];eq(a,b,l,k,f,g,h,21048,21056|0);i=j;return}function jq(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;k=i;i=i+16|0;l=k+12|0;m=k;n=k+4|0;o=k+8|0;p=d+8|0;q=Mg[c[(c[p>>2]|0)+20>>2]&127](p)|0;c[n>>2]=c[e>>2];c[o>>2]=c[f>>2];f=a[q]|0;if((f&1)==0){r=q+1|0;s=(f&255)>>>1;t=q+1|0}else{f=c[q+8>>2]|0;r=f;s=c[q+4>>2]|0;t=f}f=r+s|0;c[m+0>>2]=c[n+0>>2];c[l+0>>2]=c[o+0>>2];eq(b,d,m,l,g,h,j,t,f);i=k;return}function kq(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;j=i;i=i+32|0;k=j;l=j+16|0;m=j+12|0;ln(m,f);f=c[m>>2]|0;if(!((c[5536]|0)==-1)){c[k>>2]=22144;c[k+4>>2]=165;c[k+8>>2]=0;Mm(22144,k,166)}n=(c[22148>>2]|0)+ -1|0;o=c[f+8>>2]|0;if(!((c[f+12>>2]|0)-o>>2>>>0>n>>>0)){p=Wd(4)|0;Tu(p);qg(p|0,30104,152)}f=c[o+(n<<2)>>2]|0;if((f|0)==0){p=Wd(4)|0;Tu(p);qg(p|0,30104,152)}sm(c[m>>2]|0)|0;m=c[e>>2]|0;e=b+8|0;b=Mg[c[c[e>>2]>>2]&127](e)|0;c[l>>2]=m;m=b+168|0;c[k+0>>2]=c[l+0>>2];l=(Ho(d,k,b,m,f,g,0)|0)-b|0;if((l|0)>=168){q=c[d>>2]|0;c[a>>2]=q;i=j;return}c[h+24>>2]=((l|0)/12|0|0)%7|0;q=c[d>>2]|0;c[a>>2]=q;i=j;return}function lq(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;j=i;i=i+32|0;k=j;l=j+16|0;m=j+12|0;ln(m,f);f=c[m>>2]|0;if(!((c[5536]|0)==-1)){c[k>>2]=22144;c[k+4>>2]=165;c[k+8>>2]=0;Mm(22144,k,166)}n=(c[22148>>2]|0)+ -1|0;o=c[f+8>>2]|0;if(!((c[f+12>>2]|0)-o>>2>>>0>n>>>0)){p=Wd(4)|0;Tu(p);qg(p|0,30104,152)}f=c[o+(n<<2)>>2]|0;if((f|0)==0){p=Wd(4)|0;Tu(p);qg(p|0,30104,152)}sm(c[m>>2]|0)|0;m=c[e>>2]|0;e=b+8|0;b=Mg[c[(c[e>>2]|0)+4>>2]&127](e)|0;c[l>>2]=m;m=b+288|0;c[k+0>>2]=c[l+0>>2];l=(Ho(d,k,b,m,f,g,0)|0)-b|0;if((l|0)>=288){q=c[d>>2]|0;c[a>>2]=q;i=j;return}c[h+16>>2]=((l|0)/12|0|0)%12|0;q=c[d>>2]|0;c[a>>2]=q;i=j;return}function mq(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;b=i;i=i+32|0;j=b;k=b+16|0;l=b+12|0;ln(l,f);f=c[l>>2]|0;if(!((c[5536]|0)==-1)){c[j>>2]=22144;c[j+4>>2]=165;c[j+8>>2]=0;Mm(22144,j,166)}m=(c[22148>>2]|0)+ -1|0;n=c[f+8>>2]|0;if(!((c[f+12>>2]|0)-n>>2>>>0>m>>>0)){o=Wd(4)|0;Tu(o);qg(o|0,30104,152)}f=c[n+(m<<2)>>2]|0;if((f|0)==0){o=Wd(4)|0;Tu(o);qg(o|0,30104,152)}sm(c[l>>2]|0)|0;l=h+20|0;c[k>>2]=c[e>>2];c[j+0>>2]=c[k+0>>2];k=qq(d,j,g,f,4)|0;if((c[g>>2]&4|0)!=0){p=c[d>>2]|0;c[a>>2]=p;i=b;return}if((k|0)<69){q=k+2e3|0}else{q=(k+ -69|0)>>>0<31?k+1900|0:k}c[l>>2]=q+ -1900;p=c[d>>2]|0;c[a>>2]=p;i=b;return}function nq(b,d,e,f,g,h,j,k,l){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0;l=i;i=i+176|0;m=l;n=l+160|0;o=l+156|0;p=l+152|0;q=l+148|0;r=l+144|0;s=l+140|0;t=l+136|0;u=l+132|0;v=l+128|0;w=l+124|0;x=l+120|0;y=l+116|0;z=l+112|0;A=l+108|0;B=l+104|0;C=l+100|0;D=l+96|0;E=l+92|0;F=l+88|0;G=l+164|0;H=l+44|0;I=l+36|0;J=l+32|0;K=l+28|0;L=l+40|0;M=l+16|0;N=l+12|0;O=l+20|0;P=l+24|0;Q=l+80|0;R=l+48|0;S=l+52|0;T=l+56|0;U=l+60|0;V=l+64|0;W=l+68|0;X=l+72|0;Y=l+76|0;Z=l+84|0;c[h>>2]=0;ln(A,g);_=c[A>>2]|0;if(!((c[5536]|0)==-1)){c[m>>2]=22144;c[m+4>>2]=165;c[m+8>>2]=0;Mm(22144,m,166)}$=(c[22148>>2]|0)+ -1|0;aa=c[_+8>>2]|0;if(!((c[_+12>>2]|0)-aa>>2>>>0>$>>>0)){ba=Wd(4)|0;Tu(ba);qg(ba|0,30104,152)}_=c[aa+($<<2)>>2]|0;if((_|0)==0){ba=Wd(4)|0;Tu(ba);qg(ba|0,30104,152)}sm(c[A>>2]|0)|0;a:do{switch(k<<24>>24|0){case 37:{c[Z>>2]=c[f>>2];c[m+0>>2]=c[Z+0>>2];pq(0,e,m,h,_);break};case 70:{c[I>>2]=c[e>>2];c[J>>2]=c[f>>2];c[n+0>>2]=c[I+0>>2];c[m+0>>2]=c[J+0>>2];eq(H,d,n,m,g,h,j,21064,21072|0);c[e>>2]=c[H>>2];break};case 77:{c[s>>2]=c[f>>2];c[m+0>>2]=c[s+0>>2];A=qq(e,m,h,_,2)|0;ba=c[h>>2]|0;if((ba&4|0)==0&(A|0)<60){c[j+4>>2]=A;break a}else{c[h>>2]=ba|4;break a}break};case 73:{ba=j+8|0;c[v>>2]=c[f>>2];c[m+0>>2]=c[v+0>>2];A=qq(e,m,h,_,2)|0;$=c[h>>2]|0;if(($&4|0)==0?(A+ -1|0)>>>0<12:0){c[ba>>2]=A;break a}c[h>>2]=$|4;break};case 99:{$=d+8|0;A=Mg[c[(c[$>>2]|0)+12>>2]&127]($)|0;c[C>>2]=c[e>>2];c[D>>2]=c[f>>2];$=a[A]|0;if(($&1)==0){ca=A+1|0;da=($&255)>>>1;ea=A+1|0}else{$=c[A+8>>2]|0;ca=$;da=c[A+4>>2]|0;ea=$}c[n+0>>2]=c[C+0>>2];c[m+0>>2]=c[D+0>>2];eq(B,d,n,m,g,h,j,ea,ca+da|0);c[e>>2]=c[B>>2];break};case 101:case 100:{$=j+12|0;c[x>>2]=c[f>>2];c[m+0>>2]=c[x+0>>2];A=qq(e,m,h,_,2)|0;ba=c[h>>2]|0;if((ba&4|0)==0?(A+ -1|0)>>>0<31:0){c[$>>2]=A;break a}c[h>>2]=ba|4;break};case 104:case 66:case 98:{ba=c[f>>2]|0;A=d+8|0;$=Mg[c[(c[A>>2]|0)+4>>2]&127](A)|0;c[y>>2]=ba;c[m+0>>2]=c[y+0>>2];ba=(Ho(e,m,$,$+288|0,_,h,0)|0)-$|0;if((ba|0)<288){c[j+16>>2]=((ba|0)/12|0|0)%12|0}break};case 84:{c[S>>2]=c[e>>2];c[T>>2]=c[f>>2];c[n+0>>2]=c[S+0>>2];c[m+0>>2]=c[T+0>>2];eq(R,d,n,m,g,h,j,21096,21104|0);c[e>>2]=c[R>>2];break};case 65:case 97:{ba=c[f>>2]|0;$=d+8|0;A=Mg[c[c[$>>2]>>2]&127]($)|0;c[z>>2]=ba;c[m+0>>2]=c[z+0>>2];ba=(Ho(e,m,A,A+168|0,_,h,0)|0)-A|0;if((ba|0)<168){c[j+24>>2]=((ba|0)/12|0|0)%7|0}break};case 106:{c[u>>2]=c[f>>2];c[m+0>>2]=c[u+0>>2];ba=qq(e,m,h,_,3)|0;A=c[h>>2]|0;if((A&4|0)==0&(ba|0)<366){c[j+28>>2]=ba;break a}else{c[h>>2]=A|4;break a}break};case 116:case 110:{c[K>>2]=c[f>>2];c[m+0>>2]=c[K+0>>2];oq(0,e,m,h,_);break};case 72:{c[w>>2]=c[f>>2];c[m+0>>2]=c[w+0>>2];A=qq(e,m,h,_,2)|0;ba=c[h>>2]|0;if((ba&4|0)==0&(A|0)<24){c[j+8>>2]=A;break a}else{c[h>>2]=ba|4;break a}break};case 109:{c[t>>2]=c[f>>2];c[m+0>>2]=c[t+0>>2];ba=qq(e,m,h,_,2)|0;A=c[h>>2]|0;if((A&4|0)==0&(ba|0)<13){c[j+16>>2]=ba+ -1;break a}else{c[h>>2]=A|4;break a}break};case 89:{c[n>>2]=c[f>>2];c[m+0>>2]=c[n+0>>2];A=qq(e,m,h,_,4)|0;if((c[h>>2]&4|0)==0){c[j+20>>2]=A+ -1900}break};case 114:{c[M>>2]=c[e>>2];c[N>>2]=c[f>>2];c[n+0>>2]=c[M+0>>2];c[m+0>>2]=c[N+0>>2];eq(L,d,n,m,g,h,j,21072,21083|0);c[e>>2]=c[L>>2];break};case 68:{c[F>>2]=c[e>>2];c[G>>2]=c[f>>2];c[n+0>>2]=c[F+0>>2];c[m+0>>2]=c[G+0>>2];eq(E,d,n,m,g,h,j,21056,21064|0);c[e>>2]=c[E>>2];break};case 121:{A=j+20|0;c[o>>2]=c[f>>2];c[m+0>>2]=c[o+0>>2];ba=qq(e,m,h,_,4)|0;if((c[h>>2]&4|0)==0){if((ba|0)<69){fa=ba+2e3|0}else{fa=(ba+ -69|0)>>>0<31?ba+1900|0:ba}c[A>>2]=fa+ -1900}break};case 120:{A=c[(c[d>>2]|0)+20>>2]|0;c[U>>2]=c[e>>2];c[V>>2]=c[f>>2];c[n+0>>2]=c[U+0>>2];c[m+0>>2]=c[V+0>>2];$g[A&63](b,d,n,m,g,h,j);i=l;return};case 112:{A=j+8|0;ba=c[f>>2]|0;$=d+8|0;aa=Mg[c[(c[$>>2]|0)+8>>2]&127]($)|0;$=a[aa]|0;if(($&1)==0){ga=($&255)>>>1}else{ga=c[aa+4>>2]|0}$=a[aa+12|0]|0;if(($&1)==0){ha=($&255)>>>1}else{ha=c[aa+16>>2]|0}if((ga|0)==(0-ha|0)){c[h>>2]=c[h>>2]|4;break a}c[r>>2]=ba;c[m+0>>2]=c[r+0>>2];ba=Ho(e,m,aa,aa+24|0,_,h,0)|0;$=ba-aa|0;if((ba|0)==(aa|0)?(c[A>>2]|0)==12:0){c[A>>2]=0;break a}if(($|0)==12?($=c[A>>2]|0,($|0)<12):0){c[A>>2]=$+12}break};case 88:{$=d+8|0;A=Mg[c[(c[$>>2]|0)+24>>2]&127]($)|0;c[X>>2]=c[e>>2];c[Y>>2]=c[f>>2];$=a[A]|0;if(($&1)==0){ia=A+1|0;ja=($&255)>>>1;ka=A+1|0}else{$=c[A+8>>2]|0;ia=$;ja=c[A+4>>2]|0;ka=$}c[n+0>>2]=c[X+0>>2];c[m+0>>2]=c[Y+0>>2];eq(W,d,n,m,g,h,j,ka,ia+ja|0);c[e>>2]=c[W>>2];break};case 119:{c[p>>2]=c[f>>2];c[m+0>>2]=c[p+0>>2];$=qq(e,m,h,_,1)|0;A=c[h>>2]|0;if((A&4|0)==0&($|0)<7){c[j+24>>2]=$;break a}else{c[h>>2]=A|4;break a}break};case 82:{c[P>>2]=c[e>>2];c[Q>>2]=c[f>>2];c[n+0>>2]=c[P+0>>2];c[m+0>>2]=c[Q+0>>2];eq(O,d,n,m,g,h,j,21088,21093|0);c[e>>2]=c[O>>2];break};case 83:{c[q>>2]=c[f>>2];c[m+0>>2]=c[q+0>>2];A=qq(e,m,h,_,2)|0;$=c[h>>2]|0;if(($&4|0)==0&(A|0)<61){c[j>>2]=A;break a}else{c[h>>2]=$|4;break a}break};default:{c[h>>2]=c[h>>2]|4}}}while(0);c[b>>2]=c[e>>2];i=l;return}function oq(a,e,f,g,h){a=a|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;a=i;j=h+8|0;a:while(1){h=c[e>>2]|0;do{if((h|0)!=0){if((c[h+12>>2]|0)==(c[h+16>>2]|0)){if((Mg[c[(c[h>>2]|0)+36>>2]&127](h)|0)==-1){c[e>>2]=0;k=0;break}else{k=c[e>>2]|0;break}}else{k=h}}else{k=0}}while(0);h=(k|0)==0;l=c[f>>2]|0;do{if((l|0)!=0){if((c[l+12>>2]|0)!=(c[l+16>>2]|0)){if(h){m=l;break}else{n=l;break a}}if(!((Mg[c[(c[l>>2]|0)+36>>2]&127](l)|0)==-1)){if(h){m=l;break}else{n=l;break a}}else{c[f>>2]=0;o=12;break}}else{o=12}}while(0);if((o|0)==12){o=0;if(h){n=0;break}else{m=0}}l=c[e>>2]|0;p=c[l+12>>2]|0;if((p|0)==(c[l+16>>2]|0)){q=Mg[c[(c[l>>2]|0)+36>>2]&127](l)|0}else{q=d[p]|0}if(!((q&255)<<24>>24>-1)){n=m;break}if((b[(c[j>>2]|0)+(q<<24>>24<<1)>>1]&8192)==0){n=m;break}p=c[e>>2]|0;l=p+12|0;r=c[l>>2]|0;if((r|0)==(c[p+16>>2]|0)){Mg[c[(c[p>>2]|0)+40>>2]&127](p)|0;continue}else{c[l>>2]=r+1;continue}}m=c[e>>2]|0;do{if((m|0)!=0){if((c[m+12>>2]|0)==(c[m+16>>2]|0)){if((Mg[c[(c[m>>2]|0)+36>>2]&127](m)|0)==-1){c[e>>2]=0;s=0;break}else{s=c[e>>2]|0;break}}else{s=m}}else{s=0}}while(0);m=(s|0)==0;do{if((n|0)!=0){if((c[n+12>>2]|0)==(c[n+16>>2]|0)?(Mg[c[(c[n>>2]|0)+36>>2]&127](n)|0)==-1:0){c[f>>2]=0;o=32;break}if(m){i=a;return}}else{o=32}}while(0);if((o|0)==32?!m:0){i=a;return}c[g>>2]=c[g>>2]|2;i=a;return}function pq(a,b,e,f,g){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0;a=i;h=c[b>>2]|0;do{if((h|0)!=0){if((c[h+12>>2]|0)==(c[h+16>>2]|0)){if((Mg[c[(c[h>>2]|0)+36>>2]&127](h)|0)==-1){c[b>>2]=0;j=0;break}else{j=c[b>>2]|0;break}}else{j=h}}else{j=0}}while(0);h=(j|0)==0;j=c[e>>2]|0;do{if((j|0)!=0){if((c[j+12>>2]|0)==(c[j+16>>2]|0)?(Mg[c[(c[j>>2]|0)+36>>2]&127](j)|0)==-1:0){c[e>>2]=0;k=11;break}if(h){l=j}else{k=12}}else{k=11}}while(0);if((k|0)==11){if(h){k=12}else{l=0}}if((k|0)==12){c[f>>2]=c[f>>2]|6;i=a;return}h=c[b>>2]|0;j=c[h+12>>2]|0;if((j|0)==(c[h+16>>2]|0)){m=Mg[c[(c[h>>2]|0)+36>>2]&127](h)|0}else{m=d[j]|0}if(!((Sg[c[(c[g>>2]|0)+36>>2]&31](g,m&255,0)|0)<<24>>24==37)){c[f>>2]=c[f>>2]|4;i=a;return}m=c[b>>2]|0;g=m+12|0;j=c[g>>2]|0;if((j|0)==(c[m+16>>2]|0)){Mg[c[(c[m>>2]|0)+40>>2]&127](m)|0}else{c[g>>2]=j+1}j=c[b>>2]|0;do{if((j|0)!=0){if((c[j+12>>2]|0)==(c[j+16>>2]|0)){if((Mg[c[(c[j>>2]|0)+36>>2]&127](j)|0)==-1){c[b>>2]=0;n=0;break}else{n=c[b>>2]|0;break}}else{n=j}}else{n=0}}while(0);j=(n|0)==0;do{if((l|0)!=0){if((c[l+12>>2]|0)==(c[l+16>>2]|0)?(Mg[c[(c[l>>2]|0)+36>>2]&127](l)|0)==-1:0){c[e>>2]=0;k=31;break}if(j){i=a;return}}else{k=31}}while(0);if((k|0)==31?!j:0){i=a;return}c[f>>2]=c[f>>2]|2;i=a;return}function qq(a,e,f,g,h){a=a|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;j=i;k=c[a>>2]|0;do{if((k|0)!=0){if((c[k+12>>2]|0)==(c[k+16>>2]|0)){if((Mg[c[(c[k>>2]|0)+36>>2]&127](k)|0)==-1){c[a>>2]=0;l=0;break}else{l=c[a>>2]|0;break}}else{l=k}}else{l=0}}while(0);k=(l|0)==0;l=c[e>>2]|0;do{if((l|0)!=0){if((c[l+12>>2]|0)==(c[l+16>>2]|0)?(Mg[c[(c[l>>2]|0)+36>>2]&127](l)|0)==-1:0){c[e>>2]=0;m=11;break}if(k){n=l}else{m=12}}else{m=11}}while(0);if((m|0)==11){if(k){m=12}else{n=0}}if((m|0)==12){c[f>>2]=c[f>>2]|6;o=0;i=j;return o|0}k=c[a>>2]|0;l=c[k+12>>2]|0;if((l|0)==(c[k+16>>2]|0)){p=Mg[c[(c[k>>2]|0)+36>>2]&127](k)|0}else{p=d[l]|0}l=p&255;if(l<<24>>24>-1?(k=g+8|0,!((b[(c[k>>2]|0)+(p<<24>>24<<1)>>1]&2048)==0)):0){p=(Sg[c[(c[g>>2]|0)+36>>2]&31](g,l,0)|0)<<24>>24;l=c[a>>2]|0;q=l+12|0;r=c[q>>2]|0;if((r|0)==(c[l+16>>2]|0)){Mg[c[(c[l>>2]|0)+40>>2]&127](l)|0;s=h;t=n;u=n;v=p}else{c[q>>2]=r+1;s=h;t=n;u=n;v=p}while(1){w=v+ -48|0;p=s+ -1|0;n=c[a>>2]|0;do{if((n|0)!=0){if((c[n+12>>2]|0)==(c[n+16>>2]|0)){if((Mg[c[(c[n>>2]|0)+36>>2]&127](n)|0)==-1){c[a>>2]=0;x=0;break}else{x=c[a>>2]|0;break}}else{x=n}}else{x=0}}while(0);n=(x|0)==0;if((u|0)!=0){if((c[u+12>>2]|0)==(c[u+16>>2]|0)){if((Mg[c[(c[u>>2]|0)+36>>2]&127](u)|0)==-1){c[e>>2]=0;y=0;z=0}else{y=t;z=t}}else{y=t;z=u}}else{y=t;z=0}A=c[a>>2]|0;if(!((n^(z|0)==0)&(p|0)>0)){m=40;break}n=c[A+12>>2]|0;if((n|0)==(c[A+16>>2]|0)){B=Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0}else{B=d[n]|0}n=B&255;if(!(n<<24>>24>-1)){o=w;m=52;break}if((b[(c[k>>2]|0)+(B<<24>>24<<1)>>1]&2048)==0){o=w;m=52;break}h=((Sg[c[(c[g>>2]|0)+36>>2]&31](g,n,0)|0)<<24>>24)+(w*10|0)|0;n=c[a>>2]|0;r=n+12|0;q=c[r>>2]|0;if((q|0)==(c[n+16>>2]|0)){Mg[c[(c[n>>2]|0)+40>>2]&127](n)|0;s=p;t=y;u=z;v=h;continue}else{c[r>>2]=q+1;s=p;t=y;u=z;v=h;continue}}if((m|0)==40){do{if((A|0)!=0){if((c[A+12>>2]|0)==(c[A+16>>2]|0)){if((Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0)==-1){c[a>>2]=0;C=0;break}else{C=c[a>>2]|0;break}}else{C=A}}else{C=0}}while(0);A=(C|0)==0;do{if((y|0)!=0){if((c[y+12>>2]|0)==(c[y+16>>2]|0)?(Mg[c[(c[y>>2]|0)+36>>2]&127](y)|0)==-1:0){c[e>>2]=0;m=50;break}if(A){o=w;i=j;return o|0}}else{m=50}}while(0);if((m|0)==50?!A:0){o=w;i=j;return o|0}c[f>>2]=c[f>>2]|2;o=w;i=j;return o|0}else if((m|0)==52){i=j;return o|0}}c[f>>2]=c[f>>2]|4;o=0;i=j;return o|0}function rq(a,b,d,e,f,g,h,j,k){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0;l=i;i=i+32|0;m=l;n=l+28|0;o=l+12|0;p=l+16|0;q=l+20|0;r=l+24|0;ln(o,f);s=c[o>>2]|0;if(!((c[5534]|0)==-1)){c[m>>2]=22136;c[m+4>>2]=165;c[m+8>>2]=0;Mm(22136,m,166)}t=(c[22140>>2]|0)+ -1|0;u=c[s+8>>2]|0;if(!((c[s+12>>2]|0)-u>>2>>>0>t>>>0)){v=Wd(4)|0;Tu(v);qg(v|0,30104,152)}s=c[u+(t<<2)>>2]|0;if((s|0)==0){v=Wd(4)|0;Tu(v);qg(v|0,30104,152)}sm(c[o>>2]|0)|0;c[g>>2]=0;a:do{if((j|0)!=(k|0)){o=j;v=0;b:while(1){t=v;while(1){if((t|0)!=0){w=69;break a}u=c[d>>2]|0;if((u|0)!=0){x=c[u+12>>2]|0;if((x|0)==(c[u+16>>2]|0)){y=Mg[c[(c[u>>2]|0)+36>>2]&127](u)|0}else{y=c[x>>2]|0}if((y|0)==-1){c[d>>2]=0;z=1;A=0}else{z=0;A=u}}else{z=1;A=0}u=c[e>>2]|0;do{if((u|0)!=0){x=c[u+12>>2]|0;if((x|0)==(c[u+16>>2]|0)){B=Mg[c[(c[u>>2]|0)+36>>2]&127](u)|0}else{B=c[x>>2]|0}if(!((B|0)==-1)){if(z){C=u;break}else{w=24;break b}}else{c[e>>2]=0;w=22;break}}else{w=22}}while(0);if((w|0)==22){w=0;if(z){w=24;break b}else{C=0}}if((Sg[c[(c[s>>2]|0)+52>>2]&31](s,c[o>>2]|0,0)|0)<<24>>24==37){w=26;break}if(Sg[c[(c[s>>2]|0)+12>>2]&31](s,8192,c[o>>2]|0)|0){D=o;w=36;break}E=A+12|0;u=c[E>>2]|0;F=A+16|0;if((u|0)==(c[F>>2]|0)){G=Mg[c[(c[A>>2]|0)+36>>2]&127](A)|0}else{G=c[u>>2]|0}u=ch[c[(c[s>>2]|0)+28>>2]&31](s,G)|0;if((u|0)==(ch[c[(c[s>>2]|0)+28>>2]&31](s,c[o>>2]|0)|0)){w=64;break}c[g>>2]=4;t=4}c:do{if((w|0)==26){w=0;t=o+4|0;if((t|0)==(k|0)){w=27;break b}u=Sg[c[(c[s>>2]|0)+52>>2]&31](s,c[t>>2]|0,0)|0;if(u<<24>>24==48|u<<24>>24==69){x=o+8|0;if((x|0)==(k|0)){w=30;break b}H=x;I=Sg[c[(c[s>>2]|0)+52>>2]&31](s,c[x>>2]|0,0)|0;J=u}else{H=t;I=u;J=0}u=c[(c[b>>2]|0)+36>>2]|0;c[q>>2]=A;c[r>>2]=C;c[n+0>>2]=c[q+0>>2];c[m+0>>2]=c[r+0>>2];Ng[u&7](p,b,n,m,f,g,h,I,J);c[d>>2]=c[p>>2];K=H+4|0}else if((w|0)==36){while(1){w=0;u=D+4|0;if((u|0)==(k|0)){L=k;break}if(Sg[c[(c[s>>2]|0)+12>>2]&31](s,8192,c[u>>2]|0)|0){D=u;w=36}else{L=u;break}}u=A;t=C;x=C;while(1){if((u|0)!=0){M=c[u+12>>2]|0;if((M|0)==(c[u+16>>2]|0)){N=Mg[c[(c[u>>2]|0)+36>>2]&127](u)|0}else{N=c[M>>2]|0}if((N|0)==-1){c[d>>2]=0;O=1;P=0}else{O=0;P=u}}else{O=1;P=0}do{if((x|0)!=0){M=c[x+12>>2]|0;if((M|0)==(c[x+16>>2]|0)){Q=Mg[c[(c[x>>2]|0)+36>>2]&127](x)|0}else{Q=c[M>>2]|0}if(!((Q|0)==-1)){if(O^(t|0)==0){R=t;S=t;break}else{K=L;break c}}else{c[e>>2]=0;T=0;w=51;break}}else{T=t;w=51}}while(0);if((w|0)==51){w=0;if(O){K=L;break c}else{R=T;S=0}}M=P+12|0;U=c[M>>2]|0;V=P+16|0;if((U|0)==(c[V>>2]|0)){W=Mg[c[(c[P>>2]|0)+36>>2]&127](P)|0}else{W=c[U>>2]|0}if(!(Sg[c[(c[s>>2]|0)+12>>2]&31](s,8192,W)|0)){K=L;break c}U=c[M>>2]|0;if((U|0)==(c[V>>2]|0)){Mg[c[(c[P>>2]|0)+40>>2]&127](P)|0;u=P;t=R;x=S;continue}else{c[M>>2]=U+4;u=P;t=R;x=S;continue}}}else if((w|0)==64){w=0;x=c[E>>2]|0;if((x|0)==(c[F>>2]|0)){Mg[c[(c[A>>2]|0)+40>>2]&127](A)|0}else{c[E>>2]=x+4}K=o+4|0}}while(0);if((K|0)==(k|0)){w=69;break a}o=K;v=c[g>>2]|0}if((w|0)==24){c[g>>2]=4;X=A;break}else if((w|0)==27){c[g>>2]=4;X=A;break}else if((w|0)==30){c[g>>2]=4;X=A;break}}else{w=69}}while(0);if((w|0)==69){X=c[d>>2]|0}if((X|0)!=0){A=c[X+12>>2]|0;if((A|0)==(c[X+16>>2]|0)){Y=Mg[c[(c[X>>2]|0)+36>>2]&127](X)|0}else{Y=c[A>>2]|0}if((Y|0)==-1){c[d>>2]=0;Z=0;_=1}else{Z=X;_=0}}else{Z=0;_=1}X=c[e>>2]|0;do{if((X|0)!=0){d=c[X+12>>2]|0;if((d|0)==(c[X+16>>2]|0)){$=Mg[c[(c[X>>2]|0)+36>>2]&127](X)|0}else{$=c[d>>2]|0}if(($|0)==-1){c[e>>2]=0;w=82;break}if(_){c[a>>2]=Z;i=l;return}}else{w=82}}while(0);if((w|0)==82?!_:0){c[a>>2]=Z;i=l;return}c[g>>2]=c[g>>2]|2;c[a>>2]=Z;i=l;return}function sq(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function tq(a){a=a|0;return}function uq(a){a=a|0;return 2}function vq(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0;j=i;i=i+16|0;k=j+12|0;l=j;m=j+4|0;n=j+8|0;c[m>>2]=c[d>>2];c[n>>2]=c[e>>2];c[l+0>>2]=c[m+0>>2];c[k+0>>2]=c[n+0>>2];rq(a,b,l,k,f,g,h,21200,21232|0);i=j;return}function wq(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;k=i;i=i+16|0;l=k+12|0;m=k;n=k+4|0;o=k+8|0;p=d+8|0;q=Mg[c[(c[p>>2]|0)+20>>2]&127](p)|0;c[n>>2]=c[e>>2];c[o>>2]=c[f>>2];f=a[q]|0;if((f&1)==0){r=q+4|0;s=(f&255)>>>1;t=q+4|0}else{f=c[q+8>>2]|0;r=f;s=c[q+4>>2]|0;t=f}f=r+(s<<2)|0;c[m+0>>2]=c[n+0>>2];c[l+0>>2]=c[o+0>>2];rq(b,d,m,l,g,h,j,t,f);i=k;return}function xq(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;j=i;i=i+32|0;k=j;l=j+16|0;m=j+12|0;ln(m,f);f=c[m>>2]|0;if(!((c[5534]|0)==-1)){c[k>>2]=22136;c[k+4>>2]=165;c[k+8>>2]=0;Mm(22136,k,166)}n=(c[22140>>2]|0)+ -1|0;o=c[f+8>>2]|0;if(!((c[f+12>>2]|0)-o>>2>>>0>n>>>0)){p=Wd(4)|0;Tu(p);qg(p|0,30104,152)}f=c[o+(n<<2)>>2]|0;if((f|0)==0){p=Wd(4)|0;Tu(p);qg(p|0,30104,152)}sm(c[m>>2]|0)|0;m=c[e>>2]|0;e=b+8|0;b=Mg[c[c[e>>2]>>2]&127](e)|0;c[l>>2]=m;m=b+168|0;c[k+0>>2]=c[l+0>>2];l=(ep(d,k,b,m,f,g,0)|0)-b|0;if((l|0)>=168){q=c[d>>2]|0;c[a>>2]=q;i=j;return}c[h+24>>2]=((l|0)/12|0|0)%7|0;q=c[d>>2]|0;c[a>>2]=q;i=j;return}function yq(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;j=i;i=i+32|0;k=j;l=j+16|0;m=j+12|0;ln(m,f);f=c[m>>2]|0;if(!((c[5534]|0)==-1)){c[k>>2]=22136;c[k+4>>2]=165;c[k+8>>2]=0;Mm(22136,k,166)}n=(c[22140>>2]|0)+ -1|0;o=c[f+8>>2]|0;if(!((c[f+12>>2]|0)-o>>2>>>0>n>>>0)){p=Wd(4)|0;Tu(p);qg(p|0,30104,152)}f=c[o+(n<<2)>>2]|0;if((f|0)==0){p=Wd(4)|0;Tu(p);qg(p|0,30104,152)}sm(c[m>>2]|0)|0;m=c[e>>2]|0;e=b+8|0;b=Mg[c[(c[e>>2]|0)+4>>2]&127](e)|0;c[l>>2]=m;m=b+288|0;c[k+0>>2]=c[l+0>>2];l=(ep(d,k,b,m,f,g,0)|0)-b|0;if((l|0)>=288){q=c[d>>2]|0;c[a>>2]=q;i=j;return}c[h+16>>2]=((l|0)/12|0|0)%12|0;q=c[d>>2]|0;c[a>>2]=q;i=j;return}function zq(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;b=i;i=i+32|0;j=b;k=b+16|0;l=b+12|0;ln(l,f);f=c[l>>2]|0;if(!((c[5534]|0)==-1)){c[j>>2]=22136;c[j+4>>2]=165;c[j+8>>2]=0;Mm(22136,j,166)}m=(c[22140>>2]|0)+ -1|0;n=c[f+8>>2]|0;if(!((c[f+12>>2]|0)-n>>2>>>0>m>>>0)){o=Wd(4)|0;Tu(o);qg(o|0,30104,152)}f=c[n+(m<<2)>>2]|0;if((f|0)==0){o=Wd(4)|0;Tu(o);qg(o|0,30104,152)}sm(c[l>>2]|0)|0;l=h+20|0;c[k>>2]=c[e>>2];c[j+0>>2]=c[k+0>>2];k=Dq(d,j,g,f,4)|0;if((c[g>>2]&4|0)!=0){p=c[d>>2]|0;c[a>>2]=p;i=b;return}if((k|0)<69){q=k+2e3|0}else{q=(k+ -69|0)>>>0<31?k+1900|0:k}c[l>>2]=q+ -1900;p=c[d>>2]|0;c[a>>2]=p;i=b;return}function Aq(b,d,e,f,g,h,j,k,l){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0;l=i;i=i+176|0;m=l;n=l+160|0;o=l+156|0;p=l+152|0;q=l+148|0;r=l+144|0;s=l+140|0;t=l+136|0;u=l+132|0;v=l+128|0;w=l+124|0;x=l+120|0;y=l+116|0;z=l+112|0;A=l+108|0;B=l+104|0;C=l+100|0;D=l+96|0;E=l+92|0;F=l+88|0;G=l+164|0;H=l+44|0;I=l+36|0;J=l+32|0;K=l+28|0;L=l+40|0;M=l+16|0;N=l+12|0;O=l+20|0;P=l+24|0;Q=l+80|0;R=l+48|0;S=l+52|0;T=l+56|0;U=l+60|0;V=l+64|0;W=l+68|0;X=l+72|0;Y=l+76|0;Z=l+84|0;c[h>>2]=0;ln(A,g);_=c[A>>2]|0;if(!((c[5534]|0)==-1)){c[m>>2]=22136;c[m+4>>2]=165;c[m+8>>2]=0;Mm(22136,m,166)}$=(c[22140>>2]|0)+ -1|0;aa=c[_+8>>2]|0;if(!((c[_+12>>2]|0)-aa>>2>>>0>$>>>0)){ba=Wd(4)|0;Tu(ba);qg(ba|0,30104,152)}_=c[aa+($<<2)>>2]|0;if((_|0)==0){ba=Wd(4)|0;Tu(ba);qg(ba|0,30104,152)}sm(c[A>>2]|0)|0;a:do{switch(k<<24>>24|0){case 70:{c[I>>2]=c[e>>2];c[J>>2]=c[f>>2];c[n+0>>2]=c[I+0>>2];c[m+0>>2]=c[J+0>>2];rq(H,d,n,m,g,h,j,21264,21296|0);c[e>>2]=c[H>>2];break};case 106:{c[u>>2]=c[f>>2];c[m+0>>2]=c[u+0>>2];A=Dq(e,m,h,_,3)|0;ba=c[h>>2]|0;if((ba&4|0)==0&(A|0)<366){c[j+28>>2]=A;break a}else{c[h>>2]=ba|4;break a}break};case 112:{ba=j+8|0;A=c[f>>2]|0;$=d+8|0;aa=Mg[c[(c[$>>2]|0)+8>>2]&127]($)|0;$=a[aa]|0;if(($&1)==0){ca=($&255)>>>1}else{ca=c[aa+4>>2]|0}$=a[aa+12|0]|0;if(($&1)==0){da=($&255)>>>1}else{da=c[aa+16>>2]|0}if((ca|0)==(0-da|0)){c[h>>2]=c[h>>2]|4;break a}c[r>>2]=A;c[m+0>>2]=c[r+0>>2];A=ep(e,m,aa,aa+24|0,_,h,0)|0;$=A-aa|0;if((A|0)==(aa|0)?(c[ba>>2]|0)==12:0){c[ba>>2]=0;break a}if(($|0)==12?($=c[ba>>2]|0,($|0)<12):0){c[ba>>2]=$+12}break};case 99:{$=d+8|0;ba=Mg[c[(c[$>>2]|0)+12>>2]&127]($)|0;c[C>>2]=c[e>>2];c[D>>2]=c[f>>2];$=a[ba]|0;if(($&1)==0){ea=ba+4|0;fa=($&255)>>>1;ga=ba+4|0}else{$=c[ba+8>>2]|0;ea=$;fa=c[ba+4>>2]|0;ga=$}c[n+0>>2]=c[C+0>>2];c[m+0>>2]=c[D+0>>2];rq(B,d,n,m,g,h,j,ga,ea+(fa<<2)|0);c[e>>2]=c[B>>2];break};case 73:{$=j+8|0;c[v>>2]=c[f>>2];c[m+0>>2]=c[v+0>>2];ba=Dq(e,m,h,_,2)|0;aa=c[h>>2]|0;if((aa&4|0)==0?(ba+ -1|0)>>>0<12:0){c[$>>2]=ba;break a}c[h>>2]=aa|4;break};case 72:{c[w>>2]=c[f>>2];c[m+0>>2]=c[w+0>>2];aa=Dq(e,m,h,_,2)|0;ba=c[h>>2]|0;if((ba&4|0)==0&(aa|0)<24){c[j+8>>2]=aa;break a}else{c[h>>2]=ba|4;break a}break};case 120:{ba=c[(c[d>>2]|0)+20>>2]|0;c[U>>2]=c[e>>2];c[V>>2]=c[f>>2];c[n+0>>2]=c[U+0>>2];c[m+0>>2]=c[V+0>>2];$g[ba&63](b,d,n,m,g,h,j);i=l;return};case 77:{c[s>>2]=c[f>>2];c[m+0>>2]=c[s+0>>2];ba=Dq(e,m,h,_,2)|0;aa=c[h>>2]|0;if((aa&4|0)==0&(ba|0)<60){c[j+4>>2]=ba;break a}else{c[h>>2]=aa|4;break a}break};case 37:{c[Z>>2]=c[f>>2];c[m+0>>2]=c[Z+0>>2];Cq(0,e,m,h,_);break};case 88:{aa=d+8|0;ba=Mg[c[(c[aa>>2]|0)+24>>2]&127](aa)|0;c[X>>2]=c[e>>2];c[Y>>2]=c[f>>2];aa=a[ba]|0;if((aa&1)==0){ha=ba+4|0;ia=(aa&255)>>>1;ja=ba+4|0}else{aa=c[ba+8>>2]|0;ha=aa;ia=c[ba+4>>2]|0;ja=aa}c[n+0>>2]=c[X+0>>2];c[m+0>>2]=c[Y+0>>2];rq(W,d,n,m,g,h,j,ja,ha+(ia<<2)|0);c[e>>2]=c[W>>2];break};case 116:case 110:{c[K>>2]=c[f>>2];c[m+0>>2]=c[K+0>>2];Bq(0,e,m,h,_);break};case 109:{c[t>>2]=c[f>>2];c[m+0>>2]=c[t+0>>2];aa=Dq(e,m,h,_,2)|0;ba=c[h>>2]|0;if((ba&4|0)==0&(aa|0)<13){c[j+16>>2]=aa+ -1;break a}else{c[h>>2]=ba|4;break a}break};case 68:{c[F>>2]=c[e>>2];c[G>>2]=c[f>>2];c[n+0>>2]=c[F+0>>2];c[m+0>>2]=c[G+0>>2];rq(E,d,n,m,g,h,j,21232,21264|0);c[e>>2]=c[E>>2];break};case 65:case 97:{ba=c[f>>2]|0;aa=d+8|0;$=Mg[c[c[aa>>2]>>2]&127](aa)|0;c[z>>2]=ba;c[m+0>>2]=c[z+0>>2];ba=(ep(e,m,$,$+168|0,_,h,0)|0)-$|0;if((ba|0)<168){c[j+24>>2]=((ba|0)/12|0|0)%7|0}break};case 83:{c[q>>2]=c[f>>2];c[m+0>>2]=c[q+0>>2];ba=Dq(e,m,h,_,2)|0;$=c[h>>2]|0;if(($&4|0)==0&(ba|0)<61){c[j>>2]=ba;break a}else{c[h>>2]=$|4;break a}break};case 121:{$=j+20|0;c[o>>2]=c[f>>2];c[m+0>>2]=c[o+0>>2];ba=Dq(e,m,h,_,4)|0;if((c[h>>2]&4|0)==0){if((ba|0)<69){ka=ba+2e3|0}else{ka=(ba+ -69|0)>>>0<31?ba+1900|0:ba}c[$>>2]=ka+ -1900}break};case 104:case 66:case 98:{$=c[f>>2]|0;ba=d+8|0;aa=Mg[c[(c[ba>>2]|0)+4>>2]&127](ba)|0;c[y>>2]=$;c[m+0>>2]=c[y+0>>2];$=(ep(e,m,aa,aa+288|0,_,h,0)|0)-aa|0;if(($|0)<288){c[j+16>>2]=(($|0)/12|0|0)%12|0}break};case 89:{c[n>>2]=c[f>>2];c[m+0>>2]=c[n+0>>2];$=Dq(e,m,h,_,4)|0;if((c[h>>2]&4|0)==0){c[j+20>>2]=$+ -1900}break};case 82:{c[P>>2]=c[e>>2];c[Q>>2]=c[f>>2];c[n+0>>2]=c[P+0>>2];c[m+0>>2]=c[Q+0>>2];rq(O,d,n,m,g,h,j,21344,21364|0);c[e>>2]=c[O>>2];break};case 114:{c[M>>2]=c[e>>2];c[N>>2]=c[f>>2];c[n+0>>2]=c[M+0>>2];c[m+0>>2]=c[N+0>>2];rq(L,d,n,m,g,h,j,21296,21340|0);c[e>>2]=c[L>>2];break};case 101:case 100:{$=j+12|0;c[x>>2]=c[f>>2];c[m+0>>2]=c[x+0>>2];aa=Dq(e,m,h,_,2)|0;ba=c[h>>2]|0;if((ba&4|0)==0?(aa+ -1|0)>>>0<31:0){c[$>>2]=aa;break a}c[h>>2]=ba|4;break};case 119:{c[p>>2]=c[f>>2];c[m+0>>2]=c[p+0>>2];ba=Dq(e,m,h,_,1)|0;aa=c[h>>2]|0;if((aa&4|0)==0&(ba|0)<7){c[j+24>>2]=ba;break a}else{c[h>>2]=aa|4;break a}break};case 84:{c[S>>2]=c[e>>2];c[T>>2]=c[f>>2];c[n+0>>2]=c[S+0>>2];c[m+0>>2]=c[T+0>>2];rq(R,d,n,m,g,h,j,21368,21400|0);c[e>>2]=c[R>>2];break};default:{c[h>>2]=c[h>>2]|4}}}while(0);c[b>>2]=c[e>>2];i=l;return}function Bq(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;a=i;a:while(1){g=c[b>>2]|0;do{if((g|0)!=0){h=c[g+12>>2]|0;if((h|0)==(c[g+16>>2]|0)){j=Mg[c[(c[g>>2]|0)+36>>2]&127](g)|0}else{j=c[h>>2]|0}if((j|0)==-1){c[b>>2]=0;k=1;break}else{k=(c[b>>2]|0)==0;break}}else{k=1}}while(0);g=c[d>>2]|0;do{if((g|0)!=0){h=c[g+12>>2]|0;if((h|0)==(c[g+16>>2]|0)){l=Mg[c[(c[g>>2]|0)+36>>2]&127](g)|0}else{l=c[h>>2]|0}if(!((l|0)==-1)){if(k){m=g;break}else{n=g;break a}}else{c[d>>2]=0;o=15;break}}else{o=15}}while(0);if((o|0)==15){o=0;if(k){n=0;break}else{m=0}}g=c[b>>2]|0;h=c[g+12>>2]|0;if((h|0)==(c[g+16>>2]|0)){p=Mg[c[(c[g>>2]|0)+36>>2]&127](g)|0}else{p=c[h>>2]|0}if(!(Sg[c[(c[f>>2]|0)+12>>2]&31](f,8192,p)|0)){n=m;break}h=c[b>>2]|0;g=h+12|0;q=c[g>>2]|0;if((q|0)==(c[h+16>>2]|0)){Mg[c[(c[h>>2]|0)+40>>2]&127](h)|0;continue}else{c[g>>2]=q+4;continue}}m=c[b>>2]|0;do{if((m|0)!=0){p=c[m+12>>2]|0;if((p|0)==(c[m+16>>2]|0)){r=Mg[c[(c[m>>2]|0)+36>>2]&127](m)|0}else{r=c[p>>2]|0}if((r|0)==-1){c[b>>2]=0;s=1;break}else{s=(c[b>>2]|0)==0;break}}else{s=1}}while(0);do{if((n|0)!=0){b=c[n+12>>2]|0;if((b|0)==(c[n+16>>2]|0)){t=Mg[c[(c[n>>2]|0)+36>>2]&127](n)|0}else{t=c[b>>2]|0}if((t|0)==-1){c[d>>2]=0;o=37;break}if(s){i=a;return}}else{o=37}}while(0);if((o|0)==37?!s:0){i=a;return}c[e>>2]=c[e>>2]|2;i=a;return}function Cq(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;a=i;g=c[b>>2]|0;do{if((g|0)!=0){h=c[g+12>>2]|0;if((h|0)==(c[g+16>>2]|0)){j=Mg[c[(c[g>>2]|0)+36>>2]&127](g)|0}else{j=c[h>>2]|0}if((j|0)==-1){c[b>>2]=0;k=1;break}else{k=(c[b>>2]|0)==0;break}}else{k=1}}while(0);j=c[d>>2]|0;do{if((j|0)!=0){g=c[j+12>>2]|0;if((g|0)==(c[j+16>>2]|0)){l=Mg[c[(c[j>>2]|0)+36>>2]&127](j)|0}else{l=c[g>>2]|0}if(!((l|0)==-1)){if(k){m=j;break}else{n=16;break}}else{c[d>>2]=0;n=14;break}}else{n=14}}while(0);if((n|0)==14){if(k){n=16}else{m=0}}if((n|0)==16){c[e>>2]=c[e>>2]|6;i=a;return}k=c[b>>2]|0;j=c[k+12>>2]|0;if((j|0)==(c[k+16>>2]|0)){o=Mg[c[(c[k>>2]|0)+36>>2]&127](k)|0}else{o=c[j>>2]|0}if(!((Sg[c[(c[f>>2]|0)+52>>2]&31](f,o,0)|0)<<24>>24==37)){c[e>>2]=c[e>>2]|4;i=a;return}o=c[b>>2]|0;f=o+12|0;j=c[f>>2]|0;if((j|0)==(c[o+16>>2]|0)){Mg[c[(c[o>>2]|0)+40>>2]&127](o)|0}else{c[f>>2]=j+4}j=c[b>>2]|0;do{if((j|0)!=0){f=c[j+12>>2]|0;if((f|0)==(c[j+16>>2]|0)){p=Mg[c[(c[j>>2]|0)+36>>2]&127](j)|0}else{p=c[f>>2]|0}if((p|0)==-1){c[b>>2]=0;q=1;break}else{q=(c[b>>2]|0)==0;break}}else{q=1}}while(0);do{if((m|0)!=0){b=c[m+12>>2]|0;if((b|0)==(c[m+16>>2]|0)){r=Mg[c[(c[m>>2]|0)+36>>2]&127](m)|0}else{r=c[b>>2]|0}if((r|0)==-1){c[d>>2]=0;n=38;break}if(q){i=a;return}}else{n=38}}while(0);if((n|0)==38?!q:0){i=a;return}c[e>>2]=c[e>>2]|2;i=a;return}function Dq(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;g=i;h=c[a>>2]|0;do{if((h|0)!=0){j=c[h+12>>2]|0;if((j|0)==(c[h+16>>2]|0)){k=Mg[c[(c[h>>2]|0)+36>>2]&127](h)|0}else{k=c[j>>2]|0}if((k|0)==-1){c[a>>2]=0;l=1;break}else{l=(c[a>>2]|0)==0;break}}else{l=1}}while(0);k=c[b>>2]|0;do{if((k|0)!=0){h=c[k+12>>2]|0;if((h|0)==(c[k+16>>2]|0)){m=Mg[c[(c[k>>2]|0)+36>>2]&127](k)|0}else{m=c[h>>2]|0}if(!((m|0)==-1)){if(l){n=k;break}else{o=16;break}}else{c[b>>2]=0;o=14;break}}else{o=14}}while(0);if((o|0)==14){if(l){o=16}else{n=0}}if((o|0)==16){c[d>>2]=c[d>>2]|6;p=0;i=g;return p|0}l=c[a>>2]|0;k=c[l+12>>2]|0;if((k|0)==(c[l+16>>2]|0)){q=Mg[c[(c[l>>2]|0)+36>>2]&127](l)|0}else{q=c[k>>2]|0}if(!(Sg[c[(c[e>>2]|0)+12>>2]&31](e,2048,q)|0)){c[d>>2]=c[d>>2]|4;p=0;i=g;return p|0}k=(Sg[c[(c[e>>2]|0)+52>>2]&31](e,q,0)|0)<<24>>24;q=c[a>>2]|0;l=q+12|0;m=c[l>>2]|0;if((m|0)==(c[q+16>>2]|0)){Mg[c[(c[q>>2]|0)+40>>2]&127](q)|0;r=f;s=n;t=n;u=k}else{c[l>>2]=m+4;r=f;s=n;t=n;u=k}while(1){v=u+ -48|0;k=r+ -1|0;n=c[a>>2]|0;do{if((n|0)!=0){f=c[n+12>>2]|0;if((f|0)==(c[n+16>>2]|0)){w=Mg[c[(c[n>>2]|0)+36>>2]&127](n)|0}else{w=c[f>>2]|0}if((w|0)==-1){c[a>>2]=0;x=1;break}else{x=(c[a>>2]|0)==0;break}}else{x=1}}while(0);do{if((t|0)!=0){n=c[t+12>>2]|0;if((n|0)==(c[t+16>>2]|0)){y=Mg[c[(c[t>>2]|0)+36>>2]&127](t)|0}else{y=c[n>>2]|0}if((y|0)==-1){c[b>>2]=0;z=0;A=0;B=1;break}else{z=s;A=s;B=(s|0)==0;break}}else{z=s;A=0;B=1}}while(0);C=c[a>>2]|0;if(!((x^B)&(k|0)>0)){break}n=c[C+12>>2]|0;if((n|0)==(c[C+16>>2]|0)){D=Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0}else{D=c[n>>2]|0}if(!(Sg[c[(c[e>>2]|0)+12>>2]&31](e,2048,D)|0)){p=v;o=63;break}n=((Sg[c[(c[e>>2]|0)+52>>2]&31](e,D,0)|0)<<24>>24)+(v*10|0)|0;f=c[a>>2]|0;m=f+12|0;l=c[m>>2]|0;if((l|0)==(c[f+16>>2]|0)){Mg[c[(c[f>>2]|0)+40>>2]&127](f)|0;r=k;s=z;t=A;u=n;continue}else{c[m>>2]=l+4;r=k;s=z;t=A;u=n;continue}}if((o|0)==63){i=g;return p|0}do{if((C|0)!=0){u=c[C+12>>2]|0;if((u|0)==(c[C+16>>2]|0)){E=Mg[c[(c[C>>2]|0)+36>>2]&127](C)|0}else{E=c[u>>2]|0}if((E|0)==-1){c[a>>2]=0;F=1;break}else{F=(c[a>>2]|0)==0;break}}else{F=1}}while(0);do{if((z|0)!=0){a=c[z+12>>2]|0;if((a|0)==(c[z+16>>2]|0)){G=Mg[c[(c[z>>2]|0)+36>>2]&127](z)|0}else{G=c[a>>2]|0}if((G|0)==-1){c[b>>2]=0;o=60;break}if(F){p=v;i=g;return p|0}}else{o=60}}while(0);if((o|0)==60?!F:0){p=v;i=g;return p|0}c[d>>2]=c[d>>2]|2;p=v;i=g;return p|0}function Eq(b){b=b|0;var d=0,e=0,f=0;d=i;e=b+8|0;f=c[e>>2]|0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}if((f|0)==(c[5508]|0)){vv(b);i=d;return}Tc(c[e>>2]|0);vv(b);i=d;return}function Fq(b){b=b|0;var d=0,e=0;d=i;e=b+8|0;b=c[e>>2]|0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}if((b|0)==(c[5508]|0)){i=d;return}Tc(c[e>>2]|0);i=d;return}function Gq(b,d,e,f,g,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;g=i;i=i+112|0;f=g+100|0;l=g;a[f]=37;m=f+1|0;a[m]=j;n=f+2|0;a[n]=k;a[f+3|0]=0;if(!(k<<24>>24==0)){a[m]=k;a[n]=j}j=Ta(l|0,100,f|0,h|0,c[d+8>>2]|0)|0;d=l+j|0;h=c[e>>2]|0;if((j|0)==0){o=h;c[b>>2]=o;i=g;return}else{p=l;q=h;r=h}while(1){h=a[p]|0;do{if((q|0)!=0){l=q+24|0;j=c[l>>2]|0;if((j|0)==(c[q+28>>2]|0)){e=(ch[c[(c[q>>2]|0)+52>>2]&31](q,h&255)|0)==-1;s=e?0:r;t=e?0:q;break}else{c[l>>2]=j+1;a[j]=h;s=r;t=q;break}}else{s=r;t=0}}while(0);h=p+1|0;if((h|0)==(d|0)){o=s;break}else{p=h;q=t;r=s}}c[b>>2]=o;i=g;return}function Hq(b){b=b|0;var d=0,e=0,f=0;d=i;e=b+8|0;f=c[e>>2]|0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}if((f|0)==(c[5508]|0)){vv(b);i=d;return}Tc(c[e>>2]|0);vv(b);i=d;return}function Iq(b){b=b|0;var d=0,e=0;d=i;e=b+8|0;b=c[e>>2]|0;if((a[22040]|0)==0?(ab(22040)|0)!=0:0){c[5508]=Zc(2147483647,22048,0)|0;Bc(22040)}if((b|0)==(c[5508]|0)){i=d;return}Tc(c[e>>2]|0);i=d;return}function Jq(a,b,d,e,f,g,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;f=i;i=i+416|0;e=f+8|0;k=f;c[k>>2]=e+400;Kq(b+8|0,e,k,g,h,j);j=c[k>>2]|0;k=c[d>>2]|0;if((e|0)==(j|0)){l=k;c[a>>2]=l;i=f;return}else{m=e;n=k;o=k}while(1){k=c[m>>2]|0;if((o|0)==0){p=n;q=0}else{e=o+24|0;d=c[e>>2]|0;if((d|0)==(c[o+28>>2]|0)){r=ch[c[(c[o>>2]|0)+52>>2]&31](o,k)|0}else{c[e>>2]=d+4;c[d>>2]=k;r=k}k=(r|0)==-1;p=k?0:n;q=k?0:o}k=m+4|0;if((k|0)==(j|0)){l=p;break}else{m=k;n=p;o=q}}c[a>>2]=l;i=f;return}function Kq(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0;j=i;i=i+128|0;k=j+112|0;l=j+12|0;m=j;n=j+8|0;a[k]=37;o=k+1|0;a[o]=g;p=k+2|0;a[p]=h;a[k+3|0]=0;if(!(h<<24>>24==0)){a[o]=h;a[p]=g}Ta(l|0,100,k|0,f|0,c[b>>2]|0)|0;f=m;c[f>>2]=0;c[f+4>>2]=0;c[n>>2]=l;l=(c[e>>2]|0)-d>>2;f=nc(c[b>>2]|0)|0;b=Du(d,n,l,m)|0;if((f|0)!=0){nc(f|0)|0}if((b|0)==-1){Gr(23024)}else{c[e>>2]=d+(b<<2);i=j;return}}function Lq(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function Mq(a){a=a|0;return}function Nq(a){a=a|0;return 127}function Oq(a){a=a|0;return 127}function Pq(a,b){a=a|0;b=b|0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;i=b;return}function Qq(a,b){a=a|0;b=b|0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;i=b;return}function Rq(a,b){a=a|0;b=b|0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;i=b;return}function Sq(a,b){a=a|0;b=b|0;b=i;Qm(a,1,45);i=b;return}function Tq(a){a=a|0;return 0}function Uq(b,c){b=b|0;c=c|0;a[b]=67109634;a[b+1|0]=262147;a[b+2|0]=1024;a[b+3|0]=4;return}function Vq(b,c){b=b|0;c=c|0;a[b]=67109634;a[b+1|0]=262147;a[b+2|0]=1024;a[b+3|0]=4;return}function Wq(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function Xq(a){a=a|0;return}function Yq(a){a=a|0;return 127}function Zq(a){a=a|0;return 127}function _q(a,b){a=a|0;b=b|0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;i=b;return}function $q(a,b){a=a|0;b=b|0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;i=b;return}function ar(a,b){a=a|0;b=b|0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;i=b;return}function br(a,b){a=a|0;b=b|0;b=i;Qm(a,1,45);i=b;return}function cr(a){a=a|0;return 0}function dr(b,c){b=b|0;c=c|0;a[b]=67109634;a[b+1|0]=262147;a[b+2|0]=1024;a[b+3|0]=4;return}function er(b,c){b=b|0;c=c|0;a[b]=67109634;a[b+1|0]=262147;a[b+2|0]=1024;a[b+3|0]=4;return}function fr(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function gr(a){a=a|0;return}function hr(a){a=a|0;return 2147483647}function ir(a){a=a|0;return 2147483647}function jr(a,b){a=a|0;b=b|0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;i=b;return}function kr(a,b){a=a|0;b=b|0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;i=b;return}function lr(a,b){a=a|0;b=b|0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;i=b;return}function mr(a,b){a=a|0;b=b|0;b=i;an(a,1,45);i=b;return}function nr(a){a=a|0;return 0}function or(b,c){b=b|0;c=c|0;a[b]=67109634;a[b+1|0]=262147;a[b+2|0]=1024;a[b+3|0]=4;return}function pr(b,c){b=b|0;c=c|0;a[b]=67109634;a[b+1|0]=262147;a[b+2|0]=1024;a[b+3|0]=4;return}function qr(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function rr(a){a=a|0;return}function sr(a){a=a|0;return 2147483647}function tr(a){a=a|0;return 2147483647}function ur(a,b){a=a|0;b=b|0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;i=b;return}function vr(a,b){a=a|0;b=b|0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;i=b;return}function wr(a,b){a=a|0;b=b|0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;i=b;return}function xr(a,b){a=a|0;b=b|0;b=i;an(a,1,45);i=b;return}function yr(a){a=a|0;return 0}function zr(b,c){b=b|0;c=c|0;a[b]=67109634;a[b+1|0]=262147;a[b+2|0]=1024;a[b+3|0]=4;return}function Ar(b,c){b=b|0;c=c|0;a[b]=67109634;a[b+1|0]=262147;a[b+2|0]=1024;a[b+3|0]=4;return}function Br(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function Cr(a){a=a|0;return}function Dr(b,d,e,f,g,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;d=i;i=i+256|0;l=d;m=d+32|0;n=d+24|0;o=d+16|0;p=d+12|0;q=d+244|0;r=d+20|0;s=d+132|0;t=d+144|0;c[n>>2]=m;u=n+4|0;c[u>>2]=167;v=m+100|0;ln(p,h);m=c[p>>2]|0;if(!((c[5536]|0)==-1)){c[l>>2]=22144;c[l+4>>2]=165;c[l+8>>2]=0;Mm(22144,l,166)}w=(c[22148>>2]|0)+ -1|0;x=c[m+8>>2]|0;if(!((c[m+12>>2]|0)-x>>2>>>0>w>>>0)){y=Wd(4)|0;Tu(y);qg(y|0,30104,152)}m=c[x+(w<<2)>>2]|0;if((m|0)==0){y=Wd(4)|0;Tu(y);qg(y|0,30104,152)}a[q]=0;c[r>>2]=c[f>>2];y=c[h+4>>2]|0;c[l+0>>2]=c[r+0>>2];if(Fr(e,l,g,p,y,j,q,m,n,o,v)|0){fh[c[(c[m>>2]|0)+32>>2]&15](m,21760,21770|0,s)|0;m=c[o>>2]|0;v=c[n>>2]|0;y=m-v|0;if((y|0)>98){g=nv(y+2|0)|0;if((g|0)==0){Av()}else{z=g;A=g}}else{z=0;A=t}if((a[q]|0)==0){B=A}else{a[A]=45;B=A+1|0}if(v>>>0<m>>>0){m=s+10|0;A=s;q=B;g=v;while(1){v=a[g]|0;y=s;while(1){r=y+1|0;if((a[y]|0)==v<<24>>24){C=y;break}if((r|0)==(m|0)){C=m;break}else{y=r}}a[q]=a[21760+(C-A)|0]|0;y=g+1|0;v=q+1|0;if(y>>>0<(c[o>>2]|0)>>>0){q=v;g=y}else{D=v;break}}}else{D=B}a[D]=0;c[l>>2]=k;if((Ff(t|0,21776,l|0)|0)!=1){l=Wd(8)|0;ym(l,21784);qg(l|0,19072,70)}if((z|0)!=0){ov(z)}}z=c[e>>2]|0;if((z|0)!=0){if((c[z+12>>2]|0)==(c[z+16>>2]|0)?(Mg[c[(c[z>>2]|0)+36>>2]&127](z)|0)==-1:0){c[e>>2]=0;E=0}else{E=z}}else{E=0}z=(E|0)==0;e=c[f>>2]|0;do{if((e|0)!=0){if((c[e+12>>2]|0)!=(c[e+16>>2]|0)){if(z){break}else{F=33;break}}if(!((Mg[c[(c[e>>2]|0)+36>>2]&127](e)|0)==-1)){if(z){break}else{F=33;break}}else{c[f>>2]=0;F=31;break}}else{F=31}}while(0);if((F|0)==31?z:0){F=33}if((F|0)==33){c[j>>2]=c[j>>2]|2}c[b>>2]=E;sm(c[p>>2]|0)|0;p=c[n>>2]|0;c[n>>2]=0;if((p|0)==0){i=d;return}Kg[c[u>>2]&255](p);i=d;return}function Er(a){a=a|0;return}



function _i(d,e,f,h,j){d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0.0,D=0.0,E=0,F=0;k=i;l=c[f>>2]|0;if((l|0)==0){m=0;i=k;return m|0}n=c[f+4>>2]|0;if((n|0)==0){m=0;i=k;return m|0}o=c[e+12>>2]|0;if((n-l>>6|0)<(o|0)){m=0;i=k;return m|0}l=c[f>>2]|0;f=c[d+20>>2]|0;n=c[d+16>>2]|0;p=c[e>>2]|0;if((o|0)>0&(n|0)>0){e=0;q=0;while(1){r=p+(e<<1)|0;s=b[r>>1]&1023;if(!(s<<16>>16==1023)){t=s&65535;s=q<<4;g[f+(s<<2)>>2]=+g[l+(t<<6)>>2];g[f+((s|1)<<2)>>2]=+g[l+(t<<6)+4>>2];g[f+((s|2)<<2)>>2]=+g[l+(t<<6)+8>>2];u=f+((s|3)<<2)|0;g[u>>2]=+g[l+(t<<6)+12>>2];g[f+((s|4)<<2)>>2]=+g[l+(t<<6)+16>>2];g[f+((s|5)<<2)>>2]=+g[l+(t<<6)+20>>2];g[f+((s|6)<<2)>>2]=+g[l+(t<<6)+24>>2];v=f+((s|7)<<2)|0;g[v>>2]=+g[l+(t<<6)+28>>2];g[f+((s|8)<<2)>>2]=+g[l+(t<<6)+32>>2];g[f+((s|9)<<2)>>2]=+g[l+(t<<6)+36>>2];g[f+((s|10)<<2)>>2]=+g[l+(t<<6)+40>>2];w=f+((s|11)<<2)|0;g[w>>2]=+g[l+(t<<6)+44>>2];x=l+(t<<6)+48|0;g[f+((s|12)<<2)>>2]=+g[x>>2];y=l+(t<<6)+52|0;g[f+((s|13)<<2)>>2]=+g[y>>2];z=l+(t<<6)+56|0;g[f+((s|14)<<2)>>2]=+g[z>>2];A=f+((s|15)<<2)|0;g[A>>2]=+g[l+(t<<6)+60>>2];t=l+(e<<6)+48|0;B=+g[t>>2]- +g[x>>2];x=l+(e<<6)+52|0;C=+g[x>>2]- +g[y>>2];y=l+(e<<6)+56|0;D=+g[y>>2]- +g[z>>2];g[u>>2]=B;g[v>>2]=C;g[w>>2]=D;g[A>>2]=1.0;A=q+1|0;if((b[r>>1]&1024)==0){E=A}else{r=A<<4;g[f+(r<<2)>>2]=+g[l+(e<<6)>>2];g[f+((r|1)<<2)>>2]=+g[l+(e<<6)+4>>2];g[f+((r|2)<<2)>>2]=+g[l+(e<<6)+8>>2];A=f+((r|3)<<2)|0;g[A>>2]=+g[l+(e<<6)+12>>2];g[f+((r|4)<<2)>>2]=+g[l+(e<<6)+16>>2];g[f+((r|5)<<2)>>2]=+g[l+(e<<6)+20>>2];g[f+((r|6)<<2)>>2]=+g[l+(e<<6)+24>>2];w=f+((r|7)<<2)|0;g[w>>2]=+g[l+(e<<6)+28>>2];g[f+((r|8)<<2)>>2]=+g[l+(e<<6)+32>>2];g[f+((r|9)<<2)>>2]=+g[l+(e<<6)+36>>2];g[f+((r|10)<<2)>>2]=+g[l+(e<<6)+40>>2];v=f+((r|11)<<2)|0;g[v>>2]=+g[l+(e<<6)+44>>2];g[f+((r|12)<<2)>>2]=+g[t>>2];g[f+((r|13)<<2)>>2]=+g[x>>2];g[f+((r|14)<<2)>>2]=+g[y>>2];g[A>>2]=B;g[w>>2]=C;g[v>>2]=D;g[f+((r|15)<<2)>>2]=0.0;E=q+2|0}}else{E=q}r=e+1|0;if((r|0)<(o|0)&(E|0)<(n|0)){e=r;q=E}else{F=E;break}}}else{F=0}if((a[3944]|0)==0){Yi(d,h,F,j);m=1;i=k;return m|0}else{Zi(d,h,F,j);m=1;i=k;return m|0}return 0}function $i(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0.0,v=0,w=0.0,x=0,y=0.0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0;h=i;i=i+80|0;j=h;k=b+64|0;b=c[k>>2]|0;l=j+0|0;m=e+0|0;n=l+64|0;do{c[l>>2]=c[m>>2];l=l+4|0;m=m+4|0}while((l|0)<(n|0));o=j+64|0;c[o>>2]=b;b=j+68|0;c[b>>2]=5;p=a[f]|0;q=a[f+1|0]|0;r=a[f+2|0]|0;s=a[f+3|0]|0;t=d+12|0;u=+g[t>>2];v=d+4|0;w=+g[v>>2];x=d+8|0;y=+g[x>>2];z=c[o>>2]|0;A=z+12|0;B=c[A>>2]|0;C=B+16|0;D=z+8|0;E=c[D>>2]|0;if(C>>>0>E>>>0){c[D>>2]=E<<1;E=Hl()|0;F=z+4|0;G=fh[c[(c[E>>2]|0)+16>>2]&15](E,c[F>>2]|0,c[D>>2]|0,1)|0;c[F>>2]=G;H=G;I=c[A>>2]|0}else{H=c[z+4>>2]|0;I=B}g[H+I>>2]=u;g[H+(I+4)>>2]=w;g[H+(I+8)>>2]=y;a[H+(I+12)|0]=p;a[H+(I+13)|0]=q;a[H+(I+14)|0]=r;a[H+(I+15)|0]=s;c[A>>2]=C;u=+g[d>>2];C=c[o>>2]|0;A=C+12|0;I=c[A>>2]|0;H=I+16|0;B=C+8|0;z=c[B>>2]|0;if(H>>>0>z>>>0){c[B>>2]=z<<1;z=Hl()|0;G=C+4|0;F=fh[c[(c[z>>2]|0)+16>>2]&15](z,c[G>>2]|0,c[B>>2]|0,1)|0;c[G>>2]=F;J=F;K=c[A>>2]|0}else{J=c[C+4>>2]|0;K=I}g[J+K>>2]=u;g[J+(K+4)>>2]=w;g[J+(K+8)>>2]=y;a[J+(K+12)|0]=p;a[J+(K+13)|0]=q;a[J+(K+14)|0]=r;a[J+(K+15)|0]=s;c[A>>2]=H;w=+g[t>>2];H=d+16|0;u=+g[H>>2];A=c[o>>2]|0;K=A+12|0;J=c[K>>2]|0;I=J+16|0;C=A+8|0;F=c[C>>2]|0;if(I>>>0>F>>>0){c[C>>2]=F<<1;F=Hl()|0;G=A+4|0;B=fh[c[(c[F>>2]|0)+16>>2]&15](F,c[G>>2]|0,c[C>>2]|0,1)|0;c[G>>2]=B;L=B;M=c[K>>2]|0}else{L=c[A+4>>2]|0;M=J}g[L+M>>2]=w;g[L+(M+4)>>2]=u;g[L+(M+8)>>2]=y;a[L+(M+12)|0]=p;a[L+(M+13)|0]=q;a[L+(M+14)|0]=r;a[L+(M+15)|0]=s;c[K>>2]=I;w=+g[d>>2];I=c[o>>2]|0;K=I+12|0;M=c[K>>2]|0;L=M+16|0;J=I+8|0;A=c[J>>2]|0;if(L>>>0>A>>>0){c[J>>2]=A<<1;A=Hl()|0;B=I+4|0;G=fh[c[(c[A>>2]|0)+16>>2]&15](A,c[B>>2]|0,c[J>>2]|0,1)|0;c[B>>2]=G;N=G;O=c[K>>2]|0}else{N=c[I+4>>2]|0;O=M}g[N+O>>2]=w;g[N+(O+4)>>2]=u;g[N+(O+8)>>2]=y;a[N+(O+12)|0]=p;a[N+(O+13)|0]=q;a[N+(O+14)|0]=r;a[N+(O+15)|0]=s;c[K>>2]=L;y=+g[t>>2];L=d+20|0;w=+g[L>>2];K=c[o>>2]|0;O=K+12|0;N=c[O>>2]|0;M=N+16|0;I=K+8|0;G=c[I>>2]|0;if(M>>>0>G>>>0){c[I>>2]=G<<1;G=Hl()|0;B=K+4|0;J=fh[c[(c[G>>2]|0)+16>>2]&15](G,c[B>>2]|0,c[I>>2]|0,1)|0;c[B>>2]=J;P=J;Q=c[O>>2]|0}else{P=c[K+4>>2]|0;Q=N}g[P+Q>>2]=y;g[P+(Q+4)>>2]=u;g[P+(Q+8)>>2]=w;a[P+(Q+12)|0]=p;a[P+(Q+13)|0]=q;a[P+(Q+14)|0]=r;a[P+(Q+15)|0]=s;c[O>>2]=M;y=+g[d>>2];M=c[o>>2]|0;O=M+12|0;Q=c[O>>2]|0;P=Q+16|0;N=M+8|0;K=c[N>>2]|0;if(P>>>0>K>>>0){c[N>>2]=K<<1;K=Hl()|0;J=M+4|0;B=fh[c[(c[K>>2]|0)+16>>2]&15](K,c[J>>2]|0,c[N>>2]|0,1)|0;c[J>>2]=B;R=B;S=c[O>>2]|0}else{R=c[M+4>>2]|0;S=Q}g[R+S>>2]=y;g[R+(S+4)>>2]=u;g[R+(S+8)>>2]=w;a[R+(S+12)|0]=p;a[R+(S+13)|0]=q;a[R+(S+14)|0]=r;a[R+(S+15)|0]=s;c[O>>2]=P;u=+g[t>>2];y=+g[v>>2];P=c[o>>2]|0;O=P+12|0;S=c[O>>2]|0;R=S+16|0;Q=P+8|0;M=c[Q>>2]|0;if(R>>>0>M>>>0){c[Q>>2]=M<<1;M=Hl()|0;B=P+4|0;J=fh[c[(c[M>>2]|0)+16>>2]&15](M,c[B>>2]|0,c[Q>>2]|0,1)|0;c[B>>2]=J;T=J;U=c[O>>2]|0}else{T=c[P+4>>2]|0;U=S}g[T+U>>2]=u;g[T+(U+4)>>2]=y;g[T+(U+8)>>2]=w;a[T+(U+12)|0]=p;a[T+(U+13)|0]=q;a[T+(U+14)|0]=r;a[T+(U+15)|0]=s;c[O>>2]=R;u=+g[d>>2];R=c[o>>2]|0;O=R+12|0;U=c[O>>2]|0;T=U+16|0;S=R+8|0;P=c[S>>2]|0;if(T>>>0>P>>>0){c[S>>2]=P<<1;P=Hl()|0;J=R+4|0;B=fh[c[(c[P>>2]|0)+16>>2]&15](P,c[J>>2]|0,c[S>>2]|0,1)|0;c[J>>2]=B;V=B;W=c[O>>2]|0}else{V=c[R+4>>2]|0;W=U}g[V+W>>2]=u;g[V+(W+4)>>2]=y;g[V+(W+8)>>2]=w;a[V+(W+12)|0]=p;a[V+(W+13)|0]=q;a[V+(W+14)|0]=r;a[V+(W+15)|0]=s;c[O>>2]=T;T=c[o>>2]|0;O=T+12|0;W=c[O>>2]|0;V=W+16|0;U=T+8|0;R=c[U>>2]|0;if(V>>>0>R>>>0){c[U>>2]=R<<1;R=Hl()|0;B=T+4|0;J=fh[c[(c[R>>2]|0)+16>>2]&15](R,c[B>>2]|0,c[U>>2]|0,1)|0;c[B>>2]=J;X=J;Y=c[O>>2]|0}else{X=c[T+4>>2]|0;Y=W}g[X+Y>>2]=u;g[X+(Y+4)>>2]=y;g[X+(Y+8)>>2]=w;a[X+(Y+12)|0]=p;a[X+(Y+13)|0]=q;a[X+(Y+14)|0]=r;a[X+(Y+15)|0]=s;c[O>>2]=V;y=+g[d>>2];u=+g[H>>2];V=c[o>>2]|0;O=V+12|0;Y=c[O>>2]|0;X=Y+16|0;W=V+8|0;T=c[W>>2]|0;if(X>>>0>T>>>0){c[W>>2]=T<<1;T=Hl()|0;J=V+4|0;B=fh[c[(c[T>>2]|0)+16>>2]&15](T,c[J>>2]|0,c[W>>2]|0,1)|0;c[J>>2]=B;Z=B;_=c[O>>2]|0}else{Z=c[V+4>>2]|0;_=Y}g[Z+_>>2]=y;g[Z+(_+4)>>2]=u;g[Z+(_+8)>>2]=w;a[Z+(_+12)|0]=p;a[Z+(_+13)|0]=q;a[Z+(_+14)|0]=r;a[Z+(_+15)|0]=s;c[O>>2]=X;X=c[o>>2]|0;O=X+12|0;_=c[O>>2]|0;Z=_+16|0;Y=X+8|0;V=c[Y>>2]|0;if(Z>>>0>V>>>0){c[Y>>2]=V<<1;V=Hl()|0;B=X+4|0;J=fh[c[(c[V>>2]|0)+16>>2]&15](V,c[B>>2]|0,c[Y>>2]|0,1)|0;c[B>>2]=J;$=J;aa=c[O>>2]|0}else{$=c[X+4>>2]|0;aa=_}g[$+aa>>2]=y;g[$+(aa+4)>>2]=u;g[$+(aa+8)>>2]=w;a[$+(aa+12)|0]=p;a[$+(aa+13)|0]=q;a[$+(aa+14)|0]=r;a[$+(aa+15)|0]=s;c[O>>2]=Z;w=+g[x>>2];Z=c[o>>2]|0;O=Z+12|0;aa=c[O>>2]|0;$=aa+16|0;_=Z+8|0;X=c[_>>2]|0;if($>>>0>X>>>0){c[_>>2]=X<<1;X=Hl()|0;J=Z+4|0;B=fh[c[(c[X>>2]|0)+16>>2]&15](X,c[J>>2]|0,c[_>>2]|0,1)|0;c[J>>2]=B;ba=B;ca=c[O>>2]|0}else{ba=c[Z+4>>2]|0;ca=aa}g[ba+ca>>2]=y;g[ba+(ca+4)>>2]=u;g[ba+(ca+8)>>2]=w;a[ba+(ca+12)|0]=p;a[ba+(ca+13)|0]=q;a[ba+(ca+14)|0]=r;a[ba+(ca+15)|0]=s;c[O>>2]=$;w=+g[v>>2];u=+g[L>>2];$=c[o>>2]|0;O=$+12|0;ca=c[O>>2]|0;ba=ca+16|0;aa=$+8|0;Z=c[aa>>2]|0;if(ba>>>0>Z>>>0){c[aa>>2]=Z<<1;Z=Hl()|0;B=$+4|0;J=fh[c[(c[Z>>2]|0)+16>>2]&15](Z,c[B>>2]|0,c[aa>>2]|0,1)|0;c[B>>2]=J;da=J;ea=c[O>>2]|0}else{da=c[$+4>>2]|0;ea=ca}g[da+ea>>2]=y;g[da+(ea+4)>>2]=w;g[da+(ea+8)>>2]=u;a[da+(ea+12)|0]=p;a[da+(ea+13)|0]=q;a[da+(ea+14)|0]=r;a[da+(ea+15)|0]=s;c[O>>2]=ba;u=+g[x>>2];ba=c[o>>2]|0;O=ba+12|0;ea=c[O>>2]|0;da=ea+16|0;ca=ba+8|0;$=c[ca>>2]|0;if(da>>>0>$>>>0){c[ca>>2]=$<<1;$=Hl()|0;J=ba+4|0;B=fh[c[(c[$>>2]|0)+16>>2]&15]($,c[J>>2]|0,c[ca>>2]|0,1)|0;c[J>>2]=B;fa=B;ga=c[O>>2]|0}else{fa=c[ba+4>>2]|0;ga=ea}g[fa+ga>>2]=y;g[fa+(ga+4)>>2]=w;g[fa+(ga+8)>>2]=u;a[fa+(ga+12)|0]=p;a[fa+(ga+13)|0]=q;a[fa+(ga+14)|0]=r;a[fa+(ga+15)|0]=s;c[O>>2]=da;u=+g[t>>2];y=+g[L>>2];da=c[o>>2]|0;O=da+12|0;ga=c[O>>2]|0;fa=ga+16|0;ea=da+8|0;ba=c[ea>>2]|0;if(fa>>>0>ba>>>0){c[ea>>2]=ba<<1;ba=Hl()|0;B=da+4|0;J=fh[c[(c[ba>>2]|0)+16>>2]&15](ba,c[B>>2]|0,c[ea>>2]|0,1)|0;c[B>>2]=J;ha=J;ia=c[O>>2]|0}else{ha=c[da+4>>2]|0;ia=ga}g[ha+ia>>2]=u;g[ha+(ia+4)>>2]=w;g[ha+(ia+8)>>2]=y;a[ha+(ia+12)|0]=p;a[ha+(ia+13)|0]=q;a[ha+(ia+14)|0]=r;a[ha+(ia+15)|0]=s;c[O>>2]=fa;y=+g[x>>2];fa=c[o>>2]|0;O=fa+12|0;ia=c[O>>2]|0;ha=ia+16|0;ga=fa+8|0;da=c[ga>>2]|0;if(ha>>>0>da>>>0){c[ga>>2]=da<<1;da=Hl()|0;J=fa+4|0;B=fh[c[(c[da>>2]|0)+16>>2]&15](da,c[J>>2]|0,c[ga>>2]|0,1)|0;c[J>>2]=B;ja=B;ka=c[O>>2]|0}else{ja=c[fa+4>>2]|0;ka=ia}g[ja+ka>>2]=u;g[ja+(ka+4)>>2]=w;g[ja+(ka+8)>>2]=y;a[ja+(ka+12)|0]=p;a[ja+(ka+13)|0]=q;a[ja+(ka+14)|0]=r;a[ja+(ka+15)|0]=s;c[O>>2]=ha;y=+g[H>>2];w=+g[L>>2];ha=c[o>>2]|0;O=ha+12|0;ka=c[O>>2]|0;ja=ka+16|0;ia=ha+8|0;fa=c[ia>>2]|0;if(ja>>>0>fa>>>0){c[ia>>2]=fa<<1;fa=Hl()|0;B=ha+4|0;J=fh[c[(c[fa>>2]|0)+16>>2]&15](fa,c[B>>2]|0,c[ia>>2]|0,1)|0;c[B>>2]=J;la=J;ma=c[O>>2]|0}else{la=c[ha+4>>2]|0;ma=ka}g[la+ma>>2]=u;g[la+(ma+4)>>2]=y;g[la+(ma+8)>>2]=w;a[la+(ma+12)|0]=p;a[la+(ma+13)|0]=q;a[la+(ma+14)|0]=r;a[la+(ma+15)|0]=s;c[O>>2]=ja;w=+g[x>>2];ja=c[o>>2]|0;O=ja+12|0;ma=c[O>>2]|0;la=ma+16|0;ka=ja+8|0;ha=c[ka>>2]|0;if(la>>>0>ha>>>0){c[ka>>2]=ha<<1;ha=Hl()|0;J=ja+4|0;B=fh[c[(c[ha>>2]|0)+16>>2]&15](ha,c[J>>2]|0,c[ka>>2]|0,1)|0;c[J>>2]=B;na=B;oa=c[O>>2]|0}else{na=c[ja+4>>2]|0;oa=ma}g[na+oa>>2]=u;g[na+(oa+4)>>2]=y;g[na+(oa+8)>>2]=w;a[na+(oa+12)|0]=p;a[na+(oa+13)|0]=q;a[na+(oa+14)|0]=r;a[na+(oa+15)|0]=s;c[O>>2]=la;Ni(c[o>>2]|0,c[b>>2]|0,j);b=c[k>>2]|0;l=j+0|0;m=e+0|0;n=l+64|0;do{c[l>>2]=c[m>>2];l=l+4|0;m=m+4|0}while((l|0)<(n|0));m=j+64|0;c[m>>2]=b;b=j+68|0;c[b>>2]=1;l=a[f+4|0]|0;n=a[f+5|0]|0;e=a[f+6|0]|0;k=a[f+7|0]|0;w=+g[d>>2];y=+g[v>>2];u=+g[x>>2];f=c[m>>2]|0;o=f+12|0;la=c[o>>2]|0;O=la+16|0;s=f+8|0;oa=c[s>>2]|0;if(O>>>0>oa>>>0){c[s>>2]=oa<<1;oa=Hl()|0;na=f+4|0;r=fh[c[(c[oa>>2]|0)+16>>2]&15](oa,c[na>>2]|0,c[s>>2]|0,1)|0;c[na>>2]=r;pa=r;qa=c[o>>2]|0}else{pa=c[f+4>>2]|0;qa=la}g[pa+qa>>2]=w;g[pa+(qa+4)>>2]=y;g[pa+(qa+8)>>2]=u;a[pa+(qa+12)|0]=l;a[pa+(qa+13)|0]=n;a[pa+(qa+14)|0]=e;a[pa+(qa+15)|0]=k;c[o>>2]=O;y=+g[H>>2];O=c[m>>2]|0;o=O+12|0;qa=c[o>>2]|0;pa=qa+16|0;la=O+8|0;f=c[la>>2]|0;if(pa>>>0>f>>>0){c[la>>2]=f<<1;f=Hl()|0;r=O+4|0;na=fh[c[(c[f>>2]|0)+16>>2]&15](f,c[r>>2]|0,c[la>>2]|0,1)|0;c[r>>2]=na;ra=na;sa=c[o>>2]|0}else{ra=c[O+4>>2]|0;sa=qa}g[ra+sa>>2]=w;g[ra+(sa+4)>>2]=y;g[ra+(sa+8)>>2]=u;a[ra+(sa+12)|0]=l;a[ra+(sa+13)|0]=n;a[ra+(sa+14)|0]=e;a[ra+(sa+15)|0]=k;c[o>>2]=pa;pa=c[m>>2]|0;o=pa+12|0;sa=c[o>>2]|0;ra=sa+16|0;qa=pa+8|0;O=c[qa>>2]|0;if(ra>>>0>O>>>0){c[qa>>2]=O<<1;O=Hl()|0;na=pa+4|0;r=fh[c[(c[O>>2]|0)+16>>2]&15](O,c[na>>2]|0,c[qa>>2]|0,1)|0;c[na>>2]=r;ta=r;ua=c[o>>2]|0}else{ta=c[pa+4>>2]|0;ua=sa}g[ta+ua>>2]=w;g[ta+(ua+4)>>2]=y;g[ta+(ua+8)>>2]=u;a[ta+(ua+12)|0]=l;a[ta+(ua+13)|0]=n;a[ta+(ua+14)|0]=e;a[ta+(ua+15)|0]=k;c[o>>2]=ra;w=+g[t>>2];ra=c[m>>2]|0;o=ra+12|0;ua=c[o>>2]|0;ta=ua+16|0;sa=ra+8|0;pa=c[sa>>2]|0;if(ta>>>0>pa>>>0){c[sa>>2]=pa<<1;pa=Hl()|0;r=ra+4|0;na=fh[c[(c[pa>>2]|0)+16>>2]&15](pa,c[r>>2]|0,c[sa>>2]|0,1)|0;c[r>>2]=na;va=na;wa=c[o>>2]|0}else{va=c[ra+4>>2]|0;wa=ua}g[va+wa>>2]=w;g[va+(wa+4)>>2]=y;g[va+(wa+8)>>2]=u;a[va+(wa+12)|0]=l;a[va+(wa+13)|0]=n;a[va+(wa+14)|0]=e;a[va+(wa+15)|0]=k;c[o>>2]=ta;ta=c[m>>2]|0;o=ta+12|0;wa=c[o>>2]|0;va=wa+16|0;ua=ta+8|0;ra=c[ua>>2]|0;if(va>>>0>ra>>>0){c[ua>>2]=ra<<1;ra=Hl()|0;na=ta+4|0;r=fh[c[(c[ra>>2]|0)+16>>2]&15](ra,c[na>>2]|0,c[ua>>2]|0,1)|0;c[na>>2]=r;xa=r;ya=c[o>>2]|0}else{xa=c[ta+4>>2]|0;ya=wa}g[xa+ya>>2]=w;g[xa+(ya+4)>>2]=y;g[xa+(ya+8)>>2]=u;a[xa+(ya+12)|0]=l;a[xa+(ya+13)|0]=n;a[xa+(ya+14)|0]=e;a[xa+(ya+15)|0]=k;c[o>>2]=va;y=+g[v>>2];va=c[m>>2]|0;o=va+12|0;ya=c[o>>2]|0;xa=ya+16|0;wa=va+8|0;ta=c[wa>>2]|0;if(xa>>>0>ta>>>0){c[wa>>2]=ta<<1;ta=Hl()|0;r=va+4|0;na=fh[c[(c[ta>>2]|0)+16>>2]&15](ta,c[r>>2]|0,c[wa>>2]|0,1)|0;c[r>>2]=na;za=na;Aa=c[o>>2]|0}else{za=c[va+4>>2]|0;Aa=ya}g[za+Aa>>2]=w;g[za+(Aa+4)>>2]=y;g[za+(Aa+8)>>2]=u;a[za+(Aa+12)|0]=l;a[za+(Aa+13)|0]=n;a[za+(Aa+14)|0]=e;a[za+(Aa+15)|0]=k;c[o>>2]=xa;xa=c[m>>2]|0;o=xa+12|0;Aa=c[o>>2]|0;za=Aa+16|0;ya=xa+8|0;va=c[ya>>2]|0;if(za>>>0>va>>>0){c[ya>>2]=va<<1;va=Hl()|0;na=xa+4|0;r=fh[c[(c[va>>2]|0)+16>>2]&15](va,c[na>>2]|0,c[ya>>2]|0,1)|0;c[na>>2]=r;Ba=r;Ca=c[o>>2]|0}else{Ba=c[xa+4>>2]|0;Ca=Aa}g[Ba+Ca>>2]=w;g[Ba+(Ca+4)>>2]=y;g[Ba+(Ca+8)>>2]=u;a[Ba+(Ca+12)|0]=l;a[Ba+(Ca+13)|0]=n;a[Ba+(Ca+14)|0]=e;a[Ba+(Ca+15)|0]=k;c[o>>2]=za;w=+g[d>>2];za=c[m>>2]|0;o=za+12|0;Ca=c[o>>2]|0;Ba=Ca+16|0;Aa=za+8|0;xa=c[Aa>>2]|0;if(Ba>>>0>xa>>>0){c[Aa>>2]=xa<<1;xa=Hl()|0;r=za+4|0;na=fh[c[(c[xa>>2]|0)+16>>2]&15](xa,c[r>>2]|0,c[Aa>>2]|0,1)|0;c[r>>2]=na;Da=na;Ea=c[o>>2]|0}else{Da=c[za+4>>2]|0;Ea=Ca}g[Da+Ea>>2]=w;g[Da+(Ea+4)>>2]=y;g[Da+(Ea+8)>>2]=u;a[Da+(Ea+12)|0]=l;a[Da+(Ea+13)|0]=n;a[Da+(Ea+14)|0]=e;a[Da+(Ea+15)|0]=k;c[o>>2]=Ba;u=+g[L>>2];Ba=c[m>>2]|0;o=Ba+12|0;Ea=c[o>>2]|0;Da=Ea+16|0;Ca=Ba+8|0;za=c[Ca>>2]|0;if(Da>>>0>za>>>0){c[Ca>>2]=za<<1;za=Hl()|0;na=Ba+4|0;r=fh[c[(c[za>>2]|0)+16>>2]&15](za,c[na>>2]|0,c[Ca>>2]|0,1)|0;c[na>>2]=r;Fa=r;Ga=c[o>>2]|0}else{Fa=c[Ba+4>>2]|0;Ga=Ea}g[Fa+Ga>>2]=w;g[Fa+(Ga+4)>>2]=y;g[Fa+(Ga+8)>>2]=u;a[Fa+(Ga+12)|0]=l;a[Fa+(Ga+13)|0]=n;a[Fa+(Ga+14)|0]=e;a[Fa+(Ga+15)|0]=k;c[o>>2]=Da;y=+g[H>>2];Da=c[m>>2]|0;o=Da+12|0;Ga=c[o>>2]|0;Fa=Ga+16|0;Ea=Da+8|0;Ba=c[Ea>>2]|0;if(Fa>>>0>Ba>>>0){c[Ea>>2]=Ba<<1;Ba=Hl()|0;r=Da+4|0;na=fh[c[(c[Ba>>2]|0)+16>>2]&15](Ba,c[r>>2]|0,c[Ea>>2]|0,1)|0;c[r>>2]=na;Ha=na;Ia=c[o>>2]|0}else{Ha=c[Da+4>>2]|0;Ia=Ga}g[Ha+Ia>>2]=w;g[Ha+(Ia+4)>>2]=y;g[Ha+(Ia+8)>>2]=u;a[Ha+(Ia+12)|0]=l;a[Ha+(Ia+13)|0]=n;a[Ha+(Ia+14)|0]=e;a[Ha+(Ia+15)|0]=k;c[o>>2]=Fa;Fa=c[m>>2]|0;o=Fa+12|0;Ia=c[o>>2]|0;Ha=Ia+16|0;Ga=Fa+8|0;Da=c[Ga>>2]|0;if(Ha>>>0>Da>>>0){c[Ga>>2]=Da<<1;Da=Hl()|0;na=Fa+4|0;r=fh[c[(c[Da>>2]|0)+16>>2]&15](Da,c[na>>2]|0,c[Ga>>2]|0,1)|0;c[na>>2]=r;Ja=r;Ka=c[o>>2]|0}else{Ja=c[Fa+4>>2]|0;Ka=Ia}g[Ja+Ka>>2]=w;g[Ja+(Ka+4)>>2]=y;g[Ja+(Ka+8)>>2]=u;a[Ja+(Ka+12)|0]=l;a[Ja+(Ka+13)|0]=n;a[Ja+(Ka+14)|0]=e;a[Ja+(Ka+15)|0]=k;c[o>>2]=Ha;w=+g[t>>2];Ha=c[m>>2]|0;o=Ha+12|0;Ka=c[o>>2]|0;Ja=Ka+16|0;Ia=Ha+8|0;Fa=c[Ia>>2]|0;if(Ja>>>0>Fa>>>0){c[Ia>>2]=Fa<<1;Fa=Hl()|0;r=Ha+4|0;na=fh[c[(c[Fa>>2]|0)+16>>2]&15](Fa,c[r>>2]|0,c[Ia>>2]|0,1)|0;c[r>>2]=na;La=na;Ma=c[o>>2]|0}else{La=c[Ha+4>>2]|0;Ma=Ka}g[La+Ma>>2]=w;g[La+(Ma+4)>>2]=y;g[La+(Ma+8)>>2]=u;a[La+(Ma+12)|0]=l;a[La+(Ma+13)|0]=n;a[La+(Ma+14)|0]=e;a[La+(Ma+15)|0]=k;c[o>>2]=Ja;Ja=c[m>>2]|0;o=Ja+12|0;Ma=c[o>>2]|0;La=Ma+16|0;Ka=Ja+8|0;Ha=c[Ka>>2]|0;if(La>>>0>Ha>>>0){c[Ka>>2]=Ha<<1;Ha=Hl()|0;na=Ja+4|0;r=fh[c[(c[Ha>>2]|0)+16>>2]&15](Ha,c[na>>2]|0,c[Ka>>2]|0,1)|0;c[na>>2]=r;Na=r;Oa=c[o>>2]|0}else{Na=c[Ja+4>>2]|0;Oa=Ma}g[Na+Oa>>2]=w;g[Na+(Oa+4)>>2]=y;g[Na+(Oa+8)>>2]=u;a[Na+(Oa+12)|0]=l;a[Na+(Oa+13)|0]=n;a[Na+(Oa+14)|0]=e;a[Na+(Oa+15)|0]=k;c[o>>2]=La;y=+g[v>>2];La=c[m>>2]|0;o=La+12|0;Oa=c[o>>2]|0;Na=Oa+16|0;Ma=La+8|0;Ja=c[Ma>>2]|0;if(Na>>>0>Ja>>>0){c[Ma>>2]=Ja<<1;Ja=Hl()|0;r=La+4|0;na=fh[c[(c[Ja>>2]|0)+16>>2]&15](Ja,c[r>>2]|0,c[Ma>>2]|0,1)|0;c[r>>2]=na;Pa=na;Qa=c[o>>2]|0}else{Pa=c[La+4>>2]|0;Qa=Oa}g[Pa+Qa>>2]=w;g[Pa+(Qa+4)>>2]=y;g[Pa+(Qa+8)>>2]=u;a[Pa+(Qa+12)|0]=l;a[Pa+(Qa+13)|0]=n;a[Pa+(Qa+14)|0]=e;a[Pa+(Qa+15)|0]=k;c[o>>2]=Na;Na=c[m>>2]|0;o=Na+12|0;Qa=c[o>>2]|0;Pa=Qa+16|0;Oa=Na+8|0;La=c[Oa>>2]|0;if(Pa>>>0>La>>>0){c[Oa>>2]=La<<1;La=Hl()|0;na=Na+4|0;r=fh[c[(c[La>>2]|0)+16>>2]&15](La,c[na>>2]|0,c[Oa>>2]|0,1)|0;c[na>>2]=r;Ra=r;Sa=c[o>>2]|0}else{Ra=c[Na+4>>2]|0;Sa=Qa}g[Ra+Sa>>2]=w;g[Ra+(Sa+4)>>2]=y;g[Ra+(Sa+8)>>2]=u;a[Ra+(Sa+12)|0]=l;a[Ra+(Sa+13)|0]=n;a[Ra+(Sa+14)|0]=e;a[Ra+(Sa+15)|0]=k;c[o>>2]=Pa;w=+g[d>>2];d=c[m>>2]|0;Pa=d+12|0;o=c[Pa>>2]|0;Sa=o+16|0;Ra=d+8|0;Qa=c[Ra>>2]|0;if(Sa>>>0>Qa>>>0){c[Ra>>2]=Qa<<1;Qa=Hl()|0;Na=d+4|0;r=fh[c[(c[Qa>>2]|0)+16>>2]&15](Qa,c[Na>>2]|0,c[Ra>>2]|0,1)|0;c[Na>>2]=r;Ta=r;Ua=c[Pa>>2]|0}else{Ta=c[d+4>>2]|0;Ua=o}g[Ta+Ua>>2]=w;g[Ta+(Ua+4)>>2]=y;g[Ta+(Ua+8)>>2]=u;a[Ta+(Ua+12)|0]=l;a[Ta+(Ua+13)|0]=n;a[Ta+(Ua+14)|0]=e;a[Ta+(Ua+15)|0]=k;c[Pa>>2]=Sa;Sa=c[m>>2]|0;Pa=Sa+12|0;Ua=c[Pa>>2]|0;Ta=Ua+16|0;o=Sa+8|0;d=c[o>>2]|0;if(Ta>>>0>d>>>0){c[o>>2]=d<<1;d=Hl()|0;r=Sa+4|0;Na=fh[c[(c[d>>2]|0)+16>>2]&15](d,c[r>>2]|0,c[o>>2]|0,1)|0;c[r>>2]=Na;Va=Na;Wa=c[Pa>>2]|0}else{Va=c[Sa+4>>2]|0;Wa=Ua}g[Va+Wa>>2]=w;g[Va+(Wa+4)>>2]=y;g[Va+(Wa+8)>>2]=u;a[Va+(Wa+12)|0]=l;a[Va+(Wa+13)|0]=n;a[Va+(Wa+14)|0]=e;a[Va+(Wa+15)|0]=k;c[Pa>>2]=Ta;u=+g[x>>2];Ta=c[m>>2]|0;Pa=Ta+12|0;Wa=c[Pa>>2]|0;Va=Wa+16|0;Ua=Ta+8|0;Sa=c[Ua>>2]|0;if(Va>>>0>Sa>>>0){c[Ua>>2]=Sa<<1;Sa=Hl()|0;Na=Ta+4|0;r=fh[c[(c[Sa>>2]|0)+16>>2]&15](Sa,c[Na>>2]|0,c[Ua>>2]|0,1)|0;c[Na>>2]=r;Xa=r;Ya=c[Pa>>2]|0}else{Xa=c[Ta+4>>2]|0;Ya=Wa}g[Xa+Ya>>2]=w;g[Xa+(Ya+4)>>2]=y;g[Xa+(Ya+8)>>2]=u;a[Xa+(Ya+12)|0]=l;a[Xa+(Ya+13)|0]=n;a[Xa+(Ya+14)|0]=e;a[Xa+(Ya+15)|0]=k;c[Pa>>2]=Va;y=+g[H>>2];H=c[m>>2]|0;Va=H+12|0;Pa=c[Va>>2]|0;Ya=Pa+16|0;Xa=H+8|0;Wa=c[Xa>>2]|0;if(Ya>>>0>Wa>>>0){c[Xa>>2]=Wa<<1;Wa=Hl()|0;Ta=H+4|0;r=fh[c[(c[Wa>>2]|0)+16>>2]&15](Wa,c[Ta>>2]|0,c[Xa>>2]|0,1)|0;c[Ta>>2]=r;Za=r;_a=c[Va>>2]|0}else{Za=c[H+4>>2]|0;_a=Pa}g[Za+_a>>2]=w;g[Za+(_a+4)>>2]=y;g[Za+(_a+8)>>2]=u;a[Za+(_a+12)|0]=l;a[Za+(_a+13)|0]=n;a[Za+(_a+14)|0]=e;a[Za+(_a+15)|0]=k;c[Va>>2]=Ya;u=+g[L>>2];Ya=c[m>>2]|0;Va=Ya+12|0;_a=c[Va>>2]|0;Za=_a+16|0;Pa=Ya+8|0;H=c[Pa>>2]|0;if(Za>>>0>H>>>0){c[Pa>>2]=H<<1;H=Hl()|0;r=Ya+4|0;Ta=fh[c[(c[H>>2]|0)+16>>2]&15](H,c[r>>2]|0,c[Pa>>2]|0,1)|0;c[r>>2]=Ta;$a=Ta;ab=c[Va>>2]|0}else{$a=c[Ya+4>>2]|0;ab=_a}g[$a+ab>>2]=w;g[$a+(ab+4)>>2]=y;g[$a+(ab+8)>>2]=u;a[$a+(ab+12)|0]=l;a[$a+(ab+13)|0]=n;a[$a+(ab+14)|0]=e;a[$a+(ab+15)|0]=k;c[Va>>2]=Za;w=+g[t>>2];t=c[m>>2]|0;Za=t+12|0;Va=c[Za>>2]|0;ab=Va+16|0;$a=t+8|0;_a=c[$a>>2]|0;if(ab>>>0>_a>>>0){c[$a>>2]=_a<<1;_a=Hl()|0;Ya=t+4|0;Ta=fh[c[(c[_a>>2]|0)+16>>2]&15](_a,c[Ya>>2]|0,c[$a>>2]|0,1)|0;c[Ya>>2]=Ta;bb=Ta;cb=c[Za>>2]|0}else{bb=c[t+4>>2]|0;cb=Va}g[bb+cb>>2]=w;g[bb+(cb+4)>>2]=y;g[bb+(cb+8)>>2]=u;a[bb+(cb+12)|0]=l;a[bb+(cb+13)|0]=n;a[bb+(cb+14)|0]=e;a[bb+(cb+15)|0]=k;c[Za>>2]=ab;u=+g[x>>2];x=c[m>>2]|0;ab=x+12|0;Za=c[ab>>2]|0;cb=Za+16|0;bb=x+8|0;Va=c[bb>>2]|0;if(cb>>>0>Va>>>0){c[bb>>2]=Va<<1;Va=Hl()|0;t=x+4|0;Ta=fh[c[(c[Va>>2]|0)+16>>2]&15](Va,c[t>>2]|0,c[bb>>2]|0,1)|0;c[t>>2]=Ta;db=Ta;eb=c[ab>>2]|0}else{db=c[x+4>>2]|0;eb=Za}g[db+eb>>2]=w;g[db+(eb+4)>>2]=y;g[db+(eb+8)>>2]=u;a[db+(eb+12)|0]=l;a[db+(eb+13)|0]=n;a[db+(eb+14)|0]=e;a[db+(eb+15)|0]=k;c[ab>>2]=cb;y=+g[v>>2];v=c[m>>2]|0;cb=v+12|0;ab=c[cb>>2]|0;eb=ab+16|0;db=v+8|0;Za=c[db>>2]|0;if(eb>>>0>Za>>>0){c[db>>2]=Za<<1;Za=Hl()|0;x=v+4|0;Ta=fh[c[(c[Za>>2]|0)+16>>2]&15](Za,c[x>>2]|0,c[db>>2]|0,1)|0;c[x>>2]=Ta;fb=Ta;gb=c[cb>>2]|0}else{fb=c[v+4>>2]|0;gb=ab}g[fb+gb>>2]=w;g[fb+(gb+4)>>2]=y;g[fb+(gb+8)>>2]=u;a[fb+(gb+12)|0]=l;a[fb+(gb+13)|0]=n;a[fb+(gb+14)|0]=e;a[fb+(gb+15)|0]=k;c[cb>>2]=eb;u=+g[L>>2];L=c[m>>2]|0;eb=L+12|0;cb=c[eb>>2]|0;gb=cb+16|0;fb=L+8|0;ab=c[fb>>2]|0;if(gb>>>0>ab>>>0){c[fb>>2]=ab<<1;ab=Hl()|0;v=L+4|0;Ta=fh[c[(c[ab>>2]|0)+16>>2]&15](ab,c[v>>2]|0,c[fb>>2]|0,1)|0;c[v>>2]=Ta;hb=Ta;ib=c[eb>>2]|0;jb=hb+ib|0;g[jb>>2]=w;kb=ib+4|0;lb=hb+kb|0;g[lb>>2]=y;mb=ib+8|0;nb=hb+mb|0;g[nb>>2]=u;ob=ib+12|0;pb=hb+ob|0;a[pb]=l;qb=ib+13|0;rb=hb+qb|0;a[rb]=n;sb=ib+14|0;tb=hb+sb|0;a[tb]=e;ub=ib+15|0;vb=hb+ub|0;a[vb]=k;c[eb>>2]=gb;wb=c[m>>2]|0;xb=c[b>>2]|0;Ni(wb,xb,j);i=h;return 1}else{hb=c[L+4>>2]|0;ib=cb;jb=hb+ib|0;g[jb>>2]=w;kb=ib+4|0;lb=hb+kb|0;g[lb>>2]=y;mb=ib+8|0;nb=hb+mb|0;g[nb>>2]=u;ob=ib+12|0;pb=hb+ob|0;a[pb]=l;qb=ib+13|0;rb=hb+qb|0;a[rb]=n;sb=ib+14|0;tb=hb+sb|0;a[tb]=e;ub=ib+15|0;vb=hb+ub|0;a[vb]=k;c[eb>>2]=gb;wb=c[m>>2]|0;xb=c[b>>2]|0;Ni(wb,xb,j);i=h;return 1}return 0}function aj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;Lg[c[970]&127](34962,c[a+56>>2]|0);f=d;g=c[f>>2]|0;h=(c[f+4>>2]|0)-g|0;lh[c[972]&63](34962,(h|0)>0?h:0,g,35040);g=a+68|0;qj(c[g>>2]|0,b,(c[a+12>>2]|0)+192|0,28,0,28,12,28,24);Lg[c[970]&127](34962,0);Lg[c[970]&127](34963,c[a+60>>2]|0);a=d+8|0;d=c[a>>2]|0;b=(c[a+4>>2]|0)-d|0;a=(b|0)>0?b:0;lh[c[972]&63](34963,a,d,35040);Ac(4,a>>>1|0,5123,0);Lg[c[970]&127](34963,0);rj(c[g>>2]|0);i=e;return 1}function bj(a){a=a|0;var b=0;b=i;cj(a);vv(a);i=b;return}function cj(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;c[a>>2]=9392;d=a+8|0;e=c[d>>2]|0;if((e|0)!=0){Lg[c[1276]&127](c[a+4>>2]|0,e);Kg[c[1258]&255](c[d>>2]|0)}d=a+12|0;e=c[d>>2]|0;if((e|0)==0){f=a+4|0}else{g=a+4|0;Lg[c[1276]&127](c[g>>2]|0,e);Kg[c[1258]&255](c[d>>2]|0);f=g}g=c[f>>2]|0;if((g|0)!=0){Kg[c[1240]&255](g)}g=c[a+28>>2]|0;if((g|0)!=0){f=a+32|0;d=c[f>>2]|0;if((d|0)!=(g|0)){c[f>>2]=d+(~((d+ -4+(0-g)|0)>>>2)<<2)}d=Hl()|0;Lg[c[(c[d>>2]|0)+12>>2]&127](d,g)}g=c[a+16>>2]|0;if((g|0)==0){i=b;return}d=a+20|0;a=c[d>>2]|0;if((a|0)!=(g|0)){c[d>>2]=a+(~((a+ -4+(0-g)|0)>>>2)<<2)}a=Hl()|0;Lg[c[(c[a>>2]|0)+12>>2]&127](a,g);i=b;return}function dj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;g=i;i=i+32|0;h=g+16|0;j=g;k=g+4|0;l=g+8|0;if((d|0)!=0){m=ej(35633,b,d)|0;if((m|0)==0){n=0;i=g;return n|0}else{o=m}}else{o=0}if((f|0)!=0){m=ej(35632,e,f)|0;if((m|0)==0){if((o|0)==0){n=0;i=g;return n|0}Kg[c[1258]&255](o);n=0;i=g;return n|0}else{p=m}}else{p=0}m=eh[c[1204]&3]()|0;f=a+4|0;c[f>>2]=m;c[a+8>>2]=o;c[a+12>>2]=p;Lg[c[1146]&127](m,o);Lg[c[1146]&127](c[f>>2]|0,p);Kg[c[1670]&255](c[f>>2]|0);c[j>>2]=0;Xg[c[1420]&31](c[f>>2]|0,35716,j);if((c[j>>2]|0)<=1){n=1;i=g;return n|0}p=Hl()|0;o=Sg[c[(c[p>>2]|0)+8>>2]&31](p,c[j>>2]|0,1)|0;c[k>>2]=0;lh[c[1440]&63](c[f>>2]|0,c[j>>2]|0,k,o);xl(l);k=Vh(c[l>>2]|0,o)|0;ln(h,k+(c[(c[k>>2]|0)+ -12>>2]|0)|0);j=ws(h,22144)|0;f=ch[c[(c[j>>2]|0)+28>>2]&31](j,10)|0;vs(h);go(k,f)|0;Tn(k)|0;zl(l);l=Hl()|0;Lg[c[(c[l>>2]|0)+12>>2]&127](l,o);n=1;i=g;return n|0}function ej(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;i=i+32|0;f=e+20|0;g=e;h=e+4|0;j=e+8|0;k=e+16|0;l=Mg[c[1222]&127](a)|0;lh[c[1688]&63](l,b,d,0);Kg[c[1186]&255](l);c[g>>2]=0;Xg[c[1458]&31](l,35716,g);if((c[g>>2]|0)>1){d=Hl()|0;b=Sg[c[(c[d>>2]|0)+8>>2]&31](d,c[g>>2]|0,1)|0;c[h>>2]=0;lh[c[1478]&63](l,c[g>>2]|0,h,b);xl(j);h=Vh(c[j>>2]|0,b)|0;ln(f,h+(c[(c[h>>2]|0)+ -12>>2]|0)|0);g=ws(f,22144)|0;d=ch[c[(c[g>>2]|0)+28>>2]&31](g,10)|0;vs(f);go(h,d)|0;Tn(h)|0;zl(j);j=Hl()|0;Lg[c[(c[j>>2]|0)+12>>2]&127](j,b)}Xg[c[1458]&31](l,35713,k);if((c[k>>2]|0)!=0){m=l;i=e;return m|0}Kg[c[1258]&255](l);m=0;i=e;return m|0}function fj(){var a=0,b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;a=i;i=i+32|0;b=a+16|0;d=a;e=a+8|0;c[d>>2]=13768;c[d+4>>2]=9400;c[e>>2]=13768;c[e+4>>2]=9624;f=Hl()|0;g=Sg[c[(c[f>>2]|0)+8>>2]&31](f,40,8)|0;if((g|0)==0){h=0}else{f=g+4|0;j=f+36|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(j|0));c[g>>2]=12488;h=g}g=dj(h,2,d,2,e)|0;e=h+4|0;d=ch[c[1402]&31](c[e>>2]|0,9704)|0;c[b>>2]=d;do{if((d|0)==-1){k=0}else{f=h+32|0;j=c[f>>2]|0;if((j|0)==(c[h+36>>2]|0)){Cj(h+28|0,b);k=1;break}if((j|0)!=0){c[j>>2]=d}c[f>>2]=j+4;k=1}}while(0);d=g&k;k=ch[c[1402]&31](c[e>>2]|0,9720)|0;c[b>>2]=k;do{if((k|0)==-1){l=0}else{g=h+32|0;j=c[g>>2]|0;if((j|0)==(c[h+36>>2]|0)){Cj(h+28|0,b);l=1;break}if((j|0)!=0){c[j>>2]=k}c[g>>2]=j+4;l=1}}while(0);k=ch[c[1518]&31](c[e>>2]|0,9728)|0;c[b>>2]=k;if(!((k|0)==-1)){e=h+20|0;j=c[e>>2]|0;if((j|0)==(c[h+24>>2]|0)){Cj(h+16|0,b)}else{if((j|0)!=0){c[j>>2]=k}c[e>>2]=j+4}if(d&l){m=h;i=a;return m|0}}l=Hl()|0;if((h|0)==0){m=0;i=a;return m|0}Kg[c[c[h>>2]>>2]&255](h);Lg[c[(c[l>>2]|0)+12>>2]&127](l,h);m=0;i=a;return m|0}function gj(a,b,d,e,f,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0;k=i;i=i+64|0;l=k;Kg[c[1706]&255](c[a+4>>2]|0);m=a+28|0;n=c[c[m>>2]>>2]|0;Kg[c[976]&255](n);Wg[c[980]&31](n,3,5126,0,e,f);f=c[(c[m>>2]|0)+4>>2]|0;Kg[c[976]&255](f);Wg[c[980]&31](f,4,5121,1,h,j);j=c[c[a+16>>2]>>2]|0;o=+g[d>>2];p=+g[b>>2];q=+g[d+16>>2];r=+g[b+4>>2];s=+g[d+32>>2];t=+g[b+8>>2];u=+g[d+48>>2];v=+g[b+12>>2];w=+g[d+4>>2];x=+g[d+20>>2];y=+g[d+36>>2];z=+g[d+52>>2];A=+g[d+8>>2];B=+g[d+24>>2];C=+g[d+40>>2];D=+g[d+56>>2];E=+g[d+12>>2];F=+g[d+28>>2];G=+g[d+44>>2];H=+g[d+60>>2];I=+g[b+16>>2];J=+g[b+20>>2];K=+g[b+24>>2];L=+g[b+28>>2];M=+g[b+32>>2];N=+g[b+36>>2];O=+g[b+40>>2];P=+g[b+44>>2];Q=+g[b+48>>2];R=+g[b+52>>2];S=+g[b+56>>2];T=+g[b+60>>2];g[l>>2]=o*p+q*r+s*t+u*v;g[l+4>>2]=p*w+r*x+t*y+v*z;g[l+8>>2]=p*A+r*B+t*C+v*D;g[l+12>>2]=p*E+r*F+t*G+v*H;g[l+16>>2]=o*I+q*J+s*K+u*L;g[l+20>>2]=w*I+x*J+y*K+z*L;g[l+24>>2]=A*I+B*J+C*K+D*L;g[l+28>>2]=E*I+F*J+G*K+H*L;g[l+32>>2]=o*M+q*N+s*O+u*P;g[l+36>>2]=w*M+x*N+y*O+z*P;g[l+40>>2]=A*M+B*N+C*O+D*P;g[l+44>>2]=E*M+F*N+G*O+H*P;g[l+48>>2]=o*Q+q*R+s*S+u*T;g[l+52>>2]=w*Q+x*R+y*S+z*T;g[l+56>>2]=A*Q+B*R+C*S+D*T;g[l+60>>2]=E*Q+F*R+G*S+H*T;lh[c[974]&63](j,1,0,l);i=k;return}function hj(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=i;d=a+32|0;e=a+28|0;a=c[e>>2]|0;if((c[d>>2]|0)==(a|0)){f=c[1706]|0;Kg[f&255](0);i=b;return}else{g=a;h=0}do{Kg[c[984]&255](c[g+(h<<2)>>2]|0);h=h+1|0;g=c[e>>2]|0}while(h>>>0<(c[d>>2]|0)-g>>2>>>0);f=c[1706]|0;Kg[f&255](0);i=b;return}function ij(){var a=0,b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;a=i;i=i+32|0;b=a+16|0;d=a;e=a+8|0;c[d>>2]=13768;c[d+4>>2]=9736;c[e>>2]=13768;c[e+4>>2]=10048;f=Hl()|0;g=Sg[c[(c[f>>2]|0)+8>>2]&31](f,40,8)|0;if((g|0)==0){h=0}else{f=g+4|0;j=f+36|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(j|0));c[g>>2]=12408;h=g}g=dj(h,2,d,2,e)|0;e=h+4|0;d=ch[c[1402]&31](c[e>>2]|0,9704)|0;c[b>>2]=d;do{if((d|0)==-1){k=0}else{f=h+32|0;j=c[f>>2]|0;if((j|0)==(c[h+36>>2]|0)){Cj(h+28|0,b);k=1;break}if((j|0)!=0){c[j>>2]=d}c[f>>2]=j+4;k=1}}while(0);d=g&k;k=ch[c[1402]&31](c[e>>2]|0,10296)|0;c[b>>2]=k;do{if((k|0)==-1){l=0}else{g=h+32|0;j=c[g>>2]|0;if((j|0)==(c[h+36>>2]|0)){Cj(h+28|0,b);l=1;break}if((j|0)!=0){c[j>>2]=k}c[g>>2]=j+4;l=1}}while(0);k=d&l;l=ch[c[1402]&31](c[e>>2]|0,9720)|0;c[b>>2]=l;do{if((l|0)==-1){m=0}else{d=h+32|0;j=c[d>>2]|0;if((j|0)==(c[h+36>>2]|0)){Cj(h+28|0,b);m=1;break}if((j|0)!=0){c[j>>2]=l}c[d>>2]=j+4;m=1}}while(0);l=k&m;m=ch[c[1518]&31](c[e>>2]|0,9728)|0;c[b>>2]=m;do{if((m|0)==-1){n=0}else{k=h+20|0;j=c[k>>2]|0;if((j|0)==(c[h+24>>2]|0)){Cj(h+16|0,b);n=1;break}if((j|0)!=0){c[j>>2]=m}c[k>>2]=j+4;n=1}}while(0);m=ch[c[1518]&31](c[e>>2]|0,10312)|0;c[b>>2]=m;if(!((m|0)==-1)){e=h+20|0;j=c[e>>2]|0;if((j|0)==(c[h+24>>2]|0)){Cj(h+16|0,b)}else{if((j|0)!=0){c[j>>2]=m}c[e>>2]=j+4}if(l&n){o=h;i=a;return o|0}}n=Hl()|0;if((h|0)==0){o=0;i=a;return o|0}Kg[c[c[h>>2]>>2]&255](h);Lg[c[(c[n>>2]|0)+12>>2]&127](n,h);o=0;i=a;return o|0}function jj(a,b,d,e,f,h,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0;m=i;i=i+64|0;n=m;Kg[c[1706]&255](c[a+4>>2]|0);o=a+28|0;p=c[c[o>>2]>>2]|0;Kg[c[976]&255](p);Wg[c[980]&31](p,3,5126,0,e,f);f=c[(c[o>>2]|0)+4>>2]|0;Kg[c[976]&255](f);Wg[c[980]&31](f,2,5126,0,h,j);j=c[(c[o>>2]|0)+8>>2]|0;Kg[c[976]&255](j);Wg[c[980]&31](j,4,5121,1,k,l);l=a+16|0;a=c[c[l>>2]>>2]|0;q=+g[d>>2];r=+g[b>>2];s=+g[d+16>>2];t=+g[b+4>>2];u=+g[d+32>>2];v=+g[b+8>>2];w=+g[d+48>>2];x=+g[b+12>>2];y=+g[d+4>>2];z=+g[d+20>>2];A=+g[d+36>>2];B=+g[d+52>>2];C=+g[d+8>>2];D=+g[d+24>>2];E=+g[d+40>>2];F=+g[d+56>>2];G=+g[d+12>>2];H=+g[d+28>>2];I=+g[d+44>>2];J=+g[d+60>>2];K=+g[b+16>>2];L=+g[b+20>>2];M=+g[b+24>>2];N=+g[b+28>>2];O=+g[b+32>>2];P=+g[b+36>>2];Q=+g[b+40>>2];R=+g[b+44>>2];S=+g[b+48>>2];T=+g[b+52>>2];U=+g[b+56>>2];V=+g[b+60>>2];g[n>>2]=q*r+s*t+u*v+w*x;g[n+4>>2]=r*y+t*z+v*A+x*B;g[n+8>>2]=r*C+t*D+v*E+x*F;g[n+12>>2]=r*G+t*H+v*I+x*J;g[n+16>>2]=q*K+s*L+u*M+w*N;g[n+20>>2]=y*K+z*L+A*M+B*N;g[n+24>>2]=C*K+D*L+E*M+F*N;g[n+28>>2]=G*K+H*L+I*M+J*N;g[n+32>>2]=q*O+s*P+u*Q+w*R;g[n+36>>2]=y*O+z*P+A*Q+B*R;g[n+40>>2]=C*O+D*P+E*Q+F*R;g[n+44>>2]=G*O+H*P+I*Q+J*R;g[n+48>>2]=q*S+s*T+u*U+w*V;g[n+52>>2]=y*S+z*T+A*U+B*V;g[n+56>>2]=C*S+D*T+E*U+F*V;g[n+60>>2]=G*S+H*T+I*U+J*V;lh[c[974]&63](a,1,0,n);Lg[c[1788]&127](c[(c[l>>2]|0)+4>>2]|0,0);i=m;return}function kj(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=i;d=a+32|0;e=a+28|0;a=c[e>>2]|0;if((c[d>>2]|0)==(a|0)){f=c[1706]|0;Kg[f&255](0);i=b;return}else{g=a;h=0}do{Kg[c[984]&255](c[g+(h<<2)>>2]|0);h=h+1|0;g=c[e>>2]|0}while(h>>>0<(c[d>>2]|0)-g>>2>>>0);f=c[1706]|0;Kg[f&255](0);i=b;return}function lj(a,b,d,e,f,h,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0;m=i;i=i+64|0;n=m;Kg[c[1706]&255](c[a+4>>2]|0);o=a+28|0;p=c[c[o>>2]>>2]|0;Kg[c[976]&255](p);Wg[c[980]&31](p,3,5126,0,e,f);f=c[(c[o>>2]|0)+4>>2]|0;Kg[c[976]&255](f);Wg[c[980]&31](f,3,5126,0,h,j);j=c[(c[o>>2]|0)+8>>2]|0;Kg[c[976]&255](j);Wg[c[980]&31](j,4,5121,1,k,l);l=c[c[a+16>>2]>>2]|0;q=+g[d>>2];r=+g[b>>2];s=+g[d+16>>2];t=+g[b+4>>2];u=+g[d+32>>2];v=+g[b+8>>2];w=+g[d+48>>2];x=+g[b+12>>2];y=+g[d+4>>2];z=+g[d+20>>2];A=+g[d+36>>2];B=+g[d+52>>2];C=+g[d+8>>2];D=+g[d+24>>2];E=+g[d+40>>2];F=+g[d+56>>2];G=+g[d+12>>2];H=+g[d+28>>2];I=+g[d+44>>2];J=+g[d+60>>2];K=+g[b+16>>2];L=+g[b+20>>2];M=+g[b+24>>2];N=+g[b+28>>2];O=+g[b+32>>2];P=+g[b+36>>2];Q=+g[b+40>>2];R=+g[b+44>>2];S=+g[b+48>>2];T=+g[b+52>>2];U=+g[b+56>>2];V=+g[b+60>>2];g[n>>2]=q*r+s*t+u*v+w*x;g[n+4>>2]=r*y+t*z+v*A+x*B;g[n+8>>2]=r*C+t*D+v*E+x*F;g[n+12>>2]=r*G+t*H+v*I+x*J;g[n+16>>2]=q*K+s*L+u*M+w*N;g[n+20>>2]=y*K+z*L+A*M+B*N;g[n+24>>2]=C*K+D*L+E*M+F*N;g[n+28>>2]=G*K+H*L+I*M+J*N;g[n+32>>2]=q*O+s*P+u*Q+w*R;g[n+36>>2]=y*O+z*P+A*Q+B*R;g[n+40>>2]=C*O+D*P+E*Q+F*R;g[n+44>>2]=G*O+H*P+I*Q+J*R;g[n+48>>2]=q*S+s*T+u*U+w*V;g[n+52>>2]=y*S+z*T+A*U+B*V;g[n+56>>2]=C*S+D*T+E*U+F*V;g[n+60>>2]=G*S+H*T+I*U+J*V;lh[c[974]&63](l,1,0,n);i=m;return}function mj(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=i;d=a+32|0;e=a+28|0;a=c[e>>2]|0;if((c[d>>2]|0)==(a|0)){f=c[1706]|0;Kg[f&255](0);i=b;return}else{g=a;h=0}do{Kg[c[984]&255](c[g+(h<<2)>>2]|0);h=h+1|0;g=c[e>>2]|0}while(h>>>0<(c[d>>2]|0)-g>>2>>>0);f=c[1706]|0;Kg[f&255](0);i=b;return}function nj(){var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;b=i;i=i+48|0;d=b+32|0;e=b;f=b+8|0;g=b+24|0;c[f>>2]=13768;c[f+4>>2]=(a[3944]|0)!=0?11008:11032;c[f+8>>2]=10328;c[f+12>>2]=13088;c[g>>2]=13768;c[g+4>>2]=12560;h=Hl()|0;j=Sg[c[(c[h>>2]|0)+8>>2]&31](h,40,8)|0;if((j|0)==0){k=0}else{h=j+4|0;l=h+36|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(l|0));c[j>>2]=12336;k=j}j=dj(k,4,f,2,g)|0;g=k+4|0;f=ch[c[1402]&31](c[g>>2]|0,9704)|0;c[e>>2]=f;do{if((f|0)==-1){m=0}else{h=k+32|0;l=c[h>>2]|0;if((l|0)==(c[k+36>>2]|0)){Cj(k+28|0,e);m=1;break}if((l|0)!=0){c[l>>2]=f}c[h>>2]=l+4;m=1}}while(0);f=j&m;m=ch[c[1402]&31](c[g>>2]|0,11056)|0;c[e>>2]=m;do{if((m|0)==-1){n=0}else{j=k+32|0;l=c[j>>2]|0;if((l|0)==(c[k+36>>2]|0)){Cj(k+28|0,e);n=1;break}if((l|0)!=0){c[l>>2]=m}c[j>>2]=l+4;n=1}}while(0);m=f&n;n=ch[c[1402]&31](c[g>>2]|0,9720)|0;c[e>>2]=n;do{if((n|0)==-1){o=0}else{f=k+32|0;l=c[f>>2]|0;if((l|0)==(c[k+36>>2]|0)){Cj(k+28|0,e);o=1;break}if((l|0)!=0){c[l>>2]=n}c[f>>2]=l+4;o=1}}while(0);n=m&o;o=ch[c[1518]&31](c[g>>2]|0,9728)|0;c[e>>2]=o;do{if((o|0)==-1){p=0}else{m=k+20|0;l=c[m>>2]|0;if((l|0)==(c[k+24>>2]|0)){Cj(k+16|0,e);p=1;break}if((l|0)!=0){c[l>>2]=o}c[m>>2]=l+4;p=1}}while(0);do{if((a[3944]|0)!=0){o=ch[c[1402]&31](c[g>>2]|0,11072)|0;c[e>>2]=o;if((o|0)==-1){q=42}else{l=k+32|0;m=c[l>>2]|0;if((m|0)==(c[k+36>>2]|0)){Cj(k+28|0,e);q=41;break}if((m|0)!=0){c[m>>2]=o}c[l>>2]=m+4;q=41}}else{m=ch[c[1518]&31](c[g>>2]|0,11072)|0;c[d>>2]=m;if((m|0)==-1){r=Hl()|0;break}l=k+20|0;o=c[l>>2]|0;if((o|0)==(c[k+24>>2]|0)){Cj(k+16|0,d);q=41;break}if((o|0)!=0){c[o>>2]=m}c[l>>2]=o+4;q=41}}while(0);if((q|0)==41){if(n&p){s=k;i=b;return s|0}else{q=42}}if((q|0)==42){q=Hl()|0;if((k|0)==0){s=0;i=b;return s|0}else{r=q}}Kg[c[c[k>>2]>>2]&255](k);Lg[c[(c[r>>2]|0)+12>>2]&127](r,k);s=0;i=b;return s|0}function oj(){var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;b=i;i=i+48|0;d=b+32|0;e=b;f=b+8|0;g=b+24|0;c[f>>2]=13768;c[f+4>>2]=(a[3944]|0)!=0?11008:11032;c[f+8>>2]=11080;c[f+12>>2]=13088;c[g>>2]=13768;c[g+4>>2]=12560;h=Hl()|0;j=Sg[c[(c[h>>2]|0)+8>>2]&31](h,40,8)|0;if((j|0)==0){k=0}else{h=j+4|0;l=h+36|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(l|0));c[j>>2]=12208;k=j}j=dj(k,4,f,2,g)|0;g=k+4|0;f=ch[c[1402]&31](c[g>>2]|0,9704)|0;c[e>>2]=f;do{if((f|0)==-1){m=0}else{h=k+32|0;l=c[h>>2]|0;if((l|0)==(c[k+36>>2]|0)){Cj(k+28|0,e);m=1;break}if((l|0)!=0){c[l>>2]=f}c[h>>2]=l+4;m=1}}while(0);f=j&m;m=ch[c[1402]&31](c[g>>2]|0,11056)|0;c[e>>2]=m;do{if((m|0)==-1){n=0}else{j=k+32|0;l=c[j>>2]|0;if((l|0)==(c[k+36>>2]|0)){Cj(k+28|0,e);n=1;break}if((l|0)!=0){c[l>>2]=m}c[j>>2]=l+4;n=1}}while(0);m=f&n;n=ch[c[1402]&31](c[g>>2]|0,9720)|0;c[e>>2]=n;do{if((n|0)==-1){o=0}else{f=k+32|0;l=c[f>>2]|0;if((l|0)==(c[k+36>>2]|0)){Cj(k+28|0,e);o=1;break}if((l|0)!=0){c[l>>2]=n}c[f>>2]=l+4;o=1}}while(0);n=m&o;o=ch[c[1518]&31](c[g>>2]|0,9728)|0;c[e>>2]=o;do{if((o|0)==-1){p=0}else{m=k+20|0;l=c[m>>2]|0;if((l|0)==(c[k+24>>2]|0)){Cj(k+16|0,e);p=1;break}if((l|0)!=0){c[l>>2]=o}c[m>>2]=l+4;p=1}}while(0);do{if((a[3944]|0)!=0){o=ch[c[1402]&31](c[g>>2]|0,11072)|0;c[e>>2]=o;if((o|0)==-1){q=42}else{l=k+32|0;m=c[l>>2]|0;if((m|0)==(c[k+36>>2]|0)){Cj(k+28|0,e);q=41;break}if((m|0)!=0){c[m>>2]=o}c[l>>2]=m+4;q=41}}else{m=ch[c[1518]&31](c[g>>2]|0,11072)|0;c[d>>2]=m;if((m|0)==-1){r=Hl()|0;break}l=k+20|0;o=c[l>>2]|0;if((o|0)==(c[k+24>>2]|0)){Cj(k+16|0,d);q=41;break}if((o|0)!=0){c[o>>2]=m}c[l>>2]=o+4;q=41}}while(0);if((q|0)==41){if(n&p){s=k;i=b;return s|0}else{q=42}}if((q|0)==42){q=Hl()|0;if((k|0)==0){s=0;i=b;return s|0}else{r=q}}Kg[c[c[k>>2]>>2]&255](k);Lg[c[(c[r>>2]|0)+12>>2]&127](r,k);s=0;i=b;return s|0}function pj(){var a=0,b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;a=i;i=i+32|0;b=a+16|0;d=a;e=a+8|0;c[d>>2]=13768;c[d+4>>2]=11784;c[e>>2]=13768;c[e+4>>2]=12560;f=Hl()|0;g=Sg[c[(c[f>>2]|0)+8>>2]&31](f,40,8)|0;if((g|0)==0){h=0}else{f=g+4|0;j=f+36|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(j|0));c[g>>2]=12136;h=g}g=dj(h,2,d,2,e)|0;e=h+4|0;d=ch[c[1402]&31](c[e>>2]|0,9704)|0;c[b>>2]=d;do{if((d|0)==-1){k=0}else{f=h+32|0;j=c[f>>2]|0;if((j|0)==(c[h+36>>2]|0)){Cj(h+28|0,b);k=1;break}if((j|0)!=0){c[j>>2]=d}c[f>>2]=j+4;k=1}}while(0);d=g&k;k=ch[c[1402]&31](c[e>>2]|0,11056)|0;c[b>>2]=k;do{if((k|0)==-1){l=0}else{g=h+32|0;j=c[g>>2]|0;if((j|0)==(c[h+36>>2]|0)){Cj(h+28|0,b);l=1;break}if((j|0)!=0){c[j>>2]=k}c[g>>2]=j+4;l=1}}while(0);k=d&l;l=ch[c[1402]&31](c[e>>2]|0,9720)|0;c[b>>2]=l;do{if((l|0)==-1){m=0}else{d=h+32|0;j=c[d>>2]|0;if((j|0)==(c[h+36>>2]|0)){Cj(h+28|0,b);m=1;break}if((j|0)!=0){c[j>>2]=l}c[d>>2]=j+4;m=1}}while(0);l=ch[c[1518]&31](c[e>>2]|0,9728)|0;c[b>>2]=l;if(!((l|0)==-1)){e=h+20|0;j=c[e>>2]|0;if((j|0)==(c[h+24>>2]|0)){Cj(h+16|0,b)}else{if((j|0)!=0){c[j>>2]=l}c[e>>2]=j+4}if(k&m){n=h;i=a;return n|0}}m=Hl()|0;if((h|0)==0){n=0;i=a;return n|0}Kg[c[c[h>>2]>>2]&255](h);Lg[c[(c[m>>2]|0)+12>>2]&127](m,h);n=0;i=a;return n|0}function qj(a,b,d,e,f,h,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0;m=i;i=i+64|0;n=m;Kg[c[1706]&255](c[a+4>>2]|0);o=a+28|0;p=c[c[o>>2]>>2]|0;Kg[c[976]&255](p);Wg[c[980]&31](p,3,5126,0,e,f);f=c[(c[o>>2]|0)+4>>2]|0;Kg[c[976]&255](f);Wg[c[980]&31](f,3,5126,1,h,j);j=c[(c[o>>2]|0)+8>>2]|0;Kg[c[976]&255](j);Wg[c[980]&31](j,4,5121,1,k,l);l=c[c[a+16>>2]>>2]|0;q=+g[d>>2];r=+g[b>>2];s=+g[d+16>>2];t=+g[b+4>>2];u=+g[d+32>>2];v=+g[b+8>>2];w=+g[d+48>>2];x=+g[b+12>>2];y=+g[d+4>>2];z=+g[d+20>>2];A=+g[d+36>>2];B=+g[d+52>>2];C=+g[d+8>>2];D=+g[d+24>>2];E=+g[d+40>>2];F=+g[d+56>>2];G=+g[d+12>>2];H=+g[d+28>>2];I=+g[d+44>>2];J=+g[d+60>>2];K=+g[b+16>>2];L=+g[b+20>>2];M=+g[b+24>>2];N=+g[b+28>>2];O=+g[b+32>>2];P=+g[b+36>>2];Q=+g[b+40>>2];R=+g[b+44>>2];S=+g[b+48>>2];T=+g[b+52>>2];U=+g[b+56>>2];V=+g[b+60>>2];g[n>>2]=q*r+s*t+u*v+w*x;g[n+4>>2]=r*y+t*z+v*A+x*B;g[n+8>>2]=r*C+t*D+v*E+x*F;g[n+12>>2]=r*G+t*H+v*I+x*J;g[n+16>>2]=q*K+s*L+u*M+w*N;g[n+20>>2]=y*K+z*L+A*M+B*N;g[n+24>>2]=C*K+D*L+E*M+F*N;g[n+28>>2]=G*K+H*L+I*M+J*N;g[n+32>>2]=q*O+s*P+u*Q+w*R;g[n+36>>2]=y*O+z*P+A*Q+B*R;g[n+40>>2]=C*O+D*P+E*Q+F*R;g[n+44>>2]=G*O+H*P+I*Q+J*R;g[n+48>>2]=q*S+s*T+u*U+w*V;g[n+52>>2]=y*S+z*T+A*U+B*V;g[n+56>>2]=C*S+D*T+E*U+F*V;g[n+60>>2]=G*S+H*T+I*U+J*V;lh[c[974]&63](l,1,0,n);i=m;return}function rj(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=i;d=a+32|0;e=a+28|0;a=c[e>>2]|0;if((c[d>>2]|0)==(a|0)){f=c[1706]|0;Kg[f&255](0);i=b;return}else{g=a;h=0}do{Kg[c[984]&255](c[g+(h<<2)>>2]|0);h=h+1|0;g=c[e>>2]|0}while(h>>>0<(c[d>>2]|0)-g>>2>>>0);f=c[1706]|0;Kg[f&255](0);i=b;return}function sj(a){a=a|0;var b=0;b=i;cj(a);i=b;return}function tj(a){a=a|0;var b=0;b=i;cj(a);vv(a);i=b;return}function uj(a){a=a|0;var b=0;b=i;cj(a);i=b;return}function vj(a){a=a|0;var b=0;b=i;cj(a);vv(a);i=b;return}function wj(a){a=a|0;var b=0;b=i;cj(a);i=b;return}function xj(a){a=a|0;var b=0;b=i;cj(a);vv(a);i=b;return}function yj(a){a=a|0;var b=0;b=i;cj(a);i=b;return}function zj(a){a=a|0;var b=0;b=i;cj(a);vv(a);i=b;return}function Aj(a){a=a|0;var b=0;b=i;cj(a);i=b;return}function Bj(a){a=a|0;var b=0;b=i;cj(a);vv(a);i=b;return}function Cj(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;d=i;e=a+4|0;f=c[a>>2]|0;g=(c[e>>2]|0)-f>>2;h=g+1|0;if(h>>>0>1073741823){ns(0)}j=a+8|0;k=(c[j>>2]|0)-f|0;if(k>>2>>>0<536870911){f=k>>1;k=f>>>0<h>>>0?h:f;if((k|0)==0){l=0;m=0}else{n=k;o=5}}else{n=1073741823;o=5}if((o|0)==5){o=Hl()|0;l=n;m=Sg[c[(c[o>>2]|0)+8>>2]&31](o,n<<2,4)|0}n=m+(g<<2)|0;if((n|0)!=0){c[n>>2]=c[b>>2]}b=c[a>>2]|0;n=(c[e>>2]|0)-b|0;o=m+(g-(n>>2)<<2)|0;Nv(o|0,b|0,n|0)|0;n=c[a>>2]|0;c[a>>2]=o;c[e>>2]=m+(h<<2);c[j>>2]=m+(l<<2);if((n|0)==0){i=d;return}l=Hl()|0;Lg[c[(c[l>>2]|0)+12>>2]&127](l,n);i=d;return}function Dj(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;i=i+16|0;e=d+8|0;f=d;g=d+4|0;c[b>>2]=13808;h=b+4|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;h=b+20|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;h=b+36|0;c[h>>2]=6408;j=b+40|0;c[j>>2]=2;c[b+44>>2]=0;if((c[1090]|0)==0){k=0}else{k=(c[1106]|0)!=0|0}a[b+48|0]=k;Lg[c[968]&127](2,e);c[b+4>>2]=c[e>>2];c[b+20>>2]=c[e+4>>2];if((fg(13816)|0)==0){c[h>>2]=6408;c[j>>2]=2;i=d;return}hd(35739,f|0);hd(35738,g|0);if((c[g>>2]|0)!=5121){i=d;return}g=c[f>>2]|0;if((g|0)==32992){c[h>>2]=32992;c[j>>2]=1;i=d;return}else if((g|0)==6408){c[h>>2]=6408;c[j>>2]=2;i=d;return}else if((g|0)==32993){c[h>>2]=32993;c[j>>2]=3;i=d;return}else if((g|0)==6407){c[h>>2]=6407;c[j>>2]=0;i=d;return}else{i=d;return}}function Ej(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=13808;d=a+16|0;c[d>>2]=(c[d>>2]|0)>0;d=a+32|0;c[d>>2]=(c[d>>2]|0)>0;Ij(a)|0;Lg[c[954]&127](1,a+4|0);Lg[c[954]&127](1,a+20|0);vv(a);i=b;return}function Fj(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=13808;d=a+16|0;c[d>>2]=(c[d>>2]|0)>0;d=a+32|0;c[d>>2]=(c[d>>2]|0)>0;Ij(a)|0;Lg[c[954]&127](1,a+4|0);Lg[c[954]&127](1,a+20|0);i=b;return}function Gj(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;if((a[b+48|0]|0)==0){i=f;return}g=b+16|0;c[g>>2]=(c[g>>2]|0)>0;g=b+32|0;c[g>>2]=(c[g>>2]|0)>0;Ij(b)|0;g=ea(d<<2,e)|0;Lg[c[970]&127](35051,c[b+4>>2]|0);lh[c[972]&63](35051,g,0,35041);c[b+8>>2]=d;c[b+12>>2]=e;Lg[c[970]&127](35051,c[b+20>>2]|0);lh[c[972]&63](35051,g,0,35041);c[b+24>>2]=d;c[b+28>>2]=e;Lg[c[970]&127](35051,0);i=f;return}function Hj(a){a=a|0;var b=0;b=i;Ij(a)|0;i=b;return 1}function Ij(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;i=i+32|0;e=d;f=d+8|0;if((a[b+48|0]|0)==0){i=d;return 1}g=b+44|0;h=b+40|0;j=b+16|0;k=c[j>>2]|0;if((k|0)!=0?(l=k+ -1|0,c[j>>2]=l,(l|0)==0):0){Lg[c[970]&127](35051,c[b+4>>2]|0);l=ch[c[1090]&31](35051,35e3)|0;if((l|0)!=0){j=c[g>>2]|0;c[g>>2]=j+1;c[e>>2]=j;gd(f|0,13848,e|0)|0;Vj(f,c[b+8>>2]|0,c[b+12>>2]|0,c[h>>2]|0,l,0)|0;Mg[c[1106]&127](35051)|0}Lg[c[970]&127](35051,0)}l=b+32|0;j=c[l>>2]|0;if((j|0)==0){i=d;return 1}k=j+ -1|0;c[l>>2]=k;if((k|0)!=0){i=d;return 1}Lg[c[970]&127](35051,c[b+20>>2]|0);k=ch[c[1090]&31](35051,35e3)|0;if((k|0)!=0){l=c[g>>2]|0;c[g>>2]=l+1;c[e>>2]=l;gd(f|0,13848,e|0)|0;Vj(f,c[b+24>>2]|0,c[b+28>>2]|0,c[h>>2]|0,k,0)|0;Mg[c[1106]&127](35051)|0}Lg[c[970]&127](35051,0);i=d;return 1}function Jj(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;if((a[b+48|0]|0)==0){i=e;return 1}f=b+36|0;g=b+4|0;while(1){h=g+16|0;if((c[g+12>>2]|0)==0){j=g;break}if(h>>>0<f>>>0){g=h}else{j=h;break}}c[j+12>>2]=2;Ze(d|0);Lg[c[970]&127](35051,c[j>>2]|0);fc(3333,4);cb(0,0,c[j+4>>2]|0,c[j+8>>2]|0,c[b+36>>2]|0,5121,0);Lg[c[970]&127](35051,0);i=e;return 1}function Kj(a,b){a=a|0;b=b|0;var d=0;d=i;g[a>>2]=+nf();c[a+4>>2]=b;i=d;return}function Lj(a){a=a|0;var b=0,d=0,e=0.0,f=0,h=0.0,j=0,k=0,l=0,m=0;b=i;d=a+4|0;if((c[d>>2]|0)==0){i=b;return}e=+nf();f=c[d>>2]|0;h=(e- +g[a>>2])*1.0e3;a=f+8|0;d=c[a>>2]|0;j=d+(c[f>>2]<<2)|0;if((j|0)==(c[f+4>>2]|0)){k=f+12|0;l=c[k>>2]|0;if((l|0)==(d|0)){c[k>>2]=j;m=j}else{m=l}}else{c[a>>2]=d+ -4;m=c[f+12>>2]|0}d=m+ -4|0;c[f+12>>2]=d;g[d>>2]=h;i=b;return}function Mj(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;c[a>>2]=(b|0)<1?1:b;e=Hl()|0;f=Sg[c[(c[e>>2]|0)+8>>2]&31](e,b<<2,4)|0;b=f+(c[a>>2]<<2)|0;c[a+4>>2]=b;c[a+8>>2]=b;c[a+12>>2]=b;i=d;return}function Nj(a){a=a|0;var b=0,d=0;b=i;d=Hl()|0;Lg[c[(c[d>>2]|0)+12>>2]&127](d,(c[a+4>>2]|0)+(0-(c[a>>2]|0)<<2)|0);i=b;return}function Oj(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,j=0.0,k=0.0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0;d=i;c[a+0>>2]=c[13904>>2];c[a+4>>2]=c[13908>>2];c[a+8>>2]=c[13912>>2];c[a+12>>2]=c[13916>>2];e=b+8|0;f=c[b+4>>2]|0;if((c[e>>2]|0)==(f|0)){i=d;return}h=b+12|0;b=a+4|0;j=-3.4028234663852886e+38;k=3.4028234663852886e+38;l=h;m=f;n=0.0;a:while(1){o=k;p=j;q=c[l>>2]|0;r=n;while(1){if(!(q>>>0<m>>>0)){break a}s=+g[q>>2];if(s<o){g[a>>2]=s;t=+g[q>>2];u=s}else{t=s;u=o}if(t>p){g[b>>2]=t;v=+g[q>>2];w=t}else{v=t;w=p}x=r+v;q=q+4|0;if((q|0)==(f|0)){break}else{o=u;p=w;r=x}}j=w;k=u;l=e;m=c[h>>2]|0;n=x}g[a+12>>2]=+g[c[h>>2]>>2];g[a+8>>2]=r/+(f-(c[e>>2]|0)>>2|0);i=d;return}function Pj(b){b=b|0;g[b>>2]=0.0;g[b+4>>2]=1.0;a[b+8|0]=1;return}function Qj(b,c,d){b=b|0;c=c|0;d=+d;var e=0,f=0.0;e=i;if((a[b+8|0]|0)==0){i=e;return}f=+g[b>>2]+ +g[b+4>>2]*d;d=+g[c+24>>2];g[b>>2]=f-d*+S(+(f/d));i=e;return}function Rj(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var j=0,l=0,m=0,n=0;j=i;i=i+80|0;l=j;m=j+8|0;n=b+8|0;if(fh[c[(c[e>>2]|0)+8>>2]&15](e,(a[n]|0)!=0?13920:13928,f,0)|0){a[n]=a[n]^1}h[k>>3]=+g[b>>2];c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];gd(m|0,13936,l|0)|0;if(bh[c[(c[e>>2]|0)+12>>2]&1](e,m,0.0,+g[d+24>>2],b,1.0,f)|0){a[n]=0}n=b+4|0;h[k>>3]=+g[n>>2];c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];gd(m|0,13960,l|0)|0;bh[c[(c[e>>2]|0)+12>>2]&1](e,m,-5.0,5.0,n,1.0,f)|0;if(!(fh[c[(c[e>>2]|0)+8>>2]&15](e,13984,+g[n>>2]!=1.0&f,0)|0)){i=j;return}g[n>>2]=1.0;i=j;return}function Sj(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0;d=i;i=i+32|0;e=d;El(e);c[b+0>>2]=c[e+0>>2];c[b+4>>2]=c[e+4>>2];c[b+8>>2]=c[e+8>>2];c[b+12>>2]=c[e+12>>2];c[b+16>>2]=c[e+16>>2];c[b+20>>2]=c[e+20>>2];e=c[a>>2]|0;if((e|0)==0){i=d;return}f=c[a+4>>2]|0;if((f|0)==0|e>>>0>f>>>0){i=d;return}if(e>>>0<f>>>0){h=3.4028234663852886e+38;j=-3.4028234663852886e+38;k=3.4028234663852886e+38;l=-3.4028234663852886e+38;m=3.4028234663852886e+38;n=-3.4028234663852886e+38;a=e;while(1){o=+g[a+48>>2];p=h<o?h:o;q=+g[a+52>>2];r=m<q?m:q;s=+g[a+56>>2];t=k<s?k:s;u=j>o?j:o;o=n>q?n:q;q=l>s?l:s;e=a+64|0;if(e>>>0<f>>>0){h=p;j=u;k=t;l=q;m=r;n=o;a=e}else{v=p;w=u;x=t;y=q;z=r;A=o;break}}}else{v=3.4028234663852886e+38;w=-3.4028234663852886e+38;x=3.4028234663852886e+38;y=-3.4028234663852886e+38;z=3.4028234663852886e+38;A=-3.4028234663852886e+38}g[b>>2]=v;g[b+4>>2]=z;g[b+8>>2]=x;a=b+12|0;g[a>>2]=w;g[a+4>>2]=A;g[a+8>>2]=y;i=d;return}function Tj(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;i=i+64|0;f=e+40|0;g=e;h=e+8|0;j=e+16|0;k=e+24|0;l=e+32|0;wl(g);m=Vh(Vh(Vh(c[g>>2]|0,14008)|0,b)|0,14040)|0;ln(f,m+(c[(c[m>>2]|0)+ -12>>2]|0)|0);n=ws(f,22144)|0;o=ch[c[(c[n>>2]|0)+28>>2]&31](n,10)|0;vs(f);go(m,o)|0;Tn(m)|0;zl(g);ml(h,b,14048);if(!(pl(h)|0)){xl(j);g=Vh(Vh(Vh(c[j>>2]|0,14056)|0,b)|0,14040)|0;ln(f,g+(c[(c[g>>2]|0)+ -12>>2]|0)|0);m=ws(f,22144)|0;o=ch[c[(c[m>>2]|0)+28>>2]&31](m,10)|0;vs(f);go(g,o)|0;Tn(g)|0;zl(j);p=0;ol(h);i=e;return p|0}ll(k,h);j=c[k>>2]|0;g=Mg[c[(c[j>>2]|0)+16>>2]&127](j)|0;j=c[k>>2]|0;Sg[c[(c[j>>2]|0)+4>>2]&31](j,f,13)|0;j=0;while(1){o=j+1|0;if((a[f+j|0]|0)!=(a[14264+j|0]|0)){q=j;break}if(o>>>0<13){j=o}else{q=o;break}}j=c[k>>2]|0;Sg[c[(c[j>>2]|0)+12>>2]&31](j,g,2)|0;if((q|0)!=13){xl(l);q=Vh(Vh(Vh(c[l>>2]|0,14088)|0,b)|0,14040)|0;ln(f,q+(c[(c[q>>2]|0)+ -12>>2]|0)|0);b=ws(f,22144)|0;g=ch[c[(c[b>>2]|0)+28>>2]&31](b,10)|0;vs(f);go(q,g)|0;Tn(q)|0;zl(l);p=0;ol(h);i=e;return p|0}l=c[k>>2]|0;Sg[c[(c[l>>2]|0)+4>>2]&31](l,f,13)|0;l=c[k>>2]|0;Sg[c[(c[l>>2]|0)+4>>2]&31](l,f,4)|0;l=c[f>>2]|0;if((a[k+4|0]|0)==0){r=l}else{r=od(l|0)|0}ik(d,k,r);p=1;ol(h);i=e;return p|0}function Uj(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;i=i+64|0;f=e+40|0;g=e;h=e+8|0;j=e+16|0;k=e+24|0;l=e+32|0;wl(g);m=Vh(Vh(Vh(c[g>>2]|0,14136)|0,b)|0,14040)|0;ln(f,m+(c[(c[m>>2]|0)+ -12>>2]|0)|0);n=ws(f,22144)|0;o=ch[c[(c[n>>2]|0)+28>>2]&31](n,10)|0;vs(f);go(m,o)|0;Tn(m)|0;zl(g);ml(h,b,14048);if(!(pl(h)|0)){xl(j);g=Vh(Vh(Vh(c[j>>2]|0,14168)|0,b)|0,14040)|0;ln(f,g+(c[(c[g>>2]|0)+ -12>>2]|0)|0);m=ws(f,22144)|0;o=ch[c[(c[m>>2]|0)+28>>2]&31](m,10)|0;vs(f);go(g,o)|0;Tn(g)|0;zl(j);p=0;ol(h);i=e;return p|0}ll(k,h);j=c[k>>2]|0;g=Mg[c[(c[j>>2]|0)+16>>2]&127](j)|0;j=c[k>>2]|0;Sg[c[(c[j>>2]|0)+4>>2]&31](j,f,14)|0;j=0;while(1){o=j+1|0;if((a[f+j|0]|0)!=(a[14248+j|0]|0)){q=j;break}if(o>>>0<14){j=o}else{q=o;break}}j=c[k>>2]|0;Sg[c[(c[j>>2]|0)+12>>2]&31](j,g,2)|0;if((q|0)!=14){xl(l);q=Vh(Vh(Vh(c[l>>2]|0,14200)|0,b)|0,14040)|0;ln(f,q+(c[(c[q>>2]|0)+ -12>>2]|0)|0);b=ws(f,22144)|0;g=ch[c[(c[b>>2]|0)+28>>2]&31](b,10)|0;vs(f);go(q,g)|0;Tn(q)|0;zl(l);p=0;ol(h);i=e;return p|0}l=c[k>>2]|0;Sg[c[(c[l>>2]|0)+4>>2]&31](l,f,14)|0;l=c[k>>2]|0;Sg[c[(c[l>>2]|0)+4>>2]&31](l,f,4)|0;l=c[f>>2]|0;if((a[k+4|0]|0)==0){r=l}else{r=od(l|0)|0}Yj(d,k,r);p=1;ol(h);i=e;return p|0}function Vj(b,e,f,g,h,j){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0;k=i;i=i+80|0;l=k+16|0;m=k+40|0;n=k+32|0;o=k+24|0;p=k+48|0;q=k+8|0;r=k+4|0;s=k;t=k+12|0;ul(m);u=Vh(Vh(Vh(c[m>>2]|0,14280)|0,b)|0,14312)|0;ln(l,u+(c[(c[u>>2]|0)+ -12>>2]|0)|0);v=ws(l,22144)|0;w=ch[c[(c[v>>2]|0)+28>>2]&31](v,10)|0;vs(l);go(u,w)|0;Tn(u)|0;zl(m);ml(n,b,14320);if(!(pl(n)|0)){xl(o);m=Vh(Vh(Vh(c[o>>2]|0,14328)|0,b)|0,14352)|0;ln(l,m+(c[(c[m>>2]|0)+ -12>>2]|0)|0);b=ws(l,22144)|0;u=ch[c[(c[b>>2]|0)+28>>2]&31](b,10)|0;vs(l);go(m,u)|0;Tn(m)|0;zl(o);x=0;ol(n);i=k;return x|0}a[p]=0;a[p+1|0]=0;a[p+2|0]=10;o=p+12|0;m=e&255;u=p+3|0;l=u+9|0;do{a[u]=0;u=u+1|0}while((u|0)<(l|0));a[o]=m;a[p+13|0]=e>>>8;a[p+14|0]=f;a[p+15|0]=f>>>8;a[p+16|0]=j?32:24;a[p+17|0]=0;rl(n,p,18)|0;if((e|0)==0|(f|0)==0){x=1;ol(n);i=k;return x|0}p=14368+(g<<2)|0;m=Hl()|0;o=ea(ea(f,e)|0,j?5:4)|0;u=Sg[c[(c[m>>2]|0)+8>>2]&31](m,o,1)|0;do{if((g|0)>1){o=e<<2;m=ea(o,f)|0;l=(m|0)>0;if(j){if(!l){y=0;break}b=q+1|0;w=q+2|0;v=q+3|0;z=q+(d[p]|0)|0;A=q+(d[14369+(g<<2)|0]|0)|0;B=q+(d[14370+(g<<2)|0]|0)|0;C=q+(d[14371+(g<<2)|0]|0)|0;D=0;E=0;while(1){a[q]=a[h+E|0]|0;a[b]=a[h+(E|1)|0]|0;a[w]=a[h+(E|2)|0]|0;a[v]=a[h+(E|3)|0]|0;F=E+4|0;G=E+o|0;if((F|0)<(G|0)){H=c[q>>2]|0;I=1;J=D;K=E;L=F;while(1){F=(d[h+(K+5)|0]|0)<<8|(d[h+L|0]|0)|(d[h+(K+6)|0]|0)<<16|(d[h+(K+7)|0]|0)<<24;if((H|0)!=(F|0)|(I|0)==128){a[u+J|0]=I+127|128;a[u+(J+1)|0]=a[z]|0;a[u+(J+2)|0]=a[A]|0;a[u+(J+3)|0]=a[B]|0;a[u+(J+4)|0]=a[C]|0;c[q>>2]=F;M=0;N=J+5|0}else{M=I;N=J}O=L+4|0;if((O|0)<(G|0)){P=L;H=F;I=M+1|0;J=N;L=O;K=P}else{break}}Q=(M|128)&255;R=N}else{Q=-128;R=D}a[u+R|0]=Q;a[u+(R+1)|0]=a[z]|0;a[u+(R+2)|0]=a[A]|0;a[u+(R+3)|0]=a[B]|0;a[u+(R+4)|0]=a[C]|0;K=R+5|0;if((G|0)<(m|0)){D=K;E=G}else{y=K;break}}}else{if(!l){y=0;break}E=r+1|0;D=r+2|0;C=r+3|0;B=r+(d[p]|0)|0;A=r+(d[14369+(g<<2)|0]|0)|0;z=r+(d[14370+(g<<2)|0]|0)|0;v=0;w=0;while(1){a[r]=a[h+w|0]|0;a[E]=a[h+(w|1)|0]|0;a[D]=a[h+(w|2)|0]|0;a[C]=0;b=w+4|0;K=w+o|0;if((b|0)<(K|0)){L=c[r>>2]|0;J=1;I=v;H=w;P=b;while(1){b=(d[h+(H+5)|0]|0)<<8|(d[h+P|0]|0)|(d[h+(H+6)|0]|0)<<16;if((L|0)!=(b|0)|(J|0)==128){a[u+I|0]=J+127|128;a[u+(I+1)|0]=a[B]|0;a[u+(I+2)|0]=a[A]|0;a[u+(I+3)|0]=a[z]|0;c[r>>2]=b;S=0;T=I+4|0}else{S=J;T=I}O=P+4|0;if((O|0)<(K|0)){F=P;L=b;J=S+1|0;I=T;P=O;H=F}else{break}}U=(S|128)&255;V=T}else{U=-128;V=v}a[u+V|0]=U;a[u+(V+1)|0]=a[B]|0;a[u+(V+2)|0]=a[A]|0;a[u+(V+3)|0]=a[z]|0;H=V+4|0;if((K|0)<(m|0)){v=H;w=K}else{y=H;break}}}}else{w=e*3|0;v=ea(w,f)|0;m=(v|0)>0;if(j){if(!m){y=0;break}z=s+1|0;A=s+2|0;B=s+3|0;o=s+(d[p]|0)|0;C=s+(d[14369+(g<<2)|0]|0)|0;D=s+(d[14370+(g<<2)|0]|0)|0;E=s+(d[14371+(g<<2)|0]|0)|0;l=0;H=0;while(1){a[s]=a[h+H|0]|0;a[z]=a[h+(H+1)|0]|0;a[A]=a[h+(H+2)|0]|0;a[B]=-1;P=H+3|0;I=H+w|0;if((P|0)<(I|0)){J=c[s>>2]|0;L=1;G=l;F=H;O=P;while(1){P=d[h+O|0]|0|(d[h+(F+4)|0]|0)<<8|(d[h+(F+5)|0]|0)<<16|-16777216;if((J|0)!=(P|0)|(L|0)==128){a[u+G|0]=L+127|128;a[u+(G+1)|0]=a[o]|0;a[u+(G+2)|0]=a[C]|0;a[u+(G+3)|0]=a[D]|0;a[u+(G+4)|0]=a[E]|0;c[s>>2]=P;W=0;X=G+5|0}else{W=L;X=G}b=O+3|0;if((b|0)<(I|0)){Y=O;J=P;L=W+1|0;G=X;O=b;F=Y}else{break}}Z=(W|128)&255;_=X}else{Z=-128;_=l}a[u+_|0]=Z;a[u+(_+1)|0]=a[o]|0;a[u+(_+2)|0]=a[C]|0;a[u+(_+3)|0]=a[D]|0;a[u+(_+4)|0]=a[E]|0;F=_+5|0;if((I|0)<(v|0)){l=F;H=I}else{y=F;break}}}else{if(!m){y=0;break}H=t+1|0;l=t+2|0;E=t+3|0;D=t+(d[p]|0)|0;C=t+(d[14369+(g<<2)|0]|0)|0;o=t+(d[14370+(g<<2)|0]|0)|0;B=0;A=0;while(1){a[t]=a[h+A|0]|0;a[H]=a[h+(A+1)|0]|0;a[l]=a[h+(A+2)|0]|0;a[E]=0;z=A+3|0;F=A+w|0;if((z|0)<(F|0)){O=c[t>>2]|0;G=1;L=B;J=A;K=z;while(1){z=(d[h+(J+4)|0]|0)<<8|(d[h+K|0]|0)|(d[h+(J+5)|0]|0)<<16;if((O|0)!=(z|0)|(G|0)==128){a[u+L|0]=G+127|128;a[u+(L+1)|0]=a[D]|0;a[u+(L+2)|0]=a[C]|0;a[u+(L+3)|0]=a[o]|0;c[t>>2]=z;$=0;aa=L+4|0}else{$=G;aa=L}Y=K+3|0;if((Y|0)<(F|0)){b=K;O=z;G=$+1|0;L=aa;K=Y;J=b}else{break}}ba=($|128)&255;ca=aa}else{ba=-128;ca=B}a[u+ca|0]=ba;a[u+(ca+1)|0]=a[D]|0;a[u+(ca+2)|0]=a[C]|0;a[u+(ca+3)|0]=a[o]|0;J=ca+4|0;if((F|0)<(v|0)){B=J;A=F}else{y=J;break}}}}}while(0);rl(n,u,y)|0;y=Hl()|0;Lg[c[(c[y>>2]|0)+12>>2]&127](y,u);x=1;ol(n);i=k;return x|0}function Wj(a){a=a|0;var b=0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;c[a+16>>2]=0;c[a+20>>2]=0;c[a+24>>2]=0;c[a+28>>2]=0;i=b;return}function Xj(a){a=a|0;var b=0,d=0,e=0;b=i;d=Hl()|0;Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[a>>2]|0);c[a>>2]=0;c[a+4>>2]=0;e=a+8|0;Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[e>>2]|0);c[e>>2]=0;c[a+12>>2]=0;e=a+16|0;Lg[c[(c[d>>2]|0)+12>>2]&127](d,c[e>>2]|0);c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;i=b;return}function Yj(e,f,h){e=e|0;f=f|0;h=h|0;var j=0,l=0,m=0,n=0,o=0.0,p=0.0,q=0,r=0,s=0,t=0,u=0.0,v=0,w=0,x=0,y=0,z=0,A=0.0,B=0,C=0,D=0.0,E=0;j=i;i=i+16|0;l=j;m=Hl()|0;Lg[c[(c[m>>2]|0)+12>>2]&127](m,c[e>>2]|0);c[e>>2]=0;c[e+4>>2]=0;n=e+8|0;Lg[c[(c[m>>2]|0)+12>>2]&127](m,c[n>>2]|0);c[n>>2]=0;c[e+12>>2]=0;n=e+16|0;Lg[c[(c[m>>2]|0)+12>>2]&127](m,c[n>>2]|0);c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;if((h|0)!=2){i=j;return}h=Hl()|0;n=c[f>>2]|0;Sg[c[(c[n>>2]|0)+4>>2]&31](n,l,4)|0;n=f+4|0;o=+g[l>>2];if((a[n]|0)==0){p=o}else{m=od((g[k>>2]=o,c[k>>2]|0)|0)|0;p=(c[k>>2]=m,+g[k>>2])}g[e+24>>2]=p;m=c[f>>2]|0;Sg[c[(c[m>>2]|0)+4>>2]&31](m,l,4)|0;m=c[l>>2]|0;if((a[n]|0)==0){q=m}else{q=od(m|0)|0}c[e+28>>2]=q;q=c[f>>2]|0;Sg[c[(c[q>>2]|0)+4>>2]&31](q,l,4)|0;q=c[l>>2]|0;if((a[n]|0)==0){r=q}else{r=od(q|0)|0}q=Sg[c[(c[h>>2]|0)+8>>2]&31](h,r*12|0,4)|0;m=e;c[m>>2]=q;c[m+4>>2]=q+(((q|0)!=0?r:0)*12|0);a:do{if((r|0)>0){m=q;s=0;while(1){t=c[f>>2]|0;Sg[c[(c[t>>2]|0)+4>>2]&31](t,l,4)|0;p=+g[l>>2];if((a[n]|0)==0){u=p}else{t=od((g[k>>2]=p,c[k>>2]|0)|0)|0;u=(c[k>>2]=t,+g[k>>2])}g[m+(s*12|0)>>2]=u;t=c[f>>2]|0;Sg[c[(c[t>>2]|0)+4>>2]&31](t,l,2)|0;t=b[l>>1]|0;if((a[n]|0)==0){v=t}else{v=De(t|0)|0}b[m+(s*12|0)+4>>1]=v;t=m+(s*12|0)+6|0;w=c[f>>2]|0;Sg[c[(c[w>>2]|0)+4>>2]&31](w,t,6)|0;if((a[n]|0)!=0){w=a[t]|0;x=t+1|0;a[t]=a[x]|0;a[x]=w;w=m+(s*12|0)+8|0;x=a[w]|0;y=t+3|0;a[w]=a[y]|0;a[y]=x;x=m+(s*12|0)+10|0;y=a[x]|0;w=t+5|0;a[x]=a[w]|0;a[w]=y}y=s+1|0;if((y|0)==(r|0)){break a}m=c[e>>2]|0;s=y}}}while(0);r=c[f>>2]|0;Sg[c[(c[r>>2]|0)+4>>2]&31](r,l,4)|0;r=c[l>>2]|0;if((a[n]|0)==0){z=r}else{z=od(r|0)|0}r=e+8|0;v=Sg[c[(c[h>>2]|0)+8>>2]&31](h,z*12|0,4)|0;q=r;c[q>>2]=v;c[q+4>>2]=v+(((v|0)!=0?z:0)*12|0);b:do{if((z|0)>0){q=v;s=0;while(1){m=c[f>>2]|0;Sg[c[(c[m>>2]|0)+4>>2]&31](m,l,4)|0;u=+g[l>>2];if((a[n]|0)==0){A=u}else{m=od((g[k>>2]=u,c[k>>2]|0)|0)|0;A=(c[k>>2]=m,+g[k>>2])}g[q+(s*12|0)>>2]=A;m=c[f>>2]|0;Sg[c[(c[m>>2]|0)+4>>2]&31](m,l,2)|0;m=b[l>>1]|0;if((a[n]|0)==0){B=m}else{B=De(m|0)|0}m=q+(s*12|0)+4|0;b[m>>1]=b[m>>1]&-32768|B&32767;y=c[f>>2]|0;Sg[c[(c[y>>2]|0)+4>>2]&31](y,l,1)|0;b[m>>1]=b[m>>1]&32767|d[l]<<15&65535;m=q+(s*12|0)+6|0;y=c[f>>2]|0;Sg[c[(c[y>>2]|0)+4>>2]&31](y,m,6)|0;if((a[n]|0)!=0){y=a[m]|0;w=m+1|0;a[m]=a[w]|0;a[w]=y;y=q+(s*12|0)+8|0;w=a[y]|0;x=m+3|0;a[y]=a[x]|0;a[x]=w;w=q+(s*12|0)+10|0;x=a[w]|0;y=m+5|0;a[w]=a[y]|0;a[y]=x}x=s+1|0;if((x|0)==(z|0)){break b}q=c[r>>2]|0;s=x}}}while(0);r=c[f>>2]|0;Sg[c[(c[r>>2]|0)+4>>2]&31](r,l,4)|0;r=c[l>>2]|0;if((a[n]|0)==0){C=r}else{C=od(r|0)|0}r=e+16|0;e=Sg[c[(c[h>>2]|0)+8>>2]&31](h,C*12|0,4)|0;h=r;c[h>>2]=e;c[h+4>>2]=e+(((e|0)!=0?C:0)*12|0);if((C|0)<=0){i=j;return}h=e;e=0;while(1){z=c[f>>2]|0;Sg[c[(c[z>>2]|0)+4>>2]&31](z,l,4)|0;A=+g[l>>2];if((a[n]|0)==0){D=A}else{z=od((g[k>>2]=A,c[k>>2]|0)|0)|0;D=(c[k>>2]=z,+g[k>>2])}g[h+(e*12|0)>>2]=D;z=c[f>>2]|0;Sg[c[(c[z>>2]|0)+4>>2]&31](z,l,2)|0;z=b[l>>1]|0;if((a[n]|0)==0){E=z}else{E=De(z|0)|0}b[h+(e*12|0)+4>>1]=E;z=h+(e*12|0)+6|0;B=c[f>>2]|0;Sg[c[(c[B>>2]|0)+4>>2]&31](B,z,6)|0;if((a[n]|0)!=0){B=a[z]|0;v=z+1|0;a[z]=a[v]|0;a[v]=B;B=h+(e*12|0)+8|0;v=a[B]|0;s=z+3|0;a[B]=a[s]|0;a[s]=v;v=h+(e*12|0)+10|0;s=a[v]|0;B=z+5|0;a[v]=a[B]|0;a[B]=s}s=e+1|0;if((s|0)==(C|0)){break}h=c[r>>2]|0;e=s}i=j;return}function Zj(a){a=a|0;var b=0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;c[a+16>>2]=0;i=b;return}function _j(a){a=a|0;var b=0,d=0;b=i;g[a>>2]=.10000000149011612;d=a+4|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[d+16>>2]=0;c[d+20>>2]=0;i=b;return}function $j(a){a=a|0;var b=0,d=0,e=0.0,f=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0.0,pa=0,qa=0.0,ra=0.0,sa=0,ta=0.0,ua=0.0,va=0,wa=0.0,xa=0.0,ya=0,za=0.0,Aa=0.0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0.0,Wa=0.0,Xa=0.0,Ya=0.0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0.0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0;b=i;i=i+4128|0;d=b;e=+g[a>>2];f=c[a+4>>2]|0;h=c[a+12>>2]|0;j=c[a+20>>2]|0;l=c[a+8>>2]|0;m=c[a+16>>2]|0;n=c[a+24>>2]|0;o=(m-h|0)/160|0;p=e>0.0&(f|0)!=0&(h|0)!=0&(j|0)!=0&l>>>0>=f>>>0&m>>>0>=h>>>0&n>>>0>=j>>>0&((n-j|0)/160|0|0)>=(o|0);if((f|0)!=0&f>>>0<l>>>0){j=f;n=p;while(1){h=c[j+4>>2]|0;m=c[j+8>>2]|0;q=n&(h|0)!=0&m>>>0>=h>>>0&((m-h|0)/160|0|0)>=(o|0);h=c[j+12>>2]|0;m=c[j+16>>2]|0;if((h|0)==0){r=q&(m|0)==0}else{r=q&m>>>0>=h>>>0&(m-h>>4|0)>=(o|0)}h=j+20|0;if(h>>>0<l>>>0){j=h;n=r}else{s=r;break}}}else{s=p}if(!s){t=0;i=b;return t|0}s=d+4096|0;c[s>>2]=a;p=d+4100|0;c[p>>2]=o;r=d+4104|0;c[r>>2]=0;n=d+4108|0;c[n>>2]=0;j=d+4112|0;g[j>>2]=0.0;a:do{if(f>>>0<l>>>0){h=a;m=o;q=0;u=o;v=f;while(1){w=+g[v>>2];if(!(w<=0.0)){g[j>>2]=w+ +g[j>>2];w=+g[v>>2];x=v+12|0;y=c[x>>2]|0;b:do{if((y|0)==0){z=(m|0)==0;if((q|0)==0){if(z){A=u;B=0;break}C=v+4|0;D=h;E=0;while(1){F=c[C>>2]|0;G=c[D+20>>2]|0;g[d+(E<<4)>>2]=w;g[d+(E<<4)+4>>2]=w;g[d+(E<<4)+8>>2]=w;g[d+(E<<4)+12>>2]=w;H=w*+g[F+(E*160|0)+4>>2];I=w*+g[F+(E*160|0)+8>>2];J=w*+g[F+(E*160|0)+12>>2];K=w*+g[F+(E*160|0)+16>>2];L=w*+g[F+(E*160|0)+20>>2];M=w*+g[F+(E*160|0)+24>>2];N=w*+g[F+(E*160|0)+28>>2];O=w*+g[F+(E*160|0)+32>>2];P=w*+g[F+(E*160|0)+36>>2];Q=w*+g[F+(E*160|0)+40>>2];R=w*+g[F+(E*160|0)+44>>2];g[G+(E*160|0)>>2]=w*+g[F+(E*160|0)>>2];g[G+(E*160|0)+4>>2]=H;g[G+(E*160|0)+8>>2]=I;g[G+(E*160|0)+12>>2]=J;g[G+(E*160|0)+16>>2]=K;g[G+(E*160|0)+20>>2]=L;g[G+(E*160|0)+24>>2]=M;g[G+(E*160|0)+28>>2]=N;g[G+(E*160|0)+32>>2]=O;g[G+(E*160|0)+36>>2]=P;g[G+(E*160|0)+40>>2]=Q;g[G+(E*160|0)+44>>2]=R;R=w*+g[F+(E*160|0)+52>>2];Q=w*+g[F+(E*160|0)+56>>2];P=w*+g[F+(E*160|0)+60>>2];O=w*+g[F+(E*160|0)+64>>2];N=w*+g[F+(E*160|0)+68>>2];M=w*+g[F+(E*160|0)+72>>2];L=w*+g[F+(E*160|0)+76>>2];K=w*+g[F+(E*160|0)+80>>2];J=w*+g[F+(E*160|0)+84>>2];I=w*+g[F+(E*160|0)+88>>2];H=w*+g[F+(E*160|0)+92>>2];S=w*+g[F+(E*160|0)+96>>2];T=w*+g[F+(E*160|0)+100>>2];U=w*+g[F+(E*160|0)+104>>2];V=w*+g[F+(E*160|0)+108>>2];g[G+(E*160|0)+48>>2]=w*+g[F+(E*160|0)+48>>2];g[G+(E*160|0)+52>>2]=R;g[G+(E*160|0)+56>>2]=Q;g[G+(E*160|0)+60>>2]=P;g[G+(E*160|0)+64>>2]=O;g[G+(E*160|0)+68>>2]=N;g[G+(E*160|0)+72>>2]=M;g[G+(E*160|0)+76>>2]=L;g[G+(E*160|0)+80>>2]=K;g[G+(E*160|0)+84>>2]=J;g[G+(E*160|0)+88>>2]=I;g[G+(E*160|0)+92>>2]=H;g[G+(E*160|0)+96>>2]=S;g[G+(E*160|0)+100>>2]=T;g[G+(E*160|0)+104>>2]=U;g[G+(E*160|0)+108>>2]=V;V=w*+g[F+(E*160|0)+116>>2];U=w*+g[F+(E*160|0)+120>>2];T=w*+g[F+(E*160|0)+124>>2];S=w*+g[F+(E*160|0)+128>>2];H=w*+g[F+(E*160|0)+132>>2];I=w*+g[F+(E*160|0)+136>>2];J=w*+g[F+(E*160|0)+140>>2];K=w*+g[F+(E*160|0)+144>>2];L=w*+g[F+(E*160|0)+148>>2];M=w*+g[F+(E*160|0)+152>>2];N=w*+g[F+(E*160|0)+156>>2];g[G+(E*160|0)+112>>2]=w*+g[F+(E*160|0)+112>>2];g[G+(E*160|0)+116>>2]=V;g[G+(E*160|0)+120>>2]=U;g[G+(E*160|0)+124>>2]=T;g[G+(E*160|0)+128>>2]=S;g[G+(E*160|0)+132>>2]=H;g[G+(E*160|0)+136>>2]=I;g[G+(E*160|0)+140>>2]=J;g[G+(E*160|0)+144>>2]=K;g[G+(E*160|0)+148>>2]=L;g[G+(E*160|0)+152>>2]=M;g[G+(E*160|0)+156>>2]=N;G=E+1|0;F=c[p>>2]|0;if(!(G>>>0<F>>>0)){A=F;B=F;break b}D=c[s>>2]|0;E=G}}else{if(z){A=u;B=0;break}E=v+4|0;D=h;C=0;while(1){G=c[E>>2]|0;F=c[D+20>>2]|0;W=d+(C<<4)|0;X=d+(C<<4)+4|0;N=w+ +g[X>>2];Y=d+(C<<4)+8|0;M=w+ +g[Y>>2];Z=d+(C<<4)+12|0;L=w+ +g[Z>>2];g[W>>2]=w+ +g[W>>2];g[X>>2]=N;g[Y>>2]=M;g[Z>>2]=L;Z=F+(C*160|0)|0;Y=F+(C*160|0)+4|0;L=w*+g[G+(C*160|0)+4>>2]+ +g[Y>>2];X=F+(C*160|0)+8|0;M=w*+g[G+(C*160|0)+8>>2]+ +g[X>>2];W=F+(C*160|0)+12|0;N=w*+g[G+(C*160|0)+12>>2]+ +g[W>>2];_=F+(C*160|0)+16|0;K=w*+g[G+(C*160|0)+16>>2]+ +g[_>>2];$=F+(C*160|0)+20|0;J=w*+g[G+(C*160|0)+20>>2]+ +g[$>>2];aa=F+(C*160|0)+24|0;I=w*+g[G+(C*160|0)+24>>2]+ +g[aa>>2];ba=F+(C*160|0)+28|0;H=w*+g[G+(C*160|0)+28>>2]+ +g[ba>>2];ca=F+(C*160|0)+32|0;S=w*+g[G+(C*160|0)+32>>2]+ +g[ca>>2];da=F+(C*160|0)+36|0;T=w*+g[G+(C*160|0)+36>>2]+ +g[da>>2];ea=F+(C*160|0)+40|0;U=w*+g[G+(C*160|0)+40>>2]+ +g[ea>>2];fa=F+(C*160|0)+44|0;V=w*+g[G+(C*160|0)+44>>2]+ +g[fa>>2];g[Z>>2]=w*+g[G+(C*160|0)>>2]+ +g[Z>>2];g[Y>>2]=L;g[X>>2]=M;g[W>>2]=N;g[_>>2]=K;g[$>>2]=J;g[aa>>2]=I;g[ba>>2]=H;g[ca>>2]=S;g[da>>2]=T;g[ea>>2]=U;g[fa>>2]=V;fa=F+(C*160|0)+48|0;V=+g[fa>>2];U=+g[G+(C*160|0)+48>>2];ea=F+(C*160|0)+52|0;T=+g[ea>>2];S=+g[G+(C*160|0)+52>>2];da=F+(C*160|0)+56|0;H=+g[da>>2];I=+g[G+(C*160|0)+56>>2];ca=F+(C*160|0)+60|0;J=+g[ca>>2];K=+g[G+(C*160|0)+60>>2];ba=F+(C*160|0)+64|0;N=+g[ba>>2];M=+g[G+(C*160|0)+64>>2];aa=F+(C*160|0)+68|0;L=+g[aa>>2];O=+g[G+(C*160|0)+68>>2];$=F+(C*160|0)+72|0;P=+g[$>>2];Q=+g[G+(C*160|0)+72>>2];_=F+(C*160|0)+76|0;R=+g[_>>2];ga=+g[G+(C*160|0)+76>>2];W=F+(C*160|0)+80|0;ha=+g[W>>2];ia=+g[G+(C*160|0)+80>>2];X=F+(C*160|0)+84|0;ja=+g[X>>2];ka=+g[G+(C*160|0)+84>>2];Y=F+(C*160|0)+88|0;la=+g[Y>>2];ma=+g[G+(C*160|0)+88>>2];Z=F+(C*160|0)+92|0;na=+g[Z>>2];oa=+g[G+(C*160|0)+92>>2];pa=F+(C*160|0)+96|0;qa=+g[pa>>2];ra=+g[G+(C*160|0)+96>>2];sa=F+(C*160|0)+100|0;ta=+g[sa>>2];ua=+g[G+(C*160|0)+100>>2];va=F+(C*160|0)+104|0;wa=+g[va>>2];xa=+g[G+(C*160|0)+104>>2];ya=F+(C*160|0)+108|0;za=+g[ya>>2];Aa=+g[G+(C*160|0)+108>>2];Ba=(g[k>>2]=V*U+N*M+ha*ia+qa*ra,c[k>>2]|0);Ca=(g[k>>2]=T*S+L*O+ja*ka+ta*ua,c[k>>2]|0);Da=(g[k>>2]=H*I+P*Q+la*ma+wa*xa,c[k>>2]|0);Ea=Ba&-2147483648;Ba=Ca&-2147483648;Ca=Da&-2147483648;Da=(g[k>>2]=J*K+R*ga+na*oa+za*Aa,c[k>>2]|0)&-2147483648;Fa=(g[k>>2]=U,c[k>>2]|0);Ga=(g[k>>2]=S,c[k>>2]|0);Ha=(g[k>>2]=I,c[k>>2]|0);Ia=Da^(g[k>>2]=K,c[k>>2]|0);Ja=(g[k>>2]=M,c[k>>2]|0);Ka=(g[k>>2]=O,c[k>>2]|0);La=(g[k>>2]=Q,c[k>>2]|0);Ma=Da^(g[k>>2]=ga,c[k>>2]|0);Na=(g[k>>2]=ia,c[k>>2]|0);Oa=(g[k>>2]=ka,c[k>>2]|0);Pa=(g[k>>2]=ma,c[k>>2]|0);Qa=Da^(g[k>>2]=oa,c[k>>2]|0);Ra=(g[k>>2]=ra,c[k>>2]|0);Sa=(g[k>>2]=ua,c[k>>2]|0);Ta=(g[k>>2]=xa,c[k>>2]|0);Ua=Da^(g[k>>2]=Aa,c[k>>2]|0);Aa=w*(c[k>>2]=Fa^Ea,+g[k>>2]);xa=w*(c[k>>2]=Ba^Ga,+g[k>>2]);ua=w*(c[k>>2]=Ca^Ha,+g[k>>2]);ra=w*(c[k>>2]=Ia,+g[k>>2]);oa=w*(c[k>>2]=Ea^Ja,+g[k>>2]);ma=w*(c[k>>2]=Ba^Ka,+g[k>>2]);ka=w*(c[k>>2]=Ca^La,+g[k>>2]);ia=w*(c[k>>2]=Ma,+g[k>>2]);ga=w*(c[k>>2]=Ea^Na,+g[k>>2]);Q=w*(c[k>>2]=Ba^Oa,+g[k>>2]);O=w*(c[k>>2]=Ca^Pa,+g[k>>2]);M=w*(c[k>>2]=Qa,+g[k>>2]);K=w*(c[k>>2]=Ea^Ra,+g[k>>2]);I=w*(c[k>>2]=Ba^Sa,+g[k>>2]);S=w*(c[k>>2]=Ca^Ta,+g[k>>2]);U=za+w*(c[k>>2]=Ua,+g[k>>2]);g[fa>>2]=V+Aa;g[ea>>2]=T+xa;g[da>>2]=H+ua;g[ca>>2]=J+ra;g[ba>>2]=N+oa;g[aa>>2]=L+ma;g[$>>2]=P+ka;g[_>>2]=R+ia;g[W>>2]=ha+ga;g[X>>2]=ja+Q;g[Y>>2]=la+O;g[Z>>2]=na+M;g[pa>>2]=qa+K;g[sa>>2]=ta+I;g[va>>2]=wa+S;g[ya>>2]=U;ya=F+(C*160|0)+112|0;va=F+(C*160|0)+116|0;U=w*+g[G+(C*160|0)+116>>2]+ +g[va>>2];sa=F+(C*160|0)+120|0;S=w*+g[G+(C*160|0)+120>>2]+ +g[sa>>2];pa=F+(C*160|0)+124|0;wa=w*+g[G+(C*160|0)+124>>2]+ +g[pa>>2];Z=F+(C*160|0)+128|0;I=w*+g[G+(C*160|0)+128>>2]+ +g[Z>>2];Y=F+(C*160|0)+132|0;ta=w*+g[G+(C*160|0)+132>>2]+ +g[Y>>2];X=F+(C*160|0)+136|0;K=w*+g[G+(C*160|0)+136>>2]+ +g[X>>2];W=F+(C*160|0)+140|0;qa=w*+g[G+(C*160|0)+140>>2]+ +g[W>>2];_=F+(C*160|0)+144|0;M=w*+g[G+(C*160|0)+144>>2]+ +g[_>>2];$=F+(C*160|0)+148|0;na=w*+g[G+(C*160|0)+148>>2]+ +g[$>>2];aa=F+(C*160|0)+152|0;O=w*+g[G+(C*160|0)+152>>2]+ +g[aa>>2];ba=F+(C*160|0)+156|0;la=w*+g[G+(C*160|0)+156>>2]+ +g[ba>>2];g[ya>>2]=w*+g[G+(C*160|0)+112>>2]+ +g[ya>>2];g[va>>2]=U;g[sa>>2]=S;g[pa>>2]=wa;g[Z>>2]=I;g[Y>>2]=ta;g[X>>2]=K;g[W>>2]=qa;g[_>>2]=M;g[$>>2]=na;g[aa>>2]=O;g[ba>>2]=la;ba=C+1|0;aa=c[p>>2]|0;if(!(ba>>>0<aa>>>0)){A=aa;B=aa;break b}D=c[s>>2]|0;C=ba}}}else{c[n>>2]=(c[n>>2]|0)+1;C=(u|0)==0;if((q|0)==0){if(C){A=0;B=0;break}D=v+4|0;E=h;z=y;ba=0;while(1){aa=c[D>>2]|0;$=c[E+20>>2]|0;la=+g[z+(ba<<4)>>2];O=+g[z+(ba<<4)+4>>2];na=+g[z+(ba<<4)+8>>2];M=+g[z+(ba<<4)+12>>2];qa=w*(la>0.0?la:0.0);la=w*(O>0.0?O:0.0);O=w*(na>0.0?na:0.0);na=w*(M>0.0?M:0.0);g[d+(ba<<4)>>2]=qa;g[d+(ba<<4)+4>>2]=la;g[d+(ba<<4)+8>>2]=O;g[d+(ba<<4)+12>>2]=na;M=la*+g[aa+(ba*160|0)+4>>2];K=O*+g[aa+(ba*160|0)+8>>2];ta=na*+g[aa+(ba*160|0)+12>>2];I=qa*+g[aa+(ba*160|0)+16>>2];wa=la*+g[aa+(ba*160|0)+20>>2];S=O*+g[aa+(ba*160|0)+24>>2];U=na*+g[aa+(ba*160|0)+28>>2];Q=qa*+g[aa+(ba*160|0)+32>>2];ja=la*+g[aa+(ba*160|0)+36>>2];ga=O*+g[aa+(ba*160|0)+40>>2];ha=na*+g[aa+(ba*160|0)+44>>2];g[$+(ba*160|0)>>2]=qa*+g[aa+(ba*160|0)>>2];g[$+(ba*160|0)+4>>2]=M;g[$+(ba*160|0)+8>>2]=K;g[$+(ba*160|0)+12>>2]=ta;g[$+(ba*160|0)+16>>2]=I;g[$+(ba*160|0)+20>>2]=wa;g[$+(ba*160|0)+24>>2]=S;g[$+(ba*160|0)+28>>2]=U;g[$+(ba*160|0)+32>>2]=Q;g[$+(ba*160|0)+36>>2]=ja;g[$+(ba*160|0)+40>>2]=ga;g[$+(ba*160|0)+44>>2]=ha;ha=la*+g[aa+(ba*160|0)+52>>2];ga=O*+g[aa+(ba*160|0)+56>>2];ja=na*+g[aa+(ba*160|0)+60>>2];Q=qa*+g[aa+(ba*160|0)+64>>2];U=la*+g[aa+(ba*160|0)+68>>2];S=O*+g[aa+(ba*160|0)+72>>2];wa=na*+g[aa+(ba*160|0)+76>>2];I=qa*+g[aa+(ba*160|0)+80>>2];ta=la*+g[aa+(ba*160|0)+84>>2];K=O*+g[aa+(ba*160|0)+88>>2];M=na*+g[aa+(ba*160|0)+92>>2];ia=qa*+g[aa+(ba*160|0)+96>>2];R=la*+g[aa+(ba*160|0)+100>>2];ka=O*+g[aa+(ba*160|0)+104>>2];P=na*+g[aa+(ba*160|0)+108>>2];g[$+(ba*160|0)+48>>2]=qa*+g[aa+(ba*160|0)+48>>2];g[$+(ba*160|0)+52>>2]=ha;g[$+(ba*160|0)+56>>2]=ga;g[$+(ba*160|0)+60>>2]=ja;g[$+(ba*160|0)+64>>2]=Q;g[$+(ba*160|0)+68>>2]=U;g[$+(ba*160|0)+72>>2]=S;g[$+(ba*160|0)+76>>2]=wa;g[$+(ba*160|0)+80>>2]=I;g[$+(ba*160|0)+84>>2]=ta;g[$+(ba*160|0)+88>>2]=K;g[$+(ba*160|0)+92>>2]=M;g[$+(ba*160|0)+96>>2]=ia;g[$+(ba*160|0)+100>>2]=R;g[$+(ba*160|0)+104>>2]=ka;g[$+(ba*160|0)+108>>2]=P;P=la*+g[aa+(ba*160|0)+116>>2];ka=O*+g[aa+(ba*160|0)+120>>2];R=na*+g[aa+(ba*160|0)+124>>2];ia=qa*+g[aa+(ba*160|0)+128>>2];M=la*+g[aa+(ba*160|0)+132>>2];K=O*+g[aa+(ba*160|0)+136>>2];ta=na*+g[aa+(ba*160|0)+140>>2];I=qa*+g[aa+(ba*160|0)+144>>2];wa=la*+g[aa+(ba*160|0)+148>>2];la=O*+g[aa+(ba*160|0)+152>>2];O=na*+g[aa+(ba*160|0)+156>>2];g[$+(ba*160|0)+112>>2]=qa*+g[aa+(ba*160|0)+112>>2];g[$+(ba*160|0)+116>>2]=P;g[$+(ba*160|0)+120>>2]=ka;g[$+(ba*160|0)+124>>2]=R;g[$+(ba*160|0)+128>>2]=ia;g[$+(ba*160|0)+132>>2]=M;g[$+(ba*160|0)+136>>2]=K;g[$+(ba*160|0)+140>>2]=ta;g[$+(ba*160|0)+144>>2]=I;g[$+(ba*160|0)+148>>2]=wa;g[$+(ba*160|0)+152>>2]=la;g[$+(ba*160|0)+156>>2]=O;$=ba+1|0;aa=c[p>>2]|0;if(!($>>>0<aa>>>0)){A=aa;B=aa;break b}E=c[s>>2]|0;z=c[x>>2]|0;ba=$}}else{if(C){A=0;B=0;break}ba=v+4|0;z=h;E=y;D=0;while(1){$=c[ba>>2]|0;aa=c[z+20>>2]|0;O=+g[E+(D<<4)>>2];la=+g[E+(D<<4)+4>>2];wa=+g[E+(D<<4)+8>>2];I=+g[E+(D<<4)+12>>2];ta=w*(O>0.0?O:0.0);O=w*(la>0.0?la:0.0);la=w*(wa>0.0?wa:0.0);wa=w*(I>0.0?I:0.0);_=d+(D<<4)|0;W=d+(D<<4)+4|0;I=O+ +g[W>>2];X=d+(D<<4)+8|0;K=la+ +g[X>>2];Y=d+(D<<4)+12|0;M=wa+ +g[Y>>2];g[_>>2]=ta+ +g[_>>2];g[W>>2]=I;g[X>>2]=K;g[Y>>2]=M;Y=aa+(D*160|0)|0;X=aa+(D*160|0)+4|0;M=O*+g[$+(D*160|0)+4>>2]+ +g[X>>2];W=aa+(D*160|0)+8|0;K=la*+g[$+(D*160|0)+8>>2]+ +g[W>>2];_=aa+(D*160|0)+12|0;I=wa*+g[$+(D*160|0)+12>>2]+ +g[_>>2];Z=aa+(D*160|0)+16|0;ia=ta*+g[$+(D*160|0)+16>>2]+ +g[Z>>2];pa=aa+(D*160|0)+20|0;R=O*+g[$+(D*160|0)+20>>2]+ +g[pa>>2];sa=aa+(D*160|0)+24|0;ka=la*+g[$+(D*160|0)+24>>2]+ +g[sa>>2];va=aa+(D*160|0)+28|0;P=wa*+g[$+(D*160|0)+28>>2]+ +g[va>>2];ya=aa+(D*160|0)+32|0;qa=ta*+g[$+(D*160|0)+32>>2]+ +g[ya>>2];G=aa+(D*160|0)+36|0;na=O*+g[$+(D*160|0)+36>>2]+ +g[G>>2];F=aa+(D*160|0)+40|0;S=la*+g[$+(D*160|0)+40>>2]+ +g[F>>2];ca=aa+(D*160|0)+44|0;U=wa*+g[$+(D*160|0)+44>>2]+ +g[ca>>2];g[Y>>2]=ta*+g[$+(D*160|0)>>2]+ +g[Y>>2];g[X>>2]=M;g[W>>2]=K;g[_>>2]=I;g[Z>>2]=ia;g[pa>>2]=R;g[sa>>2]=ka;g[va>>2]=P;g[ya>>2]=qa;g[G>>2]=na;g[F>>2]=S;g[ca>>2]=U;ca=aa+(D*160|0)+48|0;U=+g[ca>>2];S=+g[$+(D*160|0)+48>>2];F=aa+(D*160|0)+52|0;na=+g[F>>2];qa=+g[$+(D*160|0)+52>>2];G=aa+(D*160|0)+56|0;P=+g[G>>2];ka=+g[$+(D*160|0)+56>>2];ya=aa+(D*160|0)+60|0;R=+g[ya>>2];ia=+g[$+(D*160|0)+60>>2];va=aa+(D*160|0)+64|0;I=+g[va>>2];K=+g[$+(D*160|0)+64>>2];sa=aa+(D*160|0)+68|0;M=+g[sa>>2];Q=+g[$+(D*160|0)+68>>2];pa=aa+(D*160|0)+72|0;ja=+g[pa>>2];ga=+g[$+(D*160|0)+72>>2];Z=aa+(D*160|0)+76|0;ha=+g[Z>>2];ma=+g[$+(D*160|0)+76>>2];_=aa+(D*160|0)+80|0;L=+g[_>>2];oa=+g[$+(D*160|0)+80>>2];W=aa+(D*160|0)+84|0;N=+g[W>>2];ra=+g[$+(D*160|0)+84>>2];X=aa+(D*160|0)+88|0;J=+g[X>>2];ua=+g[$+(D*160|0)+88>>2];Y=aa+(D*160|0)+92|0;H=+g[Y>>2];xa=+g[$+(D*160|0)+92>>2];da=aa+(D*160|0)+96|0;T=+g[da>>2];Aa=+g[$+(D*160|0)+96>>2];ea=aa+(D*160|0)+100|0;V=+g[ea>>2];za=+g[$+(D*160|0)+100>>2];fa=aa+(D*160|0)+104|0;Va=+g[fa>>2];Wa=+g[$+(D*160|0)+104>>2];Ua=aa+(D*160|0)+108|0;Xa=+g[Ua>>2];Ya=+g[$+(D*160|0)+108>>2];Ta=(g[k>>2]=U*S+I*K+L*oa+T*Aa,c[k>>2]|0);Ca=(g[k>>2]=na*qa+M*Q+N*ra+V*za,c[k>>2]|0);Sa=(g[k>>2]=P*ka+ja*ga+J*ua+Va*Wa,c[k>>2]|0);Ba=Ta&-2147483648;Ta=Ca&-2147483648;Ca=Sa&-2147483648;Sa=(g[k>>2]=R*ia+ha*ma+H*xa+Xa*Ya,c[k>>2]|0)&-2147483648;Ra=(g[k>>2]=S,c[k>>2]|0);Ea=(g[k>>2]=qa,c[k>>2]|0);Qa=(g[k>>2]=ka,c[k>>2]|0);Pa=Sa^(g[k>>2]=ia,c[k>>2]|0);Oa=(g[k>>2]=K,c[k>>2]|0);Na=(g[k>>2]=Q,c[k>>2]|0);Ma=(g[k>>2]=ga,c[k>>2]|0);La=Sa^(g[k>>2]=ma,c[k>>2]|0);Ka=(g[k>>2]=oa,c[k>>2]|0);Ja=(g[k>>2]=ra,c[k>>2]|0);Ia=(g[k>>2]=ua,c[k>>2]|0);Ha=Sa^(g[k>>2]=xa,c[k>>2]|0);Ga=(g[k>>2]=Aa,c[k>>2]|0);Fa=(g[k>>2]=za,c[k>>2]|0);Da=(g[k>>2]=Wa,c[k>>2]|0);Za=Sa^(g[k>>2]=Ya,c[k>>2]|0);Ya=ta*(c[k>>2]=Ra^Ba,+g[k>>2]);Wa=O*(c[k>>2]=Ta^Ea,+g[k>>2]);za=la*(c[k>>2]=Ca^Qa,+g[k>>2]);Aa=wa*(c[k>>2]=Pa,+g[k>>2]);xa=ta*(c[k>>2]=Ba^Oa,+g[k>>2]);ua=O*(c[k>>2]=Ta^Na,+g[k>>2]);ra=la*(c[k>>2]=Ca^Ma,+g[k>>2]);oa=wa*(c[k>>2]=La,+g[k>>2]);ma=ta*(c[k>>2]=Ba^Ka,+g[k>>2]);ga=O*(c[k>>2]=Ta^Ja,+g[k>>2]);Q=la*(c[k>>2]=Ca^Ia,+g[k>>2]);K=wa*(c[k>>2]=Ha,+g[k>>2]);ia=ta*(c[k>>2]=Ba^Ga,+g[k>>2]);ka=O*(c[k>>2]=Ta^Fa,+g[k>>2]);qa=la*(c[k>>2]=Ca^Da,+g[k>>2]);S=Xa+wa*(c[k>>2]=Za,+g[k>>2]);g[ca>>2]=U+Ya;g[F>>2]=na+Wa;g[G>>2]=P+za;g[ya>>2]=R+Aa;g[va>>2]=I+xa;g[sa>>2]=M+ua;g[pa>>2]=ja+ra;g[Z>>2]=ha+oa;g[_>>2]=L+ma;g[W>>2]=N+ga;g[X>>2]=J+Q;g[Y>>2]=H+K;g[da>>2]=T+ia;g[ea>>2]=V+ka;g[fa>>2]=Va+qa;g[Ua>>2]=S;Ua=aa+(D*160|0)+112|0;fa=aa+(D*160|0)+116|0;S=O*+g[$+(D*160|0)+116>>2]+ +g[fa>>2];ea=aa+(D*160|0)+120|0;qa=la*+g[$+(D*160|0)+120>>2]+ +g[ea>>2];da=aa+(D*160|0)+124|0;Va=wa*+g[$+(D*160|0)+124>>2]+ +g[da>>2];Y=aa+(D*160|0)+128|0;ka=ta*+g[$+(D*160|0)+128>>2]+ +g[Y>>2];X=aa+(D*160|0)+132|0;V=O*+g[$+(D*160|0)+132>>2]+ +g[X>>2];W=aa+(D*160|0)+136|0;ia=la*+g[$+(D*160|0)+136>>2]+ +g[W>>2];_=aa+(D*160|0)+140|0;T=wa*+g[$+(D*160|0)+140>>2]+ +g[_>>2];Z=aa+(D*160|0)+144|0;K=ta*+g[$+(D*160|0)+144>>2]+ +g[Z>>2];pa=aa+(D*160|0)+148|0;H=O*+g[$+(D*160|0)+148>>2]+ +g[pa>>2];sa=aa+(D*160|0)+152|0;O=la*+g[$+(D*160|0)+152>>2]+ +g[sa>>2];va=aa+(D*160|0)+156|0;la=wa*+g[$+(D*160|0)+156>>2]+ +g[va>>2];g[Ua>>2]=ta*+g[$+(D*160|0)+112>>2]+ +g[Ua>>2];g[fa>>2]=S;g[ea>>2]=qa;g[da>>2]=Va;g[Y>>2]=ka;g[X>>2]=V;g[W>>2]=ia;g[_>>2]=T;g[Z>>2]=K;g[pa>>2]=H;g[sa>>2]=O;g[va>>2]=la;va=D+1|0;sa=c[p>>2]|0;if(!(va>>>0<sa>>>0)){A=sa;B=sa;break b}z=c[s>>2]|0;E=c[x>>2]|0;D=va}}}}while(0);x=(c[r>>2]|0)+1|0;c[r>>2]=x;_a=c[s>>2]|0;$a=B;ab=A;bb=x}else{_a=h;$a=m;ab=u;bb=q}v=v+20|0;if(!(v>>>0<(c[_a+8>>2]|0)>>>0)){break}else{h=_a;m=$a;q=bb;u=ab}}w=+g[_a>>2];if((c[n>>2]|0)!=0){if(($a|0)==0){cb=0}else{u=_a;q=0;while(1){m=c[u+12>>2]|0;h=c[u+20>>2]|0;v=d+(q<<4)|0;la=+g[v>>2];O=w-la;x=d+(q<<4)+4|0;H=+g[x>>2];K=w-H;y=d+(q<<4)+8|0;T=+g[y>>2];ia=w-T;D=d+(q<<4)+12|0;V=+g[D>>2];ka=w-V;Va=O>0.0?O:0.0;O=K>0.0?K:0.0;K=ia>0.0?ia:0.0;ia=ka>0.0?ka:0.0;g[v>>2]=w>la?w:la;g[x>>2]=w>H?w:H;g[y>>2]=w>T?w:T;g[D>>2]=w>V?w:V;D=h+(q*160|0)|0;y=h+(q*160|0)+4|0;V=O*+g[m+(q*160|0)+4>>2]+ +g[y>>2];x=h+(q*160|0)+8|0;T=K*+g[m+(q*160|0)+8>>2]+ +g[x>>2];v=h+(q*160|0)+12|0;H=ia*+g[m+(q*160|0)+12>>2]+ +g[v>>2];E=h+(q*160|0)+16|0;la=Va*+g[m+(q*160|0)+16>>2]+ +g[E>>2];z=h+(q*160|0)+20|0;ka=O*+g[m+(q*160|0)+20>>2]+ +g[z>>2];ba=h+(q*160|0)+24|0;qa=K*+g[m+(q*160|0)+24>>2]+ +g[ba>>2];C=h+(q*160|0)+28|0;S=ia*+g[m+(q*160|0)+28>>2]+ +g[C>>2];va=h+(q*160|0)+32|0;ta=Va*+g[m+(q*160|0)+32>>2]+ +g[va>>2];sa=h+(q*160|0)+36|0;wa=O*+g[m+(q*160|0)+36>>2]+ +g[sa>>2];pa=h+(q*160|0)+40|0;Q=K*+g[m+(q*160|0)+40>>2]+ +g[pa>>2];Z=h+(q*160|0)+44|0;J=ia*+g[m+(q*160|0)+44>>2]+ +g[Z>>2];g[D>>2]=Va*+g[m+(q*160|0)>>2]+ +g[D>>2];g[y>>2]=V;g[x>>2]=T;g[v>>2]=H;g[E>>2]=la;g[z>>2]=ka;g[ba>>2]=qa;g[C>>2]=S;g[va>>2]=ta;g[sa>>2]=wa;g[pa>>2]=Q;g[Z>>2]=J;Z=h+(q*160|0)+48|0;J=+g[Z>>2];Q=+g[m+(q*160|0)+48>>2];pa=h+(q*160|0)+52|0;wa=+g[pa>>2];ta=+g[m+(q*160|0)+52>>2];sa=h+(q*160|0)+56|0;S=+g[sa>>2];qa=+g[m+(q*160|0)+56>>2];va=h+(q*160|0)+60|0;ka=+g[va>>2];la=+g[m+(q*160|0)+60>>2];C=h+(q*160|0)+64|0;H=+g[C>>2];T=+g[m+(q*160|0)+64>>2];ba=h+(q*160|0)+68|0;V=+g[ba>>2];ga=+g[m+(q*160|0)+68>>2];z=h+(q*160|0)+72|0;N=+g[z>>2];ma=+g[m+(q*160|0)+72>>2];E=h+(q*160|0)+76|0;L=+g[E>>2];oa=+g[m+(q*160|0)+76>>2];v=h+(q*160|0)+80|0;ha=+g[v>>2];ra=+g[m+(q*160|0)+80>>2];x=h+(q*160|0)+84|0;ja=+g[x>>2];ua=+g[m+(q*160|0)+84>>2];y=h+(q*160|0)+88|0;M=+g[y>>2];xa=+g[m+(q*160|0)+88>>2];D=h+(q*160|0)+92|0;I=+g[D>>2];Aa=+g[m+(q*160|0)+92>>2];_=h+(q*160|0)+96|0;R=+g[_>>2];za=+g[m+(q*160|0)+96>>2];W=h+(q*160|0)+100|0;P=+g[W>>2];Wa=+g[m+(q*160|0)+100>>2];X=h+(q*160|0)+104|0;na=+g[X>>2];Ya=+g[m+(q*160|0)+104>>2];Y=h+(q*160|0)+108|0;U=+g[Y>>2];Xa=+g[m+(q*160|0)+108>>2];da=(g[k>>2]=J*Q+H*T+ha*ra+R*za,c[k>>2]|0);ea=(g[k>>2]=wa*ta+V*ga+ja*ua+P*Wa,c[k>>2]|0);fa=(g[k>>2]=S*qa+N*ma+M*xa+na*Ya,c[k>>2]|0);Ua=da&-2147483648;da=ea&-2147483648;ea=fa&-2147483648;fa=(g[k>>2]=ka*la+L*oa+I*Aa+U*Xa,c[k>>2]|0)&-2147483648;$=(g[k>>2]=Q,c[k>>2]|0);aa=(g[k>>2]=ta,c[k>>2]|0);ya=(g[k>>2]=qa,c[k>>2]|0);G=fa^(g[k>>2]=la,c[k>>2]|0);F=(g[k>>2]=T,c[k>>2]|0);ca=(g[k>>2]=ga,c[k>>2]|0);Za=(g[k>>2]=ma,c[k>>2]|0);Da=fa^(g[k>>2]=oa,c[k>>2]|0);Ca=(g[k>>2]=ra,c[k>>2]|0);Fa=(g[k>>2]=ua,c[k>>2]|0);Ta=(g[k>>2]=xa,c[k>>2]|0);Ga=fa^(g[k>>2]=Aa,c[k>>2]|0);Ba=(g[k>>2]=za,c[k>>2]|0);Ha=(g[k>>2]=Wa,c[k>>2]|0);Ia=(g[k>>2]=Ya,c[k>>2]|0);Ja=fa^(g[k>>2]=Xa,c[k>>2]|0);Xa=Va*(c[k>>2]=$^Ua,+g[k>>2]);Ya=O*(c[k>>2]=da^aa,+g[k>>2]);Wa=K*(c[k>>2]=ea^ya,+g[k>>2]);za=ia*(c[k>>2]=G,+g[k>>2]);Aa=Va*(c[k>>2]=Ua^F,+g[k>>2]);xa=O*(c[k>>2]=da^ca,+g[k>>2]);ua=K*(c[k>>2]=ea^Za,+g[k>>2]);ra=ia*(c[k>>2]=Da,+g[k>>2]);oa=Va*(c[k>>2]=Ua^Ca,+g[k>>2]);ma=O*(c[k>>2]=da^Fa,+g[k>>2]);ga=K*(c[k>>2]=ea^Ta,+g[k>>2]);T=ia*(c[k>>2]=Ga,+g[k>>2]);la=Va*(c[k>>2]=Ua^Ba,+g[k>>2]);qa=O*(c[k>>2]=da^Ha,+g[k>>2]);ta=K*(c[k>>2]=ea^Ia,+g[k>>2]);Q=U+ia*(c[k>>2]=Ja,+g[k>>2]);g[Z>>2]=J+Xa;g[pa>>2]=wa+Ya;g[sa>>2]=S+Wa;g[va>>2]=ka+za;g[C>>2]=H+Aa;g[ba>>2]=V+xa;g[z>>2]=N+ua;g[E>>2]=L+ra;g[v>>2]=ha+oa;g[x>>2]=ja+ma;g[y>>2]=M+ga;g[D>>2]=I+T;g[_>>2]=R+la;g[W>>2]=P+qa;g[X>>2]=na+ta;g[Y>>2]=Q;Y=h+(q*160|0)+112|0;X=h+(q*160|0)+116|0;Q=O*+g[m+(q*160|0)+116>>2]+ +g[X>>2];W=h+(q*160|0)+120|0;ta=K*+g[m+(q*160|0)+120>>2]+ +g[W>>2];_=h+(q*160|0)+124|0;na=ia*+g[m+(q*160|0)+124>>2]+ +g[_>>2];D=h+(q*160|0)+128|0;qa=Va*+g[m+(q*160|0)+128>>2]+ +g[D>>2];y=h+(q*160|0)+132|0;P=O*+g[m+(q*160|0)+132>>2]+ +g[y>>2];x=h+(q*160|0)+136|0;la=K*+g[m+(q*160|0)+136>>2]+ +g[x>>2];v=h+(q*160|0)+140|0;R=ia*+g[m+(q*160|0)+140>>2]+ +g[v>>2];E=h+(q*160|0)+144|0;T=Va*+g[m+(q*160|0)+144>>2]+ +g[E>>2];z=h+(q*160|0)+148|0;I=O*+g[m+(q*160|0)+148>>2]+ +g[z>>2];ba=h+(q*160|0)+152|0;O=K*+g[m+(q*160|0)+152>>2]+ +g[ba>>2];C=h+(q*160|0)+156|0;K=ia*+g[m+(q*160|0)+156>>2]+ +g[C>>2];g[Y>>2]=Va*+g[m+(q*160|0)+112>>2]+ +g[Y>>2];g[X>>2]=Q;g[W>>2]=ta;g[_>>2]=na;g[D>>2]=qa;g[y>>2]=P;g[x>>2]=la;g[v>>2]=R;g[E>>2]=T;g[z>>2]=I;g[ba>>2]=O;g[C>>2]=K;C=q+1|0;ba=c[p>>2]|0;if(!(C>>>0<ba>>>0)){cb=ba;break a}u=c[s>>2]|0;q=C}}}else{db=w;eb=bb;fb=$a;gb=_a;hb=32}}else{db=e;eb=0;fb=o;gb=a;hb=32}}while(0);c:do{if((hb|0)==32){e=db- +g[j>>2];if(e>0.0){g[j>>2]=db;a=(fb|0)==0;if((eb|0)==0){if(a){cb=0;break}else{ib=gb;jb=0}while(1){o=c[ib+12>>2]|0;_a=c[ib+20>>2]|0;K=e*+g[o+(jb*160|0)+4>>2];O=e*+g[o+(jb*160|0)+8>>2];I=e*+g[o+(jb*160|0)+12>>2];T=e*+g[o+(jb*160|0)+16>>2];R=e*+g[o+(jb*160|0)+20>>2];la=e*+g[o+(jb*160|0)+24>>2];P=e*+g[o+(jb*160|0)+28>>2];qa=e*+g[o+(jb*160|0)+32>>2];na=e*+g[o+(jb*160|0)+36>>2];ta=e*+g[o+(jb*160|0)+40>>2];Q=e*+g[o+(jb*160|0)+44>>2];g[_a+(jb*160|0)>>2]=e*+g[o+(jb*160|0)>>2];g[_a+(jb*160|0)+4>>2]=K;g[_a+(jb*160|0)+8>>2]=O;g[_a+(jb*160|0)+12>>2]=I;g[_a+(jb*160|0)+16>>2]=T;g[_a+(jb*160|0)+20>>2]=R;g[_a+(jb*160|0)+24>>2]=la;g[_a+(jb*160|0)+28>>2]=P;g[_a+(jb*160|0)+32>>2]=qa;g[_a+(jb*160|0)+36>>2]=na;g[_a+(jb*160|0)+40>>2]=ta;g[_a+(jb*160|0)+44>>2]=Q;Q=e*+g[o+(jb*160|0)+52>>2];ta=e*+g[o+(jb*160|0)+56>>2];na=e*+g[o+(jb*160|0)+60>>2];qa=e*+g[o+(jb*160|0)+64>>2];P=e*+g[o+(jb*160|0)+68>>2];la=e*+g[o+(jb*160|0)+72>>2];R=e*+g[o+(jb*160|0)+76>>2];T=e*+g[o+(jb*160|0)+80>>2];I=e*+g[o+(jb*160|0)+84>>2];O=e*+g[o+(jb*160|0)+88>>2];K=e*+g[o+(jb*160|0)+92>>2];Va=e*+g[o+(jb*160|0)+96>>2];ia=e*+g[o+(jb*160|0)+100>>2];ga=e*+g[o+(jb*160|0)+104>>2];M=e*+g[o+(jb*160|0)+108>>2];g[_a+(jb*160|0)+48>>2]=e*+g[o+(jb*160|0)+48>>2];g[_a+(jb*160|0)+52>>2]=Q;g[_a+(jb*160|0)+56>>2]=ta;g[_a+(jb*160|0)+60>>2]=na;g[_a+(jb*160|0)+64>>2]=qa;g[_a+(jb*160|0)+68>>2]=P;g[_a+(jb*160|0)+72>>2]=la;g[_a+(jb*160|0)+76>>2]=R;g[_a+(jb*160|0)+80>>2]=T;g[_a+(jb*160|0)+84>>2]=I;g[_a+(jb*160|0)+88>>2]=O;g[_a+(jb*160|0)+92>>2]=K;g[_a+(jb*160|0)+96>>2]=Va;g[_a+(jb*160|0)+100>>2]=ia;g[_a+(jb*160|0)+104>>2]=ga;g[_a+(jb*160|0)+108>>2]=M;M=e*+g[o+(jb*160|0)+116>>2];ga=e*+g[o+(jb*160|0)+120>>2];ia=e*+g[o+(jb*160|0)+124>>2];Va=e*+g[o+(jb*160|0)+128>>2];K=e*+g[o+(jb*160|0)+132>>2];O=e*+g[o+(jb*160|0)+136>>2];I=e*+g[o+(jb*160|0)+140>>2];T=e*+g[o+(jb*160|0)+144>>2];R=e*+g[o+(jb*160|0)+148>>2];la=e*+g[o+(jb*160|0)+152>>2];P=e*+g[o+(jb*160|0)+156>>2];g[_a+(jb*160|0)+112>>2]=e*+g[o+(jb*160|0)+112>>2];g[_a+(jb*160|0)+116>>2]=M;g[_a+(jb*160|0)+120>>2]=ga;g[_a+(jb*160|0)+124>>2]=ia;g[_a+(jb*160|0)+128>>2]=Va;g[_a+(jb*160|0)+132>>2]=K;g[_a+(jb*160|0)+136>>2]=O;g[_a+(jb*160|0)+140>>2]=I;g[_a+(jb*160|0)+144>>2]=T;g[_a+(jb*160|0)+148>>2]=R;g[_a+(jb*160|0)+152>>2]=la;g[_a+(jb*160|0)+156>>2]=P;_a=jb+1|0;o=c[p>>2]|0;if(!(_a>>>0<o>>>0)){cb=o;break c}ib=c[s>>2]|0;jb=_a}}else{if(a){cb=0;break}else{kb=gb;lb=0}while(1){_a=c[kb+12>>2]|0;o=c[kb+20>>2]|0;$a=o+(lb*160|0)|0;bb=o+(lb*160|0)+4|0;w=e*+g[_a+(lb*160|0)+4>>2]+ +g[bb>>2];ab=o+(lb*160|0)+8|0;P=e*+g[_a+(lb*160|0)+8>>2]+ +g[ab>>2];A=o+(lb*160|0)+12|0;la=e*+g[_a+(lb*160|0)+12>>2]+ +g[A>>2];B=o+(lb*160|0)+16|0;R=e*+g[_a+(lb*160|0)+16>>2]+ +g[B>>2];r=o+(lb*160|0)+20|0;T=e*+g[_a+(lb*160|0)+20>>2]+ +g[r>>2];f=o+(lb*160|0)+24|0;I=e*+g[_a+(lb*160|0)+24>>2]+ +g[f>>2];l=o+(lb*160|0)+28|0;O=e*+g[_a+(lb*160|0)+28>>2]+ +g[l>>2];q=o+(lb*160|0)+32|0;K=e*+g[_a+(lb*160|0)+32>>2]+ +g[q>>2];u=o+(lb*160|0)+36|0;Va=e*+g[_a+(lb*160|0)+36>>2]+ +g[u>>2];C=o+(lb*160|0)+40|0;ia=e*+g[_a+(lb*160|0)+40>>2]+ +g[C>>2];ba=o+(lb*160|0)+44|0;ga=e*+g[_a+(lb*160|0)+44>>2]+ +g[ba>>2];g[$a>>2]=e*+g[_a+(lb*160|0)>>2]+ +g[$a>>2];g[bb>>2]=w;g[ab>>2]=P;g[A>>2]=la;g[B>>2]=R;g[r>>2]=T;g[f>>2]=I;g[l>>2]=O;g[q>>2]=K;g[u>>2]=Va;g[C>>2]=ia;g[ba>>2]=ga;ba=o+(lb*160|0)+48|0;ga=+g[ba>>2];ia=+g[_a+(lb*160|0)+48>>2];C=o+(lb*160|0)+52|0;Va=+g[C>>2];K=+g[_a+(lb*160|0)+52>>2];u=o+(lb*160|0)+56|0;O=+g[u>>2];I=+g[_a+(lb*160|0)+56>>2];q=o+(lb*160|0)+60|0;T=+g[q>>2];R=+g[_a+(lb*160|0)+60>>2];l=o+(lb*160|0)+64|0;la=+g[l>>2];P=+g[_a+(lb*160|0)+64>>2];f=o+(lb*160|0)+68|0;w=+g[f>>2];M=+g[_a+(lb*160|0)+68>>2];r=o+(lb*160|0)+72|0;qa=+g[r>>2];na=+g[_a+(lb*160|0)+72>>2];B=o+(lb*160|0)+76|0;ta=+g[B>>2];Q=+g[_a+(lb*160|0)+76>>2];A=o+(lb*160|0)+80|0;ma=+g[A>>2];ja=+g[_a+(lb*160|0)+80>>2];ab=o+(lb*160|0)+84|0;oa=+g[ab>>2];ha=+g[_a+(lb*160|0)+84>>2];bb=o+(lb*160|0)+88|0;ra=+g[bb>>2];L=+g[_a+(lb*160|0)+88>>2];$a=o+(lb*160|0)+92|0;ua=+g[$a>>2];N=+g[_a+(lb*160|0)+92>>2];z=o+(lb*160|0)+96|0;xa=+g[z>>2];V=+g[_a+(lb*160|0)+96>>2];E=o+(lb*160|0)+100|0;Aa=+g[E>>2];H=+g[_a+(lb*160|0)+100>>2];v=o+(lb*160|0)+104|0;za=+g[v>>2];ka=+g[_a+(lb*160|0)+104>>2];x=o+(lb*160|0)+108|0;Wa=+g[x>>2];S=+g[_a+(lb*160|0)+108>>2];y=(g[k>>2]=ga*ia+la*P+ma*ja+xa*V,c[k>>2]|0);D=(g[k>>2]=Va*K+w*M+oa*ha+Aa*H,c[k>>2]|0);_=(g[k>>2]=O*I+qa*na+ra*L+za*ka,c[k>>2]|0);W=y&-2147483648;y=D&-2147483648;D=_&-2147483648;_=(g[k>>2]=T*R+ta*Q+ua*N+Wa*S,c[k>>2]|0)&-2147483648;X=(g[k>>2]=ia,c[k>>2]|0);Y=(g[k>>2]=K,c[k>>2]|0);m=(g[k>>2]=I,c[k>>2]|0);h=_^(g[k>>2]=R,c[k>>2]|0);va=(g[k>>2]=P,c[k>>2]|0);sa=(g[k>>2]=M,c[k>>2]|0);pa=(g[k>>2]=na,c[k>>2]|0);Z=_^(g[k>>2]=Q,c[k>>2]|0);Ja=(g[k>>2]=ja,c[k>>2]|0);Ia=(g[k>>2]=ha,c[k>>2]|0);ea=(g[k>>2]=L,c[k>>2]|0);Ha=_^(g[k>>2]=N,c[k>>2]|0);da=(g[k>>2]=V,c[k>>2]|0);Ba=(g[k>>2]=H,c[k>>2]|0);Ua=(g[k>>2]=ka,c[k>>2]|0);Ga=_^(g[k>>2]=S,c[k>>2]|0);S=e*(c[k>>2]=X^W,+g[k>>2]);ka=e*(c[k>>2]=y^Y,+g[k>>2]);H=e*(c[k>>2]=D^m,+g[k>>2]);V=e*(c[k>>2]=h,+g[k>>2]);N=e*(c[k>>2]=W^va,+g[k>>2]);L=e*(c[k>>2]=y^sa,+g[k>>2]);ha=e*(c[k>>2]=D^pa,+g[k>>2]);ja=e*(c[k>>2]=Z,+g[k>>2]);Q=e*(c[k>>2]=W^Ja,+g[k>>2]);na=e*(c[k>>2]=y^Ia,+g[k>>2]);M=e*(c[k>>2]=D^ea,+g[k>>2]);P=e*(c[k>>2]=Ha,+g[k>>2]);R=e*(c[k>>2]=W^da,+g[k>>2]);I=e*(c[k>>2]=y^Ba,+g[k>>2]);K=e*(c[k>>2]=D^Ua,+g[k>>2]);ia=Wa+e*(c[k>>2]=Ga,+g[k>>2]);g[ba>>2]=ga+S;g[C>>2]=Va+ka;g[u>>2]=O+H;g[q>>2]=T+V;g[l>>2]=la+N;g[f>>2]=w+L;g[r>>2]=qa+ha;g[B>>2]=ta+ja;g[A>>2]=ma+Q;g[ab>>2]=oa+na;g[bb>>2]=ra+M;g[$a>>2]=ua+P;g[z>>2]=xa+R;g[E>>2]=Aa+I;g[v>>2]=za+K;g[x>>2]=ia;x=o+(lb*160|0)+112|0;v=o+(lb*160|0)+116|0;ia=e*+g[_a+(lb*160|0)+116>>2]+ +g[v>>2];E=o+(lb*160|0)+120|0;K=e*+g[_a+(lb*160|0)+120>>2]+ +g[E>>2];z=o+(lb*160|0)+124|0;za=e*+g[_a+(lb*160|0)+124>>2]+ +g[z>>2];$a=o+(lb*160|0)+128|0;I=e*+g[_a+(lb*160|0)+128>>2]+ +g[$a>>2];bb=o+(lb*160|0)+132|0;Aa=e*+g[_a+(lb*160|0)+132>>2]+ +g[bb>>2];ab=o+(lb*160|0)+136|0;R=e*+g[_a+(lb*160|0)+136>>2]+ +g[ab>>2];A=o+(lb*160|0)+140|0;xa=e*+g[_a+(lb*160|0)+140>>2]+ +g[A>>2];B=o+(lb*160|0)+144|0;P=e*+g[_a+(lb*160|0)+144>>2]+ +g[B>>2];r=o+(lb*160|0)+148|0;ua=e*+g[_a+(lb*160|0)+148>>2]+ +g[r>>2];f=o+(lb*160|0)+152|0;M=e*+g[_a+(lb*160|0)+152>>2]+ +g[f>>2];l=o+(lb*160|0)+156|0;ra=e*+g[_a+(lb*160|0)+156>>2]+ +g[l>>2];g[x>>2]=e*+g[_a+(lb*160|0)+112>>2]+ +g[x>>2];g[v>>2]=ia;g[E>>2]=K;g[z>>2]=za;g[$a>>2]=I;g[bb>>2]=Aa;g[ab>>2]=R;g[A>>2]=xa;g[B>>2]=P;g[r>>2]=ua;g[f>>2]=M;g[l>>2]=ra;l=lb+1|0;f=c[p>>2]|0;if(!(l>>>0<f>>>0)){cb=f;break c}kb=c[s>>2]|0;lb=l}}}else{cb=fb}}}while(0);if((c[n>>2]|0)==0){db=1.0/+g[j>>2];if((cb|0)==0){t=1;i=b;return t|0}else{mb=0}while(1){j=c[(c[s>>2]|0)+20>>2]|0;n=j+(mb*160|0)+48|0;e=+g[n>>2];fb=j+(mb*160|0)+52|0;ra=+g[fb>>2];lb=j+(mb*160|0)+56|0;M=+g[lb>>2];kb=j+(mb*160|0)+60|0;ua=+g[kb>>2];gb=j+(mb*160|0)+64|0;P=+g[gb>>2];jb=j+(mb*160|0)+68|0;xa=+g[jb>>2];ib=j+(mb*160|0)+72|0;R=+g[ib>>2];eb=j+(mb*160|0)+76|0;Aa=+g[eb>>2];hb=j+(mb*160|0)+80|0;I=+g[hb>>2];a=j+(mb*160|0)+84|0;za=+g[a>>2];l=j+(mb*160|0)+88|0;K=+g[l>>2];f=j+(mb*160|0)+92|0;ia=+g[f>>2];r=j+(mb*160|0)+96|0;na=+g[r>>2];B=j+(mb*160|0)+100|0;oa=+g[B>>2];A=j+(mb*160|0)+104|0;Q=+g[A>>2];ab=j+(mb*160|0)+108|0;ma=+g[ab>>2];ja=e*e+P*P+I*I+na*na;ta=ra*ra+xa*xa+za*za+oa*oa;ha=M*M+R*R+K*K+Q*Q;qa=ua*ua+Aa*Aa+ia*ia+ma*ma;L=(c[k>>2]=1597463007-(((g[k>>2]=ja,c[k>>2]|0)|0)/2|0),+g[k>>2]);w=ja*.5;ja=L*(1.5-L*w*L);L=ja*(1.5-ja*w*ja);ja=(c[k>>2]=1597463007-(((g[k>>2]=ta,c[k>>2]|0)|0)/2|0),+g[k>>2]);w=ta*.5;ta=ja*(1.5-ja*w*ja);ja=ta*(1.5-ta*w*ta);ta=(c[k>>2]=1597463007-(((g[k>>2]=ha,c[k>>2]|0)|0)/2|0),+g[k>>2]);w=ha*.5;ha=ta*(1.5-ta*w*ta);ta=ha*(1.5-ha*w*ha);ha=(c[k>>2]=1597463007-(((g[k>>2]=qa,c[k>>2]|0)|0)/2|0),+g[k>>2]);w=qa*.5;qa=ha*(1.5-ha*w*ha);ha=qa*(1.5-qa*w*qa);g[n>>2]=e*L;g[fb>>2]=ra*ja;g[lb>>2]=M*ta;g[kb>>2]=ua*ha;g[gb>>2]=P*L;g[jb>>2]=xa*ja;g[ib>>2]=R*ta;g[eb>>2]=Aa*ha;g[hb>>2]=I*L;g[a>>2]=za*ja;g[l>>2]=K*ta;g[f>>2]=ia*ha;g[r>>2]=na*L;g[B>>2]=oa*ja;g[A>>2]=Q*ta;g[ab>>2]=ma*ha;ab=j+(mb*160|0)|0;A=j+(mb*160|0)+4|0;ha=db*+g[A>>2];B=j+(mb*160|0)+8|0;ma=db*+g[B>>2];r=j+(mb*160|0)+12|0;ta=db*+g[r>>2];f=j+(mb*160|0)+16|0;Q=db*+g[f>>2];l=j+(mb*160|0)+20|0;ja=db*+g[l>>2];a=j+(mb*160|0)+24|0;oa=db*+g[a>>2];hb=j+(mb*160|0)+28|0;L=db*+g[hb>>2];eb=j+(mb*160|0)+32|0;na=db*+g[eb>>2];ib=j+(mb*160|0)+36|0;ia=db*+g[ib>>2];jb=j+(mb*160|0)+40|0;K=db*+g[jb>>2];gb=j+(mb*160|0)+44|0;za=db*+g[gb>>2];g[ab>>2]=db*+g[ab>>2];g[A>>2]=ha;g[B>>2]=ma;g[r>>2]=ta;g[f>>2]=Q;g[l>>2]=ja;g[a>>2]=oa;g[hb>>2]=L;g[eb>>2]=na;g[ib>>2]=ia;g[jb>>2]=K;g[gb>>2]=za;gb=j+(mb*160|0)+112|0;jb=j+(mb*160|0)+116|0;za=db*+g[jb>>2];ib=j+(mb*160|0)+120|0;K=db*+g[ib>>2];eb=j+(mb*160|0)+124|0;ia=db*+g[eb>>2];hb=j+(mb*160|0)+128|0;na=db*+g[hb>>2];a=j+(mb*160|0)+132|0;L=db*+g[a>>2];l=j+(mb*160|0)+136|0;oa=db*+g[l>>2];f=j+(mb*160|0)+140|0;ja=db*+g[f>>2];r=j+(mb*160|0)+144|0;Q=db*+g[r>>2];B=j+(mb*160|0)+148|0;ta=db*+g[B>>2];A=j+(mb*160|0)+152|0;ma=db*+g[A>>2];ab=j+(mb*160|0)+156|0;ha=db*+g[ab>>2];g[gb>>2]=db*+g[gb>>2];g[jb>>2]=za;g[ib>>2]=K;g[eb>>2]=ia;g[hb>>2]=na;g[a>>2]=L;g[l>>2]=oa;g[f>>2]=ja;g[r>>2]=Q;g[B>>2]=ta;g[A>>2]=ma;g[ab>>2]=ha;ab=mb+1|0;if(ab>>>0<(c[p>>2]|0)>>>0){mb=ab}else{t=1;break}}i=b;return t|0}else{if((cb|0)==0){t=1;i=b;return t|0}else{nb=0}while(1){db=1.0/+g[d+(nb<<4)>>2];ha=1.0/+g[d+(nb<<4)+4>>2];ma=1.0/+g[d+(nb<<4)+8>>2];ta=1.0/+g[d+(nb<<4)+12>>2];cb=c[(c[s>>2]|0)+20>>2]|0;mb=cb+(nb*160|0)+48|0;Q=+g[mb>>2];ab=cb+(nb*160|0)+52|0;ja=+g[ab>>2];A=cb+(nb*160|0)+56|0;oa=+g[A>>2];B=cb+(nb*160|0)+60|0;L=+g[B>>2];r=cb+(nb*160|0)+64|0;na=+g[r>>2];f=cb+(nb*160|0)+68|0;ia=+g[f>>2];l=cb+(nb*160|0)+72|0;K=+g[l>>2];a=cb+(nb*160|0)+76|0;za=+g[a>>2];hb=cb+(nb*160|0)+80|0;I=+g[hb>>2];eb=cb+(nb*160|0)+84|0;Aa=+g[eb>>2];ib=cb+(nb*160|0)+88|0;R=+g[ib>>2];jb=cb+(nb*160|0)+92|0;xa=+g[jb>>2];gb=cb+(nb*160|0)+96|0;P=+g[gb>>2];j=cb+(nb*160|0)+100|0;ua=+g[j>>2];kb=cb+(nb*160|0)+104|0;M=+g[kb>>2];lb=cb+(nb*160|0)+108|0;ra=+g[lb>>2];e=Q*Q+na*na+I*I+P*P;qa=ja*ja+ia*ia+Aa*Aa+ua*ua;w=oa*oa+K*K+R*R+M*M;N=L*L+za*za+xa*xa+ra*ra;la=(c[k>>2]=1597463007-(((g[k>>2]=e,c[k>>2]|0)|0)/2|0),+g[k>>2]);V=e*.5;e=la*(1.5-la*V*la);la=e*(1.5-e*V*e);e=(c[k>>2]=1597463007-(((g[k>>2]=qa,c[k>>2]|0)|0)/2|0),+g[k>>2]);V=qa*.5;qa=e*(1.5-e*V*e);e=qa*(1.5-qa*V*qa);qa=(c[k>>2]=1597463007-(((g[k>>2]=w,c[k>>2]|0)|0)/2|0),+g[k>>2]);V=w*.5;w=qa*(1.5-qa*V*qa);qa=w*(1.5-w*V*w);w=(c[k>>2]=1597463007-(((g[k>>2]=N,c[k>>2]|0)|0)/2|0),+g[k>>2]);V=N*.5;N=w*(1.5-w*V*w);w=N*(1.5-N*V*N);g[mb>>2]=Q*la;g[ab>>2]=ja*e;g[A>>2]=oa*qa;g[B>>2]=L*w;g[r>>2]=na*la;g[f>>2]=ia*e;g[l>>2]=K*qa;g[a>>2]=za*w;g[hb>>2]=I*la;g[eb>>2]=Aa*e;g[ib>>2]=R*qa;g[jb>>2]=xa*w;g[gb>>2]=P*la;g[j>>2]=ua*e;g[kb>>2]=M*qa;g[lb>>2]=ra*w;lb=cb+(nb*160|0)|0;kb=cb+(nb*160|0)+4|0;w=ha*+g[kb>>2];j=cb+(nb*160|0)+8|0;ra=ma*+g[j>>2];gb=cb+(nb*160|0)+12|0;qa=ta*+g[gb>>2];jb=cb+(nb*160|0)+16|0;M=db*+g[jb>>2];ib=cb+(nb*160|0)+20|0;e=ha*+g[ib>>2];eb=cb+(nb*160|0)+24|0;ua=ma*+g[eb>>2];hb=cb+(nb*160|0)+28|0;la=ta*+g[hb>>2];a=cb+(nb*160|0)+32|0;P=db*+g[a>>2];l=cb+(nb*160|0)+36|0;xa=ha*+g[l>>2];f=cb+(nb*160|0)+40|0;R=ma*+g[f>>2];r=cb+(nb*160|0)+44|0;Aa=ta*+g[r>>2];g[lb>>2]=db*+g[lb>>2];g[kb>>2]=w;g[j>>2]=ra;g[gb>>2]=qa;g[jb>>2]=M;g[ib>>2]=e;g[eb>>2]=ua;g[hb>>2]=la;g[a>>2]=P;g[l>>2]=xa;g[f>>2]=R;g[r>>2]=Aa;r=cb+(nb*160|0)+112|0;f=cb+(nb*160|0)+116|0;Aa=ha*+g[f>>2];l=cb+(nb*160|0)+120|0;R=ma*+g[l>>2];a=cb+(nb*160|0)+124|0;xa=ta*+g[a>>2];hb=cb+(nb*160|0)+128|0;P=db*+g[hb>>2];eb=cb+(nb*160|0)+132|0;la=ha*+g[eb>>2];ib=cb+(nb*160|0)+136|0;ua=ma*+g[ib>>2];jb=cb+(nb*160|0)+140|0;e=ta*+g[jb>>2];gb=cb+(nb*160|0)+144|0;M=db*+g[gb>>2];j=cb+(nb*160|0)+148|0;qa=ha*+g[j>>2];kb=cb+(nb*160|0)+152|0;ha=ma*+g[kb>>2];lb=cb+(nb*160|0)+156|0;ma=ta*+g[lb>>2];g[r>>2]=db*+g[r>>2];g[f>>2]=Aa;g[l>>2]=R;g[a>>2]=xa;g[hb>>2]=P;g[eb>>2]=la;g[ib>>2]=ua;g[jb>>2]=e;g[gb>>2]=M;g[j>>2]=qa;g[kb>>2]=ha;g[lb>>2]=ma;lb=nb+1|0;if(lb>>>0<(c[p>>2]|0)>>>0){nb=lb}else{t=1;break}}i=b;return t|0}return 0}function ak(a){a=a|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0.0,Aa=0.0,Ba=0.0,Ca=0.0,Da=0.0,Ea=0.0,Fa=0.0,Ga=0.0,Ha=0.0,Ia=0.0,Ja=0.0,Ka=0.0,La=0.0,Ma=0.0,Na=0.0,Oa=0.0,Pa=0.0,Qa=0.0,Ra=0.0,Sa=0.0,Ta=0.0,Ua=0.0,Va=0.0,Wa=0.0,Xa=0.0,Ya=0.0,Za=0.0,_a=0.0,$a=0.0,ab=0.0,bb=0.0,cb=0.0,db=0.0,eb=0.0,fb=0.0,gb=0.0,hb=0.0,ib=0.0,jb=0.0,kb=0.0,lb=0.0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0;d=i;i=i+592|0;e=d+576|0;f=d;h=d+64|0;j=d+320|0;k=c[a>>2]|0;if((k|0)==0){l=0;i=d;return l|0}m=a+4|0;n=c[m>>2]|0;o=c[a+12>>2]|0;p=c[k+12>>2]|0;if(!((n|0)!=0&(o|0)!=0&(((c[a+8>>2]|0)-n|0)/160|0|0)>=((p+3|0)/4|0|0)&((c[a+16>>2]|0)-o>>6|0)>=(p|0))){l=0;i=d;return l|0}if((p|0)==0){l=1;i=d;return l|0}a=c[k>>2]|0;k=f+0|0;q=k+64|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(q|0));g[f>>2]=1.0;g[f+20>>2]=1.0;g[f+40>>2]=1.0;g[f+60>>2]=1.0;if((p|0)<=0){l=1;i=d;return l|0}k=h+4|0;q=h+8|0;r=h+12|0;s=h+16|0;t=h+20|0;u=h+24|0;v=h+28|0;w=h+32|0;x=h+36|0;y=h+40|0;z=h+44|0;A=h+48|0;B=h+64|0;C=h+68|0;D=h+72|0;E=h+76|0;F=h+80|0;G=h+84|0;H=h+88|0;I=h+92|0;J=h+96|0;K=h+100|0;L=h+104|0;M=h+108|0;N=h+112|0;O=h+128|0;P=h+132|0;Q=h+136|0;R=h+140|0;S=h+144|0;T=h+148|0;U=h+152|0;V=h+156|0;W=h+160|0;X=h+164|0;Y=h+168|0;Z=h+172|0;_=h+176|0;$=h+192|0;aa=h+208|0;ba=h+224|0;ca=h+240|0;da=h+244|0;ea=h+248|0;fa=h+252|0;ga=h+16|0;ha=h+32|0;ia=h+48|0;ja=h+64|0;ka=h+80|0;la=h+96|0;ma=h+112|0;na=h+128|0;oa=h+144|0;pa=h+160|0;qa=h+176|0;ra=h+192|0;sa=h+208|0;ta=h+224|0;ua=h+240|0;va=f;f=~p;wa=n;n=0;while(1){xa=(n|0)/4|0;ya=wa+(xa*160|0)|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;za=+g[wa+(xa*160|0)+48>>2];Aa=za*za;Ba=+g[wa+(xa*160|0)+52>>2];Ca=Ba*Ba;Da=+g[wa+(xa*160|0)+56>>2];Ea=Da*Da;Fa=+g[wa+(xa*160|0)+60>>2];Ga=Fa*Fa;Ha=+g[wa+(xa*160|0)+64>>2];Ia=za*Ha;Ja=+g[wa+(xa*160|0)+68>>2];Ka=Ba*Ja;La=+g[wa+(xa*160|0)+72>>2];Ma=Da*La;Na=+g[wa+(xa*160|0)+76>>2];Oa=Fa*Na;Pa=+g[wa+(xa*160|0)+80>>2];Qa=za*Pa;Ra=+g[wa+(xa*160|0)+84>>2];Sa=Ba*Ra;Ta=+g[wa+(xa*160|0)+88>>2];Ua=Da*Ta;Va=+g[wa+(xa*160|0)+92>>2];Wa=Fa*Va;Xa=+g[wa+(xa*160|0)+96>>2];Ya=za*Xa;za=+g[wa+(xa*160|0)+100>>2];Za=Ba*za;Ba=+g[wa+(xa*160|0)+104>>2];_a=Da*Ba;Da=+g[wa+(xa*160|0)+108>>2];$a=Fa*Da;Fa=Ha*Ha;ab=Ja*Ja;bb=La*La;cb=Na*Na;db=Ha*Pa;eb=Ja*Ra;fb=La*Ta;gb=Na*Va;hb=Ha*Xa;Ha=Ja*za;Ja=La*Ba;La=Na*Da;Na=Pa*Pa;ib=Ra*Ra;jb=Ta*Ta;kb=Va*Va;lb=Pa*Xa;Xa=Ra*za;za=Ta*Ba;Ba=Va*Da;mb=wa+(xa*160|0)+112|0;g[h>>2]=(1.0-(Fa+Na)*2.0)*+g[mb>>2];nb=wa+(xa*160|0)+116|0;g[k>>2]=(1.0-(ab+ib)*2.0)*+g[nb>>2];ob=wa+(xa*160|0)+120|0;g[q>>2]=(1.0-(bb+jb)*2.0)*+g[ob>>2];pb=wa+(xa*160|0)+124|0;g[r>>2]=(1.0-(cb+kb)*2.0)*+g[pb>>2];Da=+g[nb>>2]*2.0;Va=+g[ob>>2]*2.0;Ta=+g[pb>>2]*2.0;g[s>>2]=(Ia+lb)*+g[mb>>2]*2.0;g[t>>2]=(Ka+Xa)*Da;g[u>>2]=(Ma+za)*Va;g[v>>2]=(Oa+Ba)*Ta;Ta=+g[nb>>2]*2.0;Va=+g[ob>>2]*2.0;Da=+g[pb>>2]*2.0;g[w>>2]=(Qa-hb)*+g[mb>>2]*2.0;g[x>>2]=(Sa-Ha)*Ta;g[y>>2]=(Ua-Ja)*Va;g[z>>2]=(Wa-La)*Da;c[A+0>>2]=c[e+0>>2];c[A+4>>2]=c[e+4>>2];c[A+8>>2]=c[e+8>>2];c[A+12>>2]=c[e+12>>2];mb=wa+(xa*160|0)+128|0;pb=wa+(xa*160|0)+132|0;Da=+g[pb>>2]*2.0;ob=wa+(xa*160|0)+136|0;Va=+g[ob>>2]*2.0;nb=wa+(xa*160|0)+140|0;Ta=+g[nb>>2]*2.0;g[B>>2]=(Ia-lb)*+g[mb>>2]*2.0;g[C>>2]=(Ka-Xa)*Da;g[D>>2]=(Ma-za)*Va;g[E>>2]=(Oa-Ba)*Ta;g[F>>2]=(1.0-(Aa+Na)*2.0)*+g[mb>>2];g[G>>2]=(1.0-(Ca+ib)*2.0)*+g[pb>>2];g[H>>2]=(1.0-(Ea+jb)*2.0)*+g[ob>>2];g[I>>2]=(1.0-(Ga+kb)*2.0)*+g[nb>>2];kb=+g[pb>>2]*2.0;jb=+g[ob>>2]*2.0;ib=+g[nb>>2]*2.0;Na=(db+Ya)*+g[mb>>2]*2.0;g[J>>2]=Na;g[K>>2]=(eb+Za)*kb;g[L>>2]=(fb+_a)*jb;g[M>>2]=(gb+$a)*ib;c[N+0>>2]=c[e+0>>2];c[N+4>>2]=c[e+4>>2];c[N+8>>2]=c[e+8>>2];c[N+12>>2]=c[e+12>>2];mb=wa+(xa*160|0)+144|0;nb=wa+(xa*160|0)+148|0;ib=+g[nb>>2]*2.0;ob=wa+(xa*160|0)+152|0;jb=+g[ob>>2]*2.0;pb=wa+(xa*160|0)+156|0;kb=+g[pb>>2]*2.0;Ta=(Qa+hb)*+g[mb>>2]*2.0;g[O>>2]=Ta;g[P>>2]=(Sa+Ha)*ib;g[Q>>2]=(Ua+Ja)*jb;g[R>>2]=(Wa+La)*kb;kb=+g[nb>>2]*2.0;La=+g[ob>>2]*2.0;Wa=+g[pb>>2]*2.0;jb=(db-Ya)*+g[mb>>2]*2.0;g[S>>2]=jb;g[T>>2]=(eb-Za)*kb;g[U>>2]=(fb-_a)*La;g[V>>2]=(gb-$a)*Wa;Wa=(1.0-(Aa+Fa)*2.0)*+g[mb>>2];g[W>>2]=Wa;g[X>>2]=(1.0-(Ca+ab)*2.0)*+g[nb>>2];g[Y>>2]=(1.0-(Ea+bb)*2.0)*+g[ob>>2];g[Z>>2]=(1.0-(Ga+cb)*2.0)*+g[pb>>2];c[_+0>>2]=c[e+0>>2];c[_+4>>2]=c[e+4>>2];c[_+8>>2]=c[e+8>>2];c[_+12>>2]=c[e+12>>2];c[$+0>>2]=c[ya+0>>2];c[$+4>>2]=c[ya+4>>2];c[$+8>>2]=c[ya+8>>2];c[$+12>>2]=c[ya+12>>2];ya=wa+(xa*160|0)+16|0;c[aa+0>>2]=c[ya+0>>2];c[aa+4>>2]=c[ya+4>>2];c[aa+8>>2]=c[ya+8>>2];c[aa+12>>2]=c[ya+12>>2];ya=wa+(xa*160|0)+32|0;c[ba+0>>2]=c[ya+0>>2];c[ba+4>>2]=c[ya+4>>2];c[ba+8>>2]=c[ya+8>>2];c[ba+12>>2]=c[ya+12>>2];g[ca>>2]=1.0;g[da>>2]=1.0;g[ea>>2]=1.0;g[fa>>2]=1.0;cb=Na;Na=Ta;Ta=jb;jb=Wa;Wa=1.0;ya=0;while(1){xa=ya<<2;g[j+(xa<<4)>>2]=+g[h+(ya<<2)>>2];g[j+(xa<<4)+4>>2]=+g[ga+(ya<<2)>>2];g[j+(xa<<4)+8>>2]=+g[ha+(ya<<2)>>2];g[j+(xa<<4)+12>>2]=+g[ia+(ya<<2)>>2];pb=xa|1;g[j+(pb<<4)>>2]=+g[ja+(ya<<2)>>2];g[j+(pb<<4)+4>>2]=+g[ka+(ya<<2)>>2];g[j+(pb<<4)+8>>2]=cb;g[j+(pb<<4)+12>>2]=+g[ma+(ya<<2)>>2];pb=xa|2;g[j+(pb<<4)>>2]=Na;g[j+(pb<<4)+4>>2]=Ta;g[j+(pb<<4)+8>>2]=jb;g[j+(pb<<4)+12>>2]=+g[qa+(ya<<2)>>2];pb=xa|3;g[j+(pb<<4)>>2]=+g[ra+(ya<<2)>>2];g[j+(pb<<4)+4>>2]=+g[sa+(ya<<2)>>2];g[j+(pb<<4)+8>>2]=+g[ta+(ya<<2)>>2];g[j+(pb<<4)+12>>2]=Wa;pb=ya+1|0;if((pb|0)==4){break}cb=+g[la+(pb<<2)>>2];Na=+g[na+(pb<<2)>>2];Ta=+g[oa+(pb<<2)>>2];jb=+g[pa+(pb<<2)>>2];Wa=+g[ua+(pb<<2)>>2];ya=pb}ya=p-n|0;pb=(ya|0)>4?4:ya;ya=pb+n|0;if((pb|0)>0){pb=n+f|0;xa=n+ -1-((pb|0)>-5?pb:-5)|0;pb=n+1|0;ob=(xa|0)>(pb|0);nb=n;mb=j;while(1){qb=b[a+(nb<<1)>>1]&1023;rb=o+((qb&65535)<<6)|0;sb=(qb<<16>>16==1023?rb^va:0)^rb;Wa=+g[mb>>2];jb=+g[mb+4>>2];Ta=+g[mb+8>>2];Na=+g[mb+12>>2];cb=+g[mb+16>>2];Ga=+g[mb+20>>2];bb=+g[mb+24>>2];Ea=+g[mb+28>>2];ab=+g[mb+32>>2];Ca=+g[mb+36>>2];Fa=+g[mb+40>>2];Aa=+g[mb+44>>2];$a=+g[mb+48>>2];gb=+g[mb+52>>2];La=+g[mb+56>>2];_a=+g[mb+60>>2];fb=+g[sb>>2];kb=+g[sb+16>>2];Za=+g[sb+32>>2];eb=+g[sb+48>>2];Ya=+g[sb+4>>2];db=+g[sb+20>>2];Ja=+g[sb+36>>2];Ua=+g[sb+52>>2];ib=+g[sb+8>>2];Ha=+g[sb+24>>2];Sa=+g[sb+40>>2];hb=+g[sb+56>>2];Qa=+g[sb+12>>2];Ba=+g[sb+28>>2];Oa=+g[sb+44>>2];Va=+g[sb+60>>2];g[o+(nb<<6)>>2]=Wa*fb+jb*kb+Ta*Za+Na*eb;g[o+(nb<<6)+4>>2]=Wa*Ya+jb*db+Ta*Ja+Na*Ua;g[o+(nb<<6)+8>>2]=Wa*ib+jb*Ha+Ta*Sa+Na*hb;g[o+(nb<<6)+12>>2]=Wa*Qa+jb*Ba+Ta*Oa+Na*Va;g[o+(nb<<6)+16>>2]=cb*fb+Ga*kb+bb*Za+Ea*eb;g[o+(nb<<6)+20>>2]=cb*Ya+Ga*db+bb*Ja+Ea*Ua;g[o+(nb<<6)+24>>2]=cb*ib+Ga*Ha+bb*Sa+Ea*hb;g[o+(nb<<6)+28>>2]=cb*Qa+Ga*Ba+bb*Oa+Ea*Va;g[o+(nb<<6)+32>>2]=ab*fb+Ca*kb+Fa*Za+Aa*eb;g[o+(nb<<6)+36>>2]=ab*Ya+Ca*db+Fa*Ja+Aa*Ua;g[o+(nb<<6)+40>>2]=ab*ib+Ca*Ha+Fa*Sa+Aa*hb;g[o+(nb<<6)+44>>2]=ab*Qa+Ca*Ba+Fa*Oa+Aa*Va;g[o+(nb<<6)+48>>2]=$a*fb+gb*kb+La*Za+_a*eb;g[o+(nb<<6)+52>>2]=$a*Ya+gb*db+La*Ja+_a*Ua;g[o+(nb<<6)+56>>2]=$a*ib+gb*Ha+La*Sa+_a*hb;g[o+(nb<<6)+60>>2]=$a*Qa+gb*Ba+La*Oa+_a*Va;nb=nb+1|0;if((nb|0)>=(ya|0)){break}else{mb=mb+64|0}}tb=ob?xa:pb}else{tb=n}if((tb|0)>=(p|0)){l=1;break}wa=c[m>>2]|0;n=tb}i=d;return l|0}function bk(a){a=a|0;var b=0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;c[a+16>>2]=0;i=b;return}



function lv(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0;h=i;if((c[d+8>>2]|0)!=(b|0)){i=h;return}a[d+53|0]=1;if((c[d+4>>2]|0)!=(f|0)){i=h;return}a[d+52|0]=1;f=d+16|0;b=c[f>>2]|0;if((b|0)==0){c[f>>2]=e;c[d+24>>2]=g;c[d+36>>2]=1;if(!((c[d+48>>2]|0)==1&(g|0)==1)){i=h;return}a[d+54|0]=1;i=h;return}if((b|0)!=(e|0)){e=d+36|0;c[e>>2]=(c[e>>2]|0)+1;a[d+54|0]=1;i=h;return}e=d+24|0;b=c[e>>2]|0;if((b|0)==2){c[e>>2]=g;j=g}else{j=b}if(!((c[d+48>>2]|0)==1&(j|0)==1)){i=h;return}a[d+54|0]=1;i=h;return}function mv(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;i=i+32|0;e=d;f=d+20|0;g=d+8|0;h=d+12|0;j=d+16|0;c[g>>2]=b;c[h>>2]=nv((Rv(c[g>>2]|0)|0)+1|0)|0;Uv(c[h>>2]|0,c[g>>2]|0)|0;c[j>>2]=Nu(c[h>>2]|0,30464)|0;if((c[j>>2]|0)!=0){a[c[j>>2]|0]=0}c[j>>2]=Nu(c[h>>2]|0,30472)|0;if((c[j>>2]|0)!=0){a[c[j>>2]|0]=0}c[j>>2]=Nu(c[h>>2]|0,30480)|0;if((c[j>>2]|0)!=0){a[c[j>>2]|0]=0}do{if((Lv(c[h>>2]|0,30488)|0)!=0){if((Lv(c[h>>2]|0,30528)|0)==0){c[h>>2]=30552;break}if((Lv(c[h>>2]|0,30568)|0)==0){c[h>>2]=30592;break}if((Lv(c[h>>2]|0,30608)|0)==0){c[h>>2]=30624;break}if((Lv(c[h>>2]|0,30640)|0)==0){c[h>>2]=30656}}else{c[h>>2]=30512}}while(0);do{if((Lv(c[h>>2]|0,30672)|0)!=0){if((Lv(c[h>>2]|0,30688)|0)==0){c[f>>2]=72;break}if((Lv(c[h>>2]|0,30704)|0)==0){c[f>>2]=47;break}if((Lv(c[h>>2]|0,30720)|0)==0){c[f>>2]=48;break}if((Lv(c[h>>2]|0,30736)|0)==0){c[f>>2]=49;break}if((Lv(c[h>>2]|0,30752)|0)==0){c[f>>2]=50;break}if((Lv(c[h>>2]|0,30768)|0)==0){c[f>>2]=51;break}if((Lv(c[h>>2]|0,30792)|0)==0){c[f>>2]=7;break}if((Lv(c[h>>2]|0,30816)|0)==0){c[f>>2]=3;break}if((Lv(c[h>>2]|0,30848)|0)==0){c[f>>2]=4;break}if((Lv(c[h>>2]|0,30864)|0)==0){c[f>>2]=5;break}if((Lv(c[h>>2]|0,30880)|0)==0){c[f>>2]=39;break}if((Lv(c[h>>2]|0,30896)|0)==0){c[f>>2]=52;break}if((Lv(c[h>>2]|0,30912)|0)==0){c[f>>2]=3;break}if((Lv(c[h>>2]|0,30936)|0)==0){c[f>>2]=4;break}if((Lv(c[h>>2]|0,30960)|0)==0){c[f>>2]=5;break}if((Lv(c[h>>2]|0,30984)|0)==0){c[f>>2]=6;break}if((Lv(c[h>>2]|0,31008)|0)==0){c[f>>2]=73;break}if((Lv(c[h>>2]|0,31024)|0)==0){c[f>>2]=53;break}if((Lv(c[h>>2]|0,31040)|0)==0){c[f>>2]=54;break}if((Lv(c[h>>2]|0,31056)|0)==0){c[f>>2]=7;break}if((Lv(c[h>>2]|0,31080)|0)==0){c[f>>2]=10;break}if((Lv(c[h>>2]|0,31096)|0)==0){c[f>>2]=11;break}if((Lv(c[h>>2]|0,31112)|0)==0){c[f>>2]=74;break}if((Lv(c[h>>2]|0,31128)|0)==0){c[f>>2]=55;break}if((Lv(c[h>>2]|0,31152)|0)==0){c[f>>2]=56;break}if((Lv(c[h>>2]|0,31176)|0)==0){c[f>>2]=57;break}if((Lv(c[h>>2]|0,31200)|0)==0){c[f>>2]=8;break}if((Lv(c[h>>2]|0,31232)|0)==0){c[f>>2]=75;break}if((Lv(c[h>>2]|0,31256)|0)==0){c[f>>2]=9;break}if((Lv(c[h>>2]|0,31272)|0)==0){c[f>>2]=10;break}if((Lv(c[h>>2]|0,31288)|0)==0){c[f>>2]=25;break}if((Lv(c[h>>2]|0,31312)|0)==0){c[f>>2]=11;break}if((Lv(c[h>>2]|0,31336)|0)==0){c[f>>2]=12;break}if((Lv(c[h>>2]|0,31360)|0)==0){c[f>>2]=13;break}if((Lv(c[h>>2]|0,31392)|0)==0){c[f>>2]=40;break}if((Lv(c[h>>2]|0,31416)|0)==0){c[f>>2]=1;break}if((Lv(c[h>>2]|0,31432)|0)==0){c[f>>2]=1;break}if((Lv(c[h>>2]|0,31448)|0)==0){c[f>>2]=1;break}if((Lv(c[h>>2]|0,31464)|0)==0){c[f>>2]=1;break}if((Lv(c[h>>2]|0,31480)|0)==0){c[f>>2]=58;break}if((Lv(c[h>>2]|0,31496)|0)==0){c[f>>2]=14;break}if((Lv(c[h>>2]|0,31512)|0)==0){c[f>>2]=12;break}if((Lv(c[h>>2]|0,31528)|0)==0){c[f>>2]=5;break}if((Lv(c[h>>2]|0,31544)|0)==0){c[f>>2]=15;break}if((Lv(c[h>>2]|0,31560)|0)==0){c[f>>2]=16;break}if((Lv(c[h>>2]|0,31576)|0)==0){c[f>>2]=17;break}if((Lv(c[h>>2]|0,31592)|0)==0){c[f>>2]=18;break}if((Lv(c[h>>2]|0,31608)|0)==0){c[f>>2]=19;break}if((Lv(c[h>>2]|0,31624)|0)==0){c[f>>2]=20;break}if((Lv(c[h>>2]|0,31640)|0)==0){c[f>>2]=21;break}if((Lv(c[h>>2]|0,31656)|0)==0){c[f>>2]=22;break}if((Lv(c[h>>2]|0,31672)|0)==0){c[f>>2]=13;break}if((Lv(c[h>>2]|0,31696)|0)==0){c[f>>2]=14;break}if((Lv(c[h>>2]|0,31720)|0)==0){c[f>>2]=15;break}if((Lv(c[h>>2]|0,31744)|0)==0){c[f>>2]=59;break}if((Lv(c[h>>2]|0,31760)|0)==0){c[f>>2]=60;break}if((Lv(c[h>>2]|0,31784)|0)==0){c[f>>2]=61;break}if((Lv(c[h>>2]|0,31808)|0)==0){c[f>>2]=62;break}if((Lv(c[h>>2]|0,31832)|0)==0){c[f>>2]=63;break}if((Lv(c[h>>2]|0,31856)|0)==0){c[f>>2]=26;break}if((Lv(c[h>>2]|0,31880)|0)==0){c[f>>2]=41;break}if((Lv(c[h>>2]|0,30592)|0)==0){c[f>>2]=76;break}if((Lv(c[h>>2]|0,31904)|0)==0){c[f>>2]=177;break}if((Lv(c[h>>2]|0,31920)|0)==0){c[f>>2]=16;break}if((Lv(c[h>>2]|0,31944)|0)==0){c[f>>2]=17;break}if((Lv(c[h>>2]|0,31960)|0)==0){c[f>>2]=18;break}if((Lv(c[h>>2]|0,31984)|0)==0){c[f>>2]=178;break}if((Lv(c[h>>2]|0,32e3)|0)==0){c[f>>2]=19;break}if((Lv(c[h>>2]|0,32024)|0)==0){c[f>>2]=23;break}if((Lv(c[h>>2]|0,32040)|0)==0){c[f>>2]=24;break}if((Lv(c[h>>2]|0,32056)|0)==0){c[f>>2]=77;break}if((Lv(c[h>>2]|0,30512)|0)==0){c[f>>2]=2;break}if((Lv(c[h>>2]|0,32072)|0)==0){c[f>>2]=179;break}if((Lv(c[h>>2]|0,30624)|0)==0){c[f>>2]=64;break}if((Lv(c[h>>2]|0,30656)|0)==0){c[f>>2]=65;break}if((Lv(c[h>>2]|0,32088)|0)==0){c[f>>2]=20;break}if((Lv(c[h>>2]|0,32120)|0)==0){c[f>>2]=180;break}if((Lv(c[h>>2]|0,32136)|0)==0){c[f>>2]=21;break}if((Lv(c[h>>2]|0,30552)|0)==0){c[f>>2]=181;break}if((Lv(c[h>>2]|0,32160)|0)==0){c[f>>2]=182;break}if((Lv(c[h>>2]|0,32184)|0)==0){c[f>>2]=78;break}if((Lv(c[h>>2]|0,32200)|0)==0){c[f>>2]=25;break}if((Lv(c[h>>2]|0,32224)|0)==0){c[f>>2]=66;break}if((Lv(c[h>>2]|0,32248)|0)==0){c[f>>2]=67;break}if((Lv(c[h>>2]|0,32272)|0)==0){c[f>>2]=68;break}if((Lv(c[h>>2]|0,32296)|0)==0){c[f>>2]=22;break}if((Lv(c[h>>2]|0,32328)|0)==0){c[f>>2]=6;break}if((Lv(c[h>>2]|0,32352)|0)==0){c[f>>2]=23;break}if((Lv(c[h>>2]|0,32392)|0)==0){c[f>>2]=79;break}if((Lv(c[h>>2]|0,32408)|0)==0){c[f>>2]=183;break}if((Lv(c[h>>2]|0,32424)|0)==0){c[f>>2]=26;break}if((Lv(c[h>>2]|0,32448)|0)==0){c[f>>2]=24;break}if((Lv(c[h>>2]|0,32464)|0)==0){c[f>>2]=69;break}if((Lv(c[h>>2]|0,32480)|0)==0){c[f>>2]=70;break}if((Lv(c[h>>2]|0,32496)|0)==0){c[f>>2]=17;break}if((Lv(c[h>>2]|0,32520)|0)==0){c[f>>2]=184;break}if((Lv(c[h>>2]|0,32544)|0)==0){c[f>>2]=25;break}if((Lv(c[h>>2]|0,32560)|0)==0){c[f>>2]=26;break}if((Lv(c[h>>2]|0,32584)|0)==0){c[f>>2]=27;break}if((Lv(c[h>>2]|0,32600)|0)==0){c[f>>2]=27;break}if((Lv(c[h>>2]|0,32616)|0)==0){c[f>>2]=185;break}if((Lv(c[h>>2]|0,32640)|0)==0){c[f>>2]=71;break}if((Lv(c[h>>2]|0,32664)|0)==0){c[f>>2]=72;break}if((Lv(c[h>>2]|0,32688)|0)==0){c[f>>2]=186;break}if((Lv(c[h>>2]|0,32712)|0)==0){c[f>>2]=187;break}if((Lv(c[h>>2]|0,32728)|0)==0){c[f>>2]=2;break}if((Lv(c[h>>2]|0,32744)|0)==0){c[f>>2]=188;break}if((Lv(c[h>>2]|0,32760)|0)==0){c[f>>2]=1;break}if((Lv(c[h>>2]|0,32776)|0)==0){c[f>>2]=1;break}if((Lv(c[h>>2]|0,32792)|0)==0){c[f>>2]=18;break}if((Lv(c[h>>2]|0,32816)|0)==0){c[f>>2]=189;break}if((Lv(c[h>>2]|0,32848)|0)==0){c[f>>2]=190;break}if((Lv(c[h>>2]|0,32880)|0)==0){c[f>>2]=28;break}if((Lv(c[h>>2]|0,32896)|0)==0){c[f>>2]=28;break}if((Lv(c[h>>2]|0,32912)|0)==0){c[f>>2]=7;break}if((Lv(c[h>>2]|0,32928)|0)==0){c[f>>2]=3;break}if((Lv(c[h>>2]|0,32952)|0)==0){c[f>>2]=3;break}if((Lv(c[h>>2]|0,32968)|0)==0){c[f>>2]=73;break}if((Lv(c[h>>2]|0,32992)|0)==0){c[f>>2]=29;break}if((Lv(c[h>>2]|0,33016)|0)==0){c[f>>2]=8;break}if((Lv(c[h>>2]|0,33040)|0)==0){c[f>>2]=4;break}if((Lv(c[h>>2]|0,33056)|0)==0){c[f>>2]=5;break}if((Lv(c[h>>2]|0,33064)|0)==0){c[f>>2]=1;break}if((Lv(c[h>>2]|0,33080)|0)==0){c[f>>2]=2;break}if((Lv(c[h>>2]|0,33096)|0)==0){c[f>>2]=191;break}if((Lv(c[h>>2]|0,33112)|0)==0){c[f>>2]=192;break}if((Lv(c[h>>2]|0,33128)|0)==0){c[f>>2]=193;break}if((Lv(c[h>>2]|0,33144)|0)==0){c[f>>2]=194;break}if((Lv(c[h>>2]|0,33160)|0)==0){c[f>>2]=195;break}if((Lv(c[h>>2]|0,33176)|0)==0){c[f>>2]=196;break}if((Lv(c[h>>2]|0,33184)|0)==0){c[f>>2]=3;break}if((Lv(c[h>>2]|0,33200)|0)==0){c[f>>2]=197;break}if((Lv(c[h>>2]|0,33216)|0)==0){c[f>>2]=198;break}if((Lv(c[h>>2]|0,33232)|0)==0){c[f>>2]=199;break}if((Lv(c[h>>2]|0,33248)|0)==0){c[f>>2]=80;break}if((Lv(c[h>>2]|0,33280)|0)==0){c[f>>2]=200;break}if((Lv(c[h>>2]|0,33304)|0)==0){c[f>>2]=201;break}if((Lv(c[h>>2]|0,33320)|0)==0){c[f>>2]=202;break}if((Lv(c[h>>2]|0,33336)|0)==0){c[f>>2]=81;break}if((Lv(c[h>>2]|0,33352)|0)==0){c[f>>2]=74;break}if((Lv(c[h>>2]|0,33368)|0)==0){c[f>>2]=75;break}if((Lv(c[h>>2]|0,33392)|0)==0){c[f>>2]=1;break}if((Lv(c[h>>2]|0,33408)|0)==0){c[f>>2]=2;break}if((Lv(c[h>>2]|0,33424)|0)==0){c[f>>2]=76;break}if((Lv(c[h>>2]|0,33448)|0)==0){c[f>>2]=77;break}if((Lv(c[h>>2]|0,33456)|0)==0){c[f>>2]=3;break}if((Lv(c[h>>2]|0,33472)|0)==0){c[f>>2]=2;break}if((Lv(c[h>>2]|0,33496)|0)==0){c[f>>2]=1;break}if((Lv(c[h>>2]|0,33520)|0)==0){c[f>>2]=29;break}if((Lv(c[h>>2]|0,33536)|0)==0){c[f>>2]=2;break}if((Lv(c[h>>2]|0,33552)|0)==0){c[f>>2]=2;break}if((Lv(c[h>>2]|0,33576)|0)==0){c[f>>2]=30;break}if((Lv(c[h>>2]|0,33592)|0)==0){c[f>>2]=31;break}if((Lv(c[h>>2]|0,33608)|0)==0){c[f>>2]=30;break}if((Lv(c[h>>2]|0,33624)|0)==0){c[f>>2]=2;break}if((Lv(c[h>>2]|0,33640)|0)==0){c[f>>2]=31;break}if((Lv(c[h>>2]|0,33656)|0)==0){c[f>>2]=2;break}if((Lv(c[h>>2]|0,33680)|0)==0){c[f>>2]=32;break}if((Lv(c[h>>2]|0,33696)|0)==0){c[f>>2]=33;break}if((Lv(c[h>>2]|0,33720)|0)==0){c[f>>2]=34;break}if((Lv(c[h>>2]|0,33744)|0)==0){c[f>>2]=3;break}if((Lv(c[h>>2]|0,33760)|0)==0){c[f>>2]=35;break}if((Lv(c[h>>2]|0,33784)|0)==0){c[f>>2]=36;break}if((Lv(c[h>>2]|0,33808)|0)==0){c[f>>2]=2;break}if((Lv(c[h>>2]|0,33832)|0)==0){c[f>>2]=8;break}if((Lv(c[h>>2]|0,33856)|0)!=0){j=c[q>>2]|0;b=c[h>>2]|0;c[e>>2]=c[g>>2];c[e+4>>2]=b;Ef(j|0,33880,e|0)|0;c[f>>2]=0;break}else{c[f>>2]=9;break}}else{c[f>>2]=46}}while(0);i=d;return c[f>>2]|0}function nv(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0;b=i;do{if(a>>>0<245){if(a>>>0<11){d=16}else{d=a+11&-8}e=d>>>3;f=c[8480]|0;g=f>>>e;if((g&3|0)!=0){h=(g&1^1)+e|0;j=h<<1;k=33960+(j<<2)|0;l=33960+(j+2<<2)|0;j=c[l>>2]|0;m=j+8|0;n=c[m>>2]|0;do{if((k|0)!=(n|0)){if(n>>>0<(c[33936>>2]|0)>>>0){We()}o=n+12|0;if((c[o>>2]|0)==(j|0)){c[o>>2]=k;c[l>>2]=n;break}else{We()}}else{c[8480]=f&~(1<<h)}}while(0);n=h<<3;c[j+4>>2]=n|3;l=j+(n|4)|0;c[l>>2]=c[l>>2]|1;p=m;i=b;return p|0}if(d>>>0>(c[33928>>2]|0)>>>0){if((g|0)!=0){l=2<<e;n=g<<e&(l|0-l);l=(n&0-n)+ -1|0;n=l>>>12&16;k=l>>>n;l=k>>>5&8;o=k>>>l;k=o>>>2&4;q=o>>>k;o=q>>>1&2;r=q>>>o;q=r>>>1&1;s=(l|n|k|o|q)+(r>>>q)|0;q=s<<1;r=33960+(q<<2)|0;o=33960+(q+2<<2)|0;q=c[o>>2]|0;k=q+8|0;n=c[k>>2]|0;do{if((r|0)!=(n|0)){if(n>>>0<(c[33936>>2]|0)>>>0){We()}l=n+12|0;if((c[l>>2]|0)==(q|0)){c[l>>2]=r;c[o>>2]=n;break}else{We()}}else{c[8480]=f&~(1<<s)}}while(0);f=s<<3;n=f-d|0;c[q+4>>2]=d|3;o=q+d|0;c[q+(d|4)>>2]=n|1;c[q+f>>2]=n;f=c[33928>>2]|0;if((f|0)!=0){r=c[33940>>2]|0;e=f>>>3;f=e<<1;g=33960+(f<<2)|0;m=c[8480]|0;j=1<<e;if((m&j|0)!=0){e=33960+(f+2<<2)|0;h=c[e>>2]|0;if(h>>>0<(c[33936>>2]|0)>>>0){We()}else{t=e;u=h}}else{c[8480]=m|j;t=33960+(f+2<<2)|0;u=g}c[t>>2]=r;c[u+12>>2]=r;c[r+8>>2]=u;c[r+12>>2]=g}c[33928>>2]=n;c[33940>>2]=o;p=k;i=b;return p|0}o=c[33924>>2]|0;if((o|0)!=0){n=(o&0-o)+ -1|0;o=n>>>12&16;g=n>>>o;n=g>>>5&8;r=g>>>n;g=r>>>2&4;f=r>>>g;r=f>>>1&2;j=f>>>r;f=j>>>1&1;m=c[34224+((n|o|g|r|f)+(j>>>f)<<2)>>2]|0;f=(c[m+4>>2]&-8)-d|0;j=m;r=m;while(1){m=c[j+16>>2]|0;if((m|0)==0){g=c[j+20>>2]|0;if((g|0)==0){break}else{v=g}}else{v=m}m=(c[v+4>>2]&-8)-d|0;g=m>>>0<f>>>0;f=g?m:f;j=v;r=g?v:r}j=c[33936>>2]|0;if(r>>>0<j>>>0){We()}k=r+d|0;if(!(r>>>0<k>>>0)){We()}q=c[r+24>>2]|0;s=c[r+12>>2]|0;do{if((s|0)==(r|0)){g=r+20|0;m=c[g>>2]|0;if((m|0)==0){o=r+16|0;n=c[o>>2]|0;if((n|0)==0){w=0;break}else{x=n;y=o}}else{x=m;y=g}while(1){g=x+20|0;m=c[g>>2]|0;if((m|0)!=0){x=m;y=g;continue}g=x+16|0;m=c[g>>2]|0;if((m|0)==0){break}else{x=m;y=g}}if(y>>>0<j>>>0){We()}else{c[y>>2]=0;w=x;break}}else{g=c[r+8>>2]|0;if(g>>>0<j>>>0){We()}m=g+12|0;if((c[m>>2]|0)!=(r|0)){We()}o=s+8|0;if((c[o>>2]|0)==(r|0)){c[m>>2]=s;c[o>>2]=g;w=s;break}else{We()}}}while(0);do{if((q|0)!=0){s=c[r+28>>2]|0;j=34224+(s<<2)|0;if((r|0)==(c[j>>2]|0)){c[j>>2]=w;if((w|0)==0){c[33924>>2]=c[33924>>2]&~(1<<s);break}}else{if(q>>>0<(c[33936>>2]|0)>>>0){We()}s=q+16|0;if((c[s>>2]|0)==(r|0)){c[s>>2]=w}else{c[q+20>>2]=w}if((w|0)==0){break}}if(w>>>0<(c[33936>>2]|0)>>>0){We()}c[w+24>>2]=q;s=c[r+16>>2]|0;do{if((s|0)!=0){if(s>>>0<(c[33936>>2]|0)>>>0){We()}else{c[w+16>>2]=s;c[s+24>>2]=w;break}}}while(0);s=c[r+20>>2]|0;if((s|0)!=0){if(s>>>0<(c[33936>>2]|0)>>>0){We()}else{c[w+20>>2]=s;c[s+24>>2]=w;break}}}}while(0);if(f>>>0<16){q=f+d|0;c[r+4>>2]=q|3;s=r+(q+4)|0;c[s>>2]=c[s>>2]|1}else{c[r+4>>2]=d|3;c[r+(d|4)>>2]=f|1;c[r+(f+d)>>2]=f;s=c[33928>>2]|0;if((s|0)!=0){q=c[33940>>2]|0;j=s>>>3;s=j<<1;g=33960+(s<<2)|0;o=c[8480]|0;m=1<<j;if((o&m|0)!=0){j=33960+(s+2<<2)|0;n=c[j>>2]|0;if(n>>>0<(c[33936>>2]|0)>>>0){We()}else{z=j;A=n}}else{c[8480]=o|m;z=33960+(s+2<<2)|0;A=g}c[z>>2]=q;c[A+12>>2]=q;c[q+8>>2]=A;c[q+12>>2]=g}c[33928>>2]=f;c[33940>>2]=k}p=r+8|0;i=b;return p|0}else{B=d}}else{B=d}}else{if(!(a>>>0>4294967231)){g=a+11|0;q=g&-8;s=c[33924>>2]|0;if((s|0)!=0){m=0-q|0;o=g>>>8;if((o|0)!=0){if(q>>>0>16777215){C=31}else{g=(o+1048320|0)>>>16&8;n=o<<g;o=(n+520192|0)>>>16&4;j=n<<o;n=(j+245760|0)>>>16&2;h=14-(o|g|n)+(j<<n>>>15)|0;C=q>>>(h+7|0)&1|h<<1}}else{C=0}h=c[34224+(C<<2)>>2]|0;a:do{if((h|0)==0){D=m;E=0;F=0}else{if((C|0)==31){G=0}else{G=25-(C>>>1)|0}n=m;j=0;g=q<<G;o=h;e=0;while(1){l=c[o+4>>2]&-8;H=l-q|0;if(H>>>0<n>>>0){if((l|0)==(q|0)){D=H;E=o;F=o;break a}else{I=H;J=o}}else{I=n;J=e}H=c[o+20>>2]|0;l=c[o+(g>>>31<<2)+16>>2]|0;K=(H|0)==0|(H|0)==(l|0)?j:H;if((l|0)==0){D=I;E=K;F=J;break}else{n=I;j=K;g=g<<1;o=l;e=J}}}}while(0);if((E|0)==0&(F|0)==0){h=2<<C;m=s&(h|0-h);if((m|0)==0){B=q;break}h=(m&0-m)+ -1|0;m=h>>>12&16;r=h>>>m;h=r>>>5&8;k=r>>>h;r=k>>>2&4;f=k>>>r;k=f>>>1&2;e=f>>>k;f=e>>>1&1;L=c[34224+((h|m|r|k|f)+(e>>>f)<<2)>>2]|0}else{L=E}if((L|0)==0){M=D;N=F}else{f=D;e=L;k=F;while(1){r=(c[e+4>>2]&-8)-q|0;m=r>>>0<f>>>0;h=m?r:f;r=m?e:k;m=c[e+16>>2]|0;if((m|0)!=0){f=h;e=m;k=r;continue}m=c[e+20>>2]|0;if((m|0)==0){M=h;N=r;break}else{f=h;e=m;k=r}}}if((N|0)!=0?M>>>0<((c[33928>>2]|0)-q|0)>>>0:0){k=c[33936>>2]|0;if(N>>>0<k>>>0){We()}e=N+q|0;if(!(N>>>0<e>>>0)){We()}f=c[N+24>>2]|0;s=c[N+12>>2]|0;do{if((s|0)==(N|0)){r=N+20|0;m=c[r>>2]|0;if((m|0)==0){h=N+16|0;o=c[h>>2]|0;if((o|0)==0){O=0;break}else{P=o;Q=h}}else{P=m;Q=r}while(1){r=P+20|0;m=c[r>>2]|0;if((m|0)!=0){P=m;Q=r;continue}r=P+16|0;m=c[r>>2]|0;if((m|0)==0){break}else{P=m;Q=r}}if(Q>>>0<k>>>0){We()}else{c[Q>>2]=0;O=P;break}}else{r=c[N+8>>2]|0;if(r>>>0<k>>>0){We()}m=r+12|0;if((c[m>>2]|0)!=(N|0)){We()}h=s+8|0;if((c[h>>2]|0)==(N|0)){c[m>>2]=s;c[h>>2]=r;O=s;break}else{We()}}}while(0);do{if((f|0)!=0){s=c[N+28>>2]|0;k=34224+(s<<2)|0;if((N|0)==(c[k>>2]|0)){c[k>>2]=O;if((O|0)==0){c[33924>>2]=c[33924>>2]&~(1<<s);break}}else{if(f>>>0<(c[33936>>2]|0)>>>0){We()}s=f+16|0;if((c[s>>2]|0)==(N|0)){c[s>>2]=O}else{c[f+20>>2]=O}if((O|0)==0){break}}if(O>>>0<(c[33936>>2]|0)>>>0){We()}c[O+24>>2]=f;s=c[N+16>>2]|0;do{if((s|0)!=0){if(s>>>0<(c[33936>>2]|0)>>>0){We()}else{c[O+16>>2]=s;c[s+24>>2]=O;break}}}while(0);s=c[N+20>>2]|0;if((s|0)!=0){if(s>>>0<(c[33936>>2]|0)>>>0){We()}else{c[O+20>>2]=s;c[s+24>>2]=O;break}}}}while(0);b:do{if(!(M>>>0<16)){c[N+4>>2]=q|3;c[N+(q|4)>>2]=M|1;c[N+(M+q)>>2]=M;f=M>>>3;if(M>>>0<256){s=f<<1;k=33960+(s<<2)|0;r=c[8480]|0;h=1<<f;if((r&h|0)!=0){f=33960+(s+2<<2)|0;m=c[f>>2]|0;if(m>>>0<(c[33936>>2]|0)>>>0){We()}else{R=f;S=m}}else{c[8480]=r|h;R=33960+(s+2<<2)|0;S=k}c[R>>2]=e;c[S+12>>2]=e;c[N+(q+8)>>2]=S;c[N+(q+12)>>2]=k;break}k=M>>>8;if((k|0)!=0){if(M>>>0>16777215){T=31}else{s=(k+1048320|0)>>>16&8;h=k<<s;k=(h+520192|0)>>>16&4;r=h<<k;h=(r+245760|0)>>>16&2;m=14-(k|s|h)+(r<<h>>>15)|0;T=M>>>(m+7|0)&1|m<<1}}else{T=0}m=34224+(T<<2)|0;c[N+(q+28)>>2]=T;c[N+(q+20)>>2]=0;c[N+(q+16)>>2]=0;h=c[33924>>2]|0;r=1<<T;if((h&r|0)==0){c[33924>>2]=h|r;c[m>>2]=e;c[N+(q+24)>>2]=m;c[N+(q+12)>>2]=e;c[N+(q+8)>>2]=e;break}r=c[m>>2]|0;if((T|0)==31){U=0}else{U=25-(T>>>1)|0}c:do{if((c[r+4>>2]&-8|0)!=(M|0)){m=M<<U;h=r;while(1){V=h+(m>>>31<<2)+16|0;s=c[V>>2]|0;if((s|0)==0){break}if((c[s+4>>2]&-8|0)==(M|0)){W=s;break c}else{m=m<<1;h=s}}if(V>>>0<(c[33936>>2]|0)>>>0){We()}else{c[V>>2]=e;c[N+(q+24)>>2]=h;c[N+(q+12)>>2]=e;c[N+(q+8)>>2]=e;break b}}else{W=r}}while(0);r=W+8|0;m=c[r>>2]|0;s=c[33936>>2]|0;if(W>>>0<s>>>0){We()}if(m>>>0<s>>>0){We()}else{c[m+12>>2]=e;c[r>>2]=e;c[N+(q+8)>>2]=m;c[N+(q+12)>>2]=W;c[N+(q+24)>>2]=0;break}}else{m=M+q|0;c[N+4>>2]=m|3;r=N+(m+4)|0;c[r>>2]=c[r>>2]|1}}while(0);p=N+8|0;i=b;return p|0}else{B=q}}else{B=q}}else{B=-1}}}while(0);N=c[33928>>2]|0;if(!(B>>>0>N>>>0)){M=N-B|0;W=c[33940>>2]|0;if(M>>>0>15){c[33940>>2]=W+B;c[33928>>2]=M;c[W+(B+4)>>2]=M|1;c[W+N>>2]=M;c[W+4>>2]=B|3}else{c[33928>>2]=0;c[33940>>2]=0;c[W+4>>2]=N|3;M=W+(N+4)|0;c[M>>2]=c[M>>2]|1}p=W+8|0;i=b;return p|0}W=c[33932>>2]|0;if(B>>>0<W>>>0){M=W-B|0;c[33932>>2]=M;W=c[33944>>2]|0;c[33944>>2]=W+B;c[W+(B+4)>>2]=M|1;c[W+4>>2]=B|3;p=W+8|0;i=b;return p|0}do{if((c[8598]|0)==0){W=Te(30)|0;if((W+ -1&W|0)==0){c[34400>>2]=W;c[34396>>2]=W;c[34404>>2]=-1;c[34408>>2]=-1;c[34412>>2]=0;c[34364>>2]=0;c[8598]=(Bd(0)|0)&-16^1431655768;break}else{We()}}}while(0);W=B+48|0;M=c[34400>>2]|0;N=B+47|0;V=M+N|0;U=0-M|0;M=V&U;if(!(M>>>0>B>>>0)){p=0;i=b;return p|0}T=c[34360>>2]|0;if((T|0)!=0?(S=c[34352>>2]|0,R=S+M|0,R>>>0<=S>>>0|R>>>0>T>>>0):0){p=0;i=b;return p|0}d:do{if((c[34364>>2]&4|0)==0){T=c[33944>>2]|0;e:do{if((T|0)!=0){R=34368|0;while(1){S=c[R>>2]|0;if(!(S>>>0>T>>>0)?(X=R+4|0,(S+(c[X>>2]|0)|0)>>>0>T>>>0):0){break}S=c[R+8>>2]|0;if((S|0)==0){Y=182;break e}else{R=S}}if((R|0)!=0){S=V-(c[33932>>2]|0)&U;if(S>>>0<2147483647){O=ob(S|0)|0;P=(O|0)==((c[R>>2]|0)+(c[X>>2]|0)|0);Z=O;_=S;$=P?O:-1;aa=P?S:0;Y=191}else{ba=0}}else{Y=182}}else{Y=182}}while(0);do{if((Y|0)==182){T=ob(0)|0;if((T|0)!=(-1|0)){q=T;S=c[34396>>2]|0;P=S+ -1|0;if((P&q|0)==0){ca=M}else{ca=M-q+(P+q&0-S)|0}S=c[34352>>2]|0;q=S+ca|0;if(ca>>>0>B>>>0&ca>>>0<2147483647){P=c[34360>>2]|0;if((P|0)!=0?q>>>0<=S>>>0|q>>>0>P>>>0:0){ba=0;break}P=ob(ca|0)|0;q=(P|0)==(T|0);Z=P;_=ca;$=q?T:-1;aa=q?ca:0;Y=191}else{ba=0}}else{ba=0}}}while(0);f:do{if((Y|0)==191){q=0-_|0;if(($|0)!=(-1|0)){da=$;ea=aa;Y=202;break d}do{if((Z|0)!=(-1|0)&_>>>0<2147483647&_>>>0<W>>>0?(T=c[34400>>2]|0,P=N-_+T&0-T,P>>>0<2147483647):0){if((ob(P|0)|0)==(-1|0)){ob(q|0)|0;ba=aa;break f}else{fa=P+_|0;break}}else{fa=_}}while(0);if((Z|0)==(-1|0)){ba=aa}else{da=Z;ea=fa;Y=202;break d}}}while(0);c[34364>>2]=c[34364>>2]|4;ga=ba;Y=199}else{ga=0;Y=199}}while(0);if((((Y|0)==199?M>>>0<2147483647:0)?(ba=ob(M|0)|0,M=ob(0)|0,(M|0)!=(-1|0)&(ba|0)!=(-1|0)&ba>>>0<M>>>0):0)?(fa=M-ba|0,M=fa>>>0>(B+40|0)>>>0,M):0){da=ba;ea=M?fa:ga;Y=202}if((Y|0)==202){ga=(c[34352>>2]|0)+ea|0;c[34352>>2]=ga;if(ga>>>0>(c[34356>>2]|0)>>>0){c[34356>>2]=ga}ga=c[33944>>2]|0;g:do{if((ga|0)!=0){fa=34368|0;while(1){ha=c[fa>>2]|0;ia=fa+4|0;ja=c[ia>>2]|0;if((da|0)==(ha+ja|0)){Y=214;break}M=c[fa+8>>2]|0;if((M|0)==0){break}else{fa=M}}if(((Y|0)==214?(c[fa+12>>2]&8|0)==0:0)?ga>>>0>=ha>>>0&ga>>>0<da>>>0:0){c[ia>>2]=ja+ea;M=(c[33932>>2]|0)+ea|0;ba=ga+8|0;if((ba&7|0)==0){ka=0}else{ka=0-ba&7}ba=M-ka|0;c[33944>>2]=ga+ka;c[33932>>2]=ba;c[ga+(ka+4)>>2]=ba|1;c[ga+(M+4)>>2]=40;c[33948>>2]=c[34408>>2];break}if(da>>>0<(c[33936>>2]|0)>>>0){c[33936>>2]=da}M=da+ea|0;ba=34368|0;while(1){if((c[ba>>2]|0)==(M|0)){Y=224;break}Z=c[ba+8>>2]|0;if((Z|0)==0){break}else{ba=Z}}if((Y|0)==224?(c[ba+12>>2]&8|0)==0:0){c[ba>>2]=da;M=ba+4|0;c[M>>2]=(c[M>>2]|0)+ea;M=da+8|0;if((M&7|0)==0){la=0}else{la=0-M&7}M=da+(ea+8)|0;if((M&7|0)==0){ma=0}else{ma=0-M&7}M=da+(ma+ea)|0;fa=la+B|0;Z=da+fa|0;aa=M-(da+la)-B|0;c[da+(la+4)>>2]=B|3;h:do{if((M|0)!=(c[33944>>2]|0)){if((M|0)==(c[33940>>2]|0)){_=(c[33928>>2]|0)+aa|0;c[33928>>2]=_;c[33940>>2]=Z;c[da+(fa+4)>>2]=_|1;c[da+(_+fa)>>2]=_;break}_=ea+4|0;N=c[da+(_+ma)>>2]|0;if((N&3|0)==1){W=N&-8;$=N>>>3;do{if(!(N>>>0<256)){ca=c[da+((ma|24)+ea)>>2]|0;X=c[da+(ea+12+ma)>>2]|0;do{if((X|0)==(M|0)){U=ma|16;V=da+(_+U)|0;q=c[V>>2]|0;if((q|0)==0){R=da+(U+ea)|0;U=c[R>>2]|0;if((U|0)==0){na=0;break}else{oa=U;pa=R}}else{oa=q;pa=V}while(1){V=oa+20|0;q=c[V>>2]|0;if((q|0)!=0){oa=q;pa=V;continue}V=oa+16|0;q=c[V>>2]|0;if((q|0)==0){break}else{oa=q;pa=V}}if(pa>>>0<(c[33936>>2]|0)>>>0){We()}else{c[pa>>2]=0;na=oa;break}}else{V=c[da+((ma|8)+ea)>>2]|0;if(V>>>0<(c[33936>>2]|0)>>>0){We()}q=V+12|0;if((c[q>>2]|0)!=(M|0)){We()}R=X+8|0;if((c[R>>2]|0)==(M|0)){c[q>>2]=X;c[R>>2]=V;na=X;break}else{We()}}}while(0);if((ca|0)!=0){X=c[da+(ea+28+ma)>>2]|0;h=34224+(X<<2)|0;if((M|0)==(c[h>>2]|0)){c[h>>2]=na;if((na|0)==0){c[33924>>2]=c[33924>>2]&~(1<<X);break}}else{if(ca>>>0<(c[33936>>2]|0)>>>0){We()}X=ca+16|0;if((c[X>>2]|0)==(M|0)){c[X>>2]=na}else{c[ca+20>>2]=na}if((na|0)==0){break}}if(na>>>0<(c[33936>>2]|0)>>>0){We()}c[na+24>>2]=ca;X=ma|16;h=c[da+(X+ea)>>2]|0;do{if((h|0)!=0){if(h>>>0<(c[33936>>2]|0)>>>0){We()}else{c[na+16>>2]=h;c[h+24>>2]=na;break}}}while(0);h=c[da+(_+X)>>2]|0;if((h|0)!=0){if(h>>>0<(c[33936>>2]|0)>>>0){We()}else{c[na+20>>2]=h;c[h+24>>2]=na;break}}}}else{h=c[da+((ma|8)+ea)>>2]|0;ca=c[da+(ea+12+ma)>>2]|0;V=33960+($<<1<<2)|0;if((h|0)!=(V|0)){if(h>>>0<(c[33936>>2]|0)>>>0){We()}if((c[h+12>>2]|0)!=(M|0)){We()}}if((ca|0)==(h|0)){c[8480]=c[8480]&~(1<<$);break}if((ca|0)!=(V|0)){if(ca>>>0<(c[33936>>2]|0)>>>0){We()}V=ca+8|0;if((c[V>>2]|0)==(M|0)){qa=V}else{We()}}else{qa=ca+8|0}c[h+12>>2]=ca;c[qa>>2]=h}}while(0);ra=da+((W|ma)+ea)|0;sa=W+aa|0}else{ra=M;sa=aa}$=ra+4|0;c[$>>2]=c[$>>2]&-2;c[da+(fa+4)>>2]=sa|1;c[da+(sa+fa)>>2]=sa;$=sa>>>3;if(sa>>>0<256){_=$<<1;N=33960+(_<<2)|0;h=c[8480]|0;ca=1<<$;if((h&ca|0)!=0){$=33960+(_+2<<2)|0;V=c[$>>2]|0;if(V>>>0<(c[33936>>2]|0)>>>0){We()}else{ta=$;ua=V}}else{c[8480]=h|ca;ta=33960+(_+2<<2)|0;ua=N}c[ta>>2]=Z;c[ua+12>>2]=Z;c[da+(fa+8)>>2]=ua;c[da+(fa+12)>>2]=N;break}N=sa>>>8;if((N|0)!=0){if(sa>>>0>16777215){va=31}else{_=(N+1048320|0)>>>16&8;ca=N<<_;N=(ca+520192|0)>>>16&4;h=ca<<N;ca=(h+245760|0)>>>16&2;V=14-(N|_|ca)+(h<<ca>>>15)|0;va=sa>>>(V+7|0)&1|V<<1}}else{va=0}V=34224+(va<<2)|0;c[da+(fa+28)>>2]=va;c[da+(fa+20)>>2]=0;c[da+(fa+16)>>2]=0;ca=c[33924>>2]|0;h=1<<va;if((ca&h|0)==0){c[33924>>2]=ca|h;c[V>>2]=Z;c[da+(fa+24)>>2]=V;c[da+(fa+12)>>2]=Z;c[da+(fa+8)>>2]=Z;break}h=c[V>>2]|0;if((va|0)==31){wa=0}else{wa=25-(va>>>1)|0}i:do{if((c[h+4>>2]&-8|0)!=(sa|0)){V=sa<<wa;ca=h;while(1){xa=ca+(V>>>31<<2)+16|0;_=c[xa>>2]|0;if((_|0)==0){break}if((c[_+4>>2]&-8|0)==(sa|0)){ya=_;break i}else{V=V<<1;ca=_}}if(xa>>>0<(c[33936>>2]|0)>>>0){We()}else{c[xa>>2]=Z;c[da+(fa+24)>>2]=ca;c[da+(fa+12)>>2]=Z;c[da+(fa+8)>>2]=Z;break h}}else{ya=h}}while(0);h=ya+8|0;W=c[h>>2]|0;V=c[33936>>2]|0;if(ya>>>0<V>>>0){We()}if(W>>>0<V>>>0){We()}else{c[W+12>>2]=Z;c[h>>2]=Z;c[da+(fa+8)>>2]=W;c[da+(fa+12)>>2]=ya;c[da+(fa+24)>>2]=0;break}}else{W=(c[33932>>2]|0)+aa|0;c[33932>>2]=W;c[33944>>2]=Z;c[da+(fa+4)>>2]=W|1}}while(0);p=da+(la|8)|0;i=b;return p|0}fa=34368|0;while(1){za=c[fa>>2]|0;if(!(za>>>0>ga>>>0)?(Aa=c[fa+4>>2]|0,Ba=za+Aa|0,Ba>>>0>ga>>>0):0){break}fa=c[fa+8>>2]|0}fa=za+(Aa+ -39)|0;if((fa&7|0)==0){Ca=0}else{Ca=0-fa&7}fa=za+(Aa+ -47+Ca)|0;Z=fa>>>0<(ga+16|0)>>>0?ga:fa;fa=Z+8|0;aa=da+8|0;if((aa&7|0)==0){Da=0}else{Da=0-aa&7}aa=ea+ -40-Da|0;c[33944>>2]=da+Da;c[33932>>2]=aa;c[da+(Da+4)>>2]=aa|1;c[da+(ea+ -36)>>2]=40;c[33948>>2]=c[34408>>2];c[Z+4>>2]=27;c[fa+0>>2]=c[34368>>2];c[fa+4>>2]=c[34372>>2];c[fa+8>>2]=c[34376>>2];c[fa+12>>2]=c[34380>>2];c[34368>>2]=da;c[34372>>2]=ea;c[34380>>2]=0;c[34376>>2]=fa;fa=Z+28|0;c[fa>>2]=7;if((Z+32|0)>>>0<Ba>>>0){aa=fa;while(1){fa=aa+4|0;c[fa>>2]=7;if((aa+8|0)>>>0<Ba>>>0){aa=fa}else{break}}}if((Z|0)!=(ga|0)){aa=Z-ga|0;fa=ga+(aa+4)|0;c[fa>>2]=c[fa>>2]&-2;c[ga+4>>2]=aa|1;c[ga+aa>>2]=aa;fa=aa>>>3;if(aa>>>0<256){M=fa<<1;ba=33960+(M<<2)|0;W=c[8480]|0;h=1<<fa;if((W&h|0)!=0){fa=33960+(M+2<<2)|0;V=c[fa>>2]|0;if(V>>>0<(c[33936>>2]|0)>>>0){We()}else{Ea=fa;Fa=V}}else{c[8480]=W|h;Ea=33960+(M+2<<2)|0;Fa=ba}c[Ea>>2]=ga;c[Fa+12>>2]=ga;c[ga+8>>2]=Fa;c[ga+12>>2]=ba;break}ba=aa>>>8;if((ba|0)!=0){if(aa>>>0>16777215){Ga=31}else{M=(ba+1048320|0)>>>16&8;h=ba<<M;ba=(h+520192|0)>>>16&4;W=h<<ba;h=(W+245760|0)>>>16&2;V=14-(ba|M|h)+(W<<h>>>15)|0;Ga=aa>>>(V+7|0)&1|V<<1}}else{Ga=0}V=34224+(Ga<<2)|0;c[ga+28>>2]=Ga;c[ga+20>>2]=0;c[ga+16>>2]=0;h=c[33924>>2]|0;W=1<<Ga;if((h&W|0)==0){c[33924>>2]=h|W;c[V>>2]=ga;c[ga+24>>2]=V;c[ga+12>>2]=ga;c[ga+8>>2]=ga;break}W=c[V>>2]|0;if((Ga|0)==31){Ha=0}else{Ha=25-(Ga>>>1)|0}j:do{if((c[W+4>>2]&-8|0)!=(aa|0)){V=aa<<Ha;h=W;while(1){Ia=h+(V>>>31<<2)+16|0;M=c[Ia>>2]|0;if((M|0)==0){break}if((c[M+4>>2]&-8|0)==(aa|0)){Ja=M;break j}else{V=V<<1;h=M}}if(Ia>>>0<(c[33936>>2]|0)>>>0){We()}else{c[Ia>>2]=ga;c[ga+24>>2]=h;c[ga+12>>2]=ga;c[ga+8>>2]=ga;break g}}else{Ja=W}}while(0);W=Ja+8|0;aa=c[W>>2]|0;Z=c[33936>>2]|0;if(Ja>>>0<Z>>>0){We()}if(aa>>>0<Z>>>0){We()}else{c[aa+12>>2]=ga;c[W>>2]=ga;c[ga+8>>2]=aa;c[ga+12>>2]=Ja;c[ga+24>>2]=0;break}}}else{aa=c[33936>>2]|0;if((aa|0)==0|da>>>0<aa>>>0){c[33936>>2]=da}c[34368>>2]=da;c[34372>>2]=ea;c[34380>>2]=0;c[33956>>2]=c[8598];c[33952>>2]=-1;aa=0;do{W=aa<<1;Z=33960+(W<<2)|0;c[33960+(W+3<<2)>>2]=Z;c[33960+(W+2<<2)>>2]=Z;aa=aa+1|0}while((aa|0)!=32);aa=da+8|0;if((aa&7|0)==0){Ka=0}else{Ka=0-aa&7}aa=ea+ -40-Ka|0;c[33944>>2]=da+Ka;c[33932>>2]=aa;c[da+(Ka+4)>>2]=aa|1;c[da+(ea+ -36)>>2]=40;c[33948>>2]=c[34408>>2]}}while(0);ea=c[33932>>2]|0;if(ea>>>0>B>>>0){da=ea-B|0;c[33932>>2]=da;ea=c[33944>>2]|0;c[33944>>2]=ea+B;c[ea+(B+4)>>2]=da|1;c[ea+4>>2]=B|3;p=ea+8|0;i=b;return p|0}}c[(be()|0)>>2]=12;p=0;i=b;return p|0}function ov(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;b=i;if((a|0)==0){i=b;return}d=a+ -8|0;e=c[33936>>2]|0;if(d>>>0<e>>>0){We()}f=c[a+ -4>>2]|0;g=f&3;if((g|0)==1){We()}h=f&-8;j=a+(h+ -8)|0;do{if((f&1|0)==0){k=c[d>>2]|0;if((g|0)==0){i=b;return}l=-8-k|0;m=a+l|0;n=k+h|0;if(m>>>0<e>>>0){We()}if((m|0)==(c[33940>>2]|0)){o=a+(h+ -4)|0;if((c[o>>2]&3|0)!=3){p=m;q=n;break}c[33928>>2]=n;c[o>>2]=c[o>>2]&-2;c[a+(l+4)>>2]=n|1;c[j>>2]=n;i=b;return}o=k>>>3;if(k>>>0<256){k=c[a+(l+8)>>2]|0;r=c[a+(l+12)>>2]|0;s=33960+(o<<1<<2)|0;if((k|0)!=(s|0)){if(k>>>0<e>>>0){We()}if((c[k+12>>2]|0)!=(m|0)){We()}}if((r|0)==(k|0)){c[8480]=c[8480]&~(1<<o);p=m;q=n;break}if((r|0)!=(s|0)){if(r>>>0<e>>>0){We()}s=r+8|0;if((c[s>>2]|0)==(m|0)){t=s}else{We()}}else{t=r+8|0}c[k+12>>2]=r;c[t>>2]=k;p=m;q=n;break}k=c[a+(l+24)>>2]|0;r=c[a+(l+12)>>2]|0;do{if((r|0)==(m|0)){s=a+(l+20)|0;o=c[s>>2]|0;if((o|0)==0){u=a+(l+16)|0;v=c[u>>2]|0;if((v|0)==0){w=0;break}else{x=v;y=u}}else{x=o;y=s}while(1){s=x+20|0;o=c[s>>2]|0;if((o|0)!=0){x=o;y=s;continue}s=x+16|0;o=c[s>>2]|0;if((o|0)==0){break}else{x=o;y=s}}if(y>>>0<e>>>0){We()}else{c[y>>2]=0;w=x;break}}else{s=c[a+(l+8)>>2]|0;if(s>>>0<e>>>0){We()}o=s+12|0;if((c[o>>2]|0)!=(m|0)){We()}u=r+8|0;if((c[u>>2]|0)==(m|0)){c[o>>2]=r;c[u>>2]=s;w=r;break}else{We()}}}while(0);if((k|0)!=0){r=c[a+(l+28)>>2]|0;s=34224+(r<<2)|0;if((m|0)==(c[s>>2]|0)){c[s>>2]=w;if((w|0)==0){c[33924>>2]=c[33924>>2]&~(1<<r);p=m;q=n;break}}else{if(k>>>0<(c[33936>>2]|0)>>>0){We()}r=k+16|0;if((c[r>>2]|0)==(m|0)){c[r>>2]=w}else{c[k+20>>2]=w}if((w|0)==0){p=m;q=n;break}}if(w>>>0<(c[33936>>2]|0)>>>0){We()}c[w+24>>2]=k;r=c[a+(l+16)>>2]|0;do{if((r|0)!=0){if(r>>>0<(c[33936>>2]|0)>>>0){We()}else{c[w+16>>2]=r;c[r+24>>2]=w;break}}}while(0);r=c[a+(l+20)>>2]|0;if((r|0)!=0){if(r>>>0<(c[33936>>2]|0)>>>0){We()}else{c[w+20>>2]=r;c[r+24>>2]=w;p=m;q=n;break}}else{p=m;q=n}}else{p=m;q=n}}else{p=d;q=h}}while(0);if(!(p>>>0<j>>>0)){We()}d=a+(h+ -4)|0;w=c[d>>2]|0;if((w&1|0)==0){We()}if((w&2|0)==0){if((j|0)==(c[33944>>2]|0)){e=(c[33932>>2]|0)+q|0;c[33932>>2]=e;c[33944>>2]=p;c[p+4>>2]=e|1;if((p|0)!=(c[33940>>2]|0)){i=b;return}c[33940>>2]=0;c[33928>>2]=0;i=b;return}if((j|0)==(c[33940>>2]|0)){e=(c[33928>>2]|0)+q|0;c[33928>>2]=e;c[33940>>2]=p;c[p+4>>2]=e|1;c[p+e>>2]=e;i=b;return}e=(w&-8)+q|0;x=w>>>3;do{if(!(w>>>0<256)){y=c[a+(h+16)>>2]|0;t=c[a+(h|4)>>2]|0;do{if((t|0)==(j|0)){g=a+(h+12)|0;f=c[g>>2]|0;if((f|0)==0){r=a+(h+8)|0;k=c[r>>2]|0;if((k|0)==0){z=0;break}else{A=k;B=r}}else{A=f;B=g}while(1){g=A+20|0;f=c[g>>2]|0;if((f|0)!=0){A=f;B=g;continue}g=A+16|0;f=c[g>>2]|0;if((f|0)==0){break}else{A=f;B=g}}if(B>>>0<(c[33936>>2]|0)>>>0){We()}else{c[B>>2]=0;z=A;break}}else{g=c[a+h>>2]|0;if(g>>>0<(c[33936>>2]|0)>>>0){We()}f=g+12|0;if((c[f>>2]|0)!=(j|0)){We()}r=t+8|0;if((c[r>>2]|0)==(j|0)){c[f>>2]=t;c[r>>2]=g;z=t;break}else{We()}}}while(0);if((y|0)!=0){t=c[a+(h+20)>>2]|0;n=34224+(t<<2)|0;if((j|0)==(c[n>>2]|0)){c[n>>2]=z;if((z|0)==0){c[33924>>2]=c[33924>>2]&~(1<<t);break}}else{if(y>>>0<(c[33936>>2]|0)>>>0){We()}t=y+16|0;if((c[t>>2]|0)==(j|0)){c[t>>2]=z}else{c[y+20>>2]=z}if((z|0)==0){break}}if(z>>>0<(c[33936>>2]|0)>>>0){We()}c[z+24>>2]=y;t=c[a+(h+8)>>2]|0;do{if((t|0)!=0){if(t>>>0<(c[33936>>2]|0)>>>0){We()}else{c[z+16>>2]=t;c[t+24>>2]=z;break}}}while(0);t=c[a+(h+12)>>2]|0;if((t|0)!=0){if(t>>>0<(c[33936>>2]|0)>>>0){We()}else{c[z+20>>2]=t;c[t+24>>2]=z;break}}}}else{t=c[a+h>>2]|0;y=c[a+(h|4)>>2]|0;n=33960+(x<<1<<2)|0;if((t|0)!=(n|0)){if(t>>>0<(c[33936>>2]|0)>>>0){We()}if((c[t+12>>2]|0)!=(j|0)){We()}}if((y|0)==(t|0)){c[8480]=c[8480]&~(1<<x);break}if((y|0)!=(n|0)){if(y>>>0<(c[33936>>2]|0)>>>0){We()}n=y+8|0;if((c[n>>2]|0)==(j|0)){C=n}else{We()}}else{C=y+8|0}c[t+12>>2]=y;c[C>>2]=t}}while(0);c[p+4>>2]=e|1;c[p+e>>2]=e;if((p|0)==(c[33940>>2]|0)){c[33928>>2]=e;i=b;return}else{D=e}}else{c[d>>2]=w&-2;c[p+4>>2]=q|1;c[p+q>>2]=q;D=q}q=D>>>3;if(D>>>0<256){w=q<<1;d=33960+(w<<2)|0;e=c[8480]|0;C=1<<q;if((e&C|0)!=0){q=33960+(w+2<<2)|0;j=c[q>>2]|0;if(j>>>0<(c[33936>>2]|0)>>>0){We()}else{E=q;F=j}}else{c[8480]=e|C;E=33960+(w+2<<2)|0;F=d}c[E>>2]=p;c[F+12>>2]=p;c[p+8>>2]=F;c[p+12>>2]=d;i=b;return}d=D>>>8;if((d|0)!=0){if(D>>>0>16777215){G=31}else{F=(d+1048320|0)>>>16&8;E=d<<F;d=(E+520192|0)>>>16&4;w=E<<d;E=(w+245760|0)>>>16&2;C=14-(d|F|E)+(w<<E>>>15)|0;G=D>>>(C+7|0)&1|C<<1}}else{G=0}C=34224+(G<<2)|0;c[p+28>>2]=G;c[p+20>>2]=0;c[p+16>>2]=0;E=c[33924>>2]|0;w=1<<G;a:do{if((E&w|0)!=0){F=c[C>>2]|0;if((G|0)==31){H=0}else{H=25-(G>>>1)|0}b:do{if((c[F+4>>2]&-8|0)!=(D|0)){d=D<<H;e=F;while(1){I=e+(d>>>31<<2)+16|0;j=c[I>>2]|0;if((j|0)==0){break}if((c[j+4>>2]&-8|0)==(D|0)){J=j;break b}else{d=d<<1;e=j}}if(I>>>0<(c[33936>>2]|0)>>>0){We()}else{c[I>>2]=p;c[p+24>>2]=e;c[p+12>>2]=p;c[p+8>>2]=p;break a}}else{J=F}}while(0);F=J+8|0;d=c[F>>2]|0;j=c[33936>>2]|0;if(J>>>0<j>>>0){We()}if(d>>>0<j>>>0){We()}else{c[d+12>>2]=p;c[F>>2]=p;c[p+8>>2]=d;c[p+12>>2]=J;c[p+24>>2]=0;break}}else{c[33924>>2]=E|w;c[C>>2]=p;c[p+24>>2]=C;c[p+12>>2]=p;c[p+8>>2]=p}}while(0);p=(c[33952>>2]|0)+ -1|0;c[33952>>2]=p;if((p|0)==0){K=34376|0}else{i=b;return}while(1){p=c[K>>2]|0;if((p|0)==0){break}else{K=p+8|0}}c[33952>>2]=-1;i=b;return}function pv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;do{if((a|0)!=0){if(b>>>0>4294967231){c[(be()|0)>>2]=12;e=0;break}if(b>>>0<11){f=16}else{f=b+11&-8}g=qv(a+ -8|0,f)|0;if((g|0)!=0){e=g+8|0;break}g=nv(b)|0;if((g|0)==0){e=0}else{h=c[a+ -4>>2]|0;j=(h&-8)-((h&3|0)==0?8:4)|0;Nv(g|0,a|0,(j>>>0<b>>>0?j:b)|0)|0;ov(a);e=g}}else{e=nv(b)|0}}while(0);i=d;return e|0}function qv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;d=i;e=a+4|0;f=c[e>>2]|0;g=f&-8;h=a+g|0;j=c[33936>>2]|0;if(a>>>0<j>>>0){We()}k=f&3;if(!((k|0)!=1&a>>>0<h>>>0)){We()}l=a+(g|4)|0;m=c[l>>2]|0;if((m&1|0)==0){We()}if((k|0)==0){if(b>>>0<256){n=0;i=d;return n|0}if(!(g>>>0<(b+4|0)>>>0)?!((g-b|0)>>>0>c[34400>>2]<<1>>>0):0){n=a;i=d;return n|0}n=0;i=d;return n|0}if(!(g>>>0<b>>>0)){k=g-b|0;if(!(k>>>0>15)){n=a;i=d;return n|0}c[e>>2]=f&1|b|2;c[a+(b+4)>>2]=k|3;c[l>>2]=c[l>>2]|1;rv(a+b|0,k);n=a;i=d;return n|0}if((h|0)==(c[33944>>2]|0)){k=(c[33932>>2]|0)+g|0;if(!(k>>>0>b>>>0)){n=0;i=d;return n|0}l=k-b|0;c[e>>2]=f&1|b|2;c[a+(b+4)>>2]=l|1;c[33944>>2]=a+b;c[33932>>2]=l;n=a;i=d;return n|0}if((h|0)==(c[33940>>2]|0)){l=(c[33928>>2]|0)+g|0;if(l>>>0<b>>>0){n=0;i=d;return n|0}k=l-b|0;if(k>>>0>15){c[e>>2]=f&1|b|2;c[a+(b+4)>>2]=k|1;c[a+l>>2]=k;o=a+(l+4)|0;c[o>>2]=c[o>>2]&-2;p=a+b|0;q=k}else{c[e>>2]=f&1|l|2;f=a+(l+4)|0;c[f>>2]=c[f>>2]|1;p=0;q=0}c[33928>>2]=q;c[33940>>2]=p;n=a;i=d;return n|0}if((m&2|0)!=0){n=0;i=d;return n|0}p=(m&-8)+g|0;if(p>>>0<b>>>0){n=0;i=d;return n|0}q=p-b|0;f=m>>>3;do{if(!(m>>>0<256)){l=c[a+(g+24)>>2]|0;k=c[a+(g+12)>>2]|0;do{if((k|0)==(h|0)){o=a+(g+20)|0;r=c[o>>2]|0;if((r|0)==0){s=a+(g+16)|0;t=c[s>>2]|0;if((t|0)==0){u=0;break}else{v=t;w=s}}else{v=r;w=o}while(1){o=v+20|0;r=c[o>>2]|0;if((r|0)!=0){v=r;w=o;continue}o=v+16|0;r=c[o>>2]|0;if((r|0)==0){break}else{v=r;w=o}}if(w>>>0<j>>>0){We()}else{c[w>>2]=0;u=v;break}}else{o=c[a+(g+8)>>2]|0;if(o>>>0<j>>>0){We()}r=o+12|0;if((c[r>>2]|0)!=(h|0)){We()}s=k+8|0;if((c[s>>2]|0)==(h|0)){c[r>>2]=k;c[s>>2]=o;u=k;break}else{We()}}}while(0);if((l|0)!=0){k=c[a+(g+28)>>2]|0;o=34224+(k<<2)|0;if((h|0)==(c[o>>2]|0)){c[o>>2]=u;if((u|0)==0){c[33924>>2]=c[33924>>2]&~(1<<k);break}}else{if(l>>>0<(c[33936>>2]|0)>>>0){We()}k=l+16|0;if((c[k>>2]|0)==(h|0)){c[k>>2]=u}else{c[l+20>>2]=u}if((u|0)==0){break}}if(u>>>0<(c[33936>>2]|0)>>>0){We()}c[u+24>>2]=l;k=c[a+(g+16)>>2]|0;do{if((k|0)!=0){if(k>>>0<(c[33936>>2]|0)>>>0){We()}else{c[u+16>>2]=k;c[k+24>>2]=u;break}}}while(0);k=c[a+(g+20)>>2]|0;if((k|0)!=0){if(k>>>0<(c[33936>>2]|0)>>>0){We()}else{c[u+20>>2]=k;c[k+24>>2]=u;break}}}}else{k=c[a+(g+8)>>2]|0;l=c[a+(g+12)>>2]|0;o=33960+(f<<1<<2)|0;if((k|0)!=(o|0)){if(k>>>0<j>>>0){We()}if((c[k+12>>2]|0)!=(h|0)){We()}}if((l|0)==(k|0)){c[8480]=c[8480]&~(1<<f);break}if((l|0)!=(o|0)){if(l>>>0<j>>>0){We()}o=l+8|0;if((c[o>>2]|0)==(h|0)){x=o}else{We()}}else{x=l+8|0}c[k+12>>2]=l;c[x>>2]=k}}while(0);if(q>>>0<16){c[e>>2]=p|c[e>>2]&1|2;x=a+(p|4)|0;c[x>>2]=c[x>>2]|1;n=a;i=d;return n|0}else{c[e>>2]=c[e>>2]&1|b|2;c[a+(b+4)>>2]=q|3;e=a+(p|4)|0;c[e>>2]=c[e>>2]|1;rv(a+b|0,q);n=a;i=d;return n|0}return 0}function rv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;d=i;e=a+b|0;f=c[a+4>>2]|0;do{if((f&1|0)==0){g=c[a>>2]|0;if((f&3|0)==0){i=d;return}h=a+(0-g)|0;j=g+b|0;k=c[33936>>2]|0;if(h>>>0<k>>>0){We()}if((h|0)==(c[33940>>2]|0)){l=a+(b+4)|0;if((c[l>>2]&3|0)!=3){m=h;n=j;break}c[33928>>2]=j;c[l>>2]=c[l>>2]&-2;c[a+(4-g)>>2]=j|1;c[e>>2]=j;i=d;return}l=g>>>3;if(g>>>0<256){o=c[a+(8-g)>>2]|0;p=c[a+(12-g)>>2]|0;q=33960+(l<<1<<2)|0;if((o|0)!=(q|0)){if(o>>>0<k>>>0){We()}if((c[o+12>>2]|0)!=(h|0)){We()}}if((p|0)==(o|0)){c[8480]=c[8480]&~(1<<l);m=h;n=j;break}if((p|0)!=(q|0)){if(p>>>0<k>>>0){We()}q=p+8|0;if((c[q>>2]|0)==(h|0)){r=q}else{We()}}else{r=p+8|0}c[o+12>>2]=p;c[r>>2]=o;m=h;n=j;break}o=c[a+(24-g)>>2]|0;p=c[a+(12-g)>>2]|0;do{if((p|0)==(h|0)){q=16-g|0;l=a+(q+4)|0;s=c[l>>2]|0;if((s|0)==0){t=a+q|0;q=c[t>>2]|0;if((q|0)==0){u=0;break}else{v=q;w=t}}else{v=s;w=l}while(1){l=v+20|0;s=c[l>>2]|0;if((s|0)!=0){v=s;w=l;continue}l=v+16|0;s=c[l>>2]|0;if((s|0)==0){break}else{v=s;w=l}}if(w>>>0<k>>>0){We()}else{c[w>>2]=0;u=v;break}}else{l=c[a+(8-g)>>2]|0;if(l>>>0<k>>>0){We()}s=l+12|0;if((c[s>>2]|0)!=(h|0)){We()}t=p+8|0;if((c[t>>2]|0)==(h|0)){c[s>>2]=p;c[t>>2]=l;u=p;break}else{We()}}}while(0);if((o|0)!=0){p=c[a+(28-g)>>2]|0;k=34224+(p<<2)|0;if((h|0)==(c[k>>2]|0)){c[k>>2]=u;if((u|0)==0){c[33924>>2]=c[33924>>2]&~(1<<p);m=h;n=j;break}}else{if(o>>>0<(c[33936>>2]|0)>>>0){We()}p=o+16|0;if((c[p>>2]|0)==(h|0)){c[p>>2]=u}else{c[o+20>>2]=u}if((u|0)==0){m=h;n=j;break}}if(u>>>0<(c[33936>>2]|0)>>>0){We()}c[u+24>>2]=o;p=16-g|0;k=c[a+p>>2]|0;do{if((k|0)!=0){if(k>>>0<(c[33936>>2]|0)>>>0){We()}else{c[u+16>>2]=k;c[k+24>>2]=u;break}}}while(0);k=c[a+(p+4)>>2]|0;if((k|0)!=0){if(k>>>0<(c[33936>>2]|0)>>>0){We()}else{c[u+20>>2]=k;c[k+24>>2]=u;m=h;n=j;break}}else{m=h;n=j}}else{m=h;n=j}}else{m=a;n=b}}while(0);u=c[33936>>2]|0;if(e>>>0<u>>>0){We()}v=a+(b+4)|0;w=c[v>>2]|0;if((w&2|0)==0){if((e|0)==(c[33944>>2]|0)){r=(c[33932>>2]|0)+n|0;c[33932>>2]=r;c[33944>>2]=m;c[m+4>>2]=r|1;if((m|0)!=(c[33940>>2]|0)){i=d;return}c[33940>>2]=0;c[33928>>2]=0;i=d;return}if((e|0)==(c[33940>>2]|0)){r=(c[33928>>2]|0)+n|0;c[33928>>2]=r;c[33940>>2]=m;c[m+4>>2]=r|1;c[m+r>>2]=r;i=d;return}r=(w&-8)+n|0;f=w>>>3;do{if(!(w>>>0<256)){k=c[a+(b+24)>>2]|0;g=c[a+(b+12)>>2]|0;do{if((g|0)==(e|0)){o=a+(b+20)|0;l=c[o>>2]|0;if((l|0)==0){t=a+(b+16)|0;s=c[t>>2]|0;if((s|0)==0){x=0;break}else{y=s;z=t}}else{y=l;z=o}while(1){o=y+20|0;l=c[o>>2]|0;if((l|0)!=0){y=l;z=o;continue}o=y+16|0;l=c[o>>2]|0;if((l|0)==0){break}else{y=l;z=o}}if(z>>>0<u>>>0){We()}else{c[z>>2]=0;x=y;break}}else{o=c[a+(b+8)>>2]|0;if(o>>>0<u>>>0){We()}l=o+12|0;if((c[l>>2]|0)!=(e|0)){We()}t=g+8|0;if((c[t>>2]|0)==(e|0)){c[l>>2]=g;c[t>>2]=o;x=g;break}else{We()}}}while(0);if((k|0)!=0){g=c[a+(b+28)>>2]|0;j=34224+(g<<2)|0;if((e|0)==(c[j>>2]|0)){c[j>>2]=x;if((x|0)==0){c[33924>>2]=c[33924>>2]&~(1<<g);break}}else{if(k>>>0<(c[33936>>2]|0)>>>0){We()}g=k+16|0;if((c[g>>2]|0)==(e|0)){c[g>>2]=x}else{c[k+20>>2]=x}if((x|0)==0){break}}if(x>>>0<(c[33936>>2]|0)>>>0){We()}c[x+24>>2]=k;g=c[a+(b+16)>>2]|0;do{if((g|0)!=0){if(g>>>0<(c[33936>>2]|0)>>>0){We()}else{c[x+16>>2]=g;c[g+24>>2]=x;break}}}while(0);g=c[a+(b+20)>>2]|0;if((g|0)!=0){if(g>>>0<(c[33936>>2]|0)>>>0){We()}else{c[x+20>>2]=g;c[g+24>>2]=x;break}}}}else{g=c[a+(b+8)>>2]|0;k=c[a+(b+12)>>2]|0;j=33960+(f<<1<<2)|0;if((g|0)!=(j|0)){if(g>>>0<u>>>0){We()}if((c[g+12>>2]|0)!=(e|0)){We()}}if((k|0)==(g|0)){c[8480]=c[8480]&~(1<<f);break}if((k|0)!=(j|0)){if(k>>>0<u>>>0){We()}j=k+8|0;if((c[j>>2]|0)==(e|0)){A=j}else{We()}}else{A=k+8|0}c[g+12>>2]=k;c[A>>2]=g}}while(0);c[m+4>>2]=r|1;c[m+r>>2]=r;if((m|0)==(c[33940>>2]|0)){c[33928>>2]=r;i=d;return}else{B=r}}else{c[v>>2]=w&-2;c[m+4>>2]=n|1;c[m+n>>2]=n;B=n}n=B>>>3;if(B>>>0<256){w=n<<1;v=33960+(w<<2)|0;r=c[8480]|0;A=1<<n;if((r&A|0)!=0){n=33960+(w+2<<2)|0;e=c[n>>2]|0;if(e>>>0<(c[33936>>2]|0)>>>0){We()}else{C=n;D=e}}else{c[8480]=r|A;C=33960+(w+2<<2)|0;D=v}c[C>>2]=m;c[D+12>>2]=m;c[m+8>>2]=D;c[m+12>>2]=v;i=d;return}v=B>>>8;if((v|0)!=0){if(B>>>0>16777215){E=31}else{D=(v+1048320|0)>>>16&8;C=v<<D;v=(C+520192|0)>>>16&4;w=C<<v;C=(w+245760|0)>>>16&2;A=14-(v|D|C)+(w<<C>>>15)|0;E=B>>>(A+7|0)&1|A<<1}}else{E=0}A=34224+(E<<2)|0;c[m+28>>2]=E;c[m+20>>2]=0;c[m+16>>2]=0;C=c[33924>>2]|0;w=1<<E;if((C&w|0)==0){c[33924>>2]=C|w;c[A>>2]=m;c[m+24>>2]=A;c[m+12>>2]=m;c[m+8>>2]=m;i=d;return}w=c[A>>2]|0;if((E|0)==31){F=0}else{F=25-(E>>>1)|0}a:do{if((c[w+4>>2]&-8|0)==(B|0)){G=w}else{E=B<<F;A=w;while(1){H=A+(E>>>31<<2)+16|0;C=c[H>>2]|0;if((C|0)==0){break}if((c[C+4>>2]&-8|0)==(B|0)){G=C;break a}else{E=E<<1;A=C}}if(H>>>0<(c[33936>>2]|0)>>>0){We()}c[H>>2]=m;c[m+24>>2]=A;c[m+12>>2]=m;c[m+8>>2]=m;i=d;return}}while(0);H=G+8|0;B=c[H>>2]|0;w=c[33936>>2]|0;if(G>>>0<w>>>0){We()}if(B>>>0<w>>>0){We()}c[B+12>>2]=m;c[H>>2]=m;c[m+8>>2]=B;c[m+12>>2]=G;c[m+24>>2]=0;i=d;return}function sv(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;d=(a|0)==0?1:a;while(1){e=nv(d)|0;if((e|0)!=0){f=6;break}a=c[8606]|0;c[8606]=a+0;if((a|0)==0){f=5;break}jh[a&7]()}if((f|0)==5){d=Wd(4)|0;c[d>>2]=34440;qg(d|0,34488,160)}else if((f|0)==6){i=b;return e|0}return 0}function tv(a,b){a=a|0;b=b|0;var c=0;b=i;c=sv(a)|0;i=b;return c|0}function uv(a){a=a|0;var b=0,c=0;b=i;c=sv(a)|0;i=b;return c|0}function vv(a){a=a|0;var b=0;b=i;if((a|0)!=0){ov(a)}i=b;return}function wv(a){a=a|0;var b=0;b=i;vv(a);i=b;return}function xv(a){a=a|0;var b=0;b=i;Tb(a|0);vv(a);i=b;return}function yv(a){a=a|0;var b=0;b=i;Tb(a|0);i=b;return}function zv(a){a=a|0;return 34456}function Av(){var a=0;a=Wd(4)|0;c[a>>2]=34440;qg(a|0,34488,160)}function Bv(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0.0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0,N=0,O=0.0,P=0,Q=0.0,R=0,S=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0.0,ba=0,ca=0.0,da=0,fa=0.0,ga=0,ha=0.0,ia=0,ja=0.0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0.0,sa=0,ta=0.0,ua=0,va=0,wa=0,xa=0,ya=0.0,za=0,Aa=0.0,Ba=0.0,Ca=0,Da=0.0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0.0,oc=0,pc=0,qc=0.0,rc=0.0,sc=0.0,tc=0.0,uc=0.0,vc=0.0,wc=0,xc=0,yc=0.0,zc=0,Ac=0.0,Bc=0,Cc=0,Dc=0,Ec=0;g=i;i=i+512|0;h=g;if((e|0)==2){j=53;k=-1074}else if((e|0)==1){j=53;k=-1074}else if((e|0)==0){j=24;k=-149}else{l=0.0;i=g;return+l}e=b+4|0;m=b+100|0;do{n=c[e>>2]|0;if(n>>>0<(c[m>>2]|0)>>>0){c[e>>2]=n+1;o=d[n]|0}else{o=Ev(b)|0}}while((ad(o|0)|0)!=0);do{if((o|0)==43|(o|0)==45){n=1-(((o|0)==45)<<1)|0;p=c[e>>2]|0;if(p>>>0<(c[m>>2]|0)>>>0){c[e>>2]=p+1;q=d[p]|0;r=n;break}else{q=Ev(b)|0;r=n;break}}else{q=o;r=1}}while(0);o=q;q=0;while(1){if((o|32|0)!=(a[34504+q|0]|0)){s=o;t=q;break}do{if(q>>>0<7){n=c[e>>2]|0;if(n>>>0<(c[m>>2]|0)>>>0){c[e>>2]=n+1;u=d[n]|0;break}else{u=Ev(b)|0;break}}else{u=o}}while(0);n=q+1|0;if(n>>>0<8){o=u;q=n}else{s=u;t=n;break}}do{if((t|0)==3){v=23}else if((t|0)!=8){u=(f|0)==0;if(!(t>>>0<4|u)){if((t|0)==8){break}else{v=23;break}}a:do{if((t|0)==0){q=s;o=0;while(1){if((q|32|0)!=(a[34520+o|0]|0)){w=q;z=o;break a}do{if(o>>>0<2){n=c[e>>2]|0;if(n>>>0<(c[m>>2]|0)>>>0){c[e>>2]=n+1;A=d[n]|0;break}else{A=Ev(b)|0;break}}else{A=q}}while(0);n=o+1|0;if(n>>>0<3){q=A;o=n}else{w=A;z=n;break}}}else{w=s;z=t}}while(0);if((z|0)==0){do{if((w|0)==48){o=c[e>>2]|0;if(o>>>0<(c[m>>2]|0)>>>0){c[e>>2]=o+1;B=d[o]|0}else{B=Ev(b)|0}if((B|32|0)!=120){if((c[m>>2]|0)==0){C=48;break}c[e>>2]=(c[e>>2]|0)+ -1;C=48;break}o=c[e>>2]|0;if(o>>>0<(c[m>>2]|0)>>>0){c[e>>2]=o+1;D=d[o]|0;E=0}else{D=Ev(b)|0;E=0}while(1){if((D|0)==46){v=70;break}else if((D|0)!=48){F=0;G=0;H=0;J=0;K=D;L=E;M=0;N=0;O=1.0;P=0;Q=0.0;break}o=c[e>>2]|0;if(o>>>0<(c[m>>2]|0)>>>0){c[e>>2]=o+1;D=d[o]|0;E=1;continue}else{D=Ev(b)|0;E=1;continue}}b:do{if((v|0)==70){o=c[e>>2]|0;if(o>>>0<(c[m>>2]|0)>>>0){c[e>>2]=o+1;R=d[o]|0}else{R=Ev(b)|0}if((R|0)==48){o=-1;q=-1;while(1){n=c[e>>2]|0;if(n>>>0<(c[m>>2]|0)>>>0){c[e>>2]=n+1;S=d[n]|0}else{S=Ev(b)|0}if((S|0)!=48){F=0;G=0;H=o;J=q;K=S;L=1;M=1;N=0;O=1.0;P=0;Q=0.0;break b}n=Qv(o|0,q|0,-1,-1)|0;o=n;q=I}}else{F=0;G=0;H=0;J=0;K=R;L=E;M=1;N=0;O=1.0;P=0;Q=0.0}}}while(0);c:while(1){q=K+ -48|0;do{if(!(q>>>0<10)){o=K|32;n=(K|0)==46;if(!((o+ -97|0)>>>0<6|n)){U=K;break c}if(n){if((M|0)==0){V=G;W=F;X=G;Y=F;Z=L;_=1;$=N;aa=O;ba=P;ca=Q;break}else{U=46;break c}}else{da=(K|0)>57?o+ -87|0:q;v=84;break}}else{da=q;v=84}}while(0);if((v|0)==84){v=0;do{if(!((F|0)<0|(F|0)==0&G>>>0<8)){if((F|0)<0|(F|0)==0&G>>>0<14){fa=O*.0625;ga=N;ha=fa;ia=P;ja=Q+fa*+(da|0);break}if((da|0)!=0&(N|0)==0){ga=1;ha=O;ia=P;ja=Q+O*.5}else{ga=N;ha=O;ia=P;ja=Q}}else{ga=N;ha=O;ia=da+(P<<4)|0;ja=Q}}while(0);q=Qv(G|0,F|0,1,0)|0;V=H;W=J;X=q;Y=I;Z=1;_=M;$=ga;aa=ha;ba=ia;ca=ja}q=c[e>>2]|0;if(q>>>0<(c[m>>2]|0)>>>0){c[e>>2]=q+1;F=Y;G=X;H=V;J=W;K=d[q]|0;L=Z;M=_;N=$;O=aa;P=ba;Q=ca;continue}else{F=Y;G=X;H=V;J=W;K=Ev(b)|0;L=Z;M=_;N=$;O=aa;P=ba;Q=ca;continue}}if((L|0)==0){q=(c[m>>2]|0)==0;if(!q){c[e>>2]=(c[e>>2]|0)+ -1}if(!u){if(!q?(q=c[e>>2]|0,c[e>>2]=q+ -1,(M|0)!=0):0){c[e>>2]=q+ -2}}else{Dv(b,0)}l=+(r|0)*0.0;i=g;return+l}q=(M|0)==0;o=q?G:H;n=q?F:J;if((F|0)<0|(F|0)==0&G>>>0<8){q=G;p=F;ka=P;while(1){la=ka<<4;ma=Qv(q|0,p|0,1,0)|0;na=I;if((na|0)<0|(na|0)==0&ma>>>0<8){q=ma;p=na;ka=la}else{oa=la;break}}}else{oa=P}do{if((U|32|0)==112){ka=Cv(b,f)|0;p=I;if((ka|0)==0&(p|0)==-2147483648){if(u){Dv(b,0);l=0.0;i=g;return+l}else{if((c[m>>2]|0)==0){pa=0;qa=0;break}c[e>>2]=(c[e>>2]|0)+ -1;pa=0;qa=0;break}}else{pa=ka;qa=p}}else{if((c[m>>2]|0)==0){pa=0;qa=0}else{c[e>>2]=(c[e>>2]|0)+ -1;pa=0;qa=0}}}while(0);p=Vv(o|0,n|0,2)|0;ka=Qv(p|0,I|0,-32,-1)|0;p=Qv(ka|0,I|0,pa|0,qa|0)|0;ka=I;if((oa|0)==0){l=+(r|0)*0.0;i=g;return+l}if((ka|0)>0|(ka|0)==0&p>>>0>(0-k|0)>>>0){c[(be()|0)>>2]=34;l=+(r|0)*1.7976931348623157e+308*1.7976931348623157e+308;i=g;return+l}q=k+ -106|0;la=((q|0)<0)<<31>>31;if((ka|0)<(la|0)|(ka|0)==(la|0)&p>>>0<q>>>0){c[(be()|0)>>2]=34;l=+(r|0)*2.2250738585072014e-308*2.2250738585072014e-308;i=g;return+l}if((oa|0)>-1){q=p;la=ka;na=oa;fa=Q;while(1){ma=na<<1;if(!(fa>=.5)){ra=fa;sa=ma}else{ra=fa+-1.0;sa=ma|1}ta=fa+ra;ma=Qv(q|0,la|0,-1,-1)|0;ua=I;if((sa|0)>-1){q=ma;la=ua;na=sa;fa=ta}else{va=ma;wa=ua;xa=sa;ya=ta;break}}}else{va=p;wa=ka;xa=oa;ya=Q}na=Pv(32,0,k|0,((k|0)<0)<<31>>31|0)|0;la=Qv(va|0,wa|0,na|0,I|0)|0;na=I;if(0>(na|0)|0==(na|0)&j>>>0>la>>>0){za=(la|0)<0?0:la}else{za=j}if((za|0)<53){fa=+(r|0);ta=+Pe(+(+Fv(1.0,84-za|0)),+fa);if((za|0)<32&ya!=0.0){la=xa&1;Aa=fa;Ba=ta;Ca=(la^1)+xa|0;Da=(la|0)==0?0.0:ya}else{Aa=fa;Ba=ta;Ca=xa;Da=ya}}else{Aa=+(r|0);Ba=0.0;Ca=xa;Da=ya}ta=Aa*Da+(Ba+Aa*+(Ca>>>0))-Ba;if(!(ta!=0.0)){c[(be()|0)>>2]=34}l=+Gv(ta,va);i=g;return+l}else{C=w}}while(0);la=k+j|0;na=0-la|0;q=C;n=0;while(1){if((q|0)==46){v=139;break}else if((q|0)!=48){Ea=q;Fa=0;Ga=0;Ha=n;Ia=0;break}o=c[e>>2]|0;if(o>>>0<(c[m>>2]|0)>>>0){c[e>>2]=o+1;q=d[o]|0;n=1;continue}else{q=Ev(b)|0;n=1;continue}}d:do{if((v|0)==139){q=c[e>>2]|0;if(q>>>0<(c[m>>2]|0)>>>0){c[e>>2]=q+1;Ja=d[q]|0}else{Ja=Ev(b)|0}if((Ja|0)==48){q=-1;o=-1;while(1){ua=c[e>>2]|0;if(ua>>>0<(c[m>>2]|0)>>>0){c[e>>2]=ua+1;Ka=d[ua]|0}else{Ka=Ev(b)|0}if((Ka|0)!=48){Ea=Ka;Fa=q;Ga=o;Ha=1;Ia=1;break d}ua=Qv(q|0,o|0,-1,-1)|0;q=ua;o=I}}else{Ea=Ja;Fa=0;Ga=0;Ha=n;Ia=1}}}while(0);c[h>>2]=0;n=Ea+ -48|0;o=(Ea|0)==46;e:do{if(n>>>0<10|o){q=h+496|0;ka=Ea;p=0;ua=0;ma=o;La=n;Ma=Fa;Na=Ga;Oa=Ha;Pa=Ia;Qa=0;Ra=0;Sa=0;while(1){do{if(ma){if((Pa|0)==0){Ta=p;Ua=ua;Va=p;Wa=ua;Xa=Oa;Ya=1;Za=Qa;_a=Ra;$a=Sa}else{ab=ka;bb=Ma;cb=Na;db=p;eb=ua;fb=Oa;gb=Qa;hb=Ra;ib=Sa;break e}}else{jb=Qv(p|0,ua|0,1,0)|0;kb=I;lb=(ka|0)!=48;if((Ra|0)>=125){if(!lb){Ta=Ma;Ua=Na;Va=jb;Wa=kb;Xa=Oa;Ya=Pa;Za=Qa;_a=Ra;$a=Sa;break}c[q>>2]=c[q>>2]|1;Ta=Ma;Ua=Na;Va=jb;Wa=kb;Xa=Oa;Ya=Pa;Za=Qa;_a=Ra;$a=Sa;break}mb=h+(Ra<<2)|0;if((Qa|0)==0){nb=La}else{nb=ka+ -48+((c[mb>>2]|0)*10|0)|0}c[mb>>2]=nb;mb=Qa+1|0;ob=(mb|0)==9;Ta=Ma;Ua=Na;Va=jb;Wa=kb;Xa=1;Ya=Pa;Za=ob?0:mb;_a=(ob&1)+Ra|0;$a=lb?jb:Sa}}while(0);jb=c[e>>2]|0;if(jb>>>0<(c[m>>2]|0)>>>0){c[e>>2]=jb+1;pb=d[jb]|0}else{pb=Ev(b)|0}jb=pb+ -48|0;lb=(pb|0)==46;if(jb>>>0<10|lb){ka=pb;p=Va;ua=Wa;ma=lb;La=jb;Ma=Ta;Na=Ua;Oa=Xa;Pa=Ya;Qa=Za;Ra=_a;Sa=$a}else{qb=pb;rb=Va;sb=Ta;tb=Wa;ub=Ua;vb=Xa;wb=Ya;xb=Za;yb=_a;zb=$a;v=162;break}}}else{qb=Ea;rb=0;sb=Fa;tb=0;ub=Ga;vb=Ha;wb=Ia;xb=0;yb=0;zb=0;v=162}}while(0);if((v|0)==162){n=(wb|0)==0;ab=qb;bb=n?rb:sb;cb=n?tb:ub;db=rb;eb=tb;fb=vb;gb=xb;hb=yb;ib=zb}n=(fb|0)!=0;if(n?(ab|32|0)==101:0){o=Cv(b,f)|0;Sa=I;do{if((o|0)==0&(Sa|0)==-2147483648){if(u){Dv(b,0);l=0.0;i=g;return+l}else{if((c[m>>2]|0)==0){Ab=0;Bb=0;break}c[e>>2]=(c[e>>2]|0)+ -1;Ab=0;Bb=0;break}}else{Ab=o;Bb=Sa}}while(0);Sa=Qv(Ab|0,Bb|0,bb|0,cb|0)|0;Cb=Sa;Db=I}else{if((ab|0)>-1?(c[m>>2]|0)!=0:0){c[e>>2]=(c[e>>2]|0)+ -1;Cb=bb;Db=cb}else{Cb=bb;Db=cb}}if(!n){c[(be()|0)>>2]=22;Dv(b,0);l=0.0;i=g;return+l}Sa=c[h>>2]|0;if((Sa|0)==0){l=+(r|0)*0.0;i=g;return+l}do{if((Cb|0)==(db|0)&(Db|0)==(eb|0)&((eb|0)<0|(eb|0)==0&db>>>0<10)){if(!(j>>>0>30)?(Sa>>>j|0)!=0:0){break}l=+(r|0)*+(Sa>>>0);i=g;return+l}}while(0);Sa=(k|0)/-2|0;n=((Sa|0)<0)<<31>>31;if((Db|0)>(n|0)|(Db|0)==(n|0)&Cb>>>0>Sa>>>0){c[(be()|0)>>2]=34;l=+(r|0)*1.7976931348623157e+308*1.7976931348623157e+308;i=g;return+l}Sa=k+ -106|0;n=((Sa|0)<0)<<31>>31;if((Db|0)<(n|0)|(Db|0)==(n|0)&Cb>>>0<Sa>>>0){c[(be()|0)>>2]=34;l=+(r|0)*2.2250738585072014e-308*2.2250738585072014e-308;i=g;return+l}if((gb|0)==0){Eb=hb}else{if((gb|0)<9){Sa=h+(hb<<2)|0;n=c[Sa>>2]|0;o=gb;do{n=n*10|0;o=o+1|0}while((o|0)!=9);c[Sa>>2]=n}Eb=hb+1|0}do{if((ib|0)<9?(ib|0)<=(Cb|0)&(Cb|0)<18:0){if((Cb|0)==9){l=+(r|0)*+((c[h>>2]|0)>>>0);i=g;return+l}if((Cb|0)<9){l=+(r|0)*+((c[h>>2]|0)>>>0)/+(c[34536+(8-Cb<<2)>>2]|0);i=g;return+l}o=j+27+(ea(Cb,-3)|0)|0;Ra=c[h>>2]|0;if((o|0)<=30?(Ra>>>o|0)!=0:0){break}l=+(r|0)*+(Ra>>>0)*+(c[34536+(Cb+ -10<<2)>>2]|0);i=g;return+l}}while(0);n=(Cb|0)%9|0;if((n|0)==0){Fb=0;Gb=0;Hb=Cb;Ib=Eb}else{Sa=(Cb|0)>-1?n:n+9|0;n=c[34536+(8-Sa<<2)>>2]|0;if((Eb|0)!=0){Ra=1e9/(n|0)|0;o=0;Qa=0;Pa=0;Oa=Cb;while(1){Na=h+(Pa<<2)|0;Ma=c[Na>>2]|0;La=((Ma>>>0)/(n>>>0)|0)+Qa|0;c[Na>>2]=La;Jb=ea((Ma>>>0)%(n>>>0)|0,Ra)|0;Ma=Pa+1|0;if((Pa|0)==(o|0)&(La|0)==0){Kb=Ma&127;Lb=Oa+ -9|0}else{Kb=o;Lb=Oa}if((Ma|0)==(Eb|0)){break}else{o=Kb;Qa=Jb;Pa=Ma;Oa=Lb}}if((Jb|0)==0){Mb=Kb;Nb=Lb;Ob=Eb}else{c[h+(Eb<<2)>>2]=Jb;Mb=Kb;Nb=Lb;Ob=Eb+1|0}}else{Mb=0;Nb=Cb;Ob=0}Fb=Mb;Gb=0;Hb=9-Sa+Nb|0;Ib=Ob}f:while(1){Oa=h+(Fb<<2)|0;if((Hb|0)<18){Pa=Gb;Qa=Ib;while(1){o=0;Ra=Qa+127|0;n=Qa;while(1){Ma=Ra&127;La=h+(Ma<<2)|0;Na=Vv(c[La>>2]|0,0,29)|0;ma=Qv(Na|0,I|0,o|0,0)|0;Na=I;if(Na>>>0>0|(Na|0)==0&ma>>>0>1e9){ua=cw(ma|0,Na|0,1e9,0)|0;p=dw(ma|0,Na|0,1e9,0)|0;Pb=p;Qb=ua}else{Pb=ma;Qb=0}c[La>>2]=Pb;La=(Ma|0)==(Fb|0);if((Ma|0)!=(n+127&127|0)|La){Rb=n}else{Rb=(Pb|0)==0?Ma:n}if(La){break}else{o=Qb;Ra=Ma+ -1|0;n=Rb}}n=Pa+ -29|0;if((Qb|0)==0){Pa=n;Qa=Rb}else{Sb=n;Tb=Qb;Ub=Rb;break}}}else{if((Hb|0)==18){Vb=Gb;Wb=Ib}else{Xb=Fb;Yb=Gb;Zb=Hb;_b=Ib;break}while(1){if(!((c[Oa>>2]|0)>>>0<9007199)){Xb=Fb;Yb=Vb;Zb=18;_b=Wb;break f}Qa=0;Pa=Wb+127|0;n=Wb;while(1){Ra=Pa&127;o=h+(Ra<<2)|0;Ma=Vv(c[o>>2]|0,0,29)|0;La=Qv(Ma|0,I|0,Qa|0,0)|0;Ma=I;if(Ma>>>0>0|(Ma|0)==0&La>>>0>1e9){ma=cw(La|0,Ma|0,1e9,0)|0;ua=dw(La|0,Ma|0,1e9,0)|0;$b=ua;ac=ma}else{$b=La;ac=0}c[o>>2]=$b;o=(Ra|0)==(Fb|0);if((Ra|0)!=(n+127&127|0)|o){bc=n}else{bc=($b|0)==0?Ra:n}if(o){break}else{Qa=ac;Pa=Ra+ -1|0;n=bc}}n=Vb+ -29|0;if((ac|0)==0){Vb=n;Wb=bc}else{Sb=n;Tb=ac;Ub=bc;break}}}Oa=Fb+127&127;if((Oa|0)==(Ub|0)){n=Ub+127&127;Pa=h+((Ub+126&127)<<2)|0;c[Pa>>2]=c[Pa>>2]|c[h+(n<<2)>>2];cc=n}else{cc=Ub}c[h+(Oa<<2)>>2]=Tb;Fb=Oa;Gb=Sb;Hb=Hb+9|0;Ib=cc}g:while(1){dc=_b+1&127;Sa=h+((_b+127&127)<<2)|0;Oa=Xb;n=Yb;Pa=Zb;while(1){Qa=(Pa|0)==18;Ra=(Pa|0)>27?9:1;ec=Oa;fc=n;while(1){o=0;while(1){La=o+ec&127;if((La|0)==(_b|0)){gc=2;break}ma=c[h+(La<<2)>>2]|0;La=c[34528+(o<<2)>>2]|0;if(ma>>>0<La>>>0){gc=2;break}ua=o+1|0;if(ma>>>0>La>>>0){gc=o;break}if((ua|0)<2){o=ua}else{gc=ua;break}}if((gc|0)==2&Qa){break g}hc=Ra+fc|0;if((ec|0)==(_b|0)){ec=_b;fc=hc}else{break}}Qa=(1<<Ra)+ -1|0;o=1e9>>>Ra;ic=ec;jc=0;ua=ec;kc=Pa;do{La=h+(ua<<2)|0;ma=c[La>>2]|0;Ma=(ma>>>Ra)+jc|0;c[La>>2]=Ma;jc=ea(ma&Qa,o)|0;ma=(ua|0)==(ic|0)&(Ma|0)==0;ua=ua+1&127;kc=ma?kc+ -9|0:kc;ic=ma?ua:ic}while((ua|0)!=(_b|0));if((jc|0)==0){Oa=ic;n=hc;Pa=kc;continue}if((dc|0)!=(ic|0)){break}c[Sa>>2]=c[Sa>>2]|1;Oa=ic;n=hc;Pa=kc}c[h+(_b<<2)>>2]=jc;Xb=ic;Yb=hc;Zb=kc;_b=dc}Pa=ec&127;if((Pa|0)==(_b|0)){c[h+(dc+ -1<<2)>>2]=0;lc=dc}else{lc=_b}ta=+((c[h+(Pa<<2)>>2]|0)>>>0);Pa=ec+1&127;if((Pa|0)==(lc|0)){n=lc+1&127;c[h+(n+ -1<<2)>>2]=0;mc=n}else{mc=lc}fa=+(r|0);nc=fa*(ta*1.0e9+ +((c[h+(Pa<<2)>>2]|0)>>>0));Pa=fc+53|0;n=Pa-k|0;if((n|0)<(j|0)){oc=(n|0)<0?0:n;pc=1}else{oc=j;pc=0}if((oc|0)<53){ta=+Pe(+(+Fv(1.0,105-oc|0)),+nc);qc=+Qd(+nc,+(+Fv(1.0,53-oc|0)));rc=ta;sc=qc;tc=ta+(nc-qc)}else{rc=0.0;sc=0.0;tc=nc}Oa=ec+2&127;if((Oa|0)!=(mc|0)){Sa=c[h+(Oa<<2)>>2]|0;do{if(!(Sa>>>0<5e8)){if(Sa>>>0>5e8){uc=fa*.75+sc;break}if((ec+3&127|0)==(mc|0)){uc=fa*.5+sc;break}else{uc=fa*.75+sc;break}}else{if((Sa|0)==0?(ec+3&127|0)==(mc|0):0){uc=sc;break}uc=fa*.25+sc}}while(0);if((53-oc|0)>1?!(+Qd(+uc,1.0)!=0.0):0){vc=uc+1.0}else{vc=uc}}else{vc=sc}fa=tc+vc-rc;do{if((Pa&2147483647|0)>(-2-la|0)){if(!(+T(+fa)>=9007199254740992.0)){wc=pc;xc=fc;yc=fa}else{wc=(pc|0)!=0&(oc|0)==(n|0)?0:pc;xc=fc+1|0;yc=fa*.5}if((xc+50|0)<=(na|0)?!((wc|0)!=0&vc!=0.0):0){zc=xc;Ac=yc;break}c[(be()|0)>>2]=34;zc=xc;Ac=yc}else{zc=fc;Ac=fa}}while(0);l=+Gv(Ac,zc);i=g;return+l}else if((z|0)==3){na=c[e>>2]|0;if(na>>>0<(c[m>>2]|0)>>>0){c[e>>2]=na+1;Bc=d[na]|0}else{Bc=Ev(b)|0}if((Bc|0)==40){Cc=1}else{if((c[m>>2]|0)==0){l=x;i=g;return+l}c[e>>2]=(c[e>>2]|0)+ -1;l=x;i=g;return+l}while(1){na=c[e>>2]|0;if(na>>>0<(c[m>>2]|0)>>>0){c[e>>2]=na+1;Dc=d[na]|0}else{Dc=Ev(b)|0}if(!((Dc+ -48|0)>>>0<10|(Dc+ -65|0)>>>0<26)?!((Dc+ -97|0)>>>0<26|(Dc|0)==95):0){break}Cc=Cc+1|0}if((Dc|0)==41){l=x;i=g;return+l}na=(c[m>>2]|0)==0;if(!na){c[e>>2]=(c[e>>2]|0)+ -1}if(u){c[(be()|0)>>2]=22;Dv(b,0);l=0.0;i=g;return+l}if((Cc|0)==0|na){l=x;i=g;return+l}else{Ec=Cc}while(1){na=Ec+ -1|0;c[e>>2]=(c[e>>2]|0)+ -1;if((na|0)==0){l=x;break}else{Ec=na}}i=g;return+l}else{if((c[m>>2]|0)!=0){c[e>>2]=(c[e>>2]|0)+ -1}c[(be()|0)>>2]=22;Dv(b,0);l=0.0;i=g;return+l}}}while(0);if((v|0)==23){v=(c[m>>2]|0)==0;if(!v){c[e>>2]=(c[e>>2]|0)+ -1}if(!(t>>>0<4|(f|0)==0|v)){v=t;do{c[e>>2]=(c[e>>2]|0)+ -1;v=v+ -1|0}while(v>>>0>3)}}l=+(r|0)*y;i=g;return+l}function Cv(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;e=i;f=a+4|0;g=c[f>>2]|0;h=a+100|0;if(g>>>0<(c[h>>2]|0)>>>0){c[f>>2]=g+1;j=d[g]|0}else{j=Ev(a)|0}if((j|0)==43|(j|0)==45){g=(j|0)==45|0;k=c[f>>2]|0;if(k>>>0<(c[h>>2]|0)>>>0){c[f>>2]=k+1;l=d[k]|0}else{l=Ev(a)|0}if(!((l+ -48|0)>>>0<10|(b|0)==0)?(c[h>>2]|0)!=0:0){c[f>>2]=(c[f>>2]|0)+ -1;m=l;n=g}else{m=l;n=g}}else{m=j;n=0}if((m+ -48|0)>>>0>9){if((c[h>>2]|0)==0){o=-2147483648;p=0;I=o;i=e;return p|0}c[f>>2]=(c[f>>2]|0)+ -1;o=-2147483648;p=0;I=o;i=e;return p|0}else{q=m;r=0}while(1){s=q+ -48+r|0;m=c[f>>2]|0;if(m>>>0<(c[h>>2]|0)>>>0){c[f>>2]=m+1;t=d[m]|0}else{t=Ev(a)|0}if(!((t+ -48|0)>>>0<10&(s|0)<214748364)){break}q=t;r=s*10|0}r=((s|0)<0)<<31>>31;if((t+ -48|0)>>>0<10){q=s;m=r;j=t;while(1){g=bw(q|0,m|0,10,0)|0;l=I;b=Qv(j|0,((j|0)<0)<<31>>31|0,-48,-1)|0;k=Qv(b|0,I|0,g|0,l|0)|0;l=I;g=c[f>>2]|0;if(g>>>0<(c[h>>2]|0)>>>0){c[f>>2]=g+1;u=d[g]|0}else{u=Ev(a)|0}if((u+ -48|0)>>>0<10&((l|0)<21474836|(l|0)==21474836&k>>>0<2061584302)){q=k;m=l;j=u}else{v=k;w=l;x=u;break}}}else{v=s;w=r;x=t}if((x+ -48|0)>>>0<10){do{x=c[f>>2]|0;if(x>>>0<(c[h>>2]|0)>>>0){c[f>>2]=x+1;y=d[x]|0}else{y=Ev(a)|0}}while((y+ -48|0)>>>0<10)}if((c[h>>2]|0)!=0){c[f>>2]=(c[f>>2]|0)+ -1}f=(n|0)!=0;n=Pv(0,0,v|0,w|0)|0;o=f?I:w;p=f?n:v;I=o;i=e;return p|0}function Dv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;c[a+104>>2]=b;e=c[a+8>>2]|0;f=c[a+4>>2]|0;g=e-f|0;c[a+108>>2]=g;if((b|0)!=0&(g|0)>(b|0)){c[a+100>>2]=f+b;i=d;return}else{c[a+100>>2]=e;i=d;return}}function Ev(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;f=b+104|0;g=c[f>>2]|0;if(!((g|0)!=0?(c[b+108>>2]|0)>=(g|0):0)){h=3}if((h|0)==3?(h=Iv(b)|0,(h|0)>=0):0){g=c[f>>2]|0;f=c[b+8>>2]|0;if((g|0)!=0?(j=c[b+4>>2]|0,k=g-(c[b+108>>2]|0)+ -1|0,(f-j|0)>(k|0)):0){c[b+100>>2]=j+k}else{c[b+100>>2]=f}k=c[b+4>>2]|0;if((f|0)!=0){j=b+108|0;c[j>>2]=f+1-k+(c[j>>2]|0)}j=k+ -1|0;if((d[j]|0|0)==(h|0)){l=h;i=e;return l|0}a[j]=h;l=h;i=e;return l|0}c[b+100>>2]=0;l=-1;i=e;return l|0}function Fv(a,b){a=+a;b=b|0;var d=0,e=0.0,f=0,g=0,j=0,l=0.0;d=i;if((b|0)>1023){e=a*8.98846567431158e+307;f=b+ -1023|0;if((f|0)>1023){g=b+ -2046|0;j=(g|0)>1023?1023:g;l=e*8.98846567431158e+307}else{j=f;l=e}}else{if((b|0)<-1022){e=a*2.2250738585072014e-308;f=b+1022|0;if((f|0)<-1022){g=b+2044|0;j=(g|0)<-1022?-1022:g;l=e*2.2250738585072014e-308}else{j=f;l=e}}else{j=b;l=a}}b=Vv(j+1023|0,0,52)|0;j=I;c[k>>2]=b;c[k+4>>2]=j;a=l*+h[k>>3];i=d;return+a}function Gv(a,b){a=+a;b=b|0;var c=0,d=0.0;c=i;d=+Fv(a,b);i=c;return+d}function Hv(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=b+74|0;f=a[e]|0;a[e]=f+255|f;f=b+20|0;e=b+44|0;if((c[f>>2]|0)>>>0>(c[e>>2]|0)>>>0){Sg[c[b+36>>2]&31](b,0,0)|0}c[b+16>>2]=0;c[b+28>>2]=0;c[f>>2]=0;f=c[b>>2]|0;if((f&20|0)==0){g=c[e>>2]|0;c[b+8>>2]=g;c[b+4>>2]=g;h=0;i=d;return h|0}if((f&4|0)==0){h=-1;i=d;return h|0}c[b>>2]=f|32;h=-1;i=d;return h|0}function Iv(a){a=a|0;var b=0,e=0,f=0;b=i;i=i+16|0;e=b;if((c[a+8>>2]|0)==0?(Hv(a)|0)!=0:0){f=-1}else{if((Sg[c[a+32>>2]&31](a,e,1)|0)==1){f=d[e]|0}else{f=-1}}i=b;return f|0}function Jv(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0.0,j=0,k=0;d=i;i=i+112|0;e=d;f=e+0|0;g=f+112|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));f=e+4|0;c[f>>2]=a;g=e+8|0;c[g>>2]=-1;c[e+44>>2]=a;c[e+76>>2]=-1;Dv(e,0);h=+Bv(e,2,1);j=(c[f>>2]|0)-(c[g>>2]|0)+(c[e+108>>2]|0)|0;if((b|0)==0){i=d;return+h}if((j|0)==0){k=a}else{k=a+j|0}c[b>>2]=k;i=d;return+h}function Kv(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;a:do{if((d|0)==0){f=0}else{g=d;h=b;j=c;while(1){k=a[h]|0;l=a[j]|0;if(!(k<<24>>24==l<<24>>24)){break}m=g+ -1|0;if((m|0)==0){f=0;break a}else{g=m;h=h+1|0;j=j+1|0}}f=(k&255)-(l&255)|0}}while(0);i=e;return f|0}function Lv(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;e=a[b]|0;f=a[c]|0;if(e<<24>>24!=f<<24>>24|e<<24>>24==0|f<<24>>24==0){g=e;h=f;j=g&255;k=h&255;l=j-k|0;i=d;return l|0}else{m=b;n=c}while(1){c=m+1|0;b=n+1|0;f=a[c]|0;e=a[b]|0;if(f<<24>>24!=e<<24>>24|f<<24>>24==0|e<<24>>24==0){g=f;h=e;break}else{m=c;n=b}}j=g&255;k=h&255;l=j-k|0;i=d;return l|0}function Mv(){c[4744]=o;c[4770]=o;c[7528]=o;c[8624]=o}function Nv(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return lb(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if((e|0)==0)return f|0;a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function Ov(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;g=b&3;h=d|d<<8|d<<16|d<<24;i=f&~3;if(g){g=b+4-g|0;while((b|0)<(g|0)){a[b]=d;b=b+1|0}}while((b|0)<(i|0)){c[b>>2]=h;b=b+4|0}}while((b|0)<(f|0)){a[b]=d;b=b+1|0}return b-e|0}function Pv(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=b-d>>>0;e=b-d-(c>>>0>a>>>0|0)>>>0;return(I=e,a-c>>>0|0)|0}function Qv(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=a+c>>>0;return(I=b+d+(e>>>0<a>>>0|0)>>>0,e|0)|0}function Rv(b){b=b|0;var c=0;c=b;while(a[c]|0){c=c+1|0}return c-b|0}function Sv(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if((c|0)<(b|0)&(b|0)<(c+d|0)){e=b;c=c+d|0;b=b+d|0;while((d|0)>0){b=b-1|0;c=c-1|0;d=d-1|0;a[b]=a[c]|0}b=e}else{Nv(b,c,d)|0}return b|0}function Tv(a){a=a|0;if((a|0)<65)return a|0;if((a|0)>90)return a|0;return a-65+97|0}function Uv(b,c){b=b|0;c=c|0;var d=0;do{a[b+d|0]=a[c+d|0];d=d+1|0}while(a[c+(d-1)|0]|0);return b|0}function Vv(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){I=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}I=a<<c-32;return 0}function Wv(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){I=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}I=0;return b>>>c-32|0}function Xv(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){I=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}I=(b|0)<0?-1:0;return b>>c-32|0}function Yv(b){b=b|0;var c=0;c=a[n+(b>>>24)|0]|0;if((c|0)<8)return c|0;c=a[n+(b>>16&255)|0]|0;if((c|0)<8)return c+8|0;c=a[n+(b>>8&255)|0]|0;if((c|0)<8)return c+16|0;return(a[n+(b&255)|0]|0)+24|0}function Zv(b){b=b|0;var c=0;c=a[m+(b&255)|0]|0;if((c|0)<8)return c|0;c=a[m+(b>>8&255)|0]|0;if((c|0)<8)return c+8|0;c=a[m+(b>>16&255)|0]|0;if((c|0)<8)return c+16|0;return(a[m+(b>>>24)|0]|0)+24|0}function _v(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=a&65535;d=b&65535;e=ea(d,c)|0;f=a>>>16;a=(e>>>16)+(ea(d,f)|0)|0;d=b>>>16;b=ea(d,c)|0;return(I=(a>>>16)+(ea(d,f)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|e&65535|0)|0}function $v(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;e=b>>31|((b|0)<0?-1:0)<<1;f=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;g=d>>31|((d|0)<0?-1:0)<<1;h=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;i=Pv(e^a,f^b,e,f)|0;b=I;a=g^e;e=h^f;f=Pv((ew(i,b,Pv(g^c,h^d,g,h)|0,I,0)|0)^a,I^e,a,e)|0;return f|0}function aw(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;i=i+8|0;g=f|0;h=b>>31|((b|0)<0?-1:0)<<1;j=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;k=e>>31|((e|0)<0?-1:0)<<1;l=((e|0)<0?-1:0)>>31|((e|0)<0?-1:0)<<1;m=Pv(h^a,j^b,h,j)|0;b=I;ew(m,b,Pv(k^d,l^e,k,l)|0,I,g)|0;l=Pv(c[g>>2]^h,c[g+4>>2]^j,h,j)|0;j=I;i=f;return(I=j,l)|0}function bw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;a=c;c=_v(e,a)|0;f=I;return(I=(ea(b,a)|0)+(ea(d,e)|0)+f|f&0,c|0|0)|0}function cw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=ew(a,b,c,d,0)|0;return e|0}function dw(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;i=i+8|0;g=f|0;ew(a,b,d,e,g)|0;i=f;return(I=c[g+4>>2]|0,c[g>>2]|0)|0}function ew(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0;g=a;h=b;i=h;j=d;k=e;l=k;if((i|0)==0){m=(f|0)!=0;if((l|0)==0){if(m){c[f>>2]=(g>>>0)%(j>>>0);c[f+4>>2]=0}n=0;o=(g>>>0)/(j>>>0)>>>0;return(I=n,o)|0}else{if(!m){n=0;o=0;return(I=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=b&0;n=0;o=0;return(I=n,o)|0}}m=(l|0)==0;do{if((j|0)!=0){if(!m){p=(Yv(l|0)|0)-(Yv(i|0)|0)|0;if(p>>>0<=31){q=p+1|0;r=31-p|0;s=p-31>>31;t=q;u=g>>>(q>>>0)&s|i<<r;v=i>>>(q>>>0)&s;w=0;x=g<<r;break}if((f|0)==0){n=0;o=0;return(I=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=h|b&0;n=0;o=0;return(I=n,o)|0}r=j-1|0;if((r&j|0)!=0){s=(Yv(j|0)|0)+33-(Yv(i|0)|0)|0;q=64-s|0;p=32-s|0;y=p>>31;z=s-32|0;A=z>>31;t=s;u=p-1>>31&i>>>(z>>>0)|(i<<p|g>>>(s>>>0))&A;v=A&i>>>(s>>>0);w=g<<q&y;x=(i<<q|g>>>(z>>>0))&y|g<<p&s-33>>31;break}if((f|0)!=0){c[f>>2]=r&g;c[f+4>>2]=0}if((j|0)==1){n=h|b&0;o=a|0|0;return(I=n,o)|0}else{r=Zv(j|0)|0;n=i>>>(r>>>0)|0;o=i<<32-r|g>>>(r>>>0)|0;return(I=n,o)|0}}else{if(m){if((f|0)!=0){c[f>>2]=(i>>>0)%(j>>>0);c[f+4>>2]=0}n=0;o=(i>>>0)/(j>>>0)>>>0;return(I=n,o)|0}if((g|0)==0){if((f|0)!=0){c[f>>2]=0;c[f+4>>2]=(i>>>0)%(l>>>0)}n=0;o=(i>>>0)/(l>>>0)>>>0;return(I=n,o)|0}r=l-1|0;if((r&l|0)==0){if((f|0)!=0){c[f>>2]=a|0;c[f+4>>2]=r&i|b&0}n=0;o=i>>>((Zv(l|0)|0)>>>0);return(I=n,o)|0}r=(Yv(l|0)|0)-(Yv(i|0)|0)|0;if(r>>>0<=30){s=r+1|0;p=31-r|0;t=s;u=i<<p|g>>>(s>>>0);v=i>>>(s>>>0);w=0;x=g<<p;break}if((f|0)==0){n=0;o=0;return(I=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=h|b&0;n=0;o=0;return(I=n,o)|0}}while(0);if((t|0)==0){B=x;C=w;D=v;E=u;F=0;G=0}else{b=d|0|0;d=k|e&0;e=Qv(b,d,-1,-1)|0;k=I;h=x;x=w;w=v;v=u;u=t;t=0;while(1){H=x>>>31|h<<1;J=t|x<<1;a=v<<1|h>>>31|0;g=v>>>31|w<<1|0;Pv(e,k,a,g)|0;i=I;l=i>>31|((i|0)<0?-1:0)<<1;K=l&1;L=Pv(a,g,l&b,(((i|0)<0?-1:0)>>31|((i|0)<0?-1:0)<<1)&d)|0;M=I;i=u-1|0;if((i|0)==0){break}else{h=H;x=J;w=M;v=L;u=i;t=K}}B=H;C=J;D=M;E=L;F=0;G=K}K=C;C=0;if((f|0)!=0){c[f>>2]=E;c[f+4>>2]=D}n=(K|0)>>>31|(B|C)<<1|(C<<1|K>>>31)&0|F;o=(K<<1|0>>>31)&-2|G;return(I=n,o)|0}function fw(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Hg[a&15](b|0,c|0,d|0,e|0,f|0)}function gw(a,b){a=a|0;b=+b;Ig[a&3](+b)}function hw(a,b,c){a=a|0;b=b|0;c=+c;Jg[a&3](b|0,+c)}function iw(a,b){a=a|0;b=b|0;Kg[a&255](b|0)}function jw(a,b,c){a=a|0;b=b|0;c=c|0;Lg[a&127](b|0,c|0)}function kw(a,b){a=a|0;b=b|0;return Mg[a&127](b|0)|0}function lw(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;Ng[a&7](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0)}function mw(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=+d;e=+e;Og[a&3](b|0,+c,+d,+e)}function nw(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return Pg[a&15](b|0,c|0,d|0,e|0,f|0)|0}function ow(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=+d;e=+e;f=+f;g=g|0;h=h|0;i=i|0;Qg[a&1](b|0,c|0,+d,+e,+f,g|0,h|0,i|0)}function pw(a,b,c,d){a=a|0;b=b|0;c=+c;d=+d;Rg[a&3](b|0,+c,+d)}function qw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Sg[a&31](b|0,c|0,d|0)|0}function rw(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;Tg[a&3](+b,+c,+d,+e)}function sw(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=+g;Ug[a&7](b|0,c|0,d|0,e|0,f|0,+g)}function tw(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;Vg[a&15](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0)}function uw(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Wg[a&31](b|0,c|0,d|0,e|0,f|0,g|0)}function vw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Xg[a&31](b|0,c|0,d|0)}function ww(a,b,c,d){a=a|0;b=b|0;c=c|0;d=+d;Yg[a&3](b|0,c|0,+d)}function xw(a,b,c,d,e,f){a=a|0;b=b|0;c=+c;d=+d;e=+e;f=+f;Zg[a&3](b|0,+c,+d,+e,+f)}function yw(a,b,c){a=a|0;b=b|0;c=+c;return _g[a&1](b|0,+c)|0}function zw(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;$g[a&63](b|0,c|0,d|0,e|0,f|0,g|0,h|0)}function Aw(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=+h;ah[a&3](b|0,c|0,d|0,e|0,f|0,g|0,+h)}function Bw(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=+d;e=+e;f=f|0;g=+g;h=h|0;return bh[a&1](b|0,c|0,+d,+e,f|0,+g,h|0)|0}function Cw(a,b,c){a=a|0;b=b|0;c=c|0;return ch[a&31](b|0,c|0)|0}function Dw(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;return dh[a&15](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0)|0}function Ew(a){a=a|0;return eh[a&3]()|0}function Fw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return fh[a&15](b|0,c|0,d|0,e|0)|0}function Gw(a,b,c,d,e,f,g){a=a|0;b=+b;c=+c;d=+d;e=+e;f=+f;g=+g;gh[a&1](+b,+c,+d,+e,+f,+g)}function Hw(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=+g;h=h|0;return hh[a&1](b|0,c|0,d|0,e|0,f|0,+g,h|0)|0}function Iw(a,b,c){a=a|0;b=+b;c=+c;ih[a&3](+b,+c)}function Jw(a){a=a|0;jh[a&7]()}function Kw(a,b,c){a=a|0;b=+b;c=c|0;kh[a&1](+b,c|0)}function Lw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;lh[a&63](b|0,c|0,d|0,e|0)}function Mw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;fa(0)}function Nw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;Jd(a|0,b|0,c|0,d|0,e|0)}function Ow(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;Re(a|0,b|0,c|0,d|0,e|0)}function Pw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;zc(a|0,b|0,c|0,d|0,e|0)}function Qw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;Jc(a|0,b|0,c|0,d|0,e|0)}function Rw(a){a=+a;fa(1)}function Sw(a){a=+a;ud(+a)}function Tw(a){a=+a;Wc(+a)}function Uw(a){a=+a;qc(+a)}function Vw(a,b){a=a|0;b=+b;fa(2)}function Ww(a,b){a=a|0;b=+b;yb(a|0,+b)}function Xw(a,b){a=a|0;b=+b;hc(a|0,+b)}function Yw(a){a=a|0;fa(3)}function Zw(a){a=a|0;bd(a|0)}function _w(a){a=a|0;Jf(a|0)}function $w(a){a=a|0;pe(a|0)}function ax(a){a=a|0;Vf(a|0)}function bx(a){a=a|0;hb(a|0)}function cx(a){a=a|0;yg(a|0)}function dx(a){a=a|0;Jb(a|0)}function ex(a){a=a|0;Id(a|0)}function fx(a){a=a|0;Oc(a|0)}function gx(a){a=a|0;qd(a|0)}function hx(a){a=a|0;Dd(a|0)}function ix(a){a=a|0;oe(a|0)}function jx(a){a=a|0;md(a|0)}function kx(a){a=a|0;qb(a|0)}function lx(a){a=a|0;jb(a|0)}function mx(a){a=a|0;sd(a|0)}function nx(a){a=a|0;le(a|0)}function ox(a){a=a|0;db(a|0)}function px(a){a=a|0;_a(a|0)}function qx(a){a=a|0;Vd(a|0)}function rx(a){a=a|0;jd(a|0)}function sx(a){a=a|0;Ne(a|0)}function tx(a){a=a|0;Zd(a|0)}function ux(a){a=a|0;Tf(a|0)}function vx(a){a=a|0;cg(a|0)}function wx(a){a=a|0;Wf(a|0)}function xx(a,b){a=a|0;b=b|0;fa(4)}function yx(a,b){a=a|0;b=b|0;xe(a|0,b|0)}function zx(a,b){a=a|0;b=b|0;Ya(a|0,b|0)}function Ax(a,b){a=a|0;b=b|0;Bg(a|0,b|0)}function Bx(a,b){a=a|0;b=b|0;Ab(a|0,b|0)}function Cx(a,b){a=a|0;b=b|0;tc(a|0,b|0)}function Dx(a,b){a=a|0;b=b|0;xf(a|0,b|0)}function Ex(a,b){a=a|0;b=b|0;Yc(a|0,b|0)}function Fx(a,b){a=a|0;b=b|0;Ib(a|0,b|0)}function Gx(a,b){a=a|0;b=b|0;eg(a|0,b|0)}function Hx(a,b){a=a|0;b=b|0;ee(a|0,b|0)}function Ix(a,b){a=a|0;b=b|0;qe(a|0,b|0)}function Jx(a,b){a=a|0;b=b|0;Ad(a|0,b|0)}function Kx(a,b){a=a|0;b=b|0;Fb(a|0,b|0)}function Lx(a,b){a=a|0;b=b|0;zg(a|0,b|0)}function Mx(a,b){a=a|0;b=b|0;dd(a|0,b|0)}function Nx(a,b){a=a|0;b=b|0;Eg(a|0,b|0)}function Ox(a,b){a=a|0;b=b|0;Gf(a|0,b|0)}function Px(a,b){a=a|0;b=b|0;ze(a|0,b|0)}function Qx(a,b){a=a|0;b=b|0;jc(a|0,b|0)}function Rx(a,b){a=a|0;b=b|0;Cg(a|0,b|0)}function Sx(a,b){a=a|0;b=b|0;xd(a|0,b|0)}function Tx(a,b){a=a|0;b=b|0;bf(a|0,b|0)}function Ux(a,b){a=a|0;b=b|0;ng(a|0,b|0)}function Vx(a,b){a=a|0;b=b|0;Cc(a|0,b|0)}function Wx(a,b){a=a|0;b=b|0;ef(a|0,b|0)}function Xx(a,b){a=a|0;b=b|0;Dc(a|0,b|0)}function Yx(a,b){a=a|0;b=b|0;Sa(a|0,b|0)}function Zx(a,b){a=a|0;b=b|0;Af(a|0,b|0)}function _x(a,b){a=a|0;b=b|0;Xd(a|0,b|0)}function $x(a,b){a=a|0;b=b|0;Rb(a|0,b|0)}function ay(a,b){a=a|0;b=b|0;bb(a|0,b|0)}function by(a,b){a=a|0;b=b|0;ag(a|0,b|0)}function cy(a){a=a|0;fa(5);return 0}function dy(a){a=a|0;return Sb(a|0)|0}function ey(a){a=a|0;return Yf(a|0)|0}function fy(a){a=a|0;return gc(a|0)|0}function gy(a){a=a|0;return lf(a|0)|0}function hy(a){a=a|0;return Xc(a|0)|0}function iy(a){a=a|0;return kg(a|0)|0}function jy(a){a=a|0;return Nb(a|0)|0}function ky(a){a=a|0;return Ub(a|0)|0}function ly(a){a=a|0;return Uc(a|0)|0}function my(a){a=a|0;return Wb(a|0)|0}function ny(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;fa(6)}function oy(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;mc(a|0,b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0)}function py(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;Fg(a|0,b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0)}function qy(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;ve(a|0,b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0)}function ry(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;fa(7)}function sy(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;_c(a|0,+b,+c,+d)}function ty(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;Rf(a|0,+b,+c,+d)}function uy(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;fa(8);return 0}function vy(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=+c;d=+d;e=+e;f=f|0;g=g|0;h=h|0;fa(9)}function wy(a,b,c){a=a|0;b=+b;c=+c;fa(10)}function xy(a,b,c){a=a|0;b=+b;c=+c;Zb(a|0,+b,+c)}function yy(a,b,c){a=a|0;b=+b;c=+c;Pc(a|0,+b,+c)}function zy(a,b,c){a=a|0;b=b|0;c=c|0;fa(11);return 0}function Ay(a,b,c,d){a=+a;b=+b;c=+c;d=+d;fa(12)}function By(a,b,c,d){a=+a;b=+b;c=+c;d=+d;Vb(+a,+b,+c,+d)}function Cy(a,b,c,d){a=+a;b=+b;c=+c;d=+d;sg(+a,+b,+c,+d)}function Dy(a,b,c,d){a=+a;b=+b;c=+c;d=+d;pf(+a,+b,+c,+d)}function Ey(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;fa(13)}function Fy(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;fa(14)}function Gy(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;rg(a|0,b|0,c|0,d|0,e|0,f|0,g|0,h|0)}function Hy(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;lc(a|0,b|0,c|0,d|0,e|0,f|0,g|0,h|0)}function Iy(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;vg(a|0,b|0,c|0,d|0,e|0,f|0,g|0,h|0)}function Jy(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;fa(15)}function Ky(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Ld(a|0,b|0,c|0,d|0,e|0,f|0)}function Ly(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Mb(a|0,b|0,c|0,d|0,e|0,f|0)}function My(a,b,c){a=a|0;b=b|0;c=c|0;fa(16)}function Ny(a,b,c){a=a|0;b=b|0;c=c|0;Ra(a|0,b|0,c|0)}function Oy(a,b,c){a=a|0;b=b|0;c=c|0;Hc(a|0,b|0,c|0)}function Py(a,b,c){a=a|0;b=b|0;c=c|0;oc(a|0,b|0,c|0)}function Qy(a,b,c){a=a|0;b=b|0;c=c|0;$b(a|0,b|0,c|0)}function Ry(a,b,c){a=a|0;b=b|0;c=c|0;ne(a|0,b|0,c|0)}function Sy(a,b,c){a=a|0;b=b|0;c=c|0;Df(a|0,b|0,c|0)}function Ty(a,b,c){a=a|0;b=b|0;c=c|0;Bf(a|0,b|0,c|0)}function Uy(a,b,c){a=a|0;b=b|0;c=c|0;Xe(a|0,b|0,c|0)}function Vy(a,b,c){a=a|0;b=b|0;c=c|0;Cf(a|0,b|0,c|0)}function Wy(a,b,c){a=a|0;b=b|0;c=c|0;ue(a|0,b|0,c|0)}function Xy(a,b,c){a=a|0;b=b|0;c=c|0;ae(a|0,b|0,c|0)}function Yy(a,b,c){a=a|0;b=b|0;c=c|0;de(a|0,b|0,c|0)}function Zy(a,b,c){a=a|0;b=b|0;c=c|0;$d(a|0,b|0,c|0)}function _y(a,b,c){a=a|0;b=b|0;c=c|0;jf(a|0,b|0,c|0)}function $y(a,b,c){a=a|0;b=b|0;c=c|0;rb(a|0,b|0,c|0)}function az(a,b,c){a=a|0;b=b|0;c=c|0;Gc(a|0,b|0,c|0)}function bz(a,b,c){a=a|0;b=b|0;c=c|0;kf(a|0,b|0,c|0)}function cz(a,b,c){a=a|0;b=b|0;c=c|0;Pd(a|0,b|0,c|0)}function dz(a,b,c){a=a|0;b=b|0;c=c|0;fb(a|0,b|0,c|0)}function ez(a,b,c){a=a|0;b=b|0;c=c|0;og(a|0,b|0,c|0)}function fz(a,b,c){a=a|0;b=b|0;c=c|0;$e(a|0,b|0,c|0)}function gz(a,b,c){a=a|0;b=b|0;c=c|0;we(a|0,b|0,c|0)}function hz(a,b,c){a=a|0;b=b|0;c=c|0;Kc(a|0,b|0,c|0)}function iz(a,b,c){a=a|0;b=b|0;c=c|0;Qe(a|0,b|0,c|0)}function jz(a,b,c){a=a|0;b=b|0;c=c|0;pd(a|0,b|0,c|0)}function kz(a,b,c){a=a|0;b=b|0;c=c|0;eb(a|0,b|0,c|0)}function lz(a,b,c){a=a|0;b=b|0;c=c|0;uc(a|0,b|0,c|0)}function mz(a,b,c){a=a|0;b=b|0;c=c|0;Ve(a|0,b|0,c|0)}function nz(a,b,c){a=a|0;b=b|0;c=c|0;Sf(a|0,b|0,c|0)}function oz(a,b,c){a=a|0;b=b|0;c=+c;fa(17)}function pz(a,b,c){a=a|0;b=b|0;c=+c;rc(a|0,b|0,+c)}function qz(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;fa(18)}function rz(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;Od(a|0,+b,+c,+d,+e)}function sz(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;te(a|0,+b,+c,+d,+e)}function tz(a,b){a=a|0;b=+b;fa(19);return 0}function uz(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;fa(20)}function vz(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;yd(a|0,b|0,c|0,d|0,e|0,f|0,g|0)}function wz(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;he(a|0,b|0,c|0,d|0,e|0,f|0,g|0)}function xz(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;ic(a|0,b|0,c|0,d|0,e|0,f|0,g|0)}function yz(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=+g;fa(21)}function zz(a,b,c,d,e,f,g){a=a|0;b=b|0;c=+c;d=+d;e=e|0;f=+f;g=g|0;fa(22);return 0}function Az(a,b){a=a|0;b=b|0;fa(23);return 0}function Bz(a,b){a=a|0;b=b|0;return kd(a|0,b|0)|0}function Cz(a,b){a=a|0;b=b|0;return nd(a|0,b|0)|0}function Dz(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;fa(24);return 0}function Ez(){fa(25);return 0}function Fz(){return dg()|0}function Gz(){return Vc()|0}function Hz(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;fa(26);return 0}function Iz(a,b,c,d,e,f){a=+a;b=+b;c=+c;d=+d;e=+e;f=+f;fa(27)}function Jz(a,b,c,d,e,f){a=+a;b=+b;c=+c;d=+d;e=+e;f=+f;Mf(+a,+b,+c,+d,+e,+f)}function Kz(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=g|0;fa(28);return 0}function Lz(a,b){a=+a;b=+b;fa(29)}function Mz(a,b){a=+a;b=+b;Ce(+a,+b)}function Nz(a,b){a=+a;b=+b;Of(+a,+b)}function Oz(a,b){a=+a;b=+b;Sc(+a,+b)}function Pz(){fa(30)}function Qz(){cf()}function Rz(){Nd()}function Sz(){Ua()}function Tz(){Td()}function Uz(){Rc()}function Vz(a,b){a=+a;b=b|0;fa(31)}function Wz(a,b){a=+a;b=b|0;Nf(+a,b|0)}function Xz(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;fa(32)}function Yz(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;tg(a|0,b|0,c|0,d|0)}function Zz(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Zf(a|0,b|0,c|0,d|0)}function _z(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;$c(a|0,b|0,c|0,d|0)}function $z(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;pc(a|0,b|0,c|0,d|0)}function aA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;$f(a|0,b|0,c|0,d|0)}function bA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;df(a|0,b|0,c|0,d|0)}function cA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;sc(a|0,b|0,c|0,d|0)}function dA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;of(a|0,b|0,c|0,d|0)}function eA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Bb(a|0,b|0,c|0,d|0)}function fA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Yd(a|0,b|0,c|0,d|0)}function gA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Wa(a|0,b|0,c|0,d|0)}function hA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;lg(a|0,b|0,c|0,d|0)}function iA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ec(a|0,b|0,c|0,d|0)}function jA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Fd(a|0,b|0,c|0,d|0)}function kA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;If(a|0,b|0,c|0,d|0)}function lA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;uf(a|0,b|0,c|0,d|0)}function mA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;rd(a|0,b|0,c|0,d|0)}function nA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ig(a|0,b|0,c|0,d|0)}function oA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Me(a|0,b|0,c|0,d|0)}function pA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;sf(a|0,b|0,c|0,d|0)}function qA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Ke(a|0,b|0,c|0,d|0)}function rA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Xb(a|0,b|0,c|0,d|0)}function sA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Uf(a|0,b|0,c|0,d|0)}function tA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Le(a|0,b|0,c|0,d|0)}function uA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Va(a|0,b|0,c|0,d|0)}function vA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;zd(a|0,b|0,c|0,d|0)}function wA(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;dc(a|0,b|0,c|0,d|0)}




// EMSCRIPTEN_END_FUNCS
var Hg=[Mw,vi,iv,hv,gv,Nw,Ow,Pw,Qw,Mw,Mw,Mw,Mw,Mw,Mw,Mw];var Ig=[Rw,Sw,Tw,Uw];var Jg=[Vw,Ww,Xw,Vw];var Kg=[Yw,Dh,Fh,Hh,Sh,Rh,si,ri,xi,Ri,Qi,cj,bj,sj,tj,uj,vj,wj,xj,yj,zj,Aj,Bj,Fj,Ej,ok,nk,Ak,sk,rk,Fk,wk,vk,Jk,yk,xk,Ck,Yk,Zk,_k,$k,al,Qn,Pn,Sn,Rn,bl,cl,ol,nl,Al,Bl,Cl,Dl,$n,_n,bo,ao,Gl,Il,Pl,Ql,Wl,Xl,bm,cm,im,jm,vm,um,Am,zm,Cm,Lm,Km,on,nn,Cn,Bn,Wn,Vn,Yn,Xn,io,ho,ko,jo,qo,po,kn,ro,oo,so,uo,to,ys,Ao,zo,Fo,Eo,cp,bp,Gp,Fp,Up,Tp,gq,fq,tq,sq,Fq,Eq,Iq,Hq,Mq,Lq,Xq,Wq,gr,fr,rr,qr,Cr,Br,Mr,Lr,Tr,Sr,Zr,Yr,ds,cs,is,hs,rs,qs,Os,Ns,ms,dt,Kt,Jt,Mt,Lt,vo,xs,As,Xs,lt,wt,Ht,It,Vu,Uu,Xu,_u,Yu,Zu,$u,av,yv,xv,Zh,jl,Ol,zs,su,Er,ov,zu,yu,xu,wu,vu,uu,Rm,bn,Zw,_w,$w,ax,bx,cx,dx,ex,fx,gx,hx,ix,jx,kx,lx,mx,nx,ox,px,qx,rx,sx,tx,ux,vx,wx,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw,Yw];var Lg=[xx,Lh,Vi,Bk,Gk,Kk,pn,Kl,Rl,Yl,dm,km,Dn,Pq,Qq,Rq,Sq,Uq,Vq,_q,$q,ar,br,dr,er,jr,kr,lr,mr,or,pr,ur,vr,wr,xr,zr,Ar,gs,ls,Rt,Tt,Vt,St,Ut,Wt,Xh,yx,zx,Ax,Bx,Cx,Dx,Ex,Fx,Gx,Hx,Ix,Jx,Kx,Lx,Mx,Nx,Ox,Px,Qx,Rx,Sx,Tx,Ux,Vx,Wx,Xx,Yx,Zx,_x,$x,ay,by,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx,xx];var Mg=[cy,Gh,Si,Dk,Hk,Lk,tn,un,fl,xn,pl,tl,Sl,In,Kn,Ln,Hn,Zl,_l,em,wn,lm,mm,wm,Bm,mo,hq,Xt,Zt,$t,fu,hu,bu,du,uq,Yt,_t,au,gu,iu,cu,eu,Nq,Oq,Tq,Yq,Zq,cr,hr,ir,nr,sr,tr,yr,ht,it,kt,Nt,Pt,Ot,Qt,$s,at,ct,rt,st,vt,Ct,Dt,Gt,Wu,zv,dy,ey,fy,gy,hy,iy,jy,ky,ly,my,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy,cy];var Ng=[ny,nq,Aq,oy,py,qy,ny,ny];var Og=[ry,sy,ty,ry];var Pg=[uy,Bi,_i,wo,Bo,Ws,gt,jt,Ms,_s,bt,qt,tt,Bt,Et,uy];var Qg=[vy,Ci];var Rg=[wy,xy,yy,wy];var Sg=[zy,aj,qn,vn,zn,ql,rl,sl,Jl,En,Jn,Tl,Nn,fm,Fm,Gm,yo,Do,es,js,Qs,Ss,Vs,Bs,Gs,Is,Ls,bv,zy,zy,zy,zy];var Tg=[Ay,By,Cy,Dy];var Ug=[Ey,Op,Rp,aq,cq,Ey,Ey,Ey];var Vg=[Fy,Gq,Jq,Dr,Hr,Nr,Pr,Gy,Hy,Iy,Fy,Fy,Fy,Fy,Fy,Fy];var Wg=[Jy,dl,Fn,rn,Hp,Ip,Mp,Sp,Vp,Wp,_p,dq,fs,ks,lv,kv,jv,Ky,Ly,Jy,Jy,Jy,Jy,Jy,Jy,Jy,Jy,Jy,Jy,Jy,Jy,Jy];var Xg=[My,Em,no,Ny,Oy,Py,Qy,Ry,Sy,Ty,Uy,Vy,Wy,Xy,Yy,Zy,_y,$y,az,bz,cz,dz,ez,fz,gz,hz,iz,jz,kz,lz,mz,nz];var Yg=[oz,Wi,pz,oz];var Zg=[qz,rz,sz,qz];var _g=[tz,Ih];var $g=[uz,Go,Io,Ko,Mo,Oo,Qo,So,Uo,Wo,Yo,_o,dp,fp,hp,jp,lp,np,pp,rp,tp,vp,xp,Lp,Np,Zp,$p,iq,jq,kq,lq,mq,vq,wq,xq,yq,zq,Xr,bs,vz,wz,xz,uz,uz,uz,uz,uz,uz,uz,uz,uz,uz,uz,uz,uz,uz,uz,uz,uz,uz,uz,uz,uz,uz];var ah=[yz,Ur,_r,yz];var bh=[zz,Di];var ch=[Az,Jh,Kh,zk,Ek,Ik,gl,hl,Mn,Ul,$l,On,yn,gm,nm,An,Ps,Rs,Ts,Fs,Hs,Js,Ph,Ok,Tk,Bz,Cz,Az,Az,Az,Az,Az];var dh=[Dz,et,ft,Ys,Zs,mt,ot,xt,zt,Dz,Dz,Dz,Dz,Dz,Dz,Dz];var eh=[Ez,Yh,Fz,Gz];var fh=[Hz,zi,Ai,Xi,$i,Ll,Us,Cs,Ds,Es,Ks,Hz,Hz,Hz,Hz,Hz];var gh=[Iz,Jz];var hh=[Kz,Ei];var ih=[Lz,Mz,Nz,Oz];var jh=[Pz,Qz,Rz,Sz,Tz,Uz,Pz,Pz];var kh=[Vz,Wz];var lh=[Xz,Fi,el,Gn,sn,xo,Co,cv,dv,ev,Yz,Zz,_z,$z,aA,bA,cA,dA,eA,fA,gA,hA,iA,jA,kA,lA,mA,nA,oA,pA,qA,rA,sA,tA,uA,vA,wA,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz,Xz];return{_i64Subtract:Pv,_free:ov,_main:Ch,_realloc:pv,_i64Add:Qv,_memmove:Sv,_strstr:Nu,_tolower:Tv,_strlen:Rv,_memset:Ov,_malloc:nv,_memcpy:Nv,_emscripten_GetProcAddress:mv,_strcpy:Uv,_bitshift64Shl:Vv,__GLOBAL__I_a:Oh,__GLOBAL__I_a42:hi,__GLOBAL__I_a338:kl,__GLOBAL__I_a378:Ml,__GLOBAL__I_a557:pm,runPostSets:Mv,stackAlloc:mh,stackSave:nh,stackRestore:oh,setThrew:ph,setTempRet0:sh,setTempRet1:th,setTempRet2:uh,setTempRet3:vh,setTempRet4:wh,setTempRet5:xh,setTempRet6:yh,setTempRet7:zh,setTempRet8:Ah,setTempRet9:Bh,dynCall_viiiii:fw,dynCall_vd:gw,dynCall_vid:hw,dynCall_vi:iw,dynCall_vii:jw,dynCall_ii:kw,dynCall_viiiiiiiii:lw,dynCall_viddd:mw,dynCall_iiiiii:nw,dynCall_viidddiii:ow,dynCall_vidd:pw,dynCall_iiii:qw,dynCall_vdddd:rw,dynCall_viiiiid:sw,dynCall_viiiiiiii:tw,dynCall_viiiiii:uw,dynCall_viii:vw,dynCall_viid:ww,dynCall_vidddd:xw,dynCall_iid:yw,dynCall_viiiiiii:zw,dynCall_viiiiiid:Aw,dynCall_iiiddidi:Bw,dynCall_iii:Cw,dynCall_iiiiiiiii:Dw,dynCall_i:Ew,dynCall_iiiii:Fw,dynCall_vdddddd:Gw,dynCall_iiiiiidi:Hw,dynCall_vdd:Iw,dynCall_v:Jw,dynCall_vdi:Kw,dynCall_viiii:Lw}})


// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_viiiii": invoke_viiiii, "invoke_vd": invoke_vd, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viddd": invoke_viddd, "invoke_iiiiii": invoke_iiiiii, "invoke_viidddiii": invoke_viidddiii, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_vdddd": invoke_vdddd, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viii": invoke_viii, "invoke_viid": invoke_viid, "invoke_vidddd": invoke_vidddd, "invoke_iid": invoke_iid, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_iiiddidi": invoke_iiiddidi, "invoke_iii": invoke_iii, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_vdddddd": invoke_vdddddd, "invoke_iiiiiidi": invoke_iiiiiidi, "invoke_vdd": invoke_vdd, "invoke_v": invoke_v, "invoke_vdi": invoke_vdi, "invoke_viiii": invoke_viiii, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays, "_strftime_l": _strftime_l, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_vsscanf": _vsscanf, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "__ZSt9terminatev": __ZSt9terminatev, "_emscripten_glCullFace": _emscripten_glCullFace, "_glfwInit": _glfwInit, "___cxa_guard_acquire": ___cxa_guard_acquire, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_glReadPixels": _glReadPixels, "_emscripten_glFrontFace": _emscripten_glFrontFace, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_emscripten_glUseProgram": _emscripten_glUseProgram, "___ctype_toupper_loc": ___ctype_toupper_loc, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_glfwOpenWindowHint": _glfwOpenWindowHint, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_ftell": _ftell, "_glDeleteTextures": _glDeleteTextures, "_sbrk": _sbrk, "_glBlendFunc": _glBlendFunc, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "___cxa_begin_catch": ___cxa_begin_catch, "_sinf": _sinf, "_emscripten_set_main_loop_arg": _emscripten_set_main_loop_arg, "__parseInt64": __parseInt64, "__reallyNegative": __reallyNegative, "_close": _close, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_tanf": _tanf, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_glfwGetMousePos": _glfwGetMousePos, "_asprintf": _asprintf, "_glfwTerminate": _glfwTerminate, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_fread": _fread, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glDeleteObjectARB": _emscripten_glDeleteObjectARB, "_glfwGetProcAddress": _glfwGetProcAddress, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_write": _write, "__isLeapYear": __isLeapYear, "_fsync": _fsync, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_emscripten_glGetString": _emscripten_glGetString, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_emscripten_glRotatef": _emscripten_glRotatef, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glScissor": _emscripten_glScissor, "_strtoll_l": _strtoll_l, "_emscripten_glUniform2f": _emscripten_glUniform2f, "___cxa_rethrow": ___cxa_rethrow, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_catclose": _catclose, "_glTexParameteri": _glTexParameteri, "___cxa_does_inherit": ___cxa_does_inherit, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "_glPixelStorei": _glPixelStorei, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glAttachShader": _emscripten_glAttachShader, "__formatString": __formatString, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "_uselocale": _uselocale, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_glfwOpenWindow": _glfwOpenWindow, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_isxdigit_l": _isxdigit_l, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_glDrawElements": _glDrawElements, "___cxa_guard_release": ___cxa_guard_release, "_emscripten_glBindProgramARB": _emscripten_glBindProgramARB, "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays, "_strtol": _strtol, "_glViewport": _glViewport, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "___setErrNo": ___setErrNo, "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_llvm_pow_f32": _llvm_pow_f32, "_glDepthFunc": _glDepthFunc, "_isdigit_l": _isdigit_l, "_emscripten_glClientActiveTexture": _emscripten_glClientActiveTexture, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "___resumeException": ___resumeException, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_freelocale": _freelocale, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glGetError": _emscripten_glGetError, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_newlocale": _newlocale, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_isspace": _isspace, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_glEnable": _glEnable, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_fabs": _fabs, "_glGenTextures": _glGenTextures, "_sprintf": _sprintf, "_glGetIntegerv": _glGetIntegerv, "_glGetString": _glGetString, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "_pread": _pread, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_llvm_bswap_i32": _llvm_bswap_i32, "_emscripten_glNormalPointer": _emscripten_glNormalPointer, "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray, "_emscripten_glTexCoordPointer": _emscripten_glTexCoordPointer, "_emscripten_glEnable": _emscripten_glEnable, "_strtoull_l": _strtoull_l, "_emscripten_glClearDepth": _emscripten_glClearDepth, "_read": _read, "__addDays": __addDays, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_emscripten_glMatrixMode": _emscripten_glMatrixMode, "_strerror_r": _strerror_r, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_catopen": _catopen, "_exit": _exit, "_emscripten_glEnableClientState": _emscripten_glEnableClientState, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_glfwGetMouseWheel": _glfwGetMouseWheel, "_emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements, "_glCullFace": _glCullFace, "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_fmod": _fmod, "_vasprintf": _vasprintf, "_lseek": _lseek, "_emscripten_glFinish": _emscripten_glFinish, "___ctype_b_loc": ___ctype_b_loc, "_emscripten_glClear": _emscripten_glClear, "___cxa_allocate_exception": ___cxa_allocate_exception, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_strtoll": _strtoll, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "___errno_location": ___errno_location, "_pwrite": _pwrite, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_open": _open, "_glClearColor": _glClearColor, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_glBindTexture": _glBindTexture, "_snprintf": _snprintf, "__scanString": __scanString, "_emscripten_glDisable": _emscripten_glDisable, "___cxa_end_catch": ___cxa_end_catch, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_emscripten_glLoadMatrixf": _emscripten_glLoadMatrixf, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_strtoull": _strtoull, "_strftime": _strftime, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_fseek": _fseek, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_glfwGetMouseButton": _glfwGetMouseButton, "_send": _send, "_emscripten_glDepthRange": _emscripten_glDepthRange, "_llvm_bswap_i16": _llvm_bswap_i16, "_isxdigit": _isxdigit, "_fclose": _fclose, "_vsnprintf": _vsnprintf, "__parseInt": __parseInt, "_floorf": _floorf, "_sqrtf": _sqrtf, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_recv": _recv, "_copysign": _copysign, "_emscripten_glGetObjectParameterivARB": _emscripten_glGetObjectParameterivARB, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_glfwSwapInterval": _glfwSwapInterval, "_sysconf": _sysconf, "__getFloat": __getFloat, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_abort": _abort, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_glfwGetWindowParam": _glfwGetWindowParam, "_glReadBuffer": _glReadBuffer, "_glTexImage2D": _glTexImage2D, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_fopen": _fopen, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "___cxa_pure_virtual": ___cxa_pure_virtual, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glGetPointerv": _emscripten_glGetPointerv, "_pthread_cond_wait": _pthread_cond_wait, "___cxa_is_number_type": ___cxa_is_number_type, "_cosf": _cosf, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "_glfwSetWindowSize": _glfwSetWindowSize, "_glfwGetTime": _glfwGetTime, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_glDrawArrays": _glDrawArrays, "__arraySum": __arraySum, "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced, "_glfwGetWindowSize": _glfwGetWindowSize, "_emscripten_glVertexPointer": _emscripten_glVertexPointer, "_ungetc": _ungetc, "_fwrite": _fwrite, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_glfwGetKey": _glfwGetKey, "_glfwWaitEvents": _glfwWaitEvents, "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_fprintf": _fprintf, "_sscanf": _sscanf, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_catgets": _catgets, "_emscripten_glGetInfoLogARB": _emscripten_glGetInfoLogARB, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_glClear": _glClear, "_fileno": _fileno, "_emscripten_glFrustum": _emscripten_glFrustum, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "__exit": __exit, "_glfwSetWindowCloseCallback": _glfwSetWindowCloseCallback, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "___ctype_tolower_loc": ___ctype_tolower_loc, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glHint": _emscripten_glHint, "_mkport": _mkport, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_glfwExtensionSupported": _glfwExtensionSupported, "_fflush": _fflush, "_glfwSwapBuffers": _glfwSwapBuffers, "_emscripten_glColorPointer": _emscripten_glColorPointer, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_glIsShader": _emscripten_glIsShader, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_glDepthMask": _glDepthMask, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_fgetc": _fgetc, "___cxa_throw": ___cxa_throw, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glBufferData": _emscripten_glBufferData, "_glDisable": _glDisable, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_isdigit": _isdigit, "_strerror": _strerror, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_atexit": _atexit, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_glfwSetWindowTitle": _glfwSetWindowTitle, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strstr = Module["_strstr"] = asm["_strstr"];
var _tolower = Module["_tolower"] = asm["_tolower"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = asm["_emscripten_GetProcAddress"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var __GLOBAL__I_a42 = Module["__GLOBAL__I_a42"] = asm["__GLOBAL__I_a42"];
var __GLOBAL__I_a338 = Module["__GLOBAL__I_a338"] = asm["__GLOBAL__I_a338"];
var __GLOBAL__I_a378 = Module["__GLOBAL__I_a378"] = asm["__GLOBAL__I_a378"];
var __GLOBAL__I_a557 = Module["__GLOBAL__I_a557"] = asm["__GLOBAL__I_a557"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vd = Module["dynCall_vd"] = asm["dynCall_vd"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viidddiii = Module["dynCall_viidddiii"] = asm["dynCall_viidddiii"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vdddd = Module["dynCall_vdddd"] = asm["dynCall_vdddd"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_iiiddidi = Module["dynCall_iiiddidi"] = asm["dynCall_iiiddidi"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vdddddd = Module["dynCall_vdddddd"] = asm["dynCall_vdddddd"];
var dynCall_iiiiiidi = Module["dynCall_iiiiiidi"] = asm["dynCall_iiiiiidi"];
var dynCall_vdd = Module["dynCall_vdd"] = asm["dynCall_vdd"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vdi = Module["dynCall_vdi"] = asm["dynCall_vdi"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






